name: deploy-wheels

on:
  release:
  pull_request:

jobs:
#  macos:
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v4
#        with:
#          python-version: 3.9
#          architecture: x64
#      - name: Build wheels
#        run: |
#          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#          brew install build-essential libffi-dev xz-utils powershell curl wget gnupg apt-transport-https
#          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
#          export PATH="/root/.cargo/bin:${PATH}"
#          export PATH="/root/.local/bin:$PATH"
#          cd src
#          ./build.ps1
#      - name: Upload wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels
#          path: src/target/wheels

#  windows:
#    runs-on: windows-latest
#    strategy:
#      matrix:
#        target: [x64] # x86
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v4
#        with:
#          python-version: 3.9
#          architecture: ${{ matrix.target }}
#      - uses: dtolnay/rust-toolchain@nightly
#      - name: Install winget
#        run: |
#          irm asheroto.com/winget | iex
#          winget-install
#      - name: Build wheels
#        run: |
#          winget install build-essential libffi-dev xz-utils powershell curl wget gnupg apt-transport-https 7-zip --disable-interactivity
#          cd src
#          ./build.ps1
#      - name: Upload wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels
#          path: src/target/wheels

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: x64
      - name: Build prerequisites
        run: |
          sudo apt update
          sudo apt install -y build-essential libffi-dev xz-utils powershell curl wget gnupg apt-transport-https
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          export PATH="/root/.cargo/bin:${PATH}"
          export PATH="/root/.local/bin:$PATH"
          cd src
          pwsh ./build.ps1 "build-llvm"
      - uses: PyO3/maturin-action@v1
        with:
          command: build
          working-directory: src/rasqal
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out wheels
          docker-options: -e LLVM_SYS_140_PREFIX="/opt/rh/llvm-toolset-7.0/root/usr/"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: src/target/wheels

#  linux-cross:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        target: [aarch64, armv7, s390x, ppc64le, ppc64]
#    steps:
#    - uses: actions/checkout@v4
#    - uses: actions/setup-python@v4
#      with:
#        python-version: 3.9
#    - name: Build wheels
#      run: |
#        sudo apt update
#        sudo apt install -y build-essential libffi-dev xz-utils powershell curl wget gnupg apt-transport-https
#        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
#        export PATH="/root/.cargo/bin:${PATH}"
#        export PATH="/root/.local/bin:$PATH"
#        cd src
#        pwsh ./build.ps1 -manyLinux
#    - name: Upload wheels
#      uses: actions/upload-artifact@v4
#      with:
#        name: wheels
#        path: src/target/wheels

  publish:
    runs-on: ubuntu-latest
    needs: [ linux ] # linux-cross, windows,
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist/

      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/