
%Tuple = type opaque
%Array = type opaque
%Callable = type opaque
%Range = type { i64, i64, i64 }
%Qubit = type opaque
%Result = type opaque
%String = type opaque

@PartialApplication__1__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__1__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__1__RefCount, void (%Tuple*, i32)* @MemoryManagement__1__AliasCount]
@PartialApplication__2__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Characterization__RobustPhaseEstimation__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Characterization__RobustPhaseEstimation__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__2__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__2__RefCount, void (%Tuple*, i32)* @MemoryManagement__2__AliasCount]
@PartialApplication__3__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__4__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@0 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@1 = internal constant [3 x i8] c", \00"
@2 = internal constant [18 x i8] c" must be distinct\00"
@3 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@PartialApplication__5__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____ctladj__wrapper]
@MemoryManagement__3__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__3__RefCount, void (%Tuple*, i32)* @MemoryManagement__3__AliasCount]
@PartialApplication__6__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj__wrapper]
@MemoryManagement__4__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__4__RefCount, void (%Tuple*, i32)* @MemoryManagement__4__AliasCount]
@4 = internal constant [86 x i8] c"ComputeJordanWignerString failed. `idxFermions` must contain an even number of terms.\00"
@5 = internal constant [46 x i8] c"ComputeJordanWignerString failed. fermionIdx \00"
@6 = internal constant [15 x i8] c" out of range.\00"
@7 = internal constant [47 x i8] c"Completely invalid cluster operator specified.\00"
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorFunction____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorFunction____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__7__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef0__JordanWignerStateAsGeneratorIndex____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0__JordanWignerStateAsGeneratorIndex____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__5__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__5__RefCount, void (%Tuple*, i32)* @MemoryManagement__5__AliasCount]
@Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__8__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__X__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PrepareSingleConfigurationalStateSingleSiteOccupation____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PrepareSingleConfigurationalStateSingleSiteOccupation____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__ctladj__wrapper]
@PartialApplication__9__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__6__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__6__RefCount, void (%Tuple*, i32)* @MemoryManagement__6__AliasCount]
@PartialApplication__10__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__ctladj__wrapper]
@MemoryManagement__7__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__7__RefCount, void (%Tuple*, i32)* @MemoryManagement__7__AliasCount]
@PartialApplication__11__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____ctladj__wrapper]
@MemoryManagement__8__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__8__RefCount, void (%Tuple*, i32)* @MemoryManagement__8__AliasCount]
@PartialApplication__12__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__ctladj__wrapper]
@PartialApplication__13__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Chemistry__HTermsToGenIdx__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__HTermsToGenIdx__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__9__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__9__RefCount, void (%Tuple*, i32)* @MemoryManagement__9__AliasCount]
@8 = internal constant [59 x i8] c"PNorm failed. `p` must be a positive real number, but was \00"
@9 = internal constant [2 x i8] c".\00"
@10 = internal constant [46 x i8] c"`Length(bits)` must be less than 64, but was \00"
@11 = internal constant [33 x i8] c"`bits` must be between 0 and 63 \00"
@12 = internal constant [34 x i8] c"`number` must be between 0 and 2^\00"
@13 = internal constant [15 x i8] c" - 1, but was \00"
@14 = internal constant [38 x i8] c"Unexpected number of auxiliary qubits\00"
@Microsoft__Quantum__Canon__ApplyAnd__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApplyAnd__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApplyAnd__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApplyAnd__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApplyAnd__ctladj__wrapper]
@15 = internal constant [43 x i8] c"Probability of the measurement must be 0.5\00"
@Microsoft__Quantum__Canon___b950c6e85b1944ae91a2dee4f20f4c18_Fst__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___b950c6e85b1944ae91a2dee4f20f4c18_Fst__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon__ApplyP__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApplyP__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApplyP__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApplyP__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApplyP__ctladj__wrapper]
@16 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@PartialApplication__14__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__ctladj__wrapper]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper]
@MemoryManagement__10__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__10__RefCount, void (%Tuple*, i32)* @MemoryManagement__10__AliasCount]
@PartialApplication__15__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__ctladj__wrapper]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper]
@MemoryManagement__11__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__11__RefCount, void (%Tuple*, i32)* @MemoryManagement__11__AliasCount]
@Microsoft__Quantum__Intrinsic__H__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper]
@PartialApplication__16__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__S__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper]
@17 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@18 = internal constant [7 x i8] c"PauliX\00"
@19 = internal constant [7 x i8] c"PauliY\00"
@20 = internal constant [7 x i8] c"PauliZ\00"
@21 = internal constant [7 x i8] c"PauliI\00"
@PartialApplication__17__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__ctladj__wrapper]
@PartialApplication__18__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__ctladj__wrapper]
@PartialApplication__19__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__ctladj__wrapper]
@PartialApplication__20__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__ctladj__wrapper]
@PartialApplication__21__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__ctladj__wrapper]
@PartialApplication__22__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__ctladj__wrapper]
@PartialApplication__23__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__ctladj__wrapper]
@PartialApplication__24__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__ctladj__wrapper]
@PartialApplication__25__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__ctladj__wrapper]
@PartialApplication__26__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__ctladj__wrapper]
@Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__ctladj__wrapper]
@MemoryManagement__12__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__12__RefCount, void (%Tuple*, i32)* @MemoryManagement__12__AliasCount]
@PartialApplication__27__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__ctladj__wrapper]
@Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__ctladj__wrapper]
@MemoryManagement__13__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__13__RefCount, void (%Tuple*, i32)* @MemoryManagement__13__AliasCount]
@PartialApplication__28__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__ctladj__wrapper]
@Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctladj__wrapper]
@MemoryManagement__14__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__14__RefCount, void (%Tuple*, i32)* @MemoryManagement__14__AliasCount]
@PartialApplication__29__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__ctladj__wrapper]
@Microsoft__Quantum__Canon__RAll1__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__RAll1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__RAll1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__RAll1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__RAll1__ctladj__wrapper]
@MemoryManagement__15__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__15__RefCount, void (%Tuple*, i32)* @MemoryManagement__15__AliasCount]
@PartialApplication__30__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__ctladj__wrapper]
@PartialApplication__31__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__ctladj__wrapper]
@PartialApplication__32__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__ctladj__wrapper]
@PartialApplication__33__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__ctladj__wrapper]
@PartialApplication__34__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__ctladj__wrapper]
@PartialApplication__35__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__ctladj__wrapper]
@PartialApplication__36__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__R1__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__R1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__R1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__R1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__R1__ctladj__wrapper]
@MemoryManagement__16__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__16__RefCount, void (%Tuple*, i32)* @MemoryManagement__16__AliasCount]
@PartialApplication__37__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__ctladj__wrapper]
@PartialApplication__38__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__ctladj__wrapper]
@PartialApplication__39__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__ctladj__wrapper]
@22 = internal constant [75 x i8] c"MultiplexOperations failed. Number of index qubits must be greater than 0.\00"
@PartialApplication__40__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__ctladj__wrapper]
@Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__ctladj__wrapper]
@MemoryManagement__17__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__17__RefCount, void (%Tuple*, i32)* @MemoryManagement__17__AliasCount]
@PartialApplication__41__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__ctladj__wrapper]
@Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__ctladj__wrapper]
@MemoryManagement__18__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__18__RefCount, void (%Tuple*, i32)* @MemoryManagement__18__AliasCount]
@PartialApplication__42__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___6d6f9db43d6b47c4a0fad10624f517d9___QsRef3__WithFirstInputAppliedCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6d6f9db43d6b47c4a0fad10624f517d9___QsRef3__WithFirstInputAppliedCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__19__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__19__RefCount, void (%Tuple*, i32)* @MemoryManagement__19__AliasCount]
@PartialApplication__43__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__43__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__43__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__43__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__43__ctladj__wrapper]
@Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__ctladj__wrapper]
@MemoryManagement__20__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__20__RefCount, void (%Tuple*, i32)* @MemoryManagement__20__AliasCount]
@PartialApplication__44__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__44__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__44__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__44__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__44__ctladj__wrapper]
@Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__ctladj__wrapper]
@MemoryManagement__21__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__21__RefCount, void (%Tuple*, i32)* @MemoryManagement__21__AliasCount]
@PartialApplication__45__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__45__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__45__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__45__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__45__ctladj__wrapper]
@MemoryManagement__22__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__22__RefCount, void (%Tuple*, i32)* @MemoryManagement__22__AliasCount]
@PartialApplication__46__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__46__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__46__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__46__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__46__ctladj__wrapper]
@Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____ctladj__wrapper]
@MemoryManagement__23__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__23__RefCount, void (%Tuple*, i32)* @MemoryManagement__23__AliasCount]
@23 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@PartialApplication__47__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__47__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__47__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__47__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__47__ctladj__wrapper]
@Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctladj__wrapper]
@MemoryManagement__24__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__24__RefCount, void (%Tuple*, i32)* @MemoryManagement__24__AliasCount]
@PartialApplication__48__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__48__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__48__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__48__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__48__ctladj__wrapper]
@Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctladj__wrapper]
@PartialApplication__49__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__49__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__49__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__49__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__49__ctladj__wrapper]
@Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj__wrapper]
@MemoryManagement__25__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__25__RefCount, void (%Tuple*, i32)* @MemoryManagement__25__AliasCount]
@24 = internal constant [11 x i8] c"Odd order \00"
@25 = internal constant [20 x i8] c" not yet supported.\00"
@PartialApplication__50__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__50__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___92b2fc57a79541c8b9df7a25eea41fad___QsRef3__ComposedOutput____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___92b2fc57a79541c8b9df7a25eea41fad___QsRef3__ComposedOutput____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__26__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__26__RefCount, void (%Tuple*, i32)* @MemoryManagement__26__AliasCount]
@26 = internal constant [36 x i8] c"Qubit in invalid state. Expecting: \00"
@27 = internal constant [2 x i8] c"\22\00"
@28 = internal constant [13 x i8] c"\0A\09Expected:\09\00"
@29 = internal constant [5 x i8] c"true\00"
@30 = internal constant [6 x i8] c"false\00"
@31 = internal constant [11 x i8] c"\0A\09Actual:\09\00"
@32 = internal constant [32 x i8] c"`to` must be larger than `from`\00"
@33 = internal constant [39 x i8] c"Array must be of the length at least 1\00"
@34 = internal constant [22 x i8] c"Index is out of bound\00"
@PartialApplication__51__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__51__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___7d83b54afca94675b63617b69b56aa7a_ElementAt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___7d83b54afca94675b63617b69b56aa7a_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__27__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__27__RefCount, void (%Tuple*, i32)* @MemoryManagement__27__AliasCount]
@PartialApplication__52__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__52__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___b20df4913ab0459888bcf1448be084b3_ElementAt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___b20df4913ab0459888bcf1448be084b3_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__28__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__28__RefCount, void (%Tuple*, i32)* @MemoryManagement__28__AliasCount]
@35 = internal constant [71 x i8] c"Specified output array length must be longer than `inputArray` length.\00"
@PartialApplication__53__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__53__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Simulation____QsRef3__IdxToCoeff____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__IdxToCoeff____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Simulation__PauliCoefficientFromGenIdx__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__PauliCoefficientFromGenIdx__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__29__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__29__RefCount, void (%Tuple*, i32)* @MemoryManagement__29__AliasCount]
@PartialApplication__54__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__54__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Simulation____QsRef3__IdxToUnitary____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__IdxToUnitary____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Simulation____QsRef3__PauliLCUUnitary____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__PauliLCUUnitary____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__30__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__30__RefCount, void (%Tuple*, i32)* @MemoryManagement__30__AliasCount]
@PartialApplication__55__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__55__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__55__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__55__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__55__ctladj__wrapper]
@Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____ctladj__wrapper]
@MemoryManagement__31__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__31__RefCount, void (%Tuple*, i32)* @MemoryManagement__31__AliasCount]
@PartialApplication__56__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__56__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__56__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__56__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__56__ctladj__wrapper]
@Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____ctladj__wrapper]
@MemoryManagement__32__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__32__RefCount, void (%Tuple*, i32)* @MemoryManagement__32__AliasCount]
@PartialApplication__57__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__57__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Simulation____QsRef3___AddGeneratorSystems____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3___AddGeneratorSystems____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__33__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__33__RefCount, void (%Tuple*, i32)* @MemoryManagement__33__AliasCount]
@Microsoft__Quantum__Simulation__IdentityGeneratorIndex__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Preparation__PrepareArbitraryStateD__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj__wrapper]
@Microsoft__Quantum__Canon__MultiplexerFromGenerator__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__MultiplexerFromGenerator__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__58__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__58__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__58__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__58__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__58__ctladj__wrapper]
@Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____ctladj__wrapper]
@MemoryManagement__34__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__34__RefCount, void (%Tuple*, i32)* @MemoryManagement__34__AliasCount]
@Microsoft__Quantum__Simulation__AddGeneratorSystems__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__AddGeneratorSystems__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__59__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__59__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__59__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__59__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__59__ctladj__wrapper]
@Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____ctladj__wrapper]
@MemoryManagement__35__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__35__RefCount, void (%Tuple*, i32)* @MemoryManagement__35__AliasCount]
@PartialApplication__60__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__60__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__60__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__60__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__60__ctladj__wrapper]
@Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____ctladj__wrapper]
@MemoryManagement__36__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__36__RefCount, void (%Tuple*, i32)* @MemoryManagement__36__AliasCount]
@PartialApplication__61__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__61__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__61__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__61__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__61__ctladj__wrapper]
@PartialApplication__62__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__62__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__62__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__62__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__62__ctladj__wrapper]
@MemoryManagement__37__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__37__RefCount, void (%Tuple*, i32)* @MemoryManagement__37__AliasCount]
@PartialApplication__63__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__63__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__63__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__63__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__63__ctladj__wrapper]
@PartialApplication__64__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__64__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__64__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__64__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__64__ctladj__wrapper]
@PartialApplication__65__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__65__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__65__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__65__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__65__ctladj__wrapper]
@PartialApplication__66__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__66__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__66__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__66__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__66__ctladj__wrapper]
@Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____ctladj__wrapper]
@MemoryManagement__38__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__38__RefCount, void (%Tuple*, i32)* @MemoryManagement__38__AliasCount]
@PartialApplication__67__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__67__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__67__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__67__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__67__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____ctladj__wrapper]
@MemoryManagement__39__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__39__RefCount, void (%Tuple*, i32)* @MemoryManagement__39__AliasCount]
@PartialApplication__68__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__68__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__68__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__68__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__68__ctladj__wrapper]
@PartialApplication__69__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__69__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__69__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__69__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__69__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____ctladj__wrapper]
@MemoryManagement__40__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__40__RefCount, void (%Tuple*, i32)* @MemoryManagement__40__AliasCount]
@PartialApplication__70__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__70__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__70__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__70__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__70__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____ctladj__wrapper]
@MemoryManagement__41__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__41__RefCount, void (%Tuple*, i32)* @MemoryManagement__41__AliasCount]
@PartialApplication__71__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__71__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Math__ComplexPolar__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__ComplexPolar__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__42__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__42__RefCount, void (%Tuple*, i32)* @MemoryManagement__42__AliasCount]
@Microsoft__Quantum__Math__AbsD__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__AbsD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__72__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__72__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__73__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__73__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__74__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__74__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__75__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__75__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__75__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__75__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__75__ctladj__wrapper]
@Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____ctladj__wrapper]
@MemoryManagement__43__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__43__RefCount, void (%Tuple*, i32)* @MemoryManagement__43__AliasCount]

define { double, double }* @Microsoft__Quantum__Chemistry__Samples__Hydrogen__GetEnergyByQubitization__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i64 %nBitsPrecision) {
entry:
  %0 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 1
  %fermionTermData = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %0, align 8
  %1 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %fermionTermData, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %5)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = load { %Array*, %Array* }*, { %Array*, %Array* }** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %fermionTermData, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %31 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %fermionTermData, i32 0, i32 2
  %32 = load %Array*, %Array** %31, align 8
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = sub i64 %33, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %35)
  %38 = bitcast i8* %37 to { %Array*, %Array* }**
  %39 = load { %Array*, %Array* }*, { %Array*, %Array* }** %38, align 8
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 1
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 1)
  %44 = bitcast { %Array*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %46 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %fermionTermData, i32 0, i32 3
  %47 = load %Array*, %Array** %46, align 8
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, %Array* }**
  %54 = load { %Array*, %Array* }*, { %Array*, %Array* }** %53, align 8
  %55 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 0
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  %57 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 1
  %58 = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  %59 = bitcast { %Array*, %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %59, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %60 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  %61 = bitcast { %Array*, %Array*, %Array*, %Array* }* %fermionTermData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %62 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 2
  %statePrepData = load { i64, %Array* }*, { i64, %Array* }** %62, align 8
  %63 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %statePrepData, i32 0, i32 1
  %64 = load %Array*, %Array** %63, align 8
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %66 = sub i64 %65, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %67 = phi i64 [ 0, %exit__4 ], [ %78, %exiting__5 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %67)
  %70 = bitcast i8* %69 to { { double, double }*, %Array* }**
  %71 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %70, align 8
  %72 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 0
  %73 = load { double, double }*, { double, double }** %72, align 8
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %74, i32 1)
  %75 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { { double, double }*, %Array* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %78 = add i64 %67, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %79 = bitcast { i64, %Array* }* %statePrepData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %80 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %81 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 0
  %nSpinOrbitals = load i64, i64* %81, align 4
  %82 = sub i64 %3, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %83 = phi i64 [ 0, %exit__5 ], [ %93, %exiting__6 ]
  %84 = icmp sle i64 %83, %82
  br i1 %84, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %83)
  %86 = bitcast i8* %85 to { %Array*, %Array* }**
  %87 = load { %Array*, %Array* }*, { %Array*, %Array* }** %86, align 8
  %88 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 0
  %89 = load %Array*, %Array** %88, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %89, i32 1)
  %90 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 1
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 1)
  %92 = bitcast { %Array*, %Array* }* %87 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %92, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %93 = add i64 %83, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %94 = sub i64 %18, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %95 = phi i64 [ 0, %exit__6 ], [ %105, %exiting__7 ]
  %96 = icmp sle i64 %95, %94
  br i1 %96, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %95)
  %98 = bitcast i8* %97 to { %Array*, %Array* }**
  %99 = load { %Array*, %Array* }*, { %Array*, %Array* }** %98, align 8
  %100 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 0
  %101 = load %Array*, %Array** %100, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %101, i32 1)
  %102 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { %Array*, %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %105 = add i64 %95, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %106 = sub i64 %33, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %107 = phi i64 [ 0, %exit__7 ], [ %117, %exiting__8 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, %Array* }**
  %111 = load { %Array*, %Array* }*, { %Array*, %Array* }** %110, align 8
  %112 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 0
  %113 = load %Array*, %Array** %112, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %113, i32 1)
  %114 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 1
  %115 = load %Array*, %Array** %114, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %115, i32 1)
  %116 = bitcast { %Array*, %Array* }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %117 = add i64 %107, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %118 = sub i64 %48, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %119 = phi i64 [ 0, %exit__8 ], [ %129, %exiting__9 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %119)
  %122 = bitcast i8* %121 to { %Array*, %Array* }**
  %123 = load { %Array*, %Array* }*, { %Array*, %Array* }** %122, align 8
  %124 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 0
  %125 = load %Array*, %Array** %124, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %125, i32 1)
  %126 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 1
  %127 = load %Array*, %Array** %126, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %127, i32 1)
  %128 = bitcast { %Array*, %Array* }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %129 = add i64 %119, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %130 = sub i64 %65, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %131 = phi i64 [ 0, %exit__9 ], [ %142, %exiting__10 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %131)
  %134 = bitcast i8* %133 to { { double, double }*, %Array* }**
  %135 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %134, align 8
  %136 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 0
  %137 = load { double, double }*, { double, double }** %136, align 8
  %138 = bitcast { double, double }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %138, i32 1)
  %139 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 1
  %140 = load %Array*, %Array** %139, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %140, i32 1)
  %141 = bitcast { { double, double }*, %Array* }* %135 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %141, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %142 = add i64 %131, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %143 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 3
  %energyOffset = load double, double* %143, align 8
  %144 = call { i64, { double, %Callable* }* }* @Microsoft__Quantum__Chemistry__JordanWigner__QubitizationOracle__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData)
  %145 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %144, i32 0, i32 0
  %nQubits = load i64, i64* %145, align 4
  %146 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %144, i32 0, i32 1
  %147 = load { double, %Callable* }*, { double, %Callable* }** %146, align 8
  %148 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %147, i32 0, i32 0
  %oneNorm = load double, double* %148, align 8
  %149 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %147, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %149, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %150 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %151 = sub i64 %65, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %152 = phi i64 [ 0, %exit__10 ], [ %163, %exiting__11 ]
  %153 = icmp sle i64 %152, %151
  br i1 %153, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %152)
  %155 = bitcast i8* %154 to { { double, double }*, %Array* }**
  %156 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %155, align 8
  %157 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %156, i32 0, i32 0
  %158 = load { double, double }*, { double, double }** %157, align 8
  %159 = bitcast { double, double }* %158 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %159, i32 1)
  %160 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %156, i32 0, i32 1
  %161 = load %Array*, %Array** %160, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %161, i32 1)
  %162 = bitcast { { double, double }*, %Array* }* %156 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %162, i32 1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %163 = add i64 %152, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %79, i32 1)
  %164 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { i64, %Array* }* }* getelementptr ({ %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* null, i32 1) to i64))
  %165 = bitcast %Tuple* %164 to { %Callable*, { i64, %Array* }* }*
  %166 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %165, i32 0, i32 0
  %167 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %165, i32 0, i32 1
  store %Callable* %150, %Callable** %166, align 8
  store { i64, %Array* }* %statePrepData, { i64, %Array* }** %167, align 8
  %statePrep = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__1__FunctionTable, %Tuple* %164)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrep, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrep, i32 1)
  %168 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Characterization__RobustPhaseEstimation__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %169 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64 }* getelementptr ({ %Callable*, i64 }, { %Callable*, i64 }* null, i32 1) to i64))
  %170 = bitcast %Tuple* %169 to { %Callable*, i64 }*
  %171 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %170, i32 0, i32 0
  %172 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %170, i32 0, i32 1
  store %Callable* %168, %Callable** %171, align 8
  store i64 %nBitsPrecision, i64* %172, align 4
  %phaseEstAlgorithm = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__2__FunctionTable, %Tuple* %169)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  %estPhase = call double @Microsoft__Quantum__Simulation__EstimateEnergy__body(i64 %nQubits, %Callable* %statePrep, %Callable* %oracle, %Callable* %phaseEstAlgorithm)
  %173 = call double @__quantum__qis__sin__body(double %estPhase)
  %174 = fmul double %173, %oneNorm
  %estEnergy = fadd double %174, %energyOffset
  %175 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %176 = bitcast %Tuple* %175 to { double, double }*
  %177 = getelementptr inbounds { double, double }, { double, double }* %176, i32 0, i32 0
  %178 = getelementptr inbounds { double, double }, { double, double }* %176, i32 0, i32 1
  store double %estPhase, double* %177, align 8
  store double %estEnergy, double* %178, align 8
  %179 = sub i64 %3, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %180 = phi i64 [ 0, %exit__11 ], [ %190, %exiting__12 ]
  %181 = icmp sle i64 %180, %179
  br i1 %181, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %182 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %180)
  %183 = bitcast i8* %182 to { %Array*, %Array* }**
  %184 = load { %Array*, %Array* }*, { %Array*, %Array* }** %183, align 8
  %185 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %184, i32 0, i32 0
  %186 = load %Array*, %Array** %185, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %186, i32 -1)
  %187 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %184, i32 0, i32 1
  %188 = load %Array*, %Array** %187, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %188, i32 -1)
  %189 = bitcast { %Array*, %Array* }* %184 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %189, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %190 = add i64 %180, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %191 = sub i64 %18, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %192 = phi i64 [ 0, %exit__12 ], [ %202, %exiting__13 ]
  %193 = icmp sle i64 %192, %191
  br i1 %193, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %192)
  %195 = bitcast i8* %194 to { %Array*, %Array* }**
  %196 = load { %Array*, %Array* }*, { %Array*, %Array* }** %195, align 8
  %197 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %196, i32 0, i32 0
  %198 = load %Array*, %Array** %197, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %198, i32 -1)
  %199 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %196, i32 0, i32 1
  %200 = load %Array*, %Array** %199, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %200, i32 -1)
  %201 = bitcast { %Array*, %Array* }* %196 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %201, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %202 = add i64 %192, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %203 = sub i64 %33, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %204 = phi i64 [ 0, %exit__13 ], [ %214, %exiting__14 ]
  %205 = icmp sle i64 %204, %203
  br i1 %205, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %206 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %204)
  %207 = bitcast i8* %206 to { %Array*, %Array* }**
  %208 = load { %Array*, %Array* }*, { %Array*, %Array* }** %207, align 8
  %209 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %208, i32 0, i32 0
  %210 = load %Array*, %Array** %209, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %210, i32 -1)
  %211 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %208, i32 0, i32 1
  %212 = load %Array*, %Array** %211, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %212, i32 -1)
  %213 = bitcast { %Array*, %Array* }* %208 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %213, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %214 = add i64 %204, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %215 = sub i64 %48, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %216 = phi i64 [ 0, %exit__14 ], [ %226, %exiting__15 ]
  %217 = icmp sle i64 %216, %215
  br i1 %217, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %218 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %216)
  %219 = bitcast i8* %218 to { %Array*, %Array* }**
  %220 = load { %Array*, %Array* }*, { %Array*, %Array* }** %219, align 8
  %221 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %220, i32 0, i32 0
  %222 = load %Array*, %Array** %221, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %222, i32 -1)
  %223 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %220, i32 0, i32 1
  %224 = load %Array*, %Array** %223, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %224, i32 -1)
  %225 = bitcast { %Array*, %Array* }* %220 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %225, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %226 = add i64 %216, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %227 = sub i64 %65, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %228 = phi i64 [ 0, %exit__15 ], [ %239, %exiting__16 ]
  %229 = icmp sle i64 %228, %227
  br i1 %229, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %230 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %228)
  %231 = bitcast i8* %230 to { { double, double }*, %Array* }**
  %232 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %231, align 8
  %233 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %232, i32 0, i32 0
  %234 = load { double, double }*, { double, double }** %233, align 8
  %235 = bitcast { double, double }* %234 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %235, i32 -1)
  %236 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %232, i32 0, i32 1
  %237 = load %Array*, %Array** %236, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %237, i32 -1)
  %238 = bitcast { { double, double }*, %Array* }* %232 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %238, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %239 = add i64 %228, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  %240 = sub i64 %3, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %241 = phi i64 [ 0, %exit__16 ], [ %251, %exiting__17 ]
  %242 = icmp sle i64 %241, %240
  br i1 %242, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %243 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %241)
  %244 = bitcast i8* %243 to { %Array*, %Array* }**
  %245 = load { %Array*, %Array* }*, { %Array*, %Array* }** %244, align 8
  %246 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %245, i32 0, i32 0
  %247 = load %Array*, %Array** %246, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %247, i32 -1)
  %248 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %245, i32 0, i32 1
  %249 = load %Array*, %Array** %248, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %249, i32 -1)
  %250 = bitcast { %Array*, %Array* }* %245 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %250, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %251 = add i64 %241, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %252 = sub i64 %18, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %253 = phi i64 [ 0, %exit__17 ], [ %263, %exiting__18 ]
  %254 = icmp sle i64 %253, %252
  br i1 %254, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %255 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %253)
  %256 = bitcast i8* %255 to { %Array*, %Array* }**
  %257 = load { %Array*, %Array* }*, { %Array*, %Array* }** %256, align 8
  %258 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %257, i32 0, i32 0
  %259 = load %Array*, %Array** %258, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %259, i32 -1)
  %260 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %257, i32 0, i32 1
  %261 = load %Array*, %Array** %260, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %261, i32 -1)
  %262 = bitcast { %Array*, %Array* }* %257 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %262, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %263 = add i64 %253, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %264 = sub i64 %33, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %265 = phi i64 [ 0, %exit__18 ], [ %275, %exiting__19 ]
  %266 = icmp sle i64 %265, %264
  br i1 %266, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %267 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %265)
  %268 = bitcast i8* %267 to { %Array*, %Array* }**
  %269 = load { %Array*, %Array* }*, { %Array*, %Array* }** %268, align 8
  %270 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %269, i32 0, i32 0
  %271 = load %Array*, %Array** %270, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %271, i32 -1)
  %272 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %269, i32 0, i32 1
  %273 = load %Array*, %Array** %272, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %273, i32 -1)
  %274 = bitcast { %Array*, %Array* }* %269 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %274, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %275 = add i64 %265, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %276 = sub i64 %48, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %277 = phi i64 [ 0, %exit__19 ], [ %287, %exiting__20 ]
  %278 = icmp sle i64 %277, %276
  br i1 %278, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %279 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %277)
  %280 = bitcast i8* %279 to { %Array*, %Array* }**
  %281 = load { %Array*, %Array* }*, { %Array*, %Array* }** %280, align 8
  %282 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %281, i32 0, i32 0
  %283 = load %Array*, %Array** %282, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %283, i32 -1)
  %284 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %281, i32 0, i32 1
  %285 = load %Array*, %Array** %284, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %285, i32 -1)
  %286 = bitcast { %Array*, %Array* }* %281 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %286, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %287 = add i64 %277, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %288 = sub i64 %65, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %289 = phi i64 [ 0, %exit__20 ], [ %300, %exiting__21 ]
  %290 = icmp sle i64 %289, %288
  br i1 %290, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %291 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %289)
  %292 = bitcast i8* %291 to { { double, double }*, %Array* }**
  %293 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %292, align 8
  %294 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %293, i32 0, i32 0
  %295 = load { double, double }*, { double, double }** %294, align 8
  %296 = bitcast { double, double }* %295 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %296, i32 -1)
  %297 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %293, i32 0, i32 1
  %298 = load %Array*, %Array** %297, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %298, i32 -1)
  %299 = bitcast { { double, double }*, %Array* }* %293 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %299, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %300 = add i64 %289, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 -1)
  %301 = bitcast { double, %Callable* }* %147 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %301, i32 -1)
  %302 = bitcast { i64, { double, %Callable* }* }* %144 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %302, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %phaseEstAlgorithm, i32 -1)
  ret { double, double }* %176
}

declare i64 @__quantum__rt__array_get_size_1d(%Array*)

declare i8* @__quantum__rt__array_get_element_ptr_1d(%Array*, i64)

declare void @__quantum__rt__array_update_alias_count(%Array*, i32)

declare void @__quantum__rt__tuple_update_alias_count(%Tuple*, i32)

define internal { i64, { double, %Callable* }* }* @Microsoft__Quantum__Chemistry__JordanWigner__QubitizationOracle__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData) {
entry:
  %0 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 1
  %1 = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %1, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = sub i64 %4, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %6 = phi i64 [ 0, %entry ], [ %16, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %6)
  %9 = bitcast i8* %8 to { %Array*, %Array* }**
  %10 = load { %Array*, %Array* }*, { %Array*, %Array* }** %9, align 8
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 0
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 1
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array*, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %16 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %17 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %1, i32 0, i32 1
  %18 = load %Array*, %Array** %17, align 8
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %18)
  %20 = sub i64 %19, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %21)
  %24 = bitcast i8* %23 to { %Array*, %Array* }**
  %25 = load { %Array*, %Array* }*, { %Array*, %Array* }** %24, align 8
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 0
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 1
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 1)
  %30 = bitcast { %Array*, %Array* }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %32 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %1, i32 0, i32 2
  %33 = load %Array*, %Array** %32, align 8
  %34 = call i64 @__quantum__rt__array_get_size_1d(%Array* %33)
  %35 = sub i64 %34, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %46, %exiting__3 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %36)
  %39 = bitcast i8* %38 to { %Array*, %Array* }**
  %40 = load { %Array*, %Array* }*, { %Array*, %Array* }** %39, align 8
  %41 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %40, i32 0, i32 0
  %42 = load %Array*, %Array** %41, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 1)
  %43 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %40, i32 0, i32 1
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 1)
  %45 = bitcast { %Array*, %Array* }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %46 = add i64 %36, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  %47 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %1, i32 0, i32 3
  %48 = load %Array*, %Array** %47, align 8
  %49 = call i64 @__quantum__rt__array_get_size_1d(%Array* %48)
  %50 = sub i64 %49, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %51 = phi i64 [ 0, %exit__3 ], [ %61, %exiting__4 ]
  %52 = icmp sle i64 %51, %50
  br i1 %52, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 %51)
  %54 = bitcast i8* %53 to { %Array*, %Array* }**
  %55 = load { %Array*, %Array* }*, { %Array*, %Array* }** %54, align 8
  %56 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %55, i32 0, i32 0
  %57 = load %Array*, %Array** %56, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 1)
  %58 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %55, i32 0, i32 1
  %59 = load %Array*, %Array** %58, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 1)
  %60 = bitcast { %Array*, %Array* }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %60, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %61 = add i64 %51, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i32 1)
  %62 = bitcast { %Array*, %Array*, %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 1)
  %63 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 2
  %64 = load { i64, %Array* }*, { i64, %Array* }** %63, align 8
  %65 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %64, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  %67 = call i64 @__quantum__rt__array_get_size_1d(%Array* %66)
  %68 = sub i64 %67, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %69 = phi i64 [ 0, %exit__4 ], [ %80, %exiting__5 ]
  %70 = icmp sle i64 %69, %68
  br i1 %70, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 %69)
  %72 = bitcast i8* %71 to { { double, double }*, %Array* }**
  %73 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %72, align 8
  %74 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %73, i32 0, i32 0
  %75 = load { double, double }*, { double, double }** %74, align 8
  %76 = bitcast { double, double }* %75 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %76, i32 1)
  %77 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %73, i32 0, i32 1
  %78 = load %Array*, %Array** %77, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %78, i32 1)
  %79 = bitcast { { double, double }*, %Array* }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %80 = add i64 %69, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  %81 = bitcast { i64, %Array* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %81, i32 1)
  %82 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %82, i32 1)
  %83 = call { { i64, i64 }*, { double, %Callable* }* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___QubitizationOracleSeperatedRegisters____body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData)
  %84 = getelementptr inbounds { { i64, i64 }*, { double, %Callable* }* }, { { i64, i64 }*, { double, %Callable* }* }* %83, i32 0, i32 0
  %85 = load { i64, i64 }*, { i64, i64 }** %84, align 8
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %85, i32 0, i32 0
  %nCtrlRegisterQubits = load i64, i64* %86, align 4
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %85, i32 0, i32 1
  %nTargetRegisterQubits = load i64, i64* %87, align 4
  %88 = getelementptr inbounds { { i64, i64 }*, { double, %Callable* }* }, { { i64, i64 }*, { double, %Callable* }* }* %83, i32 0, i32 1
  %89 = load { double, %Callable* }*, { double, %Callable* }** %88, align 8
  %90 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %89, i32 0, i32 0
  %oneNorm = load double, double* %90, align 8
  %91 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %89, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %91, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %nQubits = add i64 %nCtrlRegisterQubits, %nTargetRegisterQubits
  %92 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  %93 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, i64 }* getelementptr ({ %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* null, i32 1) to i64))
  %94 = bitcast %Tuple* %93 to { %Callable*, %Callable*, i64 }*
  %95 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %94, i32 0, i32 0
  %96 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %94, i32 0, i32 1
  %97 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %94, i32 0, i32 2
  store %Callable* %92, %Callable** %95, align 8
  store %Callable* %oracle, %Callable** %96, align 8
  store i64 %nTargetRegisterQubits, i64* %97, align 4
  %98 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__11__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__8__FunctionTable, %Tuple* %93)
  %99 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Callable* }* getelementptr ({ double, %Callable* }, { double, %Callable* }* null, i32 1) to i64))
  %100 = bitcast %Tuple* %99 to { double, %Callable* }*
  %101 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %100, i32 0, i32 0
  %102 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %100, i32 0, i32 1
  store double %oneNorm, double* %101, align 8
  store %Callable* %98, %Callable** %102, align 8
  %103 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { double, %Callable* }* }* getelementptr ({ i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* null, i32 1) to i64))
  %104 = bitcast %Tuple* %103 to { i64, { double, %Callable* }* }*
  %105 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %104, i32 0, i32 0
  %106 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %104, i32 0, i32 1
  store i64 %nQubits, i64* %105, align 4
  store { double, %Callable* }* %100, { double, %Callable* }** %106, align 8
  %107 = sub i64 %4, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %108 = phi i64 [ 0, %exit__5 ], [ %118, %exiting__6 ]
  %109 = icmp sle i64 %108, %107
  br i1 %109, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %108)
  %111 = bitcast i8* %110 to { %Array*, %Array* }**
  %112 = load { %Array*, %Array* }*, { %Array*, %Array* }** %111, align 8
  %113 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 0
  %114 = load %Array*, %Array** %113, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 -1)
  %115 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 1
  %116 = load %Array*, %Array** %115, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 -1)
  %117 = bitcast { %Array*, %Array* }* %112 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %118 = add i64 %108, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  %119 = sub i64 %19, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %120 = phi i64 [ 0, %exit__6 ], [ %130, %exiting__7 ]
  %121 = icmp sle i64 %120, %119
  br i1 %121, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %120)
  %123 = bitcast i8* %122 to { %Array*, %Array* }**
  %124 = load { %Array*, %Array* }*, { %Array*, %Array* }** %123, align 8
  %125 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %124, i32 0, i32 0
  %126 = load %Array*, %Array** %125, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %126, i32 -1)
  %127 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %124, i32 0, i32 1
  %128 = load %Array*, %Array** %127, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %128, i32 -1)
  %129 = bitcast { %Array*, %Array* }* %124 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %129, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %130 = add i64 %120, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  %131 = sub i64 %34, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %132 = phi i64 [ 0, %exit__7 ], [ %142, %exiting__8 ]
  %133 = icmp sle i64 %132, %131
  br i1 %133, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %134 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %132)
  %135 = bitcast i8* %134 to { %Array*, %Array* }**
  %136 = load { %Array*, %Array* }*, { %Array*, %Array* }** %135, align 8
  %137 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %136, i32 0, i32 0
  %138 = load %Array*, %Array** %137, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %138, i32 -1)
  %139 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %136, i32 0, i32 1
  %140 = load %Array*, %Array** %139, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %140, i32 -1)
  %141 = bitcast { %Array*, %Array* }* %136 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %141, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %142 = add i64 %132, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  %143 = sub i64 %49, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %144 = phi i64 [ 0, %exit__8 ], [ %154, %exiting__9 ]
  %145 = icmp sle i64 %144, %143
  br i1 %145, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 %144)
  %147 = bitcast i8* %146 to { %Array*, %Array* }**
  %148 = load { %Array*, %Array* }*, { %Array*, %Array* }** %147, align 8
  %149 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %148, i32 0, i32 0
  %150 = load %Array*, %Array** %149, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %150, i32 -1)
  %151 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %148, i32 0, i32 1
  %152 = load %Array*, %Array** %151, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %152, i32 -1)
  %153 = bitcast { %Array*, %Array* }* %148 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %153, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %154 = add i64 %144, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 -1)
  %155 = sub i64 %67, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %156 = phi i64 [ 0, %exit__9 ], [ %167, %exiting__10 ]
  %157 = icmp sle i64 %156, %155
  br i1 %157, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %158 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 %156)
  %159 = bitcast i8* %158 to { { double, double }*, %Array* }**
  %160 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %159, align 8
  %161 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %160, i32 0, i32 0
  %162 = load { double, double }*, { double, double }** %161, align 8
  %163 = bitcast { double, double }* %162 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %163, i32 -1)
  %164 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %160, i32 0, i32 1
  %165 = load %Array*, %Array** %164, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %165, i32 -1)
  %166 = bitcast { { double, double }*, %Array* }* %160 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %166, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %167 = add i64 %156, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %81, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %82, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  %168 = bitcast { i64, i64 }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %168, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 -1)
  %169 = bitcast { double, %Callable* }* %89 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %169, i32 -1)
  %170 = bitcast { { i64, i64 }*, { double, %Callable* }* }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %170, i32 -1)
  ret { i64, { double, %Callable* }* }* %104
}

declare void @__quantum__rt__capture_update_alias_count(%Callable*, i32)

declare void @__quantum__rt__callable_update_alias_count(%Callable*, i32)

define internal void @Lifted__PartialApplication__1__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Array* }*, { i64, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Array* }*, %Array* }* getelementptr ({ { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { i64, %Array* }*, %Array* }*
  %8 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %7, i32 0, i32 1
  store { i64, %Array* }* %2, { i64, %Array* }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = load { i64, %Array* }*, { i64, %Array* }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %3, %Array* %4)
  ret void
}

declare %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]*, [2 x void (%Tuple*, i32)*]*, %Tuple*)

declare void @__quantum__rt__tuple_update_reference_count(%Tuple*, i32)

declare void @__quantum__rt__array_update_reference_count(%Array*, i32)

declare %Tuple* @__quantum__rt__tuple_create(i64)

define internal void @MemoryManagement__1__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Array* }*, { i64, %Array* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 1
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { { double, double }*, %Array* }**
  %13 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %12, align 8
  %14 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %13, i32 0, i32 0
  %15 = load { double, double }*, { double, double }** %14, align 8
  %16 = bitcast { double, double }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 %count-change)
  %17 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %13, i32 0, i32 1
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 %count-change)
  %19 = bitcast { { double, double }*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 %count-change)
  %21 = bitcast { i64, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__1__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Array* }*, { i64, %Array* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 1
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { { double, double }*, %Array* }**
  %13 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %12, align 8
  %14 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %13, i32 0, i32 0
  %15 = load { double, double }*, { double, double }** %14, align 8
  %16 = bitcast { double, double }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 %count-change)
  %17 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %13, i32 0, i32 1
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 %count-change)
  %19 = bitcast { { double, double }*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %19, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 %count-change)
  %21 = bitcast { i64, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__2__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %arg-tuple to { { %Callable* }*, %Array* }*
  %4 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Callable* }*, { %Callable* }** %4, align 8
  %6 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Callable* }*, %Array* }* getelementptr ({ i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i64, { %Callable* }*, %Array* }*
  %10 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 2
  store i64 %2, i64* %10, align 4
  store { %Callable* }* %5, { %Callable* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__RobustPhaseEstimation__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { %Callable* }*, %Array* }*
  %1 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %0, i32 0, i32 2
  %4 = load i64, i64* %1, align 4
  %5 = load { %Callable* }*, { %Callable* }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  %7 = call double @Microsoft__Quantum__Characterization__RobustPhaseEstimation__body(i64 %4, { %Callable* }* %5, %Array* %6)
  %8 = bitcast %Tuple* %result-tuple to { double }*
  %9 = getelementptr inbounds { double }, { double }* %8, i32 0, i32 0
  store double %7, double* %9, align 8
  ret void
}

define internal void @MemoryManagement__2__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__2__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Simulation__EstimateEnergy__body(i64 %nQubits, %Callable* %statePrepUnitary, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %phaseEst = call double @Microsoft__Quantum__Simulation__EstimateEnergyWithAdiabaticEvolution__body(i64 %nQubits, %Callable* %statePrepUnitary, %Callable* %0, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret double %phaseEst
}

declare double @__quantum__qis__sin__body(double)

declare void @__quantum__rt__capture_update_reference_count(%Callable*, i32)

declare void @__quantum__rt__callable_update_reference_count(%Callable*, i32)

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %stateData, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %stateData, i32 0, i32 1
  %terms = load %Array*, %Array** %0, align 8
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %terms)
  %1 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i32 1)
  %14 = bitcast { i64, %Array* }* %stateData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %15 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %stateData, i32 0, i32 0
  %stateType = load i64, i64* %15, align 4
  %16 = sub i64 %nTerms, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %17)
  %20 = bitcast i8* %19 to { { double, double }*, %Array* }**
  %21 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %21, i32 0, i32 0
  %23 = load { double, double }*, { double, double }** %22, align 8
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  %25 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %21, i32 0, i32 1
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = bitcast { { double, double }*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i32 1)
  %29 = icmp eq i64 %stateType, 2
  br i1 %29, label %then0__1, label %test1__1

then0__1:                                         ; preds = %exit__2
  %30 = call i1 @Microsoft__Quantum__Arrays___0fcd31919d144fe58f058d4e79e5219d_IsEmpty__body(%Array* %terms)
  br i1 %30, label %then0__2, label %test1__2

then0__2:                                         ; preds = %then0__1
  br label %continue__2

test1__2:                                         ; preds = %then0__1
  %31 = icmp eq i64 %nTerms, 1
  br i1 %31, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 0)
  %33 = bitcast i8* %32 to { { double, double }*, %Array* }**
  %34 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %33, align 8
  %35 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i32 0, i32 0
  %coefficient = load { double, double }*, { double, double }** %35, align 8
  %36 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 1)
  %37 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i32 0, i32 1
  %qubitIndices = load %Array*, %Array** %37, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices, %Array* %qubits)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %test1__2
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSparseMultiConfigurationalState__body(%Callable* %38, %Array* %terms, %Array* %qubits)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %38, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %38, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then1__1, %then0__2
  br label %continue__1

test1__1:                                         ; preds = %exit__2
  %39 = icmp eq i64 %stateType, 3
  br i1 %39, label %then1__2, label %continue__1

then1__2:                                         ; preds = %test1__1
  %40 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %41 = sub i64 %nTerms, 1
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %41)
  %43 = bitcast i8* %42 to { { double, double }*, %Array* }**
  %44 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %43, align 8
  %45 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %44, i32 0, i32 0
  %46 = load { double, double }*, { double, double }** %45, align 8
  %47 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %44, i32 0, i32 1
  %48 = load %Array*, %Array** %47, align 8
  %49 = bitcast { double, double }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i32 1)
  %50 = bitcast { { double, double }*, %Array* }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 1)
  %51 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 0)
  %53 = bitcast i8* %52 to { { double, double }*, %Array* }**
  store { { double, double }*, %Array* }* %44, { { double, double }*, %Array* }** %53, align 8
  %54 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %55 = bitcast %Tuple* %54 to { %Callable*, i64, %Array* }*
  %56 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %55, i32 0, i32 0
  %57 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %55, i32 0, i32 1
  %58 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %55, i32 0, i32 2
  store %Callable* %40, %Callable** %56, align 8
  store i64 2, i64* %57, align 4
  store %Array* %51, %Array** %58, align 8
  %referenceState = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__9__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__6__FunctionTable, %Tuple* %54)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %referenceState, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %referenceState, i32 1)
  %59 = sub i64 %nTerms, 2
  %60 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %59, 2
  %61 = call %Array* @__quantum__rt__array_slice_1d(%Array* %terms, %Range %60, i1 true)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareUnitaryCoupledClusterState__body(%Callable* %referenceState, %Array* %61, double 1.000000e+00, %Array* %qubits)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %referenceState, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %referenceState, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %referenceState, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %referenceState, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then1__2, %test1__1, %continue__2
  %62 = sub i64 %nTerms, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %continue__1
  %63 = phi i64 [ 0, %continue__1 ], [ %74, %exiting__3 ]
  %64 = icmp sle i64 %63, %62
  br i1 %64, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %63)
  %66 = bitcast i8* %65 to { { double, double }*, %Array* }**
  %67 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %66, align 8
  %68 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %67, i32 0, i32 0
  %69 = load { double, double }*, { double, double }** %68, align 8
  %70 = bitcast { double, double }* %69 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  %71 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %67, i32 0, i32 1
  %72 = load %Array*, %Array** %71, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  %73 = bitcast { { double, double }*, %Array* }* %67 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %74 = add i64 %63, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %75 = sub i64 %nTerms, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %76 = phi i64 [ 0, %exit__3 ], [ %87, %exiting__4 ]
  %77 = icmp sle i64 %76, %75
  br i1 %77, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %76)
  %79 = bitcast i8* %78 to { { double, double }*, %Array* }**
  %80 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %79, align 8
  %81 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %80, i32 0, i32 0
  %82 = load { double, double }*, { double, double }** %81, align 8
  %83 = bitcast { double, double }* %82 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %83, i32 -1)
  %84 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %80, i32 0, i32 1
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %85, i32 -1)
  %86 = bitcast { { double, double }*, %Array* }* %80 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %87 = add i64 %76, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i32 -1)
  ret void
}

define internal double @Microsoft__Quantum__Characterization__RobustPhaseEstimation__body(i64 %bitsPrecision, { %Callable* }* %oracle, %Array* %targetState) {
entry:
  %pPlus = alloca double, align 8
  %pZero = alloca double, align 8
  %nRepeats = alloca i64, align 8
  %thetaEst = alloca double, align 8
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  store double 0.000000e+00, double* %thetaEst, align 8
  %controlQubit = call %Qubit* @__quantum__rt__qubit_allocate()
  %3 = sub i64 %bitsPrecision, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %exponent = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %4 = icmp sle i64 %exponent, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = trunc i64 %exponent to i32
  %6 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %5)
  %power = fptosi double %6 to i64
  %7 = sub i64 %bitsPrecision, %exponent
  %8 = sitofp i64 %7 to double
  %9 = fmul double 2.500000e+00, %8
  %10 = fadd double %9, 5.000000e-01
  %11 = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %10)
  store i64 %11, i64* %nRepeats, align 4
  %12 = srem i64 %11, 2
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %14 = add i64 %11, 1
  store i64 %14, i64* %nRepeats, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  store double 0.000000e+00, double* %pZero, align 8
  store double 0.000000e+00, double* %pPlus, align 8
  %15 = load i64, i64* %nRepeats, align 4
  %16 = sub i64 %15, 1
  br label %header__2

exiting__1:                                       ; preds = %exit__2
  %17 = add i64 %exponent, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %controlQubit)
  %18 = load double, double* %thetaEst, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__qubit_release(%Qubit* %controlQubit)
  ret double %18

header__2:                                        ; preds = %exiting__2, %continue__1
  %idxRep = phi i64 [ 0, %continue__1 ], [ %20, %exiting__2 ]
  %19 = icmp sle i64 %idxRep, %16
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  br label %header__3

exiting__2:                                       ; preds = %exit__3
  %20 = add i64 %idxRep, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %21 = load double, double* %pPlus, align 8
  %22 = sitofp i64 %15 to double
  %23 = fdiv double %22, 2.000000e+00
  %y = fsub double %21, %23
  %24 = load double, double* %pZero, align 8
  %25 = sitofp i64 %15 to double
  %26 = fdiv double %25, 2.000000e+00
  %x = fsub double %24, %26
  %deltaTheta = call double @__quantum__qis__arctan2__body(double %y, double %x)
  %27 = load double, double* %thetaEst, align 8
  %28 = sitofp i64 %power to double
  %29 = fmul double %27, %28
  %30 = fsub double %deltaTheta, %29
  %31 = call double @Microsoft__Quantum__Math__PI__body()
  %32 = fmul double 2.000000e+00, %31
  %33 = call double @Microsoft__Quantum__Math__PI__body()
  %34 = fneg double %33
  %delta = call double @Microsoft__Quantum__Math__RealMod__body(double %30, double %32, double %34)
  %35 = sitofp i64 %power to double
  %36 = fdiv double %delta, %35
  %37 = fadd double %27, %36
  store double %37, double* %thetaEst, align 8
  br label %exiting__1

header__3:                                        ; preds = %exiting__3, %body__2
  %idxExperiment = phi i64 [ 0, %body__2 ], [ %52, %exiting__3 ]
  %38 = icmp sle i64 %idxExperiment, 1
  br i1 %38, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %39 = call double @Microsoft__Quantum__Math__PI__body()
  %40 = sitofp i64 %idxExperiment to double
  %41 = fmul double %39, %40
  %42 = fdiv double %41, 2.000000e+00
  %43 = sitofp i64 %power to double
  %rotation = fdiv double %42, %43
  call void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__body({ %Callable* }* %oracle, i64 %power, double %rotation, %Array* %targetState, %Qubit* %controlQubit)
  %result = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %controlQubit)
  %44 = call %Result* @__quantum__rt__result_get_zero()
  %45 = call i1 @__quantum__rt__result_equal(%Result* %result, %Result* %44)
  br i1 %45, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__3
  %46 = icmp eq i64 %idxExperiment, 0
  br i1 %46, label %then0__3, label %test1__1

then0__3:                                         ; preds = %then0__2
  %47 = load double, double* %pZero, align 8
  %48 = fadd double %47, 1.000000e+00
  store double %48, double* %pZero, align 8
  br label %continue__3

test1__1:                                         ; preds = %then0__2
  %49 = icmp eq i64 %idxExperiment, 1
  br i1 %49, label %then1__1, label %continue__3

then1__1:                                         ; preds = %test1__1
  %50 = load double, double* %pPlus, align 8
  %51 = fadd double %50, 1.000000e+00
  store double %51, double* %pPlus, align 8
  br label %continue__3

continue__3:                                      ; preds = %then1__1, %test1__1, %then0__3
  br label %continue__2

continue__2:                                      ; preds = %continue__3, %body__3
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %controlQubit)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %52 = add i64 %idxExperiment, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  br label %exiting__2
}

declare void @__quantum__rt__callable_invoke(%Callable*, %Tuple*, %Tuple*)

define { double, double }* @Microsoft__Quantum__Chemistry__Samples__Hydrogen__GetEnergyByTrotterization__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i64 %nBitsPrecision, double %trotterStepSize, i64 %trotterOrder) {
entry:
  %0 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 1
  %fermionTermData = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %0, align 8
  %1 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %fermionTermData, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %5)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = load { %Array*, %Array* }*, { %Array*, %Array* }** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %fermionTermData, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %31 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %fermionTermData, i32 0, i32 2
  %32 = load %Array*, %Array** %31, align 8
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = sub i64 %33, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %35)
  %38 = bitcast i8* %37 to { %Array*, %Array* }**
  %39 = load { %Array*, %Array* }*, { %Array*, %Array* }** %38, align 8
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 1
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 1)
  %44 = bitcast { %Array*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %46 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %fermionTermData, i32 0, i32 3
  %47 = load %Array*, %Array** %46, align 8
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, %Array* }**
  %54 = load { %Array*, %Array* }*, { %Array*, %Array* }** %53, align 8
  %55 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 0
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  %57 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 1
  %58 = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  %59 = bitcast { %Array*, %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %59, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %60 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  %61 = bitcast { %Array*, %Array*, %Array*, %Array* }* %fermionTermData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %62 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 2
  %statePrepData = load { i64, %Array* }*, { i64, %Array* }** %62, align 8
  %63 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %statePrepData, i32 0, i32 1
  %64 = load %Array*, %Array** %63, align 8
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %66 = sub i64 %65, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %67 = phi i64 [ 0, %exit__4 ], [ %78, %exiting__5 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %67)
  %70 = bitcast i8* %69 to { { double, double }*, %Array* }**
  %71 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %70, align 8
  %72 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 0
  %73 = load { double, double }*, { double, double }** %72, align 8
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %74, i32 1)
  %75 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { { double, double }*, %Array* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %78 = add i64 %67, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %79 = bitcast { i64, %Array* }* %statePrepData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %80 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %81 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 0
  %nSpinOrbitals = load i64, i64* %81, align 4
  %82 = sub i64 %3, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %83 = phi i64 [ 0, %exit__5 ], [ %93, %exiting__6 ]
  %84 = icmp sle i64 %83, %82
  br i1 %84, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %83)
  %86 = bitcast i8* %85 to { %Array*, %Array* }**
  %87 = load { %Array*, %Array* }*, { %Array*, %Array* }** %86, align 8
  %88 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 0
  %89 = load %Array*, %Array** %88, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %89, i32 1)
  %90 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 1
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 1)
  %92 = bitcast { %Array*, %Array* }* %87 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %92, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %93 = add i64 %83, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %94 = sub i64 %18, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %95 = phi i64 [ 0, %exit__6 ], [ %105, %exiting__7 ]
  %96 = icmp sle i64 %95, %94
  br i1 %96, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %95)
  %98 = bitcast i8* %97 to { %Array*, %Array* }**
  %99 = load { %Array*, %Array* }*, { %Array*, %Array* }** %98, align 8
  %100 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 0
  %101 = load %Array*, %Array** %100, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %101, i32 1)
  %102 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { %Array*, %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %105 = add i64 %95, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %106 = sub i64 %33, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %107 = phi i64 [ 0, %exit__7 ], [ %117, %exiting__8 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, %Array* }**
  %111 = load { %Array*, %Array* }*, { %Array*, %Array* }** %110, align 8
  %112 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 0
  %113 = load %Array*, %Array** %112, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %113, i32 1)
  %114 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 1
  %115 = load %Array*, %Array** %114, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %115, i32 1)
  %116 = bitcast { %Array*, %Array* }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %117 = add i64 %107, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %118 = sub i64 %48, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %119 = phi i64 [ 0, %exit__8 ], [ %129, %exiting__9 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %119)
  %122 = bitcast i8* %121 to { %Array*, %Array* }**
  %123 = load { %Array*, %Array* }*, { %Array*, %Array* }** %122, align 8
  %124 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 0
  %125 = load %Array*, %Array** %124, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %125, i32 1)
  %126 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 1
  %127 = load %Array*, %Array** %126, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %127, i32 1)
  %128 = bitcast { %Array*, %Array* }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %129 = add i64 %119, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %130 = sub i64 %65, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %131 = phi i64 [ 0, %exit__9 ], [ %142, %exiting__10 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %131)
  %134 = bitcast i8* %133 to { { double, double }*, %Array* }**
  %135 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %134, align 8
  %136 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 0
  %137 = load { double, double }*, { double, double }** %136, align 8
  %138 = bitcast { double, double }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %138, i32 1)
  %139 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 1
  %140 = load %Array*, %Array** %139, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %140, i32 1)
  %141 = bitcast { { double, double }*, %Array* }* %135 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %141, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %142 = add i64 %131, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %143 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 3
  %energyOffset = load double, double* %143, align 8
  %144 = call { i64, { double, %Callable* }* }* @Microsoft__Quantum__Chemistry__JordanWigner__TrotterStepOracle__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, double %trotterStepSize, i64 %trotterOrder)
  %145 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %144, i32 0, i32 0
  %nQubits = load i64, i64* %145, align 4
  %146 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %144, i32 0, i32 1
  %147 = load { double, %Callable* }*, { double, %Callable* }** %146, align 8
  %148 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %147, i32 0, i32 0
  %rescaleFactor = load double, double* %148, align 8
  %149 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %147, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %149, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %150 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %151 = sub i64 %65, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %152 = phi i64 [ 0, %exit__10 ], [ %163, %exiting__11 ]
  %153 = icmp sle i64 %152, %151
  br i1 %153, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %152)
  %155 = bitcast i8* %154 to { { double, double }*, %Array* }**
  %156 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %155, align 8
  %157 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %156, i32 0, i32 0
  %158 = load { double, double }*, { double, double }** %157, align 8
  %159 = bitcast { double, double }* %158 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %159, i32 1)
  %160 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %156, i32 0, i32 1
  %161 = load %Array*, %Array** %160, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %161, i32 1)
  %162 = bitcast { { double, double }*, %Array* }* %156 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %162, i32 1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %163 = add i64 %152, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %79, i32 1)
  %164 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { i64, %Array* }* }* getelementptr ({ %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* null, i32 1) to i64))
  %165 = bitcast %Tuple* %164 to { %Callable*, { i64, %Array* }* }*
  %166 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %165, i32 0, i32 0
  %167 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %165, i32 0, i32 1
  store %Callable* %150, %Callable** %166, align 8
  store { i64, %Array* }* %statePrepData, { i64, %Array* }** %167, align 8
  %statePrep = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__1__FunctionTable, %Tuple* %164)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrep, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrep, i32 1)
  %168 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Characterization__RobustPhaseEstimation__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %169 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64 }* getelementptr ({ %Callable*, i64 }, { %Callable*, i64 }* null, i32 1) to i64))
  %170 = bitcast %Tuple* %169 to { %Callable*, i64 }*
  %171 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %170, i32 0, i32 0
  %172 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %170, i32 0, i32 1
  store %Callable* %168, %Callable** %171, align 8
  store i64 %nBitsPrecision, i64* %172, align 4
  %phaseEstAlgorithm = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__4__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__2__FunctionTable, %Tuple* %169)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  %estPhase = call double @Microsoft__Quantum__Simulation__EstimateEnergy__body(i64 %nQubits, %Callable* %statePrep, %Callable* %oracle, %Callable* %phaseEstAlgorithm)
  %173 = fmul double %estPhase, %rescaleFactor
  %estEnergy = fadd double %173, %energyOffset
  %174 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %175 = bitcast %Tuple* %174 to { double, double }*
  %176 = getelementptr inbounds { double, double }, { double, double }* %175, i32 0, i32 0
  %177 = getelementptr inbounds { double, double }, { double, double }* %175, i32 0, i32 1
  store double %estPhase, double* %176, align 8
  store double %estEnergy, double* %177, align 8
  %178 = sub i64 %3, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %179 = phi i64 [ 0, %exit__11 ], [ %189, %exiting__12 ]
  %180 = icmp sle i64 %179, %178
  br i1 %180, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %181 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %179)
  %182 = bitcast i8* %181 to { %Array*, %Array* }**
  %183 = load { %Array*, %Array* }*, { %Array*, %Array* }** %182, align 8
  %184 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %183, i32 0, i32 0
  %185 = load %Array*, %Array** %184, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %185, i32 -1)
  %186 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %183, i32 0, i32 1
  %187 = load %Array*, %Array** %186, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %187, i32 -1)
  %188 = bitcast { %Array*, %Array* }* %183 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %188, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %189 = add i64 %179, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %190 = sub i64 %18, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %191 = phi i64 [ 0, %exit__12 ], [ %201, %exiting__13 ]
  %192 = icmp sle i64 %191, %190
  br i1 %192, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %193 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %191)
  %194 = bitcast i8* %193 to { %Array*, %Array* }**
  %195 = load { %Array*, %Array* }*, { %Array*, %Array* }** %194, align 8
  %196 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %195, i32 0, i32 0
  %197 = load %Array*, %Array** %196, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %197, i32 -1)
  %198 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %195, i32 0, i32 1
  %199 = load %Array*, %Array** %198, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %199, i32 -1)
  %200 = bitcast { %Array*, %Array* }* %195 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %200, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %201 = add i64 %191, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %202 = sub i64 %33, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %203 = phi i64 [ 0, %exit__13 ], [ %213, %exiting__14 ]
  %204 = icmp sle i64 %203, %202
  br i1 %204, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %203)
  %206 = bitcast i8* %205 to { %Array*, %Array* }**
  %207 = load { %Array*, %Array* }*, { %Array*, %Array* }** %206, align 8
  %208 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %207, i32 0, i32 0
  %209 = load %Array*, %Array** %208, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %209, i32 -1)
  %210 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %207, i32 0, i32 1
  %211 = load %Array*, %Array** %210, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %211, i32 -1)
  %212 = bitcast { %Array*, %Array* }* %207 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %212, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %213 = add i64 %203, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %214 = sub i64 %48, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %215 = phi i64 [ 0, %exit__14 ], [ %225, %exiting__15 ]
  %216 = icmp sle i64 %215, %214
  br i1 %216, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %217 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %215)
  %218 = bitcast i8* %217 to { %Array*, %Array* }**
  %219 = load { %Array*, %Array* }*, { %Array*, %Array* }** %218, align 8
  %220 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %219, i32 0, i32 0
  %221 = load %Array*, %Array** %220, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %221, i32 -1)
  %222 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %219, i32 0, i32 1
  %223 = load %Array*, %Array** %222, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %223, i32 -1)
  %224 = bitcast { %Array*, %Array* }* %219 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %224, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %225 = add i64 %215, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %226 = sub i64 %65, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %227 = phi i64 [ 0, %exit__15 ], [ %238, %exiting__16 ]
  %228 = icmp sle i64 %227, %226
  br i1 %228, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %229 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %227)
  %230 = bitcast i8* %229 to { { double, double }*, %Array* }**
  %231 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %230, align 8
  %232 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %231, i32 0, i32 0
  %233 = load { double, double }*, { double, double }** %232, align 8
  %234 = bitcast { double, double }* %233 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %234, i32 -1)
  %235 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %231, i32 0, i32 1
  %236 = load %Array*, %Array** %235, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %236, i32 -1)
  %237 = bitcast { { double, double }*, %Array* }* %231 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %237, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %238 = add i64 %227, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  %239 = sub i64 %3, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %240 = phi i64 [ 0, %exit__16 ], [ %250, %exiting__17 ]
  %241 = icmp sle i64 %240, %239
  br i1 %241, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %242 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %240)
  %243 = bitcast i8* %242 to { %Array*, %Array* }**
  %244 = load { %Array*, %Array* }*, { %Array*, %Array* }** %243, align 8
  %245 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %244, i32 0, i32 0
  %246 = load %Array*, %Array** %245, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %246, i32 -1)
  %247 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %244, i32 0, i32 1
  %248 = load %Array*, %Array** %247, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %248, i32 -1)
  %249 = bitcast { %Array*, %Array* }* %244 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %249, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %250 = add i64 %240, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %251 = sub i64 %18, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %252 = phi i64 [ 0, %exit__17 ], [ %262, %exiting__18 ]
  %253 = icmp sle i64 %252, %251
  br i1 %253, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %254 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %252)
  %255 = bitcast i8* %254 to { %Array*, %Array* }**
  %256 = load { %Array*, %Array* }*, { %Array*, %Array* }** %255, align 8
  %257 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %256, i32 0, i32 0
  %258 = load %Array*, %Array** %257, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %258, i32 -1)
  %259 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %256, i32 0, i32 1
  %260 = load %Array*, %Array** %259, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %260, i32 -1)
  %261 = bitcast { %Array*, %Array* }* %256 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %261, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %262 = add i64 %252, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %263 = sub i64 %33, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %264 = phi i64 [ 0, %exit__18 ], [ %274, %exiting__19 ]
  %265 = icmp sle i64 %264, %263
  br i1 %265, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %266 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %264)
  %267 = bitcast i8* %266 to { %Array*, %Array* }**
  %268 = load { %Array*, %Array* }*, { %Array*, %Array* }** %267, align 8
  %269 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %268, i32 0, i32 0
  %270 = load %Array*, %Array** %269, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %270, i32 -1)
  %271 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %268, i32 0, i32 1
  %272 = load %Array*, %Array** %271, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %272, i32 -1)
  %273 = bitcast { %Array*, %Array* }* %268 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %273, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %274 = add i64 %264, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %275 = sub i64 %48, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %276 = phi i64 [ 0, %exit__19 ], [ %286, %exiting__20 ]
  %277 = icmp sle i64 %276, %275
  br i1 %277, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %278 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %276)
  %279 = bitcast i8* %278 to { %Array*, %Array* }**
  %280 = load { %Array*, %Array* }*, { %Array*, %Array* }** %279, align 8
  %281 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %280, i32 0, i32 0
  %282 = load %Array*, %Array** %281, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %282, i32 -1)
  %283 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %280, i32 0, i32 1
  %284 = load %Array*, %Array** %283, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %284, i32 -1)
  %285 = bitcast { %Array*, %Array* }* %280 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %285, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %286 = add i64 %276, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %287 = sub i64 %65, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %288 = phi i64 [ 0, %exit__20 ], [ %299, %exiting__21 ]
  %289 = icmp sle i64 %288, %287
  br i1 %289, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %290 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %288)
  %291 = bitcast i8* %290 to { { double, double }*, %Array* }**
  %292 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %291, align 8
  %293 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %292, i32 0, i32 0
  %294 = load { double, double }*, { double, double }** %293, align 8
  %295 = bitcast { double, double }* %294 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %295, i32 -1)
  %296 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %292, i32 0, i32 1
  %297 = load %Array*, %Array** %296, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %297, i32 -1)
  %298 = bitcast { { double, double }*, %Array* }* %292 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %298, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %299 = add i64 %288, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 -1)
  %300 = bitcast { double, %Callable* }* %147 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %300, i32 -1)
  %301 = bitcast { i64, { double, %Callable* }* }* %144 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %301, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %phaseEstAlgorithm, i32 -1)
  ret { double, double }* %175
}

define internal { i64, { double, %Callable* }* }* @Microsoft__Quantum__Chemistry__JordanWigner__TrotterStepOracle__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, double %trotterStepSize, i64 %trotterOrder) {
entry:
  %0 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 1
  %data = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %0, align 8
  %1 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %5)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = load { %Array*, %Array* }*, { %Array*, %Array* }** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %31 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 2
  %32 = load %Array*, %Array** %31, align 8
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = sub i64 %33, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %35)
  %38 = bitcast i8* %37 to { %Array*, %Array* }**
  %39 = load { %Array*, %Array* }*, { %Array*, %Array* }** %38, align 8
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 1
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 1)
  %44 = bitcast { %Array*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %46 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 3
  %47 = load %Array*, %Array** %46, align 8
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, %Array* }**
  %54 = load { %Array*, %Array* }*, { %Array*, %Array* }** %53, align 8
  %55 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 0
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  %57 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 1
  %58 = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  %59 = bitcast { %Array*, %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %59, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %60 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  %61 = bitcast { %Array*, %Array*, %Array*, %Array* }* %data to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %62 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 2
  %statePrepData = load { i64, %Array* }*, { i64, %Array* }** %62, align 8
  %63 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %statePrepData, i32 0, i32 1
  %64 = load %Array*, %Array** %63, align 8
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %66 = sub i64 %65, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %67 = phi i64 [ 0, %exit__4 ], [ %78, %exiting__5 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %67)
  %70 = bitcast i8* %69 to { { double, double }*, %Array* }**
  %71 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %70, align 8
  %72 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 0
  %73 = load { double, double }*, { double, double }** %72, align 8
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %74, i32 1)
  %75 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { { double, double }*, %Array* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %78 = add i64 %67, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %79 = bitcast { i64, %Array* }* %statePrepData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %80 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %81 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 0
  %nSpinOrbitals = load i64, i64* %81, align 4
  %82 = sub i64 %3, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %83 = phi i64 [ 0, %exit__5 ], [ %93, %exiting__6 ]
  %84 = icmp sle i64 %83, %82
  br i1 %84, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %83)
  %86 = bitcast i8* %85 to { %Array*, %Array* }**
  %87 = load { %Array*, %Array* }*, { %Array*, %Array* }** %86, align 8
  %88 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 0
  %89 = load %Array*, %Array** %88, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %89, i32 1)
  %90 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 1
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 1)
  %92 = bitcast { %Array*, %Array* }* %87 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %92, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %93 = add i64 %83, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %94 = sub i64 %18, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %95 = phi i64 [ 0, %exit__6 ], [ %105, %exiting__7 ]
  %96 = icmp sle i64 %95, %94
  br i1 %96, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %95)
  %98 = bitcast i8* %97 to { %Array*, %Array* }**
  %99 = load { %Array*, %Array* }*, { %Array*, %Array* }** %98, align 8
  %100 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 0
  %101 = load %Array*, %Array** %100, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %101, i32 1)
  %102 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { %Array*, %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %105 = add i64 %95, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %106 = sub i64 %33, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %107 = phi i64 [ 0, %exit__7 ], [ %117, %exiting__8 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, %Array* }**
  %111 = load { %Array*, %Array* }*, { %Array*, %Array* }** %110, align 8
  %112 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 0
  %113 = load %Array*, %Array** %112, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %113, i32 1)
  %114 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 1
  %115 = load %Array*, %Array** %114, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %115, i32 1)
  %116 = bitcast { %Array*, %Array* }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %117 = add i64 %107, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %118 = sub i64 %48, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %119 = phi i64 [ 0, %exit__8 ], [ %129, %exiting__9 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %119)
  %122 = bitcast i8* %121 to { %Array*, %Array* }**
  %123 = load { %Array*, %Array* }*, { %Array*, %Array* }** %122, align 8
  %124 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 0
  %125 = load %Array*, %Array** %124, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %125, i32 1)
  %126 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 1
  %127 = load %Array*, %Array** %126, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %127, i32 1)
  %128 = bitcast { %Array*, %Array* }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %129 = add i64 %119, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %130 = sub i64 %65, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %131 = phi i64 [ 0, %exit__9 ], [ %142, %exiting__10 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %131)
  %134 = bitcast i8* %133 to { { double, double }*, %Array* }**
  %135 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %134, align 8
  %136 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 0
  %137 = load { double, double }*, { double, double }** %136, align 8
  %138 = bitcast { double, double }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %138, i32 1)
  %139 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 1
  %140 = load %Array*, %Array** %139, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %140, i32 1)
  %141 = bitcast { { double, double }*, %Array* }* %135 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %141, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %142 = add i64 %131, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %143 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 3
  %energyShift = load double, double* %143, align 8
  %generatorSystem = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerGeneratorSystem__body({ %Array*, %Array*, %Array*, %Array* }* %data)
  %144 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %145 = load %Callable*, %Callable** %144, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %145, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %145, i32 1)
  %146 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %146, i32 1)
  %147 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionEvolutionSet__body()
  %evolutionGenerator = call { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %147, { i64, %Callable* }* %generatorSystem)
  %148 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %149 = load { %Callable* }*, { %Callable* }** %148, align 8
  %150 = getelementptr inbounds { %Callable* }, { %Callable* }* %149, i32 0, i32 0
  %151 = load %Callable*, %Callable** %150, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %151, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %151, i32 1)
  %152 = bitcast { %Callable* }* %149 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %152, i32 1)
  %153 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %154 = load { i64, %Callable* }*, { i64, %Callable* }** %153, align 8
  %155 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %154, i32 0, i32 1
  %156 = load %Callable*, %Callable** %155, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %156, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %156, i32 1)
  %157 = bitcast { i64, %Callable* }* %154 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %157, i32 1)
  %158 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %158, i32 1)
  %159 = call { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 %trotterOrder)
  %160 = getelementptr inbounds { %Callable* }, { %Callable* }* %159, i32 0, i32 0
  %simulationAlgorithm = load %Callable*, %Callable** %160, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %151, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %151, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %152, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %156, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %156, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %157, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %158, i32 1)
  %161 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* getelementptr ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %162 = bitcast %Tuple* %161 to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %163 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %162, i32 0, i32 0
  %164 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %162, i32 0, i32 1
  %165 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %162, i32 0, i32 2
  store %Callable* %simulationAlgorithm, %Callable** %163, align 8
  store double %trotterStepSize, double* %164, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %165, align 8
  %oracle = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__12__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__7__FunctionTable, %Tuple* %161)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %rescaleFactor = fdiv double 1.000000e+00, %trotterStepSize
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  %166 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Callable* }* getelementptr ({ double, %Callable* }, { double, %Callable* }* null, i32 1) to i64))
  %167 = bitcast %Tuple* %166 to { double, %Callable* }*
  %168 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %167, i32 0, i32 0
  %169 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %167, i32 0, i32 1
  store double %rescaleFactor, double* %168, align 8
  store %Callable* %oracle, %Callable** %169, align 8
  %170 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { double, %Callable* }* }* getelementptr ({ i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* null, i32 1) to i64))
  %171 = bitcast %Tuple* %170 to { i64, { double, %Callable* }* }*
  %172 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %171, i32 0, i32 0
  %173 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %171, i32 0, i32 1
  store i64 %nSpinOrbitals, i64* %172, align 4
  store { double, %Callable* }* %167, { double, %Callable* }** %173, align 8
  %174 = getelementptr inbounds { %Callable* }, { %Callable* }* %147, i32 0, i32 0
  %175 = load %Callable*, %Callable** %174, align 8
  %176 = sub i64 %3, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %177 = phi i64 [ 0, %exit__10 ], [ %187, %exiting__11 ]
  %178 = icmp sle i64 %177, %176
  br i1 %178, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %179 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %177)
  %180 = bitcast i8* %179 to { %Array*, %Array* }**
  %181 = load { %Array*, %Array* }*, { %Array*, %Array* }** %180, align 8
  %182 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %181, i32 0, i32 0
  %183 = load %Array*, %Array** %182, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %183, i32 -1)
  %184 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %181, i32 0, i32 1
  %185 = load %Array*, %Array** %184, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %185, i32 -1)
  %186 = bitcast { %Array*, %Array* }* %181 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %186, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %187 = add i64 %177, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %188 = sub i64 %18, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %189 = phi i64 [ 0, %exit__11 ], [ %199, %exiting__12 ]
  %190 = icmp sle i64 %189, %188
  br i1 %190, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %191 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %189)
  %192 = bitcast i8* %191 to { %Array*, %Array* }**
  %193 = load { %Array*, %Array* }*, { %Array*, %Array* }** %192, align 8
  %194 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %193, i32 0, i32 0
  %195 = load %Array*, %Array** %194, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %195, i32 -1)
  %196 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %193, i32 0, i32 1
  %197 = load %Array*, %Array** %196, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %197, i32 -1)
  %198 = bitcast { %Array*, %Array* }* %193 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %198, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %199 = add i64 %189, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %200 = sub i64 %33, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %201 = phi i64 [ 0, %exit__12 ], [ %211, %exiting__13 ]
  %202 = icmp sle i64 %201, %200
  br i1 %202, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %203 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %201)
  %204 = bitcast i8* %203 to { %Array*, %Array* }**
  %205 = load { %Array*, %Array* }*, { %Array*, %Array* }** %204, align 8
  %206 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %205, i32 0, i32 0
  %207 = load %Array*, %Array** %206, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %207, i32 -1)
  %208 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %205, i32 0, i32 1
  %209 = load %Array*, %Array** %208, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %209, i32 -1)
  %210 = bitcast { %Array*, %Array* }* %205 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %210, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %211 = add i64 %201, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %212 = sub i64 %48, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %213 = phi i64 [ 0, %exit__13 ], [ %223, %exiting__14 ]
  %214 = icmp sle i64 %213, %212
  br i1 %214, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %213)
  %216 = bitcast i8* %215 to { %Array*, %Array* }**
  %217 = load { %Array*, %Array* }*, { %Array*, %Array* }** %216, align 8
  %218 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %217, i32 0, i32 0
  %219 = load %Array*, %Array** %218, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %219, i32 -1)
  %220 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %217, i32 0, i32 1
  %221 = load %Array*, %Array** %220, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %221, i32 -1)
  %222 = bitcast { %Array*, %Array* }* %217 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %222, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %223 = add i64 %213, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %224 = sub i64 %65, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %225 = phi i64 [ 0, %exit__14 ], [ %236, %exiting__15 ]
  %226 = icmp sle i64 %225, %224
  br i1 %226, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %227 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %225)
  %228 = bitcast i8* %227 to { { double, double }*, %Array* }**
  %229 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %228, align 8
  %230 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %229, i32 0, i32 0
  %231 = load { double, double }*, { double, double }** %230, align 8
  %232 = bitcast { double, double }* %231 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %232, i32 -1)
  %233 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %229, i32 0, i32 1
  %234 = load %Array*, %Array** %233, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %234, i32 -1)
  %235 = bitcast { { double, double }*, %Array* }* %229 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %235, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %236 = add i64 %225, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  %237 = sub i64 %3, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %238 = phi i64 [ 0, %exit__15 ], [ %248, %exiting__16 ]
  %239 = icmp sle i64 %238, %237
  br i1 %239, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %240 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %238)
  %241 = bitcast i8* %240 to { %Array*, %Array* }**
  %242 = load { %Array*, %Array* }*, { %Array*, %Array* }** %241, align 8
  %243 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %242, i32 0, i32 0
  %244 = load %Array*, %Array** %243, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %244, i32 -1)
  %245 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %242, i32 0, i32 1
  %246 = load %Array*, %Array** %245, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %246, i32 -1)
  %247 = bitcast { %Array*, %Array* }* %242 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %247, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %248 = add i64 %238, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %249 = sub i64 %18, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %250 = phi i64 [ 0, %exit__16 ], [ %260, %exiting__17 ]
  %251 = icmp sle i64 %250, %249
  br i1 %251, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %252 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %250)
  %253 = bitcast i8* %252 to { %Array*, %Array* }**
  %254 = load { %Array*, %Array* }*, { %Array*, %Array* }** %253, align 8
  %255 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %254, i32 0, i32 0
  %256 = load %Array*, %Array** %255, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %256, i32 -1)
  %257 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %254, i32 0, i32 1
  %258 = load %Array*, %Array** %257, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %258, i32 -1)
  %259 = bitcast { %Array*, %Array* }* %254 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %259, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %260 = add i64 %250, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %261 = sub i64 %33, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %262 = phi i64 [ 0, %exit__17 ], [ %272, %exiting__18 ]
  %263 = icmp sle i64 %262, %261
  br i1 %263, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %264 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %262)
  %265 = bitcast i8* %264 to { %Array*, %Array* }**
  %266 = load { %Array*, %Array* }*, { %Array*, %Array* }** %265, align 8
  %267 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %266, i32 0, i32 0
  %268 = load %Array*, %Array** %267, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %268, i32 -1)
  %269 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %266, i32 0, i32 1
  %270 = load %Array*, %Array** %269, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %270, i32 -1)
  %271 = bitcast { %Array*, %Array* }* %266 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %271, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %272 = add i64 %262, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %273 = sub i64 %48, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %274 = phi i64 [ 0, %exit__18 ], [ %284, %exiting__19 ]
  %275 = icmp sle i64 %274, %273
  br i1 %275, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %276 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %274)
  %277 = bitcast i8* %276 to { %Array*, %Array* }**
  %278 = load { %Array*, %Array* }*, { %Array*, %Array* }** %277, align 8
  %279 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %278, i32 0, i32 0
  %280 = load %Array*, %Array** %279, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %280, i32 -1)
  %281 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %278, i32 0, i32 1
  %282 = load %Array*, %Array** %281, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %282, i32 -1)
  %283 = bitcast { %Array*, %Array* }* %278 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %283, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %284 = add i64 %274, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %285 = sub i64 %65, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %286 = phi i64 [ 0, %exit__19 ], [ %297, %exiting__20 ]
  %287 = icmp sle i64 %286, %285
  br i1 %287, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %288 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %286)
  %289 = bitcast i8* %288 to { { double, double }*, %Array* }**
  %290 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %289, align 8
  %291 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %290, i32 0, i32 0
  %292 = load { double, double }*, { double, double }** %291, align 8
  %293 = bitcast { double, double }* %292 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %293, i32 -1)
  %294 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %290, i32 0, i32 1
  %295 = load %Array*, %Array** %294, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %295, i32 -1)
  %296 = bitcast { { double, double }*, %Array* }* %290 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %296, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %297 = add i64 %286, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %145, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %145, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %146, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %152, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %157, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %158, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %145, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %145, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %146, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %175, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %175, i32 -1)
  %298 = bitcast { %Callable* }* %147 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %298, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %152, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %157, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %158, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %simulationAlgorithm, i32 -1)
  %299 = bitcast { %Callable* }* %159 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %299, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 -1)
  ret { i64, { double, %Callable* }* }* %171
}

define internal void @Lifted__PartialApplication__3__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Array* }*, { i64, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Array* }*, %Array* }* getelementptr ({ { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { i64, %Array* }*, %Array* }*
  %8 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %7, i32 0, i32 1
  store { i64, %Array* }* %2, { i64, %Array* }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__4__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %arg-tuple to { { %Callable* }*, %Array* }*
  %4 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Callable* }*, { %Callable* }** %4, align 8
  %6 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Callable* }*, %Array* }* getelementptr ({ i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i64, { %Callable* }*, %Array* }*
  %10 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 2
  store i64 %2, i64* %10, align 4
  store { %Callable* }* %5, { %Callable* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWigner0123Term_____body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %v0123 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %8, align 4
  %12 = load i64, i64* %10, align 4
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 0)
  %15 = bitcast i8* %14 to i64*
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 1)
  %17 = bitcast i8* %16 to i64*
  store i64 %11, i64* %15, align 4
  store i64 %12, i64* %17, align 4
  %qubitsPQ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %13, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %19 = bitcast i8* %18 to i64*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %19, align 4
  %23 = load i64, i64* %21, align 4
  %24 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 0)
  %26 = bitcast i8* %25 to i64*
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 1)
  %28 = bitcast i8* %27 to i64*
  store i64 %22, i64* %26, align 4
  store i64 %23, i64* %28, align 4
  %qubitsRS = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %24, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 4
  %32 = add i64 %31, 1
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = sub i64 %35, 1
  %37 = insertvalue %Range zeroinitializer, i64 %32, 0
  %38 = insertvalue %Range %37, i64 1, 1
  %39 = insertvalue %Range %38, i64 %36, 2
  %qubitsPQJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %39, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 1)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 4
  %43 = add i64 %42, 1
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 4
  %47 = sub i64 %46, 1
  %48 = insertvalue %Range zeroinitializer, i64 %43, 0
  %49 = insertvalue %Range %48, i64 1, 1
  %50 = insertvalue %Range %49, i64 %47, 2
  %qubitsRSJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %50, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 1)
  %51 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 0)
  %53 = bitcast i8* %52 to i2*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 1)
  %55 = bitcast i8* %54 to i2*
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 2)
  %57 = bitcast i8* %56 to i2*
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 3)
  %59 = bitcast i8* %58 to i2*
  store i2 1, i2* %53, align 1
  store i2 1, i2* %55, align 1
  store i2 1, i2* %57, align 1
  store i2 1, i2* %59, align 1
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i2*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 1)
  %64 = bitcast i8* %63 to i2*
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 2)
  %66 = bitcast i8* %65 to i2*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 3)
  %68 = bitcast i8* %67 to i2*
  store i2 1, i2* %62, align 1
  store i2 1, i2* %64, align 1
  store i2 -1, i2* %66, align 1
  store i2 -1, i2* %68, align 1
  %69 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 0)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 1)
  %73 = bitcast i8* %72 to i2*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 2)
  %75 = bitcast i8* %74 to i2*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 3)
  %77 = bitcast i8* %76 to i2*
  store i2 1, i2* %71, align 1
  store i2 -1, i2* %73, align 1
  store i2 1, i2* %75, align 1
  store i2 -1, i2* %77, align 1
  %78 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 0)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 1)
  %82 = bitcast i8* %81 to i2*
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 2)
  %84 = bitcast i8* %83 to i2*
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 3)
  %86 = bitcast i8* %85 to i2*
  store i2 -1, i2* %80, align 1
  store i2 1, i2* %82, align 1
  store i2 1, i2* %84, align 1
  store i2 -1, i2* %86, align 1
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 0)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 1)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 2)
  %93 = bitcast i8* %92 to i2*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 3)
  %95 = bitcast i8* %94 to i2*
  store i2 -1, i2* %89, align 1
  store i2 -1, i2* %91, align 1
  store i2 -1, i2* %93, align 1
  store i2 -1, i2* %95, align 1
  %96 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 1)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 2)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 3)
  %104 = bitcast i8* %103 to i2*
  store i2 -1, i2* %98, align 1
  store i2 -1, i2* %100, align 1
  store i2 1, i2* %102, align 1
  store i2 1, i2* %104, align 1
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 1)
  %109 = bitcast i8* %108 to i2*
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 2)
  %111 = bitcast i8* %110 to i2*
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 3)
  %113 = bitcast i8* %112 to i2*
  store i2 -1, i2* %107, align 1
  store i2 1, i2* %109, align 1
  store i2 -1, i2* %111, align 1
  store i2 1, i2* %113, align 1
  %114 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 0)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 1)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 2)
  %120 = bitcast i8* %119 to i2*
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 3)
  %122 = bitcast i8* %121 to i2*
  store i2 1, i2* %116, align 1
  store i2 -1, i2* %118, align 1
  store i2 -1, i2* %120, align 1
  store i2 1, i2* %122, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %124 = bitcast i8* %123 to %Array**
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %126 = bitcast i8* %125 to %Array**
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %128 = bitcast i8* %127 to %Array**
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %130 = bitcast i8* %129 to %Array**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %132 = bitcast i8* %131 to %Array**
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %134 = bitcast i8* %133 to %Array**
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %136 = bitcast i8* %135 to %Array**
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %138 = bitcast i8* %137 to %Array**
  store %Array* %51, %Array** %124, align 8
  store %Array* %60, %Array** %126, align 8
  store %Array* %69, %Array** %128, align 8
  store %Array* %78, %Array** %130, align 8
  store %Array* %87, %Array** %132, align 8
  store %Array* %96, %Array** %134, align 8
  store %Array* %105, %Array** %136, align 8
  store %Array* %114, %Array** %138, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %139 = phi i64 [ 0, %entry ], [ %144, %exiting__1 ]
  %140 = icmp sle i64 %139, 7
  br i1 %140, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %139)
  %142 = bitcast i8* %141 to %Array**
  %143 = load %Array*, %Array** %142, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %144 = add i64 %139, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %145 = call %Range @Microsoft__Quantum__Arrays___4719fa27e9f8473381154ca8c04d2b3a_IndexRange__body(%Array* %ops)
  %146 = extractvalue %Range %145, 0
  %147 = extractvalue %Range %145, 1
  %148 = extractvalue %Range %145, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %149 = icmp sgt i64 %147, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxOp = phi i64 [ %146, %preheader__1 ], [ %171, %exiting__2 ]
  %150 = icmp sle i64 %idxOp, %148
  %151 = icmp sge i64 %idxOp, %148
  %152 = select i1 %149, i1 %150, i1 %151
  br i1 %152, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %153 = srem i64 %idxOp, 4
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %153)
  %155 = bitcast i8* %154 to double*
  %156 = load double, double* %155, align 8
  %157 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %156)
  br i1 %157, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %158 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %idxOp)
  %159 = bitcast i8* %158 to %Array**
  %160 = load %Array*, %Array** %159, align 8
  %161 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsPQJW)
  %162 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsRSJW)
  %163 = add i64 %161, %162
  %164 = call %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %163, i2 -2)
  %paulis = call %Array* @__quantum__rt__array_concatenate(%Array* %160, %Array* %164)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %165 = srem i64 %idxOp, 4
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %165)
  %167 = bitcast i8* %166 to double*
  %168 = load double, double* %167, align 8
  %theta = fmul double %stepSize, %168
  %169 = call %Array* @__quantum__rt__array_concatenate(%Array* %qubitsPQ, %Array* %qubitsRS)
  call void @__quantum__rt__array_update_reference_count(%Array* %169, i32 1)
  %170 = call %Array* @__quantum__rt__array_concatenate(%Array* %169, %Array* %qubitsPQJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %170, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %170, %Array* %qubitsRSJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %164, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %169, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %169, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %170, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %170, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %171 = add i64 %idxOp, %147
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %172 = phi i64 [ 0, %exit__2 ], [ %177, %exiting__3 ]
  %173 = icmp sle i64 %172, 7
  br i1 %173, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %174 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %172)
  %175 = bitcast i8* %174 to %Array**
  %176 = load %Array*, %Array** %175, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %176, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %177 = add i64 %172, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %178 = phi i64 [ 0, %exit__3 ], [ %183, %exiting__4 ]
  %179 = icmp sle i64 %178, 7
  br i1 %179, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %178)
  %181 = bitcast i8* %180 to %Array**
  %182 = load %Array*, %Array** %181, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %182, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %183 = add i64 %178, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %indices, %Array* %array) {
entry:
  %sliced = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %0 = icmp eq i64 %nSliced, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %3 = bitcast i8* %2 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %4)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %9 = sub i64 %nSliced, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %10 = phi i64 [ 0, %continue__1 ], [ %14, %exiting__1 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %10)
  %13 = bitcast i8* %12 to %Qubit**
  store %Qubit* %7, %Qubit** %13, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %14 = add i64 %10, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %8, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %15 = sub i64 %nSliced, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 1, %exit__1 ], [ %27, %exiting__2 ]
  %16 = icmp sle i64 %idx, %15
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 4
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %21)
  %23 = bitcast i8* %22 to %Qubit**
  %24 = load %Qubit*, %Qubit** %23, align 8
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idx)
  %26 = bitcast i8* %25 to %Qubit**
  store %Qubit* %24, %Qubit** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  store %Array* %18, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %28 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 -1)
  ret %Array* %28
}

declare %Array* @__quantum__rt__array_create_1d(i32, i64)

declare %Array* @__quantum__rt__array_slice_1d(%Array*, %Range, i1)

define internal %Range @Microsoft__Quantum__Arrays___4719fa27e9f8473381154ca8c04d2b3a_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = sub i64 %0, 1
  %9 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %8, 2
  %10 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %11)
  %14 = bitcast i8* %13 to %Array**
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %9
}

define internal i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %number) {
entry:
  %0 = call double @Microsoft__Quantum__Math__AbsD__body(double %number)
  %1 = call double @Microsoft__Quantum__Math__PowD__body(double 1.000000e+01, double -1.500000e+01)
  %2 = fcmp ogt double %0, %1
  ret i1 %2
}

define internal %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %length, i2 %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %length)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to i2*
  store i2 %value, i2* %5, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret %Array* %0
}

declare %Array* @__quantum__rt__array_concatenate(%Array*, %Array*)

declare void @__quantum__qis__exp__body(%Array*, double, %Array*)

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWigner0123Term_____adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__v0123__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %8, align 4
  %12 = load i64, i64* %10, align 4
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 0)
  %15 = bitcast i8* %14 to i64*
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 1)
  %17 = bitcast i8* %16 to i64*
  store i64 %11, i64* %15, align 4
  store i64 %12, i64* %17, align 4
  %__qsVar4__qubitsPQ__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %13, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %19 = bitcast i8* %18 to i64*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %19, align 4
  %23 = load i64, i64* %21, align 4
  %24 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 0)
  %26 = bitcast i8* %25 to i64*
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 1)
  %28 = bitcast i8* %27 to i64*
  store i64 %22, i64* %26, align 4
  store i64 %23, i64* %28, align 4
  %__qsVar5__qubitsRS__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %24, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsRS__, i32 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 4
  %32 = add i64 %31, 1
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = sub i64 %35, 1
  %37 = insertvalue %Range zeroinitializer, i64 %32, 0
  %38 = insertvalue %Range %37, i64 1, 1
  %39 = insertvalue %Range %38, i64 %36, 2
  %__qsVar6__qubitsPQJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %39, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__qubitsPQJW__, i32 1)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 4
  %43 = add i64 %42, 1
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 4
  %47 = sub i64 %46, 1
  %48 = insertvalue %Range zeroinitializer, i64 %43, 0
  %49 = insertvalue %Range %48, i64 1, 1
  %50 = insertvalue %Range %49, i64 %47, 2
  %__qsVar7__qubitsRSJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %50, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__qubitsRSJW__, i32 1)
  %51 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 0)
  %53 = bitcast i8* %52 to i2*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 1)
  %55 = bitcast i8* %54 to i2*
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 2)
  %57 = bitcast i8* %56 to i2*
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 3)
  %59 = bitcast i8* %58 to i2*
  store i2 1, i2* %53, align 1
  store i2 1, i2* %55, align 1
  store i2 1, i2* %57, align 1
  store i2 1, i2* %59, align 1
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i2*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 1)
  %64 = bitcast i8* %63 to i2*
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 2)
  %66 = bitcast i8* %65 to i2*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 3)
  %68 = bitcast i8* %67 to i2*
  store i2 1, i2* %62, align 1
  store i2 1, i2* %64, align 1
  store i2 -1, i2* %66, align 1
  store i2 -1, i2* %68, align 1
  %69 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 0)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 1)
  %73 = bitcast i8* %72 to i2*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 2)
  %75 = bitcast i8* %74 to i2*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 3)
  %77 = bitcast i8* %76 to i2*
  store i2 1, i2* %71, align 1
  store i2 -1, i2* %73, align 1
  store i2 1, i2* %75, align 1
  store i2 -1, i2* %77, align 1
  %78 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 0)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 1)
  %82 = bitcast i8* %81 to i2*
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 2)
  %84 = bitcast i8* %83 to i2*
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 3)
  %86 = bitcast i8* %85 to i2*
  store i2 -1, i2* %80, align 1
  store i2 1, i2* %82, align 1
  store i2 1, i2* %84, align 1
  store i2 -1, i2* %86, align 1
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 0)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 1)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 2)
  %93 = bitcast i8* %92 to i2*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 3)
  %95 = bitcast i8* %94 to i2*
  store i2 -1, i2* %89, align 1
  store i2 -1, i2* %91, align 1
  store i2 -1, i2* %93, align 1
  store i2 -1, i2* %95, align 1
  %96 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 1)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 2)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 3)
  %104 = bitcast i8* %103 to i2*
  store i2 -1, i2* %98, align 1
  store i2 -1, i2* %100, align 1
  store i2 1, i2* %102, align 1
  store i2 1, i2* %104, align 1
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 1)
  %109 = bitcast i8* %108 to i2*
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 2)
  %111 = bitcast i8* %110 to i2*
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 3)
  %113 = bitcast i8* %112 to i2*
  store i2 -1, i2* %107, align 1
  store i2 1, i2* %109, align 1
  store i2 -1, i2* %111, align 1
  store i2 1, i2* %113, align 1
  %114 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 0)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 1)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 2)
  %120 = bitcast i8* %119 to i2*
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 3)
  %122 = bitcast i8* %121 to i2*
  store i2 1, i2* %116, align 1
  store i2 -1, i2* %118, align 1
  store i2 -1, i2* %120, align 1
  store i2 1, i2* %122, align 1
  %__qsVar8__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 0)
  %124 = bitcast i8* %123 to %Array**
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 1)
  %126 = bitcast i8* %125 to %Array**
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 2)
  %128 = bitcast i8* %127 to %Array**
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 3)
  %130 = bitcast i8* %129 to %Array**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 4)
  %132 = bitcast i8* %131 to %Array**
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 5)
  %134 = bitcast i8* %133 to %Array**
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 6)
  %136 = bitcast i8* %135 to %Array**
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 7)
  %138 = bitcast i8* %137 to %Array**
  store %Array* %51, %Array** %124, align 8
  store %Array* %60, %Array** %126, align 8
  store %Array* %69, %Array** %128, align 8
  store %Array* %78, %Array** %130, align 8
  store %Array* %87, %Array** %132, align 8
  store %Array* %96, %Array** %134, align 8
  store %Array* %105, %Array** %136, align 8
  store %Array* %114, %Array** %138, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %139 = phi i64 [ 0, %entry ], [ %144, %exiting__1 ]
  %140 = icmp sle i64 %139, 7
  br i1 %140, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %139)
  %142 = bitcast i8* %141 to %Array**
  %143 = load %Array*, %Array** %142, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %144 = add i64 %139, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__ops__, i32 1)
  %145 = call %Range @Microsoft__Quantum__Arrays___4719fa27e9f8473381154ca8c04d2b3a_IndexRange__body(%Array* %__qsVar8__ops__)
  %146 = extractvalue %Range %145, 0
  %147 = extractvalue %Range %145, 1
  %148 = extractvalue %Range %145, 2
  %149 = sub i64 %148, %146
  %150 = sdiv i64 %149, %147
  %151 = mul i64 %147, %150
  %152 = add i64 %146, %151
  %153 = sub i64 0, %147
  %154 = insertvalue %Range zeroinitializer, i64 %152, 0
  %155 = insertvalue %Range %154, i64 %153, 1
  %156 = insertvalue %Range %155, i64 %146, 2
  %157 = extractvalue %Range %156, 0
  %158 = extractvalue %Range %156, 1
  %159 = extractvalue %Range %156, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %160 = icmp sgt i64 %158, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar9__idxOp__ = phi i64 [ %157, %preheader__1 ], [ %182, %exiting__2 ]
  %161 = icmp sle i64 %__qsVar9__idxOp__, %159
  %162 = icmp sge i64 %__qsVar9__idxOp__, %159
  %163 = select i1 %160, i1 %161, i1 %162
  br i1 %163, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %164 = srem i64 %__qsVar9__idxOp__, 4
  %165 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__v0123__, i64 %164)
  %166 = bitcast i8* %165 to double*
  %167 = load double, double* %166, align 8
  %168 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %167)
  br i1 %168, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %169 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %__qsVar9__idxOp__)
  %170 = bitcast i8* %169 to %Array**
  %171 = load %Array*, %Array** %170, align 8
  %172 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar6__qubitsPQJW__)
  %173 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar7__qubitsRSJW__)
  %174 = add i64 %172, %173
  %175 = call %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %174, i2 -2)
  %paulis = call %Array* @__quantum__rt__array_concatenate(%Array* %171, %Array* %175)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %176 = srem i64 %__qsVar9__idxOp__, 4
  %177 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__v0123__, i64 %176)
  %178 = bitcast i8* %177 to double*
  %179 = load double, double* %178, align 8
  %theta = fmul double %stepSize, %179
  %180 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar4__qubitsPQ__, %Array* %__qsVar5__qubitsRS__)
  call void @__quantum__rt__array_update_reference_count(%Array* %180, i32 1)
  %181 = call %Array* @__quantum__rt__array_concatenate(%Array* %180, %Array* %__qsVar6__qubitsPQJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %181, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %181, %Array* %__qsVar7__qubitsRSJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %175, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %180, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %180, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %181, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %181, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %182 = add i64 %__qsVar9__idxOp__, %158
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsRS__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__qubitsPQJW__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__qubitsRSJW__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %183 = phi i64 [ 0, %exit__2 ], [ %188, %exiting__3 ]
  %184 = icmp sle i64 %183, 7
  br i1 %184, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %185 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %183)
  %186 = bitcast i8* %185 to %Array**
  %187 = load %Array*, %Array** %186, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %187, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %188 = add i64 %183, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar5__qubitsRS__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__qubitsPQJW__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__qubitsRSJW__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %189 = phi i64 [ 0, %exit__3 ], [ %194, %exiting__4 ]
  %190 = icmp sle i64 %189, 7
  br i1 %190, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %191 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %189)
  %192 = bitcast i8* %191 to %Array**
  %193 = load %Array*, %Array** %192, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %193, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %194 = add i64 %189, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar8__ops__, i32 -1)
  ret void
}

declare void @__quantum__qis__exp__adj(%Array*, double, %Array*)

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWigner0123Term_____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %v0123 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %12, align 4
  %16 = load i64, i64* %14, align 4
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to i64*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 1)
  %21 = bitcast i8* %20 to i64*
  store i64 %15, i64* %19, align 4
  store i64 %16, i64* %21, align 4
  %qubitsPQ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %17, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %23 = bitcast i8* %22 to i64*
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %23, align 4
  %27 = load i64, i64* %25, align 4
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 0)
  %30 = bitcast i8* %29 to i64*
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 1)
  %32 = bitcast i8* %31 to i64*
  store i64 %26, i64* %30, align 4
  store i64 %27, i64* %32, align 4
  %qubitsRS = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %28, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = add i64 %35, 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = sub i64 %39, 1
  %41 = insertvalue %Range zeroinitializer, i64 %36, 0
  %42 = insertvalue %Range %41, i64 1, 1
  %43 = insertvalue %Range %42, i64 %40, 2
  %qubitsPQJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %43, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 1)
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 4
  %47 = add i64 %46, 1
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 4
  %51 = sub i64 %50, 1
  %52 = insertvalue %Range zeroinitializer, i64 %47, 0
  %53 = insertvalue %Range %52, i64 1, 1
  %54 = insertvalue %Range %53, i64 %51, 2
  %qubitsRSJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %54, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 1)
  %55 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 0)
  %57 = bitcast i8* %56 to i2*
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 1)
  %59 = bitcast i8* %58 to i2*
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 2)
  %61 = bitcast i8* %60 to i2*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 3)
  %63 = bitcast i8* %62 to i2*
  store i2 1, i2* %57, align 1
  store i2 1, i2* %59, align 1
  store i2 1, i2* %61, align 1
  store i2 1, i2* %63, align 1
  %64 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 0)
  %66 = bitcast i8* %65 to i2*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 1)
  %68 = bitcast i8* %67 to i2*
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 2)
  %70 = bitcast i8* %69 to i2*
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 3)
  %72 = bitcast i8* %71 to i2*
  store i2 1, i2* %66, align 1
  store i2 1, i2* %68, align 1
  store i2 -1, i2* %70, align 1
  store i2 -1, i2* %72, align 1
  %73 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 0)
  %75 = bitcast i8* %74 to i2*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 1)
  %77 = bitcast i8* %76 to i2*
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 2)
  %79 = bitcast i8* %78 to i2*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 3)
  %81 = bitcast i8* %80 to i2*
  store i2 1, i2* %75, align 1
  store i2 -1, i2* %77, align 1
  store i2 1, i2* %79, align 1
  store i2 -1, i2* %81, align 1
  %82 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 0)
  %84 = bitcast i8* %83 to i2*
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 1)
  %86 = bitcast i8* %85 to i2*
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 2)
  %88 = bitcast i8* %87 to i2*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 3)
  %90 = bitcast i8* %89 to i2*
  store i2 -1, i2* %84, align 1
  store i2 1, i2* %86, align 1
  store i2 1, i2* %88, align 1
  store i2 -1, i2* %90, align 1
  %91 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 0)
  %93 = bitcast i8* %92 to i2*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 1)
  %95 = bitcast i8* %94 to i2*
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 2)
  %97 = bitcast i8* %96 to i2*
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 3)
  %99 = bitcast i8* %98 to i2*
  store i2 -1, i2* %93, align 1
  store i2 -1, i2* %95, align 1
  store i2 -1, i2* %97, align 1
  store i2 -1, i2* %99, align 1
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 0)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 1)
  %104 = bitcast i8* %103 to i2*
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 2)
  %106 = bitcast i8* %105 to i2*
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 3)
  %108 = bitcast i8* %107 to i2*
  store i2 -1, i2* %102, align 1
  store i2 -1, i2* %104, align 1
  store i2 1, i2* %106, align 1
  store i2 1, i2* %108, align 1
  %109 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 0)
  %111 = bitcast i8* %110 to i2*
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 1)
  %113 = bitcast i8* %112 to i2*
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 2)
  %115 = bitcast i8* %114 to i2*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 3)
  %117 = bitcast i8* %116 to i2*
  store i2 -1, i2* %111, align 1
  store i2 1, i2* %113, align 1
  store i2 -1, i2* %115, align 1
  store i2 1, i2* %117, align 1
  %118 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %118, i64 0)
  %120 = bitcast i8* %119 to i2*
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %118, i64 1)
  %122 = bitcast i8* %121 to i2*
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %118, i64 2)
  %124 = bitcast i8* %123 to i2*
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %118, i64 3)
  %126 = bitcast i8* %125 to i2*
  store i2 1, i2* %120, align 1
  store i2 -1, i2* %122, align 1
  store i2 -1, i2* %124, align 1
  store i2 1, i2* %126, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %128 = bitcast i8* %127 to %Array**
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %130 = bitcast i8* %129 to %Array**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %132 = bitcast i8* %131 to %Array**
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %134 = bitcast i8* %133 to %Array**
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %136 = bitcast i8* %135 to %Array**
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %138 = bitcast i8* %137 to %Array**
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %140 = bitcast i8* %139 to %Array**
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %142 = bitcast i8* %141 to %Array**
  store %Array* %55, %Array** %128, align 8
  store %Array* %64, %Array** %130, align 8
  store %Array* %73, %Array** %132, align 8
  store %Array* %82, %Array** %134, align 8
  store %Array* %91, %Array** %136, align 8
  store %Array* %100, %Array** %138, align 8
  store %Array* %109, %Array** %140, align 8
  store %Array* %118, %Array** %142, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %143 = phi i64 [ 0, %entry ], [ %148, %exiting__1 ]
  %144 = icmp sle i64 %143, 7
  br i1 %144, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %145 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %143)
  %146 = bitcast i8* %145 to %Array**
  %147 = load %Array*, %Array** %146, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %147, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %148 = add i64 %143, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %149 = call %Range @Microsoft__Quantum__Arrays___4719fa27e9f8473381154ca8c04d2b3a_IndexRange__body(%Array* %ops)
  %150 = extractvalue %Range %149, 0
  %151 = extractvalue %Range %149, 1
  %152 = extractvalue %Range %149, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %153 = icmp sgt i64 %151, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxOp = phi i64 [ %150, %preheader__1 ], [ %180, %exiting__2 ]
  %154 = icmp sle i64 %idxOp, %152
  %155 = icmp sge i64 %idxOp, %152
  %156 = select i1 %153, i1 %154, i1 %155
  br i1 %156, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %157 = srem i64 %idxOp, 4
  %158 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %157)
  %159 = bitcast i8* %158 to double*
  %160 = load double, double* %159, align 8
  %161 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %160)
  br i1 %161, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %162 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %idxOp)
  %163 = bitcast i8* %162 to %Array**
  %164 = load %Array*, %Array** %163, align 8
  %165 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsPQJW)
  %166 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsRSJW)
  %167 = add i64 %165, %166
  %168 = call %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %167, i2 -2)
  %paulis = call %Array* @__quantum__rt__array_concatenate(%Array* %164, %Array* %168)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %169 = srem i64 %idxOp, 4
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %169)
  %171 = bitcast i8* %170 to double*
  %172 = load double, double* %171, align 8
  %theta = fmul double %stepSize, %172
  %173 = call %Array* @__quantum__rt__array_concatenate(%Array* %qubitsPQ, %Array* %qubitsRS)
  call void @__quantum__rt__array_update_reference_count(%Array* %173, i32 1)
  %174 = call %Array* @__quantum__rt__array_concatenate(%Array* %173, %Array* %qubitsPQJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %174, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %174, %Array* %qubitsRSJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %175 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %176 = bitcast %Tuple* %175 to { %Array*, double, %Array* }*
  %177 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %176, i32 0, i32 0
  %178 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %176, i32 0, i32 1
  %179 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %176, i32 0, i32 2
  store %Array* %paulis, %Array** %177, align 8
  store double %theta, double* %178, align 8
  store %Array* %qubits__1, %Array** %179, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %176)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %168, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %173, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %173, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %174, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %174, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %175, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %180 = add i64 %idxOp, %151
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %181 = phi i64 [ 0, %exit__2 ], [ %186, %exiting__3 ]
  %182 = icmp sle i64 %181, 7
  br i1 %182, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %181)
  %184 = bitcast i8* %183 to %Array**
  %185 = load %Array*, %Array** %184, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %185, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %186 = add i64 %181, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %187 = phi i64 [ 0, %exit__3 ], [ %192, %exiting__4 ]
  %188 = icmp sle i64 %187, 7
  br i1 %188, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %187)
  %190 = bitcast i8* %189 to %Array**
  %191 = load %Array*, %Array** %190, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %191, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %192 = add i64 %187, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  ret void
}

declare void @__quantum__qis__exp__ctl(%Array*, { %Array*, double, %Array* }*)

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWigner0123Term_____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__v0123__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %12, align 4
  %16 = load i64, i64* %14, align 4
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to i64*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 1)
  %21 = bitcast i8* %20 to i64*
  store i64 %15, i64* %19, align 4
  store i64 %16, i64* %21, align 4
  %__qsVar4__qubitsPQ__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %17, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %23 = bitcast i8* %22 to i64*
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %23, align 4
  %27 = load i64, i64* %25, align 4
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 0)
  %30 = bitcast i8* %29 to i64*
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 1)
  %32 = bitcast i8* %31 to i64*
  store i64 %26, i64* %30, align 4
  store i64 %27, i64* %32, align 4
  %__qsVar5__qubitsRS__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %28, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsRS__, i32 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = add i64 %35, 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = sub i64 %39, 1
  %41 = insertvalue %Range zeroinitializer, i64 %36, 0
  %42 = insertvalue %Range %41, i64 1, 1
  %43 = insertvalue %Range %42, i64 %40, 2
  %__qsVar6__qubitsPQJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %43, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__qubitsPQJW__, i32 1)
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 4
  %47 = add i64 %46, 1
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 4
  %51 = sub i64 %50, 1
  %52 = insertvalue %Range zeroinitializer, i64 %47, 0
  %53 = insertvalue %Range %52, i64 1, 1
  %54 = insertvalue %Range %53, i64 %51, 2
  %__qsVar7__qubitsRSJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %54, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__qubitsRSJW__, i32 1)
  %55 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 0)
  %57 = bitcast i8* %56 to i2*
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 1)
  %59 = bitcast i8* %58 to i2*
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 2)
  %61 = bitcast i8* %60 to i2*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 3)
  %63 = bitcast i8* %62 to i2*
  store i2 1, i2* %57, align 1
  store i2 1, i2* %59, align 1
  store i2 1, i2* %61, align 1
  store i2 1, i2* %63, align 1
  %64 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 0)
  %66 = bitcast i8* %65 to i2*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 1)
  %68 = bitcast i8* %67 to i2*
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 2)
  %70 = bitcast i8* %69 to i2*
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 3)
  %72 = bitcast i8* %71 to i2*
  store i2 1, i2* %66, align 1
  store i2 1, i2* %68, align 1
  store i2 -1, i2* %70, align 1
  store i2 -1, i2* %72, align 1
  %73 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 0)
  %75 = bitcast i8* %74 to i2*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 1)
  %77 = bitcast i8* %76 to i2*
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 2)
  %79 = bitcast i8* %78 to i2*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 3)
  %81 = bitcast i8* %80 to i2*
  store i2 1, i2* %75, align 1
  store i2 -1, i2* %77, align 1
  store i2 1, i2* %79, align 1
  store i2 -1, i2* %81, align 1
  %82 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 0)
  %84 = bitcast i8* %83 to i2*
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 1)
  %86 = bitcast i8* %85 to i2*
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 2)
  %88 = bitcast i8* %87 to i2*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 3)
  %90 = bitcast i8* %89 to i2*
  store i2 -1, i2* %84, align 1
  store i2 1, i2* %86, align 1
  store i2 1, i2* %88, align 1
  store i2 -1, i2* %90, align 1
  %91 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 0)
  %93 = bitcast i8* %92 to i2*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 1)
  %95 = bitcast i8* %94 to i2*
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 2)
  %97 = bitcast i8* %96 to i2*
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 3)
  %99 = bitcast i8* %98 to i2*
  store i2 -1, i2* %93, align 1
  store i2 -1, i2* %95, align 1
  store i2 -1, i2* %97, align 1
  store i2 -1, i2* %99, align 1
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 0)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 1)
  %104 = bitcast i8* %103 to i2*
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 2)
  %106 = bitcast i8* %105 to i2*
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 3)
  %108 = bitcast i8* %107 to i2*
  store i2 -1, i2* %102, align 1
  store i2 -1, i2* %104, align 1
  store i2 1, i2* %106, align 1
  store i2 1, i2* %108, align 1
  %109 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 0)
  %111 = bitcast i8* %110 to i2*
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 1)
  %113 = bitcast i8* %112 to i2*
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 2)
  %115 = bitcast i8* %114 to i2*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 3)
  %117 = bitcast i8* %116 to i2*
  store i2 -1, i2* %111, align 1
  store i2 1, i2* %113, align 1
  store i2 -1, i2* %115, align 1
  store i2 1, i2* %117, align 1
  %118 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %118, i64 0)
  %120 = bitcast i8* %119 to i2*
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %118, i64 1)
  %122 = bitcast i8* %121 to i2*
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %118, i64 2)
  %124 = bitcast i8* %123 to i2*
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %118, i64 3)
  %126 = bitcast i8* %125 to i2*
  store i2 1, i2* %120, align 1
  store i2 -1, i2* %122, align 1
  store i2 -1, i2* %124, align 1
  store i2 1, i2* %126, align 1
  %__qsVar8__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 0)
  %128 = bitcast i8* %127 to %Array**
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 1)
  %130 = bitcast i8* %129 to %Array**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 2)
  %132 = bitcast i8* %131 to %Array**
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 3)
  %134 = bitcast i8* %133 to %Array**
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 4)
  %136 = bitcast i8* %135 to %Array**
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 5)
  %138 = bitcast i8* %137 to %Array**
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 6)
  %140 = bitcast i8* %139 to %Array**
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 7)
  %142 = bitcast i8* %141 to %Array**
  store %Array* %55, %Array** %128, align 8
  store %Array* %64, %Array** %130, align 8
  store %Array* %73, %Array** %132, align 8
  store %Array* %82, %Array** %134, align 8
  store %Array* %91, %Array** %136, align 8
  store %Array* %100, %Array** %138, align 8
  store %Array* %109, %Array** %140, align 8
  store %Array* %118, %Array** %142, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %143 = phi i64 [ 0, %entry ], [ %148, %exiting__1 ]
  %144 = icmp sle i64 %143, 7
  br i1 %144, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %145 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %143)
  %146 = bitcast i8* %145 to %Array**
  %147 = load %Array*, %Array** %146, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %147, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %148 = add i64 %143, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__ops__, i32 1)
  %149 = call %Range @Microsoft__Quantum__Arrays___4719fa27e9f8473381154ca8c04d2b3a_IndexRange__body(%Array* %__qsVar8__ops__)
  %150 = extractvalue %Range %149, 0
  %151 = extractvalue %Range %149, 1
  %152 = extractvalue %Range %149, 2
  %153 = sub i64 %152, %150
  %154 = sdiv i64 %153, %151
  %155 = mul i64 %151, %154
  %156 = add i64 %150, %155
  %157 = sub i64 0, %151
  %158 = insertvalue %Range zeroinitializer, i64 %156, 0
  %159 = insertvalue %Range %158, i64 %157, 1
  %160 = insertvalue %Range %159, i64 %150, 2
  %161 = extractvalue %Range %160, 0
  %162 = extractvalue %Range %160, 1
  %163 = extractvalue %Range %160, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %164 = icmp sgt i64 %162, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar9__idxOp__ = phi i64 [ %161, %preheader__1 ], [ %191, %exiting__2 ]
  %165 = icmp sle i64 %__qsVar9__idxOp__, %163
  %166 = icmp sge i64 %__qsVar9__idxOp__, %163
  %167 = select i1 %164, i1 %165, i1 %166
  br i1 %167, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %168 = srem i64 %__qsVar9__idxOp__, 4
  %169 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__v0123__, i64 %168)
  %170 = bitcast i8* %169 to double*
  %171 = load double, double* %170, align 8
  %172 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %171)
  br i1 %172, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %__qsVar9__idxOp__)
  %174 = bitcast i8* %173 to %Array**
  %175 = load %Array*, %Array** %174, align 8
  %176 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar6__qubitsPQJW__)
  %177 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar7__qubitsRSJW__)
  %178 = add i64 %176, %177
  %179 = call %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %178, i2 -2)
  %paulis = call %Array* @__quantum__rt__array_concatenate(%Array* %175, %Array* %179)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %180 = srem i64 %__qsVar9__idxOp__, 4
  %181 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__v0123__, i64 %180)
  %182 = bitcast i8* %181 to double*
  %183 = load double, double* %182, align 8
  %theta = fmul double %stepSize, %183
  %184 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar4__qubitsPQ__, %Array* %__qsVar5__qubitsRS__)
  call void @__quantum__rt__array_update_reference_count(%Array* %184, i32 1)
  %185 = call %Array* @__quantum__rt__array_concatenate(%Array* %184, %Array* %__qsVar6__qubitsPQJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %185, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %185, %Array* %__qsVar7__qubitsRSJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %186 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %187 = bitcast %Tuple* %186 to { %Array*, double, %Array* }*
  %188 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %187, i32 0, i32 0
  %189 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %187, i32 0, i32 1
  %190 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %187, i32 0, i32 2
  store %Array* %paulis, %Array** %188, align 8
  store double %theta, double* %189, align 8
  store %Array* %qubits__1, %Array** %190, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %187)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %179, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %184, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %184, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %185, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %185, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %186, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %191 = add i64 %__qsVar9__idxOp__, %162
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsRS__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__qubitsPQJW__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__qubitsRSJW__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %192 = phi i64 [ 0, %exit__2 ], [ %197, %exiting__3 ]
  %193 = icmp sle i64 %192, 7
  br i1 %193, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %192)
  %195 = bitcast i8* %194 to %Array**
  %196 = load %Array*, %Array** %195, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %196, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %197 = add i64 %192, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar5__qubitsRS__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__qubitsPQJW__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__qubitsRSJW__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %198 = phi i64 [ 0, %exit__3 ], [ %203, %exiting__4 ]
  %199 = icmp sle i64 %198, 7
  br i1 %199, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %200 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %198)
  %201 = bitcast i8* %200 to %Array**
  %202 = load %Array*, %Array** %201, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %202, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %203 = add i64 %198, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar8__ops__, i32 -1)
  ret void
}

declare void @__quantum__qis__exp__ctladj(%Array*, { %Array*, double, %Array* }*)

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQRSTerm____body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %p = load i64, i64* %8, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %q = load i64, i64* %10, align 4
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %12 = bitcast i8* %11 to i64*
  %r = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %14 = bitcast i8* %13 to i64*
  %s = load i64, i64* %14, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16, align 8
  %18 = fmul double 1.250000e-01, %17
  %angle = fmul double %18, %stepSize
  %19 = icmp eq i64 %p, %q
  br i1 %19, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %entry
  %20 = icmp eq i64 %p, %r
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %entry
  %21 = phi i1 [ %19, %entry ], [ %20, %condFalse__1 ]
  br i1 %21, label %condContinue__2, label %condFalse__2

condFalse__2:                                     ; preds = %condContinue__1
  %22 = icmp eq i64 %p, %s
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condContinue__1
  %23 = phi i1 [ %21, %condContinue__1 ], [ %22, %condFalse__2 ]
  br i1 %23, label %condContinue__3, label %condFalse__3

condFalse__3:                                     ; preds = %condContinue__2
  %24 = icmp eq i64 %q, %r
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condContinue__2
  %25 = phi i1 [ %23, %condContinue__2 ], [ %24, %condFalse__3 ]
  br i1 %25, label %condContinue__4, label %condFalse__4

condFalse__4:                                     ; preds = %condContinue__3
  %26 = icmp eq i64 %q, %s
  br label %condContinue__4

condContinue__4:                                  ; preds = %condFalse__4, %condContinue__3
  %27 = phi i1 [ %25, %condContinue__3 ], [ %26, %condFalse__4 ]
  br i1 %27, label %condContinue__5, label %condFalse__5

condFalse__5:                                     ; preds = %condContinue__4
  %28 = icmp eq i64 %r, %s
  br label %condContinue__5

condContinue__5:                                  ; preds = %condFalse__5, %condContinue__4
  %29 = phi i1 [ %27, %condContinue__4 ], [ %28, %condFalse__5 ]
  br i1 %29, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__5
  %30 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @0, i32 0, i32 0))
  %31 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %32 = call %String* @__quantum__rt__string_concatenate(%String* %30, %String* %31)
  call void @__quantum__rt__string_update_reference_count(%String* %30, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %31, i32 -1)
  %33 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %34 = call %String* @__quantum__rt__string_concatenate(%String* %32, %String* %33)
  call void @__quantum__rt__string_update_reference_count(%String* %32, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %33, i32 -1)
  %35 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  %37 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i32 -1)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %r)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  %41 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %s)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  %45 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %46)
  unreachable

continue__1:                                      ; preds = %condContinue__5
  %47 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 0)
  %49 = bitcast i8* %48 to i2*
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 1)
  %51 = bitcast i8* %50 to i2*
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 2)
  %53 = bitcast i8* %52 to i2*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 3)
  %55 = bitcast i8* %54 to i2*
  store i2 -1, i2* %49, align 1
  store i2 -1, i2* %51, align 1
  store i2 1, i2* %53, align 1
  store i2 -1, i2* %55, align 1
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to i2*
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 1)
  %60 = bitcast i8* %59 to i2*
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 2)
  %62 = bitcast i8* %61 to i2*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 3)
  %64 = bitcast i8* %63 to i2*
  store i2 1, i2* %58, align 1
  store i2 1, i2* %60, align 1
  store i2 1, i2* %62, align 1
  store i2 -1, i2* %64, align 1
  %65 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 0)
  %67 = bitcast i8* %66 to i2*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 1)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 2)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 3)
  %73 = bitcast i8* %72 to i2*
  store i2 1, i2* %67, align 1
  store i2 -1, i2* %69, align 1
  store i2 -1, i2* %71, align 1
  store i2 -1, i2* %73, align 1
  %74 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 0)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 1)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 2)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 3)
  %82 = bitcast i8* %81 to i2*
  store i2 -1, i2* %76, align 1
  store i2 1, i2* %78, align 1
  store i2 -1, i2* %80, align 1
  store i2 -1, i2* %82, align 1
  %83 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 0)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 1)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 2)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 3)
  %91 = bitcast i8* %90 to i2*
  store i2 1, i2* %85, align 1
  store i2 -1, i2* %87, align 1
  store i2 1, i2* %89, align 1
  store i2 1, i2* %91, align 1
  %92 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 0)
  %94 = bitcast i8* %93 to i2*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 1)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 2)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 3)
  %100 = bitcast i8* %99 to i2*
  store i2 -1, i2* %94, align 1
  store i2 1, i2* %96, align 1
  store i2 1, i2* %98, align 1
  store i2 1, i2* %100, align 1
  %101 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 0)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 1)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 2)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 3)
  %109 = bitcast i8* %108 to i2*
  store i2 -1, i2* %103, align 1
  store i2 -1, i2* %105, align 1
  store i2 -1, i2* %107, align 1
  store i2 1, i2* %109, align 1
  %110 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 0)
  %112 = bitcast i8* %111 to i2*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 1)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 2)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 3)
  %118 = bitcast i8* %117 to i2*
  store i2 1, i2* %112, align 1
  store i2 1, i2* %114, align 1
  store i2 -1, i2* %116, align 1
  store i2 1, i2* %118, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %120 = bitcast i8* %119 to %Array**
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %122 = bitcast i8* %121 to %Array**
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %124 = bitcast i8* %123 to %Array**
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %126 = bitcast i8* %125 to %Array**
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %128 = bitcast i8* %127 to %Array**
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %130 = bitcast i8* %129 to %Array**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %132 = bitcast i8* %131 to %Array**
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %134 = bitcast i8* %133 to %Array**
  store %Array* %47, %Array** %120, align 8
  store %Array* %56, %Array** %122, align 8
  store %Array* %65, %Array** %124, align 8
  store %Array* %74, %Array** %126, align 8
  store %Array* %83, %Array** %128, align 8
  store %Array* %92, %Array** %130, align 8
  store %Array* %101, %Array** %132, align 8
  store %Array* %110, %Array** %134, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %135 = phi i64 [ 0, %continue__1 ], [ %140, %exiting__1 ]
  %136 = icmp sle i64 %135, 7
  br i1 %136, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %135)
  %138 = bitcast i8* %137 to %Array**
  %139 = load %Array*, %Array** %138, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %139, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %140 = add i64 %135, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %141 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 0)
  %143 = bitcast i8* %142 to i64*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 1)
  %145 = bitcast i8* %144 to i64*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 2)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 3)
  %149 = bitcast i8* %148 to i64*
  store i64 %p, i64* %143, align 4
  store i64 %q, i64* %145, align 4
  store i64 %r, i64* %147, align 4
  store i64 %s, i64* %149, align 4
  %150 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %141)
  %151 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i32 0, i32 0
  %sortedIndices = load %Array*, %Array** %151, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i32 1)
  %152 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i32 0, i32 1
  %signs = load %Array*, %Array** %152, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 1)
  %153 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i32 0, i32 2
  %globalSign = load double, double* %153, align 8
  %154 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %ops, %Array* %signs)
  %155 = call i64 @__quantum__rt__array_get_size_1d(%Array* %154)
  %156 = sub i64 %155, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %157 = phi i64 [ 0, %exit__1 ], [ %166, %exiting__2 ]
  %158 = icmp sle i64 %157, %156
  br i1 %158, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %159 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %157)
  %160 = bitcast i8* %159 to { %Array*, double }**
  %161 = load { %Array*, double }*, { %Array*, double }** %160, align 8
  %162 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %161, i32 0, i32 0
  %op = load %Array*, %Array** %162, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %163 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %161, i32 0, i32 1
  %sign = load double, double* %163, align 8
  %164 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %164, %Array* %sortedIndices, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %165 = fmul double %globalSign, %sign
  %theta = fmul double %165, %angle
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %pauliString, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %166 = add i64 %157, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %167 = phi i64 [ 0, %exit__2 ], [ %172, %exiting__3 ]
  %168 = icmp sle i64 %167, 7
  br i1 %168, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %169 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %167)
  %170 = bitcast i8* %169 to %Array**
  %171 = load %Array*, %Array** %170, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %171, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %172 = add i64 %167, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %173 = phi i64 [ 0, %exit__3 ], [ %178, %exiting__4 ]
  %174 = icmp sle i64 %173, 7
  br i1 %174, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %175 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %173)
  %176 = bitcast i8* %175 to %Array**
  %177 = load %Array*, %Array** %176, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %177, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %178 = add i64 %173, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %141, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %sortedIndices, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i32 -1)
  %179 = bitcast { %Array*, %Array*, double }* %150 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %179, i32 -1)
  %180 = sub i64 %155, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %181 = phi i64 [ 0, %exit__4 ], [ %189, %exiting__5 ]
  %182 = icmp sle i64 %181, %180
  br i1 %182, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %181)
  %184 = bitcast i8* %183 to { %Array*, double }**
  %185 = load { %Array*, double }*, { %Array*, double }** %184, align 8
  %186 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %185, i32 0, i32 0
  %187 = load %Array*, %Array** %186, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %187, i32 -1)
  %188 = bitcast { %Array*, double }* %185 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %188, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %189 = add i64 %181, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %154, i32 -1)
  ret void
}

declare %String* @__quantum__rt__string_create(i8*)

declare void @__quantum__rt__string_update_reference_count(%String*, i32)

declare %String* @__quantum__rt__int_to_string(i64)

declare %String* @__quantum__rt__string_concatenate(%String*, %String*)

declare void @__quantum__rt__fail(%String*)

define internal { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %indices) {
entry:
  %sign = alloca double, align 8
  %signs = alloca %Array*, align 8
  %sorted = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %1 = bitcast i8* %0 to i64*
  %p = load i64, i64* %1, align 4
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %3 = bitcast i8* %2 to i64*
  %q = load i64, i64* %3, align 4
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 2)
  %5 = bitcast i8* %4 to i64*
  %r = load i64, i64* %5, align 4
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 3)
  %7 = bitcast i8* %6 to i64*
  %s = load i64, i64* %7, align 4
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 0)
  %10 = bitcast i8* %9 to i64*
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 1)
  %12 = bitcast i8* %11 to i64*
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 2)
  %14 = bitcast i8* %13 to i64*
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 3)
  %16 = bitcast i8* %15 to i64*
  store i64 0, i64* %10, align 4
  store i64 0, i64* %12, align 4
  store i64 0, i64* %14, align 4
  store i64 0, i64* %16, align 4
  store %Array* %8, %Array** %sorted, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to double*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 1)
  %21 = bitcast i8* %20 to double*
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 2)
  %23 = bitcast i8* %22 to double*
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 3)
  %25 = bitcast i8* %24 to double*
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 4)
  %27 = bitcast i8* %26 to double*
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 5)
  %29 = bitcast i8* %28 to double*
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 6)
  %31 = bitcast i8* %30 to double*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 7)
  %33 = bitcast i8* %32 to double*
  store double 0.000000e+00, double* %19, align 8
  store double 0.000000e+00, double* %21, align 8
  store double 0.000000e+00, double* %23, align 8
  store double 0.000000e+00, double* %25, align 8
  store double 0.000000e+00, double* %27, align 8
  store double 0.000000e+00, double* %29, align 8
  store double 0.000000e+00, double* %31, align 8
  store double 0.000000e+00, double* %33, align 8
  store %Array* %17, %Array** %signs, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  store double 1.000000e+00, double* %sign, align 8
  %34 = icmp sgt i64 %p, %q
  br i1 %34, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  store double -1.000000e+00, double* %sign, align 8
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  %35 = icmp sgt i64 %r, %s
  br i1 %35, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %36 = load double, double* %sign, align 8
  %37 = fmul double %36, -1.000000e+00
  store double %37, double* %sign, align 8
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 0)
  %40 = bitcast i8* %39 to i64*
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 1)
  %42 = bitcast i8* %41 to i64*
  store i64 %p, i64* %40, align 4
  store i64 %q, i64* %42, align 4
  %43 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %38)
  %44 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 0)
  %46 = bitcast i8* %45 to i64*
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 1)
  %48 = bitcast i8* %47 to i64*
  store i64 %r, i64* %46, align 4
  store i64 %s, i64* %48, align 4
  %49 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %44)
  %50 = icmp sgt i64 %43, %49
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  br i1 %50, label %then0__3, label %else__1

then0__3:                                         ; preds = %continue__2
  %51 = load double, double* %sign, align 8
  %52 = fmul double %51, -1.000000e+00
  store double %52, double* %sign, align 8
  %53 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 0)
  %55 = bitcast i8* %54 to i64*
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 1)
  %57 = bitcast i8* %56 to i64*
  store i64 %r, i64* %55, align 4
  store i64 %s, i64* %57, align 4
  %58 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %53)
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  %59 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 0)
  %61 = bitcast i8* %60 to i64*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 1)
  %63 = bitcast i8* %62 to i64*
  store i64 %r, i64* %61, align 4
  store i64 %s, i64* %63, align 4
  %64 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %59)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  %65 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 0)
  %67 = bitcast i8* %66 to i64*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 1)
  %69 = bitcast i8* %68 to i64*
  store i64 %p, i64* %67, align 4
  store i64 %q, i64* %69, align 4
  %70 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %65)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  %71 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 0)
  %73 = bitcast i8* %72 to i64*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 1)
  %75 = bitcast i8* %74 to i64*
  store i64 %p, i64* %73, align 4
  store i64 %q, i64* %75, align 4
  %76 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %71)
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  %77 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 0)
  %79 = bitcast i8* %78 to i64*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 1)
  %81 = bitcast i8* %80 to i64*
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 2)
  %83 = bitcast i8* %82 to i64*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 3)
  %85 = bitcast i8* %84 to i64*
  store i64 %58, i64* %79, align 4
  store i64 %64, i64* %81, align 4
  store i64 %70, i64* %83, align 4
  store i64 %76, i64* %85, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %77, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  store %Array* %77, %Array** %sorted, align 8
  br label %continue__3

else__1:                                          ; preds = %continue__2
  %86 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 0)
  %88 = bitcast i8* %87 to i64*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 1)
  %90 = bitcast i8* %89 to i64*
  store i64 %p, i64* %88, align 4
  store i64 %q, i64* %90, align 4
  %91 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %86)
  call void @__quantum__rt__array_update_reference_count(%Array* %86, i32 -1)
  %92 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 0)
  %94 = bitcast i8* %93 to i64*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 1)
  %96 = bitcast i8* %95 to i64*
  store i64 %p, i64* %94, align 4
  store i64 %q, i64* %96, align 4
  %97 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %92)
  call void @__quantum__rt__array_update_reference_count(%Array* %92, i32 -1)
  %98 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %98, i64 0)
  %100 = bitcast i8* %99 to i64*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %98, i64 1)
  %102 = bitcast i8* %101 to i64*
  store i64 %r, i64* %100, align 4
  store i64 %s, i64* %102, align 4
  %103 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %98)
  call void @__quantum__rt__array_update_reference_count(%Array* %98, i32 -1)
  %104 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 0)
  %106 = bitcast i8* %105 to i64*
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 1)
  %108 = bitcast i8* %107 to i64*
  store i64 %r, i64* %106, align 4
  store i64 %s, i64* %108, align 4
  %109 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %104)
  call void @__quantum__rt__array_update_reference_count(%Array* %104, i32 -1)
  %110 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 0)
  %112 = bitcast i8* %111 to i64*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 1)
  %114 = bitcast i8* %113 to i64*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 2)
  %116 = bitcast i8* %115 to i64*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 3)
  %118 = bitcast i8* %117 to i64*
  store i64 %91, i64* %112, align 4
  store i64 %97, i64* %114, align 4
  store i64 %103, i64* %116, align 4
  store i64 %109, i64* %118, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %110, i32 1)
  %119 = load %Array*, %Array** %sorted, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  store %Array* %110, %Array** %sorted, align 8
  br label %continue__3

continue__3:                                      ; preds = %else__1, %then0__3
  %120 = load %Array*, %Array** %sorted, align 8
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 0)
  %122 = bitcast i8* %121 to i64*
  %p1 = load i64, i64* %122, align 4
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 1)
  %124 = bitcast i8* %123 to i64*
  %q1 = load i64, i64* %124, align 4
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 2)
  %126 = bitcast i8* %125 to i64*
  %r1 = load i64, i64* %126, align 4
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 3)
  %128 = bitcast i8* %127 to i64*
  %s1 = load i64, i64* %128, align 4
  %129 = icmp slt i64 %q1, %r1
  br i1 %129, label %then0__4, label %test1__1

then0__4:                                         ; preds = %continue__3
  %130 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 0)
  %132 = bitcast i8* %131 to i64*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 1)
  %134 = bitcast i8* %133 to i64*
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 2)
  %136 = bitcast i8* %135 to i64*
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 3)
  %138 = bitcast i8* %137 to i64*
  store i64 %p1, i64* %132, align 4
  store i64 %q1, i64* %134, align 4
  store i64 %r1, i64* %136, align 4
  store i64 %s1, i64* %138, align 4
  %139 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 0)
  %141 = bitcast i8* %140 to double*
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 1)
  %143 = bitcast i8* %142 to double*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 2)
  %145 = bitcast i8* %144 to double*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 3)
  %147 = bitcast i8* %146 to double*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 4)
  %149 = bitcast i8* %148 to double*
  %150 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 5)
  %151 = bitcast i8* %150 to double*
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 6)
  %153 = bitcast i8* %152 to double*
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 7)
  %155 = bitcast i8* %154 to double*
  store double 1.000000e+00, double* %141, align 8
  store double -1.000000e+00, double* %143, align 8
  store double -1.000000e+00, double* %145, align 8
  store double -1.000000e+00, double* %147, align 8
  store double 1.000000e+00, double* %149, align 8
  store double 1.000000e+00, double* %151, align 8
  store double 1.000000e+00, double* %153, align 8
  store double -1.000000e+00, double* %155, align 8
  %156 = load double, double* %sign, align 8
  %157 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %158 = bitcast %Tuple* %157 to { %Array*, %Array*, double }*
  %159 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %158, i32 0, i32 0
  %160 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %158, i32 0, i32 1
  %161 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %158, i32 0, i32 2
  store %Array* %130, %Array** %159, align 8
  store %Array* %139, %Array** %160, align 8
  store double %156, double* %161, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %120, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  ret { %Array*, %Array*, double }* %158

test1__1:                                         ; preds = %continue__3
  %162 = icmp sgt i64 %q1, %r1
  br i1 %162, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %test1__1
  %163 = icmp slt i64 %q1, %s1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %test1__1
  %164 = phi i1 [ %163, %condTrue__1 ], [ %162, %test1__1 ]
  br i1 %164, label %then1__1, label %test2__1

then1__1:                                         ; preds = %condContinue__1
  %165 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 0)
  %167 = bitcast i8* %166 to i64*
  %168 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 1)
  %169 = bitcast i8* %168 to i64*
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 2)
  %171 = bitcast i8* %170 to i64*
  %172 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 3)
  %173 = bitcast i8* %172 to i64*
  store i64 %p1, i64* %167, align 4
  store i64 %r1, i64* %169, align 4
  store i64 %q1, i64* %171, align 4
  store i64 %s1, i64* %173, align 4
  %174 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %175 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %174, i64 0)
  %176 = bitcast i8* %175 to double*
  %177 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %174, i64 1)
  %178 = bitcast i8* %177 to double*
  %179 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %174, i64 2)
  %180 = bitcast i8* %179 to double*
  %181 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %174, i64 3)
  %182 = bitcast i8* %181 to double*
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %174, i64 4)
  %184 = bitcast i8* %183 to double*
  %185 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %174, i64 5)
  %186 = bitcast i8* %185 to double*
  %187 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %174, i64 6)
  %188 = bitcast i8* %187 to double*
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %174, i64 7)
  %190 = bitcast i8* %189 to double*
  store double -1.000000e+00, double* %176, align 8
  store double -1.000000e+00, double* %178, align 8
  store double -1.000000e+00, double* %180, align 8
  store double 1.000000e+00, double* %182, align 8
  store double -1.000000e+00, double* %184, align 8
  store double 1.000000e+00, double* %186, align 8
  store double 1.000000e+00, double* %188, align 8
  store double 1.000000e+00, double* %190, align 8
  %191 = load double, double* %sign, align 8
  %192 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %193 = bitcast %Tuple* %192 to { %Array*, %Array*, double }*
  %194 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %193, i32 0, i32 0
  %195 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %193, i32 0, i32 1
  %196 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %193, i32 0, i32 2
  store %Array* %165, %Array** %194, align 8
  store %Array* %174, %Array** %195, align 8
  store double %191, double* %196, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %120, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  ret { %Array*, %Array*, double }* %193

test2__1:                                         ; preds = %condContinue__1
  %197 = icmp sgt i64 %q1, %r1
  br i1 %197, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %test2__1
  %198 = icmp sgt i64 %q1, %s1
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %test2__1
  %199 = phi i1 [ %198, %condTrue__2 ], [ %197, %test2__1 ]
  br i1 %199, label %then2__1, label %else__2

then2__1:                                         ; preds = %condContinue__2
  %200 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 0)
  %202 = bitcast i8* %201 to i64*
  %203 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 1)
  %204 = bitcast i8* %203 to i64*
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 2)
  %206 = bitcast i8* %205 to i64*
  %207 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 3)
  %208 = bitcast i8* %207 to i64*
  store i64 %p1, i64* %202, align 4
  store i64 %r1, i64* %204, align 4
  store i64 %s1, i64* %206, align 4
  store i64 %q1, i64* %208, align 4
  %209 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %210 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %209, i64 0)
  %211 = bitcast i8* %210 to double*
  %212 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %209, i64 1)
  %213 = bitcast i8* %212 to double*
  %214 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %209, i64 2)
  %215 = bitcast i8* %214 to double*
  %216 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %209, i64 3)
  %217 = bitcast i8* %216 to double*
  %218 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %209, i64 4)
  %219 = bitcast i8* %218 to double*
  %220 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %209, i64 5)
  %221 = bitcast i8* %220 to double*
  %222 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %209, i64 6)
  %223 = bitcast i8* %222 to double*
  %224 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %209, i64 7)
  %225 = bitcast i8* %224 to double*
  store double 1.000000e+00, double* %211, align 8
  store double 1.000000e+00, double* %213, align 8
  store double -1.000000e+00, double* %215, align 8
  store double 1.000000e+00, double* %217, align 8
  store double -1.000000e+00, double* %219, align 8
  store double 1.000000e+00, double* %221, align 8
  store double -1.000000e+00, double* %223, align 8
  store double -1.000000e+00, double* %225, align 8
  %226 = load double, double* %sign, align 8
  %227 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %228 = bitcast %Tuple* %227 to { %Array*, %Array*, double }*
  %229 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %228, i32 0, i32 0
  %230 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %228, i32 0, i32 1
  %231 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %228, i32 0, i32 2
  store %Array* %200, %Array** %229, align 8
  store %Array* %209, %Array** %230, align 8
  store double %226, double* %231, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %120, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  ret { %Array*, %Array*, double }* %228

else__2:                                          ; preds = %condContinue__2
  %232 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @7, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %120, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__fail(%String* %232)
  unreachable

continue__4:                                      ; No predecessors!
  unreachable
}

define internal %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %9 = icmp slt i64 %0, %8
  br i1 %9, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %8, %condFalse__1 ]
  %10 = icmp eq i64 %nElements, 0
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %12 = sub i64 %0, 1
  br label %header__2

continue__1:                                      ; preds = %condContinue__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %14 = bitcast i8* %13 to %Array**
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %17 = bitcast i8* %16 to double*
  %18 = load double, double* %17, align 8
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double }* getelementptr ({ %Array*, double }, { %Array*, double }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, double }*
  %21 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %20, i32 0, i32 1
  store %Array* %15, %Array** %21, align 8
  store double %18, double* %22, align 8
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %24 = sub i64 %nElements, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %25 = phi i64 [ 0, %then0__1 ], [ %30, %exiting__2 ]
  %26 = icmp sle i64 %25, %12
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %25)
  %28 = bitcast i8* %27 to %Array**
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %11

header__3:                                        ; preds = %exiting__3, %continue__1
  %31 = phi i64 [ 0, %continue__1 ], [ %36, %exiting__3 ]
  %32 = icmp sle i64 %31, %24
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, double }**
  store { %Array*, double }* %20, { %Array*, double }** %34, align 8
  %35 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %36 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %23, %Array** %output, align 8
  %37 = sub i64 %nElements, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %38 = phi i64 [ 0, %exit__3 ], [ %46, %exiting__4 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %38)
  %41 = bitcast i8* %40 to { %Array*, double }**
  %42 = load { %Array*, double }*, { %Array*, double }** %41, align 8
  %43 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %42, i32 0, i32 0
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 1)
  %45 = bitcast { %Array*, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %38, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %47 = sub i64 %nElements, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idxElement = phi i64 [ 1, %exit__4 ], [ %67, %exiting__5 ]
  %48 = icmp sle i64 %idxElement, %47
  br i1 %48, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  %50 = call %Array* @__quantum__rt__array_copy(%Array* %49, i1 false)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %52 = bitcast i8* %51 to %Array**
  %53 = load %Array*, %Array** %52, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 1)
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %55 = bitcast i8* %54 to double*
  %56 = load double, double* %55, align 8
  %57 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double }* getelementptr ({ %Array*, double }, { %Array*, double }* null, i32 1) to i64))
  %58 = bitcast %Tuple* %57 to { %Array*, double }*
  %59 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %58, i32 0, i32 0
  %60 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %58, i32 0, i32 1
  store %Array* %53, %Array** %59, align 8
  store double %56, double* %60, align 8
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 %idxElement)
  %62 = bitcast i8* %61 to { %Array*, double }**
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 1)
  %63 = load { %Array*, double }*, { %Array*, double }** %62, align 8
  %64 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %63, i32 0, i32 0
  %65 = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  %66 = bitcast { %Array*, double }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %66, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 -1)
  store { %Array*, double }* %58, { %Array*, double }** %62, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  store %Array* %50, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %67 = add i64 %idxElement, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %68 = load %Array*, %Array** %output, align 8
  %69 = load %Array*, %Array** %21, align 8
  %70 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %71 = phi i64 [ 0, %exit__5 ], [ %76, %exiting__6 ]
  %72 = icmp sle i64 %71, %70
  br i1 %72, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %71)
  %74 = bitcast i8* %73 to %Array**
  %75 = load %Array*, %Array** %74, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %75, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %76 = add i64 %71, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %77 = call i64 @__quantum__rt__array_get_size_1d(%Array* %68)
  %78 = sub i64 %77, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %79 = phi i64 [ 0, %exit__6 ], [ %87, %exiting__7 ]
  %80 = icmp sle i64 %79, %78
  br i1 %80, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 %79)
  %82 = bitcast i8* %81 to { %Array*, double }**
  %83 = load { %Array*, double }*, { %Array*, double }** %82, align 8
  %84 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %83, i32 0, i32 0
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %85, i32 -1)
  %86 = bitcast { %Array*, double }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %87 = add i64 %79, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %68, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  ret %Array* %68
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %nFermions, %Array* %idxFermions, %Array* %pauliReplacements) {
entry:
  %pauliString = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliReplacements, i32 1)
  %0 = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliZString__body(i64 %nFermions, %Array* %idxFermions)
  store %Array* %0, %Array** %pauliString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  %1 = call %Range @Microsoft__Quantum__Arrays___f18da7cbe4e940478813d7485ea738db_IndexRange__body(%Array* %idxFermions)
  %2 = extractvalue %Range %1, 0
  %3 = extractvalue %Range %1, 1
  %4 = extractvalue %Range %1, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %5 = icmp sgt i64 %3, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %2, %preheader__1 ], [ %17, %exiting__1 ]
  %6 = icmp sle i64 %idx, %4
  %7 = icmp sge i64 %idx, %4
  %8 = select i1 %5, i1 %6, i1 %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %idx)
  %10 = bitcast i8* %9 to i64*
  %idxFermion = load i64, i64* %10, align 4
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauliReplacements, i64 %idx)
  %12 = bitcast i8* %11 to i2*
  %op = load i2, i2* %12, align 1
  %13 = load %Array*, %Array** %pauliString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 -1)
  %14 = call %Array* @__quantum__rt__array_copy(%Array* %13, i1 false)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %idxFermion)
  %16 = bitcast i8* %15 to i2*
  store i2 %op, i2* %16, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  store %Array* %14, %Array** %pauliString, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %idx, %3
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = load %Array*, %Array** %pauliString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliReplacements, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  ret %Array* %18
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQRSTerm____adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__p__ = load i64, i64* %8, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %__qsVar4__q__ = load i64, i64* %10, align 4
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %12 = bitcast i8* %11 to i64*
  %__qsVar5__r__ = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %14 = bitcast i8* %13 to i64*
  %__qsVar6__s__ = load i64, i64* %14, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16, align 8
  %18 = fmul double 1.250000e-01, %17
  %__qsVar7__angle__ = fmul double %18, %stepSize
  %19 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %19, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %entry
  %20 = icmp eq i64 %__qsVar3__p__, %__qsVar5__r__
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %entry
  %21 = phi i1 [ %19, %entry ], [ %20, %condFalse__1 ]
  br i1 %21, label %condContinue__2, label %condFalse__2

condFalse__2:                                     ; preds = %condContinue__1
  %22 = icmp eq i64 %__qsVar3__p__, %__qsVar6__s__
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condContinue__1
  %23 = phi i1 [ %21, %condContinue__1 ], [ %22, %condFalse__2 ]
  br i1 %23, label %condContinue__3, label %condFalse__3

condFalse__3:                                     ; preds = %condContinue__2
  %24 = icmp eq i64 %__qsVar4__q__, %__qsVar5__r__
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condContinue__2
  %25 = phi i1 [ %23, %condContinue__2 ], [ %24, %condFalse__3 ]
  br i1 %25, label %condContinue__4, label %condFalse__4

condFalse__4:                                     ; preds = %condContinue__3
  %26 = icmp eq i64 %__qsVar4__q__, %__qsVar6__s__
  br label %condContinue__4

condContinue__4:                                  ; preds = %condFalse__4, %condContinue__3
  %27 = phi i1 [ %25, %condContinue__3 ], [ %26, %condFalse__4 ]
  br i1 %27, label %condContinue__5, label %condFalse__5

condFalse__5:                                     ; preds = %condContinue__4
  %28 = icmp eq i64 %__qsVar5__r__, %__qsVar6__s__
  br label %condContinue__5

condContinue__5:                                  ; preds = %condFalse__5, %condContinue__4
  %29 = phi i1 [ %27, %condContinue__4 ], [ %28, %condFalse__5 ]
  br i1 %29, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__5
  %30 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @0, i32 0, i32 0))
  %31 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %32 = call %String* @__quantum__rt__string_concatenate(%String* %30, %String* %31)
  call void @__quantum__rt__string_update_reference_count(%String* %30, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %31, i32 -1)
  %33 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %34 = call %String* @__quantum__rt__string_concatenate(%String* %32, %String* %33)
  call void @__quantum__rt__string_update_reference_count(%String* %32, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %33, i32 -1)
  %35 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  %37 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i32 -1)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar5__r__)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  %41 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar6__s__)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  %45 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__fail(%String* %46)
  unreachable

continue__1:                                      ; preds = %condContinue__5
  %47 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 0)
  %49 = bitcast i8* %48 to i2*
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 1)
  %51 = bitcast i8* %50 to i2*
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 2)
  %53 = bitcast i8* %52 to i2*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 3)
  %55 = bitcast i8* %54 to i2*
  store i2 -1, i2* %49, align 1
  store i2 -1, i2* %51, align 1
  store i2 1, i2* %53, align 1
  store i2 -1, i2* %55, align 1
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to i2*
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 1)
  %60 = bitcast i8* %59 to i2*
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 2)
  %62 = bitcast i8* %61 to i2*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 3)
  %64 = bitcast i8* %63 to i2*
  store i2 1, i2* %58, align 1
  store i2 1, i2* %60, align 1
  store i2 1, i2* %62, align 1
  store i2 -1, i2* %64, align 1
  %65 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 0)
  %67 = bitcast i8* %66 to i2*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 1)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 2)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 3)
  %73 = bitcast i8* %72 to i2*
  store i2 1, i2* %67, align 1
  store i2 -1, i2* %69, align 1
  store i2 -1, i2* %71, align 1
  store i2 -1, i2* %73, align 1
  %74 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 0)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 1)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 2)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 3)
  %82 = bitcast i8* %81 to i2*
  store i2 -1, i2* %76, align 1
  store i2 1, i2* %78, align 1
  store i2 -1, i2* %80, align 1
  store i2 -1, i2* %82, align 1
  %83 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 0)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 1)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 2)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 3)
  %91 = bitcast i8* %90 to i2*
  store i2 1, i2* %85, align 1
  store i2 -1, i2* %87, align 1
  store i2 1, i2* %89, align 1
  store i2 1, i2* %91, align 1
  %92 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 0)
  %94 = bitcast i8* %93 to i2*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 1)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 2)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 3)
  %100 = bitcast i8* %99 to i2*
  store i2 -1, i2* %94, align 1
  store i2 1, i2* %96, align 1
  store i2 1, i2* %98, align 1
  store i2 1, i2* %100, align 1
  %101 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 0)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 1)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 2)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 3)
  %109 = bitcast i8* %108 to i2*
  store i2 -1, i2* %103, align 1
  store i2 -1, i2* %105, align 1
  store i2 -1, i2* %107, align 1
  store i2 1, i2* %109, align 1
  %110 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 0)
  %112 = bitcast i8* %111 to i2*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 1)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 2)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %110, i64 3)
  %118 = bitcast i8* %117 to i2*
  store i2 1, i2* %112, align 1
  store i2 1, i2* %114, align 1
  store i2 -1, i2* %116, align 1
  store i2 1, i2* %118, align 1
  %__qsVar10__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 0)
  %120 = bitcast i8* %119 to %Array**
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 1)
  %122 = bitcast i8* %121 to %Array**
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 2)
  %124 = bitcast i8* %123 to %Array**
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 3)
  %126 = bitcast i8* %125 to %Array**
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 4)
  %128 = bitcast i8* %127 to %Array**
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 5)
  %130 = bitcast i8* %129 to %Array**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 6)
  %132 = bitcast i8* %131 to %Array**
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 7)
  %134 = bitcast i8* %133 to %Array**
  store %Array* %47, %Array** %120, align 8
  store %Array* %56, %Array** %122, align 8
  store %Array* %65, %Array** %124, align 8
  store %Array* %74, %Array** %126, align 8
  store %Array* %83, %Array** %128, align 8
  store %Array* %92, %Array** %130, align 8
  store %Array* %101, %Array** %132, align 8
  store %Array* %110, %Array** %134, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %135 = phi i64 [ 0, %continue__1 ], [ %140, %exiting__1 ]
  %136 = icmp sle i64 %135, 7
  br i1 %136, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %135)
  %138 = bitcast i8* %137 to %Array**
  %139 = load %Array*, %Array** %138, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %139, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %140 = add i64 %135, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i32 1)
  %141 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 0)
  %143 = bitcast i8* %142 to i64*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 1)
  %145 = bitcast i8* %144 to i64*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 2)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 3)
  %149 = bitcast i8* %148 to i64*
  store i64 %__qsVar3__p__, i64* %143, align 4
  store i64 %__qsVar4__q__, i64* %145, align 4
  store i64 %__qsVar5__r__, i64* %147, align 4
  store i64 %__qsVar6__s__, i64* %149, align 4
  %150 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %141)
  %151 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i32 0, i32 0
  %__qsVar11__sortedIndices__ = load %Array*, %Array** %151, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i32 1)
  %152 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i32 0, i32 1
  %__qsVar12__signs__ = load %Array*, %Array** %152, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i32 1)
  %153 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i32 0, i32 2
  %__qsVar13__globalSign__ = load double, double* %153, align 8
  %154 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %155 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %156 = call i64 @__quantum__rt__array_get_size_1d(%Array* %155)
  %157 = sub i64 %156, 1
  %158 = insertvalue %Range zeroinitializer, i64 %157, 0
  %159 = insertvalue %Range %158, i64 -1, 1
  %160 = insertvalue %Range %159, i64 0, 2
  %161 = call %Array* @__quantum__rt__array_slice_1d(%Array* %154, %Range %160, i1 true)
  %162 = call i64 @__quantum__rt__array_get_size_1d(%Array* %161)
  %163 = sub i64 %162, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %164 = phi i64 [ 0, %exit__1 ], [ %173, %exiting__2 ]
  %165 = icmp sle i64 %164, %163
  br i1 %165, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %161, i64 %164)
  %167 = bitcast i8* %166 to { %Array*, double }**
  %168 = load { %Array*, double }*, { %Array*, double }** %167, align 8
  %169 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %168, i32 0, i32 0
  %__qsVar14__op__ = load %Array*, %Array** %169, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i32 1)
  %170 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %168, i32 0, i32 1
  %__qsVar15__sign__ = load double, double* %170, align 8
  %171 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar16__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %171, %Array* %__qsVar11__sortedIndices__, %Array* %__qsVar14__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 1)
  %172 = fmul double %__qsVar13__globalSign__, %__qsVar15__sign__
  %theta = fmul double %172, %__qsVar7__angle__
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %__qsVar16__pauliString__, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %173 = add i64 %164, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %174 = phi i64 [ 0, %exit__2 ], [ %179, %exiting__3 ]
  %175 = icmp sle i64 %174, 7
  br i1 %175, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %176 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %174)
  %177 = bitcast i8* %176 to %Array**
  %178 = load %Array*, %Array** %177, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %178, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %179 = add i64 %174, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %180 = phi i64 [ 0, %exit__3 ], [ %185, %exiting__4 ]
  %181 = icmp sle i64 %180, 7
  br i1 %181, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %182 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %180)
  %183 = bitcast i8* %182 to %Array**
  %184 = load %Array*, %Array** %183, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %184, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %185 = add i64 %180, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %141, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__sortedIndices__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar12__signs__, i32 -1)
  %186 = bitcast { %Array*, %Array*, double }* %150 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %186, i32 -1)
  %187 = call i64 @__quantum__rt__array_get_size_1d(%Array* %154)
  %188 = sub i64 %187, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %189 = phi i64 [ 0, %exit__4 ], [ %197, %exiting__5 ]
  %190 = icmp sle i64 %189, %188
  br i1 %190, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %191 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %189)
  %192 = bitcast i8* %191 to { %Array*, double }**
  %193 = load { %Array*, double }*, { %Array*, double }** %192, align 8
  %194 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %193, i32 0, i32 0
  %195 = load %Array*, %Array** %194, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %195, i32 -1)
  %196 = bitcast { %Array*, double }* %193 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %196, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %197 = add i64 %189, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %154, i32 -1)
  %198 = sub i64 %156, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %199 = phi i64 [ 0, %exit__5 ], [ %207, %exiting__6 ]
  %200 = icmp sle i64 %199, %198
  br i1 %200, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 %199)
  %202 = bitcast i8* %201 to { %Array*, double }**
  %203 = load { %Array*, double }*, { %Array*, double }** %202, align 8
  %204 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %203, i32 0, i32 0
  %205 = load %Array*, %Array** %204, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %205, i32 -1)
  %206 = bitcast { %Array*, double }* %203 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %206, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %207 = add i64 %199, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %155, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %161, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQRSTerm____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %p = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %q = load i64, i64* %14, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %16 = bitcast i8* %15 to i64*
  %r = load i64, i64* %16, align 4
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %18 = bitcast i8* %17 to i64*
  %s = load i64, i64* %18, align 4
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20, align 8
  %22 = fmul double 1.250000e-01, %21
  %angle = fmul double %22, %stepSize
  %23 = icmp eq i64 %p, %q
  br i1 %23, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %entry
  %24 = icmp eq i64 %p, %r
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %entry
  %25 = phi i1 [ %23, %entry ], [ %24, %condFalse__1 ]
  br i1 %25, label %condContinue__2, label %condFalse__2

condFalse__2:                                     ; preds = %condContinue__1
  %26 = icmp eq i64 %p, %s
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condContinue__1
  %27 = phi i1 [ %25, %condContinue__1 ], [ %26, %condFalse__2 ]
  br i1 %27, label %condContinue__3, label %condFalse__3

condFalse__3:                                     ; preds = %condContinue__2
  %28 = icmp eq i64 %q, %r
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condContinue__2
  %29 = phi i1 [ %27, %condContinue__2 ], [ %28, %condFalse__3 ]
  br i1 %29, label %condContinue__4, label %condFalse__4

condFalse__4:                                     ; preds = %condContinue__3
  %30 = icmp eq i64 %q, %s
  br label %condContinue__4

condContinue__4:                                  ; preds = %condFalse__4, %condContinue__3
  %31 = phi i1 [ %29, %condContinue__3 ], [ %30, %condFalse__4 ]
  br i1 %31, label %condContinue__5, label %condFalse__5

condFalse__5:                                     ; preds = %condContinue__4
  %32 = icmp eq i64 %r, %s
  br label %condContinue__5

condContinue__5:                                  ; preds = %condFalse__5, %condContinue__4
  %33 = phi i1 [ %31, %condContinue__4 ], [ %32, %condFalse__5 ]
  br i1 %33, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__5
  %34 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @0, i32 0, i32 0))
  %35 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  %37 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i32 -1)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  %41 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %r)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  %45 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  %47 = call %String* @__quantum__rt__int_to_string(i64 %s)
  %48 = call %String* @__quantum__rt__string_concatenate(%String* %46, %String* %47)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  %49 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  %50 = call %String* @__quantum__rt__string_concatenate(%String* %48, %String* %49)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %49, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %50)
  unreachable

continue__1:                                      ; preds = %condContinue__5
  %51 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 0)
  %53 = bitcast i8* %52 to i2*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 1)
  %55 = bitcast i8* %54 to i2*
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 2)
  %57 = bitcast i8* %56 to i2*
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 3)
  %59 = bitcast i8* %58 to i2*
  store i2 -1, i2* %53, align 1
  store i2 -1, i2* %55, align 1
  store i2 1, i2* %57, align 1
  store i2 -1, i2* %59, align 1
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i2*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 1)
  %64 = bitcast i8* %63 to i2*
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 2)
  %66 = bitcast i8* %65 to i2*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 3)
  %68 = bitcast i8* %67 to i2*
  store i2 1, i2* %62, align 1
  store i2 1, i2* %64, align 1
  store i2 1, i2* %66, align 1
  store i2 -1, i2* %68, align 1
  %69 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 0)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 1)
  %73 = bitcast i8* %72 to i2*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 2)
  %75 = bitcast i8* %74 to i2*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 3)
  %77 = bitcast i8* %76 to i2*
  store i2 1, i2* %71, align 1
  store i2 -1, i2* %73, align 1
  store i2 -1, i2* %75, align 1
  store i2 -1, i2* %77, align 1
  %78 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 0)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 1)
  %82 = bitcast i8* %81 to i2*
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 2)
  %84 = bitcast i8* %83 to i2*
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 3)
  %86 = bitcast i8* %85 to i2*
  store i2 -1, i2* %80, align 1
  store i2 1, i2* %82, align 1
  store i2 -1, i2* %84, align 1
  store i2 -1, i2* %86, align 1
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 0)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 1)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 2)
  %93 = bitcast i8* %92 to i2*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 3)
  %95 = bitcast i8* %94 to i2*
  store i2 1, i2* %89, align 1
  store i2 -1, i2* %91, align 1
  store i2 1, i2* %93, align 1
  store i2 1, i2* %95, align 1
  %96 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 1)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 2)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 3)
  %104 = bitcast i8* %103 to i2*
  store i2 -1, i2* %98, align 1
  store i2 1, i2* %100, align 1
  store i2 1, i2* %102, align 1
  store i2 1, i2* %104, align 1
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 1)
  %109 = bitcast i8* %108 to i2*
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 2)
  %111 = bitcast i8* %110 to i2*
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 3)
  %113 = bitcast i8* %112 to i2*
  store i2 -1, i2* %107, align 1
  store i2 -1, i2* %109, align 1
  store i2 -1, i2* %111, align 1
  store i2 1, i2* %113, align 1
  %114 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 0)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 1)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 2)
  %120 = bitcast i8* %119 to i2*
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 3)
  %122 = bitcast i8* %121 to i2*
  store i2 1, i2* %116, align 1
  store i2 1, i2* %118, align 1
  store i2 -1, i2* %120, align 1
  store i2 1, i2* %122, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %124 = bitcast i8* %123 to %Array**
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %126 = bitcast i8* %125 to %Array**
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %128 = bitcast i8* %127 to %Array**
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %130 = bitcast i8* %129 to %Array**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %132 = bitcast i8* %131 to %Array**
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %134 = bitcast i8* %133 to %Array**
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %136 = bitcast i8* %135 to %Array**
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %138 = bitcast i8* %137 to %Array**
  store %Array* %51, %Array** %124, align 8
  store %Array* %60, %Array** %126, align 8
  store %Array* %69, %Array** %128, align 8
  store %Array* %78, %Array** %130, align 8
  store %Array* %87, %Array** %132, align 8
  store %Array* %96, %Array** %134, align 8
  store %Array* %105, %Array** %136, align 8
  store %Array* %114, %Array** %138, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %139 = phi i64 [ 0, %continue__1 ], [ %144, %exiting__1 ]
  %140 = icmp sle i64 %139, 7
  br i1 %140, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %139)
  %142 = bitcast i8* %141 to %Array**
  %143 = load %Array*, %Array** %142, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %144 = add i64 %139, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %145 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 0)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 1)
  %149 = bitcast i8* %148 to i64*
  %150 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 2)
  %151 = bitcast i8* %150 to i64*
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 3)
  %153 = bitcast i8* %152 to i64*
  store i64 %p, i64* %147, align 4
  store i64 %q, i64* %149, align 4
  store i64 %r, i64* %151, align 4
  store i64 %s, i64* %153, align 4
  %154 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %145)
  %155 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i32 0, i32 0
  %sortedIndices = load %Array*, %Array** %155, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i32 1)
  %156 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i32 0, i32 1
  %signs = load %Array*, %Array** %156, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 1)
  %157 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i32 0, i32 2
  %globalSign = load double, double* %157, align 8
  %158 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %ops, %Array* %signs)
  %159 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %160 = sub i64 %159, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %161 = phi i64 [ 0, %exit__1 ], [ %175, %exiting__2 ]
  %162 = icmp sle i64 %161, %160
  br i1 %162, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %161)
  %164 = bitcast i8* %163 to { %Array*, double }**
  %165 = load { %Array*, double }*, { %Array*, double }** %164, align 8
  %166 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %165, i32 0, i32 0
  %op = load %Array*, %Array** %166, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %167 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %165, i32 0, i32 1
  %sign = load double, double* %167, align 8
  %168 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %168, %Array* %sortedIndices, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %169 = fmul double %globalSign, %sign
  %theta = fmul double %169, %angle
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %170 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %171 = bitcast %Tuple* %170 to { %Array*, double, %Array* }*
  %172 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i32 0, i32 0
  %173 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i32 0, i32 1
  %174 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i32 0, i32 2
  store %Array* %pauliString, %Array** %172, align 8
  store double %theta, double* %173, align 8
  store %Array* %qubits, %Array** %174, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %171)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %170, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %175 = add i64 %161, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %176 = phi i64 [ 0, %exit__2 ], [ %181, %exiting__3 ]
  %177 = icmp sle i64 %176, 7
  br i1 %177, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %176)
  %179 = bitcast i8* %178 to %Array**
  %180 = load %Array*, %Array** %179, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %180, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %181 = add i64 %176, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %182 = phi i64 [ 0, %exit__3 ], [ %187, %exiting__4 ]
  %183 = icmp sle i64 %182, 7
  br i1 %183, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %184 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %182)
  %185 = bitcast i8* %184 to %Array**
  %186 = load %Array*, %Array** %185, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %186, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %187 = add i64 %182, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %145, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %sortedIndices, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i32 -1)
  %188 = bitcast { %Array*, %Array*, double }* %154 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %188, i32 -1)
  %189 = sub i64 %159, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %190 = phi i64 [ 0, %exit__4 ], [ %198, %exiting__5 ]
  %191 = icmp sle i64 %190, %189
  br i1 %191, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %190)
  %193 = bitcast i8* %192 to { %Array*, double }**
  %194 = load { %Array*, double }*, { %Array*, double }** %193, align 8
  %195 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %194, i32 0, i32 0
  %196 = load %Array*, %Array** %195, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i32 -1)
  %197 = bitcast { %Array*, double }* %194 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %197, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %198 = add i64 %190, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %158, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQRSTerm____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__p__ = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %__qsVar4__q__ = load i64, i64* %14, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %16 = bitcast i8* %15 to i64*
  %__qsVar5__r__ = load i64, i64* %16, align 4
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %18 = bitcast i8* %17 to i64*
  %__qsVar6__s__ = load i64, i64* %18, align 4
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20, align 8
  %22 = fmul double 1.250000e-01, %21
  %__qsVar7__angle__ = fmul double %22, %stepSize
  %23 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %23, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %entry
  %24 = icmp eq i64 %__qsVar3__p__, %__qsVar5__r__
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %entry
  %25 = phi i1 [ %23, %entry ], [ %24, %condFalse__1 ]
  br i1 %25, label %condContinue__2, label %condFalse__2

condFalse__2:                                     ; preds = %condContinue__1
  %26 = icmp eq i64 %__qsVar3__p__, %__qsVar6__s__
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condContinue__1
  %27 = phi i1 [ %25, %condContinue__1 ], [ %26, %condFalse__2 ]
  br i1 %27, label %condContinue__3, label %condFalse__3

condFalse__3:                                     ; preds = %condContinue__2
  %28 = icmp eq i64 %__qsVar4__q__, %__qsVar5__r__
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condContinue__2
  %29 = phi i1 [ %27, %condContinue__2 ], [ %28, %condFalse__3 ]
  br i1 %29, label %condContinue__4, label %condFalse__4

condFalse__4:                                     ; preds = %condContinue__3
  %30 = icmp eq i64 %__qsVar4__q__, %__qsVar6__s__
  br label %condContinue__4

condContinue__4:                                  ; preds = %condFalse__4, %condContinue__3
  %31 = phi i1 [ %29, %condContinue__3 ], [ %30, %condFalse__4 ]
  br i1 %31, label %condContinue__5, label %condFalse__5

condFalse__5:                                     ; preds = %condContinue__4
  %32 = icmp eq i64 %__qsVar5__r__, %__qsVar6__s__
  br label %condContinue__5

condContinue__5:                                  ; preds = %condFalse__5, %condContinue__4
  %33 = phi i1 [ %31, %condContinue__4 ], [ %32, %condFalse__5 ]
  br i1 %33, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__5
  %34 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @0, i32 0, i32 0))
  %35 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  %37 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i32 -1)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  %41 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar5__r__)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  %45 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  %47 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar6__s__)
  %48 = call %String* @__quantum__rt__string_concatenate(%String* %46, %String* %47)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  %49 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  %50 = call %String* @__quantum__rt__string_concatenate(%String* %48, %String* %49)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %49, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__fail(%String* %50)
  unreachable

continue__1:                                      ; preds = %condContinue__5
  %51 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 0)
  %53 = bitcast i8* %52 to i2*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 1)
  %55 = bitcast i8* %54 to i2*
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 2)
  %57 = bitcast i8* %56 to i2*
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 3)
  %59 = bitcast i8* %58 to i2*
  store i2 -1, i2* %53, align 1
  store i2 -1, i2* %55, align 1
  store i2 1, i2* %57, align 1
  store i2 -1, i2* %59, align 1
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i2*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 1)
  %64 = bitcast i8* %63 to i2*
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 2)
  %66 = bitcast i8* %65 to i2*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 3)
  %68 = bitcast i8* %67 to i2*
  store i2 1, i2* %62, align 1
  store i2 1, i2* %64, align 1
  store i2 1, i2* %66, align 1
  store i2 -1, i2* %68, align 1
  %69 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 0)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 1)
  %73 = bitcast i8* %72 to i2*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 2)
  %75 = bitcast i8* %74 to i2*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 3)
  %77 = bitcast i8* %76 to i2*
  store i2 1, i2* %71, align 1
  store i2 -1, i2* %73, align 1
  store i2 -1, i2* %75, align 1
  store i2 -1, i2* %77, align 1
  %78 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 0)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 1)
  %82 = bitcast i8* %81 to i2*
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 2)
  %84 = bitcast i8* %83 to i2*
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 3)
  %86 = bitcast i8* %85 to i2*
  store i2 -1, i2* %80, align 1
  store i2 1, i2* %82, align 1
  store i2 -1, i2* %84, align 1
  store i2 -1, i2* %86, align 1
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 0)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 1)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 2)
  %93 = bitcast i8* %92 to i2*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 3)
  %95 = bitcast i8* %94 to i2*
  store i2 1, i2* %89, align 1
  store i2 -1, i2* %91, align 1
  store i2 1, i2* %93, align 1
  store i2 1, i2* %95, align 1
  %96 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 1)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 2)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 3)
  %104 = bitcast i8* %103 to i2*
  store i2 -1, i2* %98, align 1
  store i2 1, i2* %100, align 1
  store i2 1, i2* %102, align 1
  store i2 1, i2* %104, align 1
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 1)
  %109 = bitcast i8* %108 to i2*
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 2)
  %111 = bitcast i8* %110 to i2*
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 3)
  %113 = bitcast i8* %112 to i2*
  store i2 -1, i2* %107, align 1
  store i2 -1, i2* %109, align 1
  store i2 -1, i2* %111, align 1
  store i2 1, i2* %113, align 1
  %114 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 0)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 1)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 2)
  %120 = bitcast i8* %119 to i2*
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 3)
  %122 = bitcast i8* %121 to i2*
  store i2 1, i2* %116, align 1
  store i2 1, i2* %118, align 1
  store i2 -1, i2* %120, align 1
  store i2 1, i2* %122, align 1
  %__qsVar10__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 0)
  %124 = bitcast i8* %123 to %Array**
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 1)
  %126 = bitcast i8* %125 to %Array**
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 2)
  %128 = bitcast i8* %127 to %Array**
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 3)
  %130 = bitcast i8* %129 to %Array**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 4)
  %132 = bitcast i8* %131 to %Array**
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 5)
  %134 = bitcast i8* %133 to %Array**
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 6)
  %136 = bitcast i8* %135 to %Array**
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 7)
  %138 = bitcast i8* %137 to %Array**
  store %Array* %51, %Array** %124, align 8
  store %Array* %60, %Array** %126, align 8
  store %Array* %69, %Array** %128, align 8
  store %Array* %78, %Array** %130, align 8
  store %Array* %87, %Array** %132, align 8
  store %Array* %96, %Array** %134, align 8
  store %Array* %105, %Array** %136, align 8
  store %Array* %114, %Array** %138, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %139 = phi i64 [ 0, %continue__1 ], [ %144, %exiting__1 ]
  %140 = icmp sle i64 %139, 7
  br i1 %140, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %139)
  %142 = bitcast i8* %141 to %Array**
  %143 = load %Array*, %Array** %142, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %144 = add i64 %139, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i32 1)
  %145 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 0)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 1)
  %149 = bitcast i8* %148 to i64*
  %150 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 2)
  %151 = bitcast i8* %150 to i64*
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 3)
  %153 = bitcast i8* %152 to i64*
  store i64 %__qsVar3__p__, i64* %147, align 4
  store i64 %__qsVar4__q__, i64* %149, align 4
  store i64 %__qsVar5__r__, i64* %151, align 4
  store i64 %__qsVar6__s__, i64* %153, align 4
  %154 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %145)
  %155 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i32 0, i32 0
  %__qsVar11__sortedIndices__ = load %Array*, %Array** %155, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i32 1)
  %156 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i32 0, i32 1
  %__qsVar12__signs__ = load %Array*, %Array** %156, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i32 1)
  %157 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i32 0, i32 2
  %__qsVar13__globalSign__ = load double, double* %157, align 8
  %158 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %159 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %160 = call i64 @__quantum__rt__array_get_size_1d(%Array* %159)
  %161 = sub i64 %160, 1
  %162 = insertvalue %Range zeroinitializer, i64 %161, 0
  %163 = insertvalue %Range %162, i64 -1, 1
  %164 = insertvalue %Range %163, i64 0, 2
  %165 = call %Array* @__quantum__rt__array_slice_1d(%Array* %158, %Range %164, i1 true)
  %166 = call i64 @__quantum__rt__array_get_size_1d(%Array* %165)
  %167 = sub i64 %166, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %168 = phi i64 [ 0, %exit__1 ], [ %182, %exiting__2 ]
  %169 = icmp sle i64 %168, %167
  br i1 %169, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 %168)
  %171 = bitcast i8* %170 to { %Array*, double }**
  %172 = load { %Array*, double }*, { %Array*, double }** %171, align 8
  %173 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %172, i32 0, i32 0
  %__qsVar14__op__ = load %Array*, %Array** %173, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i32 1)
  %174 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %172, i32 0, i32 1
  %__qsVar15__sign__ = load double, double* %174, align 8
  %175 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar16__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %175, %Array* %__qsVar11__sortedIndices__, %Array* %__qsVar14__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 1)
  %176 = fmul double %__qsVar13__globalSign__, %__qsVar15__sign__
  %theta = fmul double %176, %__qsVar7__angle__
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %177 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %178 = bitcast %Tuple* %177 to { %Array*, double, %Array* }*
  %179 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %178, i32 0, i32 0
  %180 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %178, i32 0, i32 1
  %181 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %178, i32 0, i32 2
  store %Array* %__qsVar16__pauliString__, %Array** %179, align 8
  store double %theta, double* %180, align 8
  store %Array* %qubits, %Array** %181, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %178)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %177, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %182 = add i64 %168, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %183 = phi i64 [ 0, %exit__2 ], [ %188, %exiting__3 ]
  %184 = icmp sle i64 %183, 7
  br i1 %184, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %185 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %183)
  %186 = bitcast i8* %185 to %Array**
  %187 = load %Array*, %Array** %186, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %187, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %188 = add i64 %183, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %189 = phi i64 [ 0, %exit__3 ], [ %194, %exiting__4 ]
  %190 = icmp sle i64 %189, 7
  br i1 %190, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %191 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %189)
  %192 = bitcast i8* %191 to %Array**
  %193 = load %Array*, %Array** %192, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %193, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %194 = add i64 %189, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %145, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__sortedIndices__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar12__signs__, i32 -1)
  %195 = bitcast { %Array*, %Array*, double }* %154 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %195, i32 -1)
  %196 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %197 = sub i64 %196, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %198 = phi i64 [ 0, %exit__4 ], [ %206, %exiting__5 ]
  %199 = icmp sle i64 %198, %197
  br i1 %199, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %200 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %198)
  %201 = bitcast i8* %200 to { %Array*, double }**
  %202 = load { %Array*, double }*, { %Array*, double }** %201, align 8
  %203 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %202, i32 0, i32 0
  %204 = load %Array*, %Array** %203, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %204, i32 -1)
  %205 = bitcast { %Array*, double }* %202 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %205, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %206 = add i64 %198, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %158, i32 -1)
  %207 = sub i64 %160, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %208 = phi i64 [ 0, %exit__5 ], [ %216, %exiting__6 ]
  %209 = icmp sle i64 %208, %207
  br i1 %209, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %210 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %159, i64 %208)
  %211 = bitcast i8* %210 to { %Array*, double }**
  %212 = load { %Array*, double }*, { %Array*, double }** %211, align 8
  %213 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %212, i32 0, i32 0
  %214 = load %Array*, %Array** %213, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %214, i32 -1)
  %215 = bitcast { %Array*, double }* %212 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %215, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %216 = add i64 %208, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %159, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %165, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQTerm____body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %p = load i64, i64* %8, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %q = load i64, i64* %10, align 4
  %11 = icmp eq i64 %p, %q
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @3, i32 0, i32 0))
  %13 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %12, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %12, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i32 -1)
  %15 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i32 -1)
  %17 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %20)
  unreachable

continue__1:                                      ; preds = %entry
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22, align 8
  %24 = fmul double 5.000000e-01, %23
  %angle = fmul double %24, %stepSize
  %25 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 0)
  %27 = bitcast i8* %26 to i2*
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 1)
  %29 = bitcast i8* %28 to i2*
  store i2 1, i2* %27, align 1
  store i2 -1, i2* %29, align 1
  %30 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 0)
  %32 = bitcast i8* %31 to i2*
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 1)
  %34 = bitcast i8* %33 to i2*
  store i2 -1, i2* %32, align 1
  store i2 1, i2* %34, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %36 = bitcast i8* %35 to %Array**
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %38 = bitcast i8* %37 to %Array**
  store %Array* %25, %Array** %36, align 8
  store %Array* %30, %Array** %38, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %39 = phi i64 [ 0, %continue__1 ], [ %44, %exiting__1 ]
  %40 = icmp sle i64 %39, 1
  br i1 %40, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %39)
  %42 = bitcast i8* %41 to %Array**
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %44 = add i64 %39, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %signs = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 0)
  %46 = bitcast i8* %45 to double*
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 1)
  %48 = bitcast i8* %47 to double*
  store double 1.000000e+00, double* %46, align 8
  store double -1.000000e+00, double* %48, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 1)
  %49 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %ops, %Array* %signs)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %52 = phi i64 [ 0, %exit__1 ], [ %60, %exiting__2 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { %Array*, double }**
  %56 = load { %Array*, double }*, { %Array*, double }** %55, align 8
  %57 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %56, i32 0, i32 0
  %op = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %58 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %56, i32 0, i32 1
  %sign = load double, double* %58, align 8
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %59, %Array* %idxFermions, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %theta = fmul double %sign, %angle
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %pauliString, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %60 = add i64 %52, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %61 = phi i64 [ 0, %exit__2 ], [ %66, %exiting__3 ]
  %62 = icmp sle i64 %61, 1
  br i1 %62, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %61)
  %64 = bitcast i8* %63 to %Array**
  %65 = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %66 = add i64 %61, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %67 = phi i64 [ 0, %exit__3 ], [ %72, %exiting__4 ]
  %68 = icmp sle i64 %67, 1
  br i1 %68, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %67)
  %70 = bitcast i8* %69 to %Array**
  %71 = load %Array*, %Array** %70, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %72 = add i64 %67, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i32 -1)
  %73 = sub i64 %50, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %74 = phi i64 [ 0, %exit__4 ], [ %82, %exiting__5 ]
  %75 = icmp sle i64 %74, %73
  br i1 %75, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %74)
  %77 = bitcast i8* %76 to { %Array*, double }**
  %78 = load { %Array*, double }*, { %Array*, double }** %77, align 8
  %79 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %78, i32 0, i32 0
  %80 = load %Array*, %Array** %79, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %80, i32 -1)
  %81 = bitcast { %Array*, double }* %78 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %81, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %82 = add i64 %74, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQTerm____adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__p__ = load i64, i64* %8, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %__qsVar4__q__ = load i64, i64* %10, align 4
  %11 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @3, i32 0, i32 0))
  %13 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %12, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %12, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i32 -1)
  %15 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i32 -1)
  %17 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__fail(%String* %20)
  unreachable

continue__1:                                      ; preds = %entry
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22, align 8
  %24 = fmul double 5.000000e-01, %23
  %__qsVar5__angle__ = fmul double %24, %stepSize
  %25 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 0)
  %27 = bitcast i8* %26 to i2*
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 1)
  %29 = bitcast i8* %28 to i2*
  store i2 1, i2* %27, align 1
  store i2 -1, i2* %29, align 1
  %30 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 0)
  %32 = bitcast i8* %31 to i2*
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 1)
  %34 = bitcast i8* %33 to i2*
  store i2 -1, i2* %32, align 1
  store i2 1, i2* %34, align 1
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %36 = bitcast i8* %35 to %Array**
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %38 = bitcast i8* %37 to %Array**
  store %Array* %25, %Array** %36, align 8
  store %Array* %30, %Array** %38, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %39 = phi i64 [ 0, %continue__1 ], [ %44, %exiting__1 ]
  %40 = icmp sle i64 %39, 1
  br i1 %40, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %39)
  %42 = bitcast i8* %41 to %Array**
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %44 = add i64 %39, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 1)
  %__qsVar7__signs__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 0)
  %46 = bitcast i8* %45 to double*
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 1)
  %48 = bitcast i8* %47 to double*
  store double 1.000000e+00, double* %46, align 8
  store double -1.000000e+00, double* %48, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i32 1)
  %49 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %50 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %51 = call i64 @__quantum__rt__array_get_size_1d(%Array* %50)
  %52 = sub i64 %51, 1
  %53 = insertvalue %Range zeroinitializer, i64 %52, 0
  %54 = insertvalue %Range %53, i64 -1, 1
  %55 = insertvalue %Range %54, i64 0, 2
  %56 = call %Array* @__quantum__rt__array_slice_1d(%Array* %49, %Range %55, i1 true)
  %57 = call i64 @__quantum__rt__array_get_size_1d(%Array* %56)
  %58 = sub i64 %57, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %59 = phi i64 [ 0, %exit__1 ], [ %67, %exiting__2 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %59)
  %62 = bitcast i8* %61 to { %Array*, double }**
  %63 = load { %Array*, double }*, { %Array*, double }** %62, align 8
  %64 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %63, i32 0, i32 0
  %__qsVar8__op__ = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 1)
  %65 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %63, i32 0, i32 1
  %__qsVar9__sign__ = load double, double* %65, align 8
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar10__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %66, %Array* %__qsVar2__idxFermions__, %Array* %__qsVar8__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 1)
  %theta = fmul double %__qsVar9__sign__, %__qsVar5__angle__
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %__qsVar10__pauliString__, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %67 = add i64 %59, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %68 = phi i64 [ 0, %exit__2 ], [ %73, %exiting__3 ]
  %69 = icmp sle i64 %68, 1
  br i1 %69, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %68)
  %71 = bitcast i8* %70 to %Array**
  %72 = load %Array*, %Array** %71, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %73 = add i64 %68, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %74 = phi i64 [ 0, %exit__3 ], [ %79, %exiting__4 ]
  %75 = icmp sle i64 %74, 1
  br i1 %75, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %74)
  %77 = bitcast i8* %76 to %Array**
  %78 = load %Array*, %Array** %77, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %79 = add i64 %74, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__signs__, i32 -1)
  %80 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %81 = sub i64 %80, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %82 = phi i64 [ 0, %exit__4 ], [ %90, %exiting__5 ]
  %83 = icmp sle i64 %82, %81
  br i1 %83, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %82)
  %85 = bitcast i8* %84 to { %Array*, double }**
  %86 = load { %Array*, double }*, { %Array*, double }** %85, align 8
  %87 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %86, i32 0, i32 0
  %88 = load %Array*, %Array** %87, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %88, i32 -1)
  %89 = bitcast { %Array*, double }* %86 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %89, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %90 = add i64 %82, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  %91 = sub i64 %51, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %92 = phi i64 [ 0, %exit__5 ], [ %100, %exiting__6 ]
  %93 = icmp sle i64 %92, %91
  br i1 %93, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 %92)
  %95 = bitcast i8* %94 to { %Array*, double }**
  %96 = load { %Array*, double }*, { %Array*, double }** %95, align 8
  %97 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %96, i32 0, i32 0
  %98 = load %Array*, %Array** %97, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %98, i32 -1)
  %99 = bitcast { %Array*, double }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %99, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %100 = add i64 %92, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQTerm____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %p = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %q = load i64, i64* %14, align 4
  %15 = icmp eq i64 %p, %q
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @3, i32 0, i32 0))
  %17 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  %23 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  %24 = call %String* @__quantum__rt__string_concatenate(%String* %22, %String* %23)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %24)
  unreachable

continue__1:                                      ; preds = %entry
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26, align 8
  %28 = fmul double 5.000000e-01, %27
  %angle = fmul double %28, %stepSize
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i2*
  store i2 1, i2* %31, align 1
  store i2 -1, i2* %33, align 1
  %34 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 0)
  %36 = bitcast i8* %35 to i2*
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 1)
  %38 = bitcast i8* %37 to i2*
  store i2 -1, i2* %36, align 1
  store i2 1, i2* %38, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %40 = bitcast i8* %39 to %Array**
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %42 = bitcast i8* %41 to %Array**
  store %Array* %29, %Array** %40, align 8
  store %Array* %34, %Array** %42, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %43 = phi i64 [ 0, %continue__1 ], [ %48, %exiting__1 ]
  %44 = icmp sle i64 %43, 1
  br i1 %44, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %48 = add i64 %43, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %signs = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 1)
  %52 = bitcast i8* %51 to double*
  store double 1.000000e+00, double* %50, align 8
  store double -1.000000e+00, double* %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 1)
  %53 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %ops, %Array* %signs)
  %54 = call i64 @__quantum__rt__array_get_size_1d(%Array* %53)
  %55 = sub i64 %54, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %56 = phi i64 [ 0, %exit__1 ], [ %69, %exiting__2 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %56)
  %59 = bitcast i8* %58 to { %Array*, double }**
  %60 = load { %Array*, double }*, { %Array*, double }** %59, align 8
  %61 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %60, i32 0, i32 0
  %op = load %Array*, %Array** %61, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %62 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %60, i32 0, i32 1
  %sign = load double, double* %62, align 8
  %63 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %63, %Array* %idxFermions, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %theta = fmul double %sign, %angle
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %64 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %65 = bitcast %Tuple* %64 to { %Array*, double, %Array* }*
  %66 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %65, i32 0, i32 0
  %67 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %65, i32 0, i32 1
  %68 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %65, i32 0, i32 2
  store %Array* %pauliString, %Array** %66, align 8
  store double %theta, double* %67, align 8
  store %Array* %qubits, %Array** %68, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %65)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %64, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %69 = add i64 %56, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %70 = phi i64 [ 0, %exit__2 ], [ %75, %exiting__3 ]
  %71 = icmp sle i64 %70, 1
  br i1 %71, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %70)
  %73 = bitcast i8* %72 to %Array**
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %75 = add i64 %70, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %76 = phi i64 [ 0, %exit__3 ], [ %81, %exiting__4 ]
  %77 = icmp sle i64 %76, 1
  br i1 %77, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %76)
  %79 = bitcast i8* %78 to %Array**
  %80 = load %Array*, %Array** %79, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %80, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %81 = add i64 %76, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i32 -1)
  %82 = sub i64 %54, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %83 = phi i64 [ 0, %exit__4 ], [ %91, %exiting__5 ]
  %84 = icmp sle i64 %83, %82
  br i1 %84, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %83)
  %86 = bitcast i8* %85 to { %Array*, double }**
  %87 = load { %Array*, double }*, { %Array*, double }** %86, align 8
  %88 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %87, i32 0, i32 0
  %89 = load %Array*, %Array** %88, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %89, i32 -1)
  %90 = bitcast { %Array*, double }* %87 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %90, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %91 = add i64 %83, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQTerm____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__p__ = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %__qsVar4__q__ = load i64, i64* %14, align 4
  %15 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @3, i32 0, i32 0))
  %17 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  %23 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  %24 = call %String* @__quantum__rt__string_concatenate(%String* %22, %String* %23)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__fail(%String* %24)
  unreachable

continue__1:                                      ; preds = %entry
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26, align 8
  %28 = fmul double 5.000000e-01, %27
  %__qsVar5__angle__ = fmul double %28, %stepSize
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i2*
  store i2 1, i2* %31, align 1
  store i2 -1, i2* %33, align 1
  %34 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 0)
  %36 = bitcast i8* %35 to i2*
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 1)
  %38 = bitcast i8* %37 to i2*
  store i2 -1, i2* %36, align 1
  store i2 1, i2* %38, align 1
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %40 = bitcast i8* %39 to %Array**
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %42 = bitcast i8* %41 to %Array**
  store %Array* %29, %Array** %40, align 8
  store %Array* %34, %Array** %42, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %43 = phi i64 [ 0, %continue__1 ], [ %48, %exiting__1 ]
  %44 = icmp sle i64 %43, 1
  br i1 %44, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %48 = add i64 %43, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 1)
  %__qsVar7__signs__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 1)
  %52 = bitcast i8* %51 to double*
  store double 1.000000e+00, double* %50, align 8
  store double -1.000000e+00, double* %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i32 1)
  %53 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %54 = call %Array* @Microsoft__Quantum__Arrays___3d2e1155dc4b4f3ab6fe59d3ebd7442c_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %55 = call i64 @__quantum__rt__array_get_size_1d(%Array* %54)
  %56 = sub i64 %55, 1
  %57 = insertvalue %Range zeroinitializer, i64 %56, 0
  %58 = insertvalue %Range %57, i64 -1, 1
  %59 = insertvalue %Range %58, i64 0, 2
  %60 = call %Array* @__quantum__rt__array_slice_1d(%Array* %53, %Range %59, i1 true)
  %61 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %62 = sub i64 %61, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %63 = phi i64 [ 0, %exit__1 ], [ %76, %exiting__2 ]
  %64 = icmp sle i64 %63, %62
  br i1 %64, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %63)
  %66 = bitcast i8* %65 to { %Array*, double }**
  %67 = load { %Array*, double }*, { %Array*, double }** %66, align 8
  %68 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %67, i32 0, i32 0
  %__qsVar8__op__ = load %Array*, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 1)
  %69 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %67, i32 0, i32 1
  %__qsVar9__sign__ = load double, double* %69, align 8
  %70 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar10__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %70, %Array* %__qsVar2__idxFermions__, %Array* %__qsVar8__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 1)
  %theta = fmul double %__qsVar9__sign__, %__qsVar5__angle__
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { %Array*, double, %Array* }*
  %73 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %72, i32 0, i32 0
  %74 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %72, i32 0, i32 1
  %75 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %72, i32 0, i32 2
  store %Array* %__qsVar10__pauliString__, %Array** %73, align 8
  store double %theta, double* %74, align 8
  store %Array* %qubits, %Array** %75, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %72)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %76 = add i64 %63, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %77 = phi i64 [ 0, %exit__2 ], [ %82, %exiting__3 ]
  %78 = icmp sle i64 %77, 1
  br i1 %78, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %77)
  %80 = bitcast i8* %79 to %Array**
  %81 = load %Array*, %Array** %80, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %82 = add i64 %77, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %83 = phi i64 [ 0, %exit__3 ], [ %88, %exiting__4 ]
  %84 = icmp sle i64 %83, 1
  br i1 %84, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %83)
  %86 = bitcast i8* %85 to %Array**
  %87 = load %Array*, %Array** %86, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %88 = add i64 %83, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__signs__, i32 -1)
  %89 = call i64 @__quantum__rt__array_get_size_1d(%Array* %53)
  %90 = sub i64 %89, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %91 = phi i64 [ 0, %exit__4 ], [ %99, %exiting__5 ]
  %92 = icmp sle i64 %91, %90
  br i1 %92, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %91)
  %94 = bitcast i8* %93 to { %Array*, double }**
  %95 = load { %Array*, double }*, { %Array*, double }** %94, align 8
  %96 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %95, i32 0, i32 0
  %97 = load %Array*, %Array** %96, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %97, i32 -1)
  %98 = bitcast { %Array*, double }* %95 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %98, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %99 = add i64 %91, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  %100 = sub i64 %55, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %101 = phi i64 [ 0, %exit__5 ], [ %109, %exiting__6 ]
  %102 = icmp sle i64 %101, %100
  br i1 %102, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 %101)
  %104 = bitcast i8* %103 to { %Array*, double }**
  %105 = load { %Array*, double }*, { %Array*, double }** %104, align 8
  %106 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %105, i32 0, i32 0
  %107 = load %Array*, %Array** %106, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %107, i32 -1)
  %108 = bitcast { %Array*, double }* %105 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %108, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %109 = add i64 %101, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorFunction____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %12, i32 0, i32 1
  store %Callable* %10, %Callable** %13, align 8
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %14, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__5__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__3__FunctionTable, %Tuple* %11)
  %16 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret { %Callable* }* %16
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Lifted__PartialApplication__5__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store double %5, double* %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store double %5, double* %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14, align 8
  store double %9, double* %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14, align 8
  store double %9, double* %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____body({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____adj({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____ctl(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____ctladj(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__3__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %3, align 8
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 %count-change)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 %count-change)
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 %count-change)
  %14 = bitcast { { %Array*, %Array* }*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__3__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %3, align 8
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 %count-change)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 %count-change)
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 %count-change)
  %14 = bitcast { { %Array*, %Array* }*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %idxDoubles = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %8 = bitcast i8* %7 to i64*
  %termType = load i64, i64* %8, align 4
  %9 = icmp eq i64 %termType, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQTerm____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %termType, 2
  br i1 %10, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQRSTerm____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__termType__ = load i64, i64* %8, align 4
  %9 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQTerm____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %10, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQRSTerm____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %idxDoubles = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %12 = bitcast i8* %11 to i64*
  %termType = load i64, i64* %12, align 4
  %13 = icmp eq i64 %termType, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16, align 8
  store double %stepSize, double* %17, align 8
  store %Array* %qubits, %Array** %18, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQTerm____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %termType, 2
  br i1 %19, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22, align 8
  store double %stepSize, double* %23, align 8
  store %Array* %qubits, %Array** %24, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQRSTerm____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorImpl____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__termType__ = load i64, i64* %12, align 4
  %13 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16, align 8
  store double %stepSize, double* %17, align 8
  store %Array* %qubits, %Array** %18, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQTerm____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %19, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22, align 8
  store double %stepSize, double* %23, align 8
  store %Array* %qubits, %Array** %24, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWignerClusterOperatorPQRSTerm____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

declare %Callable* @__quantum__rt__callable_copy(%Callable*, i1)

declare void @__quantum__rt__callable_make_adjoint(%Callable*)

declare void @__quantum__rt__callable_make_controlled(%Callable*)

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____body(%Callable* %oracle, i64 %nSystemQubits, %Array* %allQubits) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %allQubits, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %allQubits)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range zeroinitializer, i64 %nSystemQubits, 0
  %3 = insertvalue %Range %2, i64 1, 1
  %4 = insertvalue %Range %3, i64 %1, 2
  %5 = call %Array* @__quantum__rt__array_slice_1d(%Array* %allQubits, %Range %4, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  %6 = sub i64 %nSystemQubits, 1
  %7 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %6, 2
  %8 = call %Array* @__quantum__rt__array_slice_1d(%Array* %allQubits, %Range %7, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array*, %Array* }*
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 1
  store %Array* %5, %Array** %11, align 8
  store %Array* %8, %Array** %12, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %oracle, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %allQubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____adj(%Callable* %oracle, i64 %nSystemQubits, %Array* %allQubits) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %allQubits, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %allQubits)
  %2 = sub i64 %1, 1
  %3 = insertvalue %Range zeroinitializer, i64 %nSystemQubits, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %2, 2
  %6 = call %Array* @__quantum__rt__array_slice_1d(%Array* %allQubits, %Range %5, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  %7 = sub i64 %nSystemQubits, 1
  %8 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %7, 2
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %allQubits, %Range %8, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Array* }*
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 1
  store %Array* %6, %Array** %12, align 8
  store %Array* %9, %Array** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %10, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %allQubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____ctl(%Array* %__controlQubits__, { %Callable*, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %oracle = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %nSystemQubits = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %allQubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %allQubits, i32 1)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %allQubits)
  %6 = sub i64 %5, 1
  %7 = insertvalue %Range zeroinitializer, i64 %nSystemQubits, 0
  %8 = insertvalue %Range %7, i64 1, 1
  %9 = insertvalue %Range %8, i64 %6, 2
  %10 = call %Array* @__quantum__rt__array_slice_1d(%Array* %allQubits, %Range %9, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %11 = sub i64 %nSystemQubits, 1
  %12 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %11, 2
  %13 = call %Array* @__quantum__rt__array_slice_1d(%Array* %allQubits, %Range %12, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Array* }*
  %16 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %15, i32 0, i32 1
  store %Array* %10, %Array** %16, align 8
  store %Array* %13, %Array** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { %Array*, %Array* }* }*
  %20 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %19, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %20, align 8
  store { %Array*, %Array* }* %15, { %Array*, %Array* }** %21, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %18, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %allQubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____ctladj(%Array* %__controlQubits__, { %Callable*, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %oracle = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %nSystemQubits = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %allQubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %allQubits, i32 1)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_controlled(%Callable* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %allQubits)
  %6 = sub i64 %5, 1
  %7 = insertvalue %Range zeroinitializer, i64 %nSystemQubits, 0
  %8 = insertvalue %Range %7, i64 1, 1
  %9 = insertvalue %Range %8, i64 %6, 2
  %10 = call %Array* @__quantum__rt__array_slice_1d(%Array* %allQubits, %Range %9, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %11 = sub i64 %nSystemQubits, 1
  %12 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %11, 2
  %13 = call %Array* @__quantum__rt__array_slice_1d(%Array* %allQubits, %Range %12, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Array* }*
  %16 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %15, i32 0, i32 1
  store %Array* %10, %Array** %16, align 8
  store %Array* %13, %Array** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { %Array*, %Array* }* }*
  %20 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %19, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %20, align 8
  store { %Array*, %Array* }* %15, { %Array*, %Array* }** %21, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %18, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %allQubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PQandPQQRTermToPauliGenIdx_____body({ { %Array*, %Array* }*, %Array* }* %term) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %newCoeff = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoeff, i64 0)
  %11 = bitcast i8* %10 to double*
  store double %9, double* %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoeff, i32 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %13 = icmp eq i64 %12, 2
  br i1 %13, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %14 = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PQTermToPauliGenIdx_____body({ { %Array*, %Array* }*, %Array* }* %term)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  ret %Array* %14

else__1:                                          ; preds = %entry
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %16 = bitcast i8* %15 to i64*
  %qubitPidx = load i64, i64* %16, align 4
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %18 = bitcast i8* %17 to i64*
  %qubitQidx = load i64, i64* %18, align 4
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %20 = bitcast i8* %19 to i64*
  %qubitRidx = load i64, i64* %20, align 4
  %21 = icmp slt i64 %qubitPidx, %qubitQidx
  br i1 %21, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %22 = icmp slt i64 %qubitQidx, %qubitRidx
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %23 = phi i1 [ %22, %condTrue__1 ], [ %21, %else__1 ]
  br i1 %23, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  %24 = sub i64 %qubitQidx, 1
  %25 = insertvalue %Range zeroinitializer, i64 %qubitPidx, 0
  %26 = insertvalue %Range %25, i64 1, 1
  %27 = insertvalue %Range %26, i64 %24, 2
  %28 = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %27)
  %29 = add i64 %qubitQidx, 1
  %30 = insertvalue %Range zeroinitializer, i64 %29, 0
  %31 = insertvalue %Range %30, i64 1, 1
  %32 = insertvalue %Range %31, i64 %qubitRidx, 2
  %33 = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %32)
  %qubitIndices = call %Array* @__quantum__rt__array_concatenate(%Array* %28, %Array* %33)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  %34 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 0)
  %36 = bitcast i8* %35 to i64*
  store i64 1, i64* %36, align 4
  %37 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitIndices)
  %38 = sub i64 %37, 2
  %39 = call %Array* @Microsoft__Quantum__Arrays___776c59d7915545a6a81beb8cdb98d2a4_ConstantArray__body(i64 %38, i64 3)
  %40 = call %Array* @__quantum__rt__array_concatenate(%Array* %34, %Array* %39)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 1)
  %41 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 0)
  %43 = bitcast i8* %42 to i64*
  store i64 1, i64* %43, align 4
  %44 = call %Array* @__quantum__rt__array_concatenate(%Array* %40, %Array* %41)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 1)
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { %Array*, %Array* }*
  %47 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 0
  %48 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 1
  store %Array* %44, %Array** %47, align 8
  store %Array* %newCoeff, %Array** %48, align 8
  %49 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %46, %Array* %qubitIndices)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  %50 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 0)
  %52 = bitcast i8* %51 to i64*
  store i64 2, i64* %52, align 4
  %53 = sub i64 %37, 2
  %54 = call %Array* @Microsoft__Quantum__Arrays___776c59d7915545a6a81beb8cdb98d2a4_ConstantArray__body(i64 %53, i64 3)
  %55 = call %Array* @__quantum__rt__array_concatenate(%Array* %50, %Array* %54)
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 1)
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to i64*
  store i64 2, i64* %58, align 4
  %59 = call %Array* @__quantum__rt__array_concatenate(%Array* %55, %Array* %56)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 1)
  %60 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %61 = bitcast %Tuple* %60 to { %Array*, %Array* }*
  %62 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %61, i32 0, i32 0
  %63 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %61, i32 0, i32 1
  store %Array* %59, %Array** %62, align 8
  store %Array* %newCoeff, %Array** %63, align 8
  %64 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %61, %Array* %qubitIndices)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %60, i32 -1)
  %65 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 0)
  %67 = bitcast i8* %66 to { { %Array*, %Array* }*, %Array* }**
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 1)
  %69 = bitcast i8* %68 to { { %Array*, %Array* }*, %Array* }**
  store { { %Array*, %Array* }*, %Array* }* %49, { { %Array*, %Array* }*, %Array* }** %67, align 8
  store { { %Array*, %Array* }*, %Array* }* %64, { { %Array*, %Array* }*, %Array* }** %69, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices, i32 -1)
  ret %Array* %65

else__2:                                          ; preds = %condContinue__1
  %70 = insertvalue %Range zeroinitializer, i64 %qubitPidx, 0
  %71 = insertvalue %Range %70, i64 1, 1
  %72 = insertvalue %Range %71, i64 %qubitRidx, 2
  %73 = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %72)
  %74 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 0)
  %76 = bitcast i8* %75 to i64*
  store i64 %qubitQidx, i64* %76, align 4
  %qubitIndices__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %73, %Array* %74)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices__1, i32 1)
  %77 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 0)
  %79 = bitcast i8* %78 to i64*
  store i64 1, i64* %79, align 4
  %80 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitIndices__1)
  %81 = sub i64 %80, 3
  %82 = call %Array* @Microsoft__Quantum__Arrays___776c59d7915545a6a81beb8cdb98d2a4_ConstantArray__body(i64 %81, i64 3)
  %83 = call %Array* @__quantum__rt__array_concatenate(%Array* %77, %Array* %82)
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 1)
  %84 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 0)
  %86 = bitcast i8* %85 to i64*
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 1)
  %88 = bitcast i8* %87 to i64*
  store i64 1, i64* %86, align 4
  store i64 3, i64* %88, align 4
  %89 = call %Array* @__quantum__rt__array_concatenate(%Array* %83, %Array* %84)
  call void @__quantum__rt__array_update_reference_count(%Array* %89, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %89, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 1)
  %90 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %91 = bitcast %Tuple* %90 to { %Array*, %Array* }*
  %92 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %91, i32 0, i32 0
  %93 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %91, i32 0, i32 1
  store %Array* %89, %Array** %92, align 8
  store %Array* %newCoeff, %Array** %93, align 8
  %94 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %91, %Array* %qubitIndices__1)
  call void @__quantum__rt__array_update_reference_count(%Array* %89, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %90, i32 -1)
  %95 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 0)
  %97 = bitcast i8* %96 to i64*
  store i64 2, i64* %97, align 4
  %98 = sub i64 %80, 3
  %99 = call %Array* @Microsoft__Quantum__Arrays___776c59d7915545a6a81beb8cdb98d2a4_ConstantArray__body(i64 %98, i64 3)
  %100 = call %Array* @__quantum__rt__array_concatenate(%Array* %95, %Array* %99)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 1)
  %101 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 0)
  %103 = bitcast i8* %102 to i64*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 1)
  %105 = bitcast i8* %104 to i64*
  store i64 2, i64* %103, align 4
  store i64 3, i64* %105, align 4
  %106 = call %Array* @__quantum__rt__array_concatenate(%Array* %100, %Array* %101)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %95, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %101, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 1)
  %107 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %108 = bitcast %Tuple* %107 to { %Array*, %Array* }*
  %109 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %108, i32 0, i32 0
  %110 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %108, i32 0, i32 1
  store %Array* %106, %Array** %109, align 8
  store %Array* %newCoeff, %Array** %110, align 8
  %111 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %108, %Array* %qubitIndices__1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %107, i32 -1)
  %112 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 0)
  %114 = bitcast i8* %113 to { { %Array*, %Array* }*, %Array* }**
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 1)
  %116 = bitcast i8* %115 to { { %Array*, %Array* }*, %Array* }**
  store { { %Array*, %Array* }*, %Array* }* %94, { { %Array*, %Array* }*, %Array* }** %114, align 8
  store { { %Array*, %Array* }*, %Array* }* %111, { { %Array*, %Array* }*, %Array* }** %116, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices__1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %73, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices__1, i32 -1)
  ret %Array* %112

continue__2:                                      ; No predecessors!
  unreachable

continue__1:                                      ; No predecessors!
  unreachable
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PQTermToPauliGenIdx_____body({ { %Array*, %Array* }*, %Array* }* %term) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %newCoeff = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoeff, i64 0)
  %11 = bitcast i8* %10 to double*
  store double %9, double* %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoeff, i32 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %13 = bitcast i8* %12 to i64*
  %qubitPidx = load i64, i64* %13, align 4
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %15 = bitcast i8* %14 to i64*
  %qubitQidx = load i64, i64* %15, align 4
  %16 = insertvalue %Range zeroinitializer, i64 %qubitPidx, 0
  %17 = insertvalue %Range %16, i64 1, 1
  %18 = insertvalue %Range %17, i64 %qubitQidx, 2
  %qubitIndices = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %18)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 0)
  %21 = bitcast i8* %20 to i64*
  store i64 1, i64* %21, align 4
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitIndices)
  %23 = sub i64 %22, 2
  %24 = call %Array* @Microsoft__Quantum__Arrays___776c59d7915545a6a81beb8cdb98d2a4_ConstantArray__body(i64 %23, i64 3)
  %25 = call %Array* @__quantum__rt__array_concatenate(%Array* %19, %Array* %24)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 1)
  %26 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 0)
  %28 = bitcast i8* %27 to i64*
  store i64 1, i64* %28, align 4
  %29 = call %Array* @__quantum__rt__array_concatenate(%Array* %25, %Array* %26)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Array*, %Array* }*
  %32 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %31, i32 0, i32 1
  store %Array* %29, %Array** %32, align 8
  store %Array* %newCoeff, %Array** %33, align 8
  %34 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %31, %Array* %qubitIndices)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  %35 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 0)
  %37 = bitcast i8* %36 to i64*
  store i64 2, i64* %37, align 4
  %38 = sub i64 %22, 2
  %39 = call %Array* @Microsoft__Quantum__Arrays___776c59d7915545a6a81beb8cdb98d2a4_ConstantArray__body(i64 %38, i64 3)
  %40 = call %Array* @__quantum__rt__array_concatenate(%Array* %35, %Array* %39)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 1)
  %41 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 0)
  %43 = bitcast i8* %42 to i64*
  store i64 2, i64* %43, align 4
  %44 = call %Array* @__quantum__rt__array_concatenate(%Array* %40, %Array* %41)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 1)
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { %Array*, %Array* }*
  %47 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 0
  %48 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 1
  store %Array* %44, %Array** %47, align 8
  store %Array* %newCoeff, %Array** %48, align 8
  %49 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %46, %Array* %qubitIndices)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  %50 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 0)
  %52 = bitcast i8* %51 to { { %Array*, %Array* }*, %Array* }**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 1)
  %54 = bitcast i8* %53 to { { %Array*, %Array* }*, %Array* }**
  store { { %Array*, %Array* }*, %Array* }* %34, { { %Array*, %Array* }*, %Array* }** %52, align 8
  store { { %Array*, %Array* }*, %Array* }* %49, { { %Array*, %Array* }*, %Array* }** %54, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices, i32 -1)
  ret %Array* %50
}

define internal %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %range) {
entry:
  %array = alloca %Array*, align 8
  %start = extractvalue %Range %range, 0
  %0 = extractvalue %Range %range, 1
  %1 = extractvalue %Range %range, 2
  %2 = extractvalue %Range %range, 0
  %step = extractvalue %Range %range, 1
  %3 = extractvalue %Range %range, 2
  %4 = extractvalue %Range %range, 0
  %5 = extractvalue %Range %range, 1
  %end = extractvalue %Range %range, 2
  %6 = sub i64 %end, %start
  %7 = sitofp i64 %6 to double
  %8 = sitofp i64 %step to double
  %9 = fdiv double %7, %8
  %10 = fcmp oge double %9, 0.000000e+00
  br i1 %10, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %11 = sub i64 %end, %start
  %12 = sdiv i64 %11, %step
  %nTerms = add i64 %12, 1
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nTerms)
  %14 = sub i64 %nTerms, 1
  br label %header__1

else__1:                                          ; preds = %entry
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  ret %Array* %15

continue__1:                                      ; No predecessors!
  unreachable

header__1:                                        ; preds = %exiting__1, %then0__1
  %16 = phi i64 [ 0, %then0__1 ], [ %20, %exiting__1 ]
  %17 = icmp sle i64 %16, %14
  br i1 %17, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %16)
  %19 = bitcast i8* %18 to i64*
  store i64 0, i64* %19, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %16, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %13, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %21 = sub i64 %nTerms, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %22 = icmp sle i64 %idx, %21
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = load %Array*, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  %24 = call %Array* @__quantum__rt__array_copy(%Array* %23, i1 false)
  %25 = mul i64 %idx, %step
  %26 = add i64 %start, %25
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 %idx)
  %28 = bitcast i8* %27 to i64*
  store i64 %26, i64* %28, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 1)
  store %Array* %24, %Array** %array, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %30 = load %Array*, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  ret %Array* %30
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %0, %Array* %__Item3__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array* }*, %Array* }* getelementptr ({ { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { { %Array*, %Array* }*, %Array* }*
  %3 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %2, i32 0, i32 1
  store { %Array*, %Array* }* %0, { %Array*, %Array* }** %3, align 8
  store %Array* %__Item3__, %Array** %4, align 8
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  %9 = bitcast { %Array*, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item3__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %2
}

define internal %Array* @Microsoft__Quantum__Arrays___776c59d7915545a6a81beb8cdb98d2a4_ConstantArray__body(i64 %length, i64 %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to i64*
  store i64 %value, i64* %5, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret %Array* %0
}

define internal %Callable* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PrepareSingleConfigurationalStateSingleSiteOccupation____body(%Array* %qubitIndices) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, %Array* }*
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %2, i32 0, i32 1
  store %Callable* %0, %Callable** %3, align 8
  store %Array* %qubitIndices, %Array** %4, align 8
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__6__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  ret %Callable* %5
}

define internal void @Lifted__PartialApplication__6__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__4__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__4__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  call void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__body(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj(%Array* %qubitIndices, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  call void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__adj(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %qubitIndices = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, %Array* }*
  %7 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 1
  store %Callable* %3, %Callable** %7, align 8
  store %Array* %4, %Array** %8, align 8
  call void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %6)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %qubitIndices = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, %Array* }*
  %7 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 1
  store %Callable* %3, %Callable** %7, align 8
  store %Array* %4, %Array** %8, align 8
  call void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %6)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

define internal { { i64, i64 }*, { double, %Callable* }* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___QubitizationOracleSeperatedRegisters____body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData) {
entry:
  %0 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 1
  %data = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %0, align 8
  %1 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %5)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = load { %Array*, %Array* }*, { %Array*, %Array* }** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %31 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 2
  %32 = load %Array*, %Array** %31, align 8
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = sub i64 %33, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %35)
  %38 = bitcast i8* %37 to { %Array*, %Array* }**
  %39 = load { %Array*, %Array* }*, { %Array*, %Array* }** %38, align 8
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 1
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 1)
  %44 = bitcast { %Array*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %46 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 3
  %47 = load %Array*, %Array** %46, align 8
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, %Array* }**
  %54 = load { %Array*, %Array* }*, { %Array*, %Array* }** %53, align 8
  %55 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 0
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  %57 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 1
  %58 = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  %59 = bitcast { %Array*, %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %59, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %60 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  %61 = bitcast { %Array*, %Array*, %Array*, %Array* }* %data to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %62 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 2
  %statePrepData = load { i64, %Array* }*, { i64, %Array* }** %62, align 8
  %63 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %statePrepData, i32 0, i32 1
  %64 = load %Array*, %Array** %63, align 8
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %66 = sub i64 %65, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %67 = phi i64 [ 0, %exit__4 ], [ %78, %exiting__5 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %67)
  %70 = bitcast i8* %69 to { { double, double }*, %Array* }**
  %71 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %70, align 8
  %72 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 0
  %73 = load { double, double }*, { double, double }** %72, align 8
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %74, i32 1)
  %75 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { { double, double }*, %Array* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %78 = add i64 %67, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %79 = bitcast { i64, %Array* }* %statePrepData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %80 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %81 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 0
  %nSpinOrbitals = load i64, i64* %81, align 4
  %82 = sub i64 %3, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %83 = phi i64 [ 0, %exit__5 ], [ %93, %exiting__6 ]
  %84 = icmp sle i64 %83, %82
  br i1 %84, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %83)
  %86 = bitcast i8* %85 to { %Array*, %Array* }**
  %87 = load { %Array*, %Array* }*, { %Array*, %Array* }** %86, align 8
  %88 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 0
  %89 = load %Array*, %Array** %88, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %89, i32 1)
  %90 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 1
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 1)
  %92 = bitcast { %Array*, %Array* }* %87 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %92, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %93 = add i64 %83, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %94 = sub i64 %18, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %95 = phi i64 [ 0, %exit__6 ], [ %105, %exiting__7 ]
  %96 = icmp sle i64 %95, %94
  br i1 %96, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %95)
  %98 = bitcast i8* %97 to { %Array*, %Array* }**
  %99 = load { %Array*, %Array* }*, { %Array*, %Array* }** %98, align 8
  %100 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 0
  %101 = load %Array*, %Array** %100, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %101, i32 1)
  %102 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { %Array*, %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %105 = add i64 %95, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %106 = sub i64 %33, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %107 = phi i64 [ 0, %exit__7 ], [ %117, %exiting__8 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, %Array* }**
  %111 = load { %Array*, %Array* }*, { %Array*, %Array* }** %110, align 8
  %112 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 0
  %113 = load %Array*, %Array** %112, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %113, i32 1)
  %114 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 1
  %115 = load %Array*, %Array** %114, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %115, i32 1)
  %116 = bitcast { %Array*, %Array* }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %117 = add i64 %107, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %118 = sub i64 %48, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %119 = phi i64 [ 0, %exit__8 ], [ %129, %exiting__9 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %119)
  %122 = bitcast i8* %121 to { %Array*, %Array* }**
  %123 = load { %Array*, %Array* }*, { %Array*, %Array* }** %122, align 8
  %124 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 0
  %125 = load %Array*, %Array** %124, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %125, i32 1)
  %126 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 1
  %127 = load %Array*, %Array** %126, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %127, i32 1)
  %128 = bitcast { %Array*, %Array* }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %129 = add i64 %119, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %130 = sub i64 %65, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %131 = phi i64 [ 0, %exit__9 ], [ %142, %exiting__10 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %131)
  %134 = bitcast i8* %133 to { { double, double }*, %Array* }**
  %135 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %134, align 8
  %136 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 0
  %137 = load { double, double }*, { double, double }** %136, align 8
  %138 = bitcast { double, double }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %138, i32 1)
  %139 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 1
  %140 = load %Array*, %Array** %139, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %140, i32 1)
  %141 = bitcast { { double, double }*, %Array* }* %135 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %141, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %142 = add i64 %131, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %143 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 3
  %energyShift = load double, double* %143, align 8
  %generatorSystem = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerBlockEncodingGeneratorSystem__body({ %Array*, %Array*, %Array*, %Array* }* %data)
  %144 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %genIdxFunction = load %Callable*, %Callable** %144, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genIdxFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genIdxFunction, i32 1)
  %145 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %145, i32 1)
  %146 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %146, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genIdxFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genIdxFunction, i32 1)
  %147 = call { double, { { %Callable* }* }* }* @Microsoft__Quantum__Simulation__PauliBlockEncoding__body({ i64, %Callable* }* %generatorSystem)
  %148 = getelementptr inbounds { double, { { %Callable* }* }* }, { double, { { %Callable* }* }* }* %147, i32 0, i32 0
  %oneNorm = load double, double* %148, align 8
  %149 = getelementptr inbounds { double, { { %Callable* }* }* }, { double, { { %Callable* }* }* }* %147, i32 0, i32 1
  %blockEncodingReflection = load { { %Callable* }* }*, { { %Callable* }* }** %149, align 8
  %150 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %blockEncodingReflection, i32 0, i32 0
  %151 = load { %Callable* }*, { %Callable* }** %150, align 8
  %152 = getelementptr inbounds { %Callable* }, { %Callable* }* %151, i32 0, i32 0
  %153 = load %Callable*, %Callable** %152, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %153, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %153, i32 1)
  %154 = bitcast { %Callable* }* %151 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %154, i32 1)
  %155 = bitcast { { %Callable* }* }* %blockEncodingReflection to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %155, i32 1)
  %156 = sitofp i64 %nTerms to double
  %157 = call double @Microsoft__Quantum__Math__Lg__body(double %156)
  %nCtrlRegisterQubits = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %157)
  %158 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64 }* getelementptr ({ i64, i64 }, { i64, i64 }* null, i32 1) to i64))
  %159 = bitcast %Tuple* %158 to { i64, i64 }*
  %160 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %159, i32 0, i32 0
  %161 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %159, i32 0, i32 1
  store i64 %nCtrlRegisterQubits, i64* %160, align 4
  store i64 %nSpinOrbitals, i64* %161, align 4
  %162 = call %Callable* @Microsoft__Quantum__Simulation__QuantumWalkByQubitization__body({ { %Callable* }* }* %blockEncodingReflection)
  %163 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Callable* }* getelementptr ({ double, %Callable* }, { double, %Callable* }* null, i32 1) to i64))
  %164 = bitcast %Tuple* %163 to { double, %Callable* }*
  %165 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %164, i32 0, i32 0
  %166 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %164, i32 0, i32 1
  store double %oneNorm, double* %165, align 8
  store %Callable* %162, %Callable** %166, align 8
  %167 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, i64 }*, { double, %Callable* }* }* getelementptr ({ { i64, i64 }*, { double, %Callable* }* }, { { i64, i64 }*, { double, %Callable* }* }* null, i32 1) to i64))
  %168 = bitcast %Tuple* %167 to { { i64, i64 }*, { double, %Callable* }* }*
  %169 = getelementptr inbounds { { i64, i64 }*, { double, %Callable* }* }, { { i64, i64 }*, { double, %Callable* }* }* %168, i32 0, i32 0
  %170 = getelementptr inbounds { { i64, i64 }*, { double, %Callable* }* }, { { i64, i64 }*, { double, %Callable* }* }* %168, i32 0, i32 1
  store { i64, i64 }* %159, { i64, i64 }** %169, align 8
  store { double, %Callable* }* %164, { double, %Callable* }** %170, align 8
  %171 = sub i64 %3, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %172 = phi i64 [ 0, %exit__10 ], [ %182, %exiting__11 ]
  %173 = icmp sle i64 %172, %171
  br i1 %173, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %174 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %172)
  %175 = bitcast i8* %174 to { %Array*, %Array* }**
  %176 = load { %Array*, %Array* }*, { %Array*, %Array* }** %175, align 8
  %177 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %176, i32 0, i32 0
  %178 = load %Array*, %Array** %177, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %178, i32 -1)
  %179 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %176, i32 0, i32 1
  %180 = load %Array*, %Array** %179, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %180, i32 -1)
  %181 = bitcast { %Array*, %Array* }* %176 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %181, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %182 = add i64 %172, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %183 = sub i64 %18, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %184 = phi i64 [ 0, %exit__11 ], [ %194, %exiting__12 ]
  %185 = icmp sle i64 %184, %183
  br i1 %185, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %184)
  %187 = bitcast i8* %186 to { %Array*, %Array* }**
  %188 = load { %Array*, %Array* }*, { %Array*, %Array* }** %187, align 8
  %189 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %188, i32 0, i32 0
  %190 = load %Array*, %Array** %189, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %190, i32 -1)
  %191 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %188, i32 0, i32 1
  %192 = load %Array*, %Array** %191, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %192, i32 -1)
  %193 = bitcast { %Array*, %Array* }* %188 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %193, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %194 = add i64 %184, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %195 = sub i64 %33, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %196 = phi i64 [ 0, %exit__12 ], [ %206, %exiting__13 ]
  %197 = icmp sle i64 %196, %195
  br i1 %197, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %196)
  %199 = bitcast i8* %198 to { %Array*, %Array* }**
  %200 = load { %Array*, %Array* }*, { %Array*, %Array* }** %199, align 8
  %201 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %200, i32 0, i32 0
  %202 = load %Array*, %Array** %201, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %202, i32 -1)
  %203 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %200, i32 0, i32 1
  %204 = load %Array*, %Array** %203, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %204, i32 -1)
  %205 = bitcast { %Array*, %Array* }* %200 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %205, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %206 = add i64 %196, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %207 = sub i64 %48, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %208 = phi i64 [ 0, %exit__13 ], [ %218, %exiting__14 ]
  %209 = icmp sle i64 %208, %207
  br i1 %209, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %210 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %208)
  %211 = bitcast i8* %210 to { %Array*, %Array* }**
  %212 = load { %Array*, %Array* }*, { %Array*, %Array* }** %211, align 8
  %213 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %212, i32 0, i32 0
  %214 = load %Array*, %Array** %213, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %214, i32 -1)
  %215 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %212, i32 0, i32 1
  %216 = load %Array*, %Array** %215, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %216, i32 -1)
  %217 = bitcast { %Array*, %Array* }* %212 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %217, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %218 = add i64 %208, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %219 = sub i64 %65, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %220 = phi i64 [ 0, %exit__14 ], [ %231, %exiting__15 ]
  %221 = icmp sle i64 %220, %219
  br i1 %221, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %222 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %220)
  %223 = bitcast i8* %222 to { { double, double }*, %Array* }**
  %224 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %223, align 8
  %225 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %224, i32 0, i32 0
  %226 = load { double, double }*, { double, double }** %225, align 8
  %227 = bitcast { double, double }* %226 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %227, i32 -1)
  %228 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %224, i32 0, i32 1
  %229 = load %Array*, %Array** %228, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %229, i32 -1)
  %230 = bitcast { { double, double }*, %Array* }* %224 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %230, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %231 = add i64 %220, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  %232 = sub i64 %3, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %233 = phi i64 [ 0, %exit__15 ], [ %243, %exiting__16 ]
  %234 = icmp sle i64 %233, %232
  br i1 %234, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %235 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %233)
  %236 = bitcast i8* %235 to { %Array*, %Array* }**
  %237 = load { %Array*, %Array* }*, { %Array*, %Array* }** %236, align 8
  %238 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %237, i32 0, i32 0
  %239 = load %Array*, %Array** %238, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %239, i32 -1)
  %240 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %237, i32 0, i32 1
  %241 = load %Array*, %Array** %240, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %241, i32 -1)
  %242 = bitcast { %Array*, %Array* }* %237 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %242, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %243 = add i64 %233, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %244 = sub i64 %18, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %245 = phi i64 [ 0, %exit__16 ], [ %255, %exiting__17 ]
  %246 = icmp sle i64 %245, %244
  br i1 %246, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %247 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %245)
  %248 = bitcast i8* %247 to { %Array*, %Array* }**
  %249 = load { %Array*, %Array* }*, { %Array*, %Array* }** %248, align 8
  %250 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %249, i32 0, i32 0
  %251 = load %Array*, %Array** %250, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %251, i32 -1)
  %252 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %249, i32 0, i32 1
  %253 = load %Array*, %Array** %252, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %253, i32 -1)
  %254 = bitcast { %Array*, %Array* }* %249 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %254, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %255 = add i64 %245, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %256 = sub i64 %33, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %257 = phi i64 [ 0, %exit__17 ], [ %267, %exiting__18 ]
  %258 = icmp sle i64 %257, %256
  br i1 %258, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %259 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %257)
  %260 = bitcast i8* %259 to { %Array*, %Array* }**
  %261 = load { %Array*, %Array* }*, { %Array*, %Array* }** %260, align 8
  %262 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %261, i32 0, i32 0
  %263 = load %Array*, %Array** %262, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %263, i32 -1)
  %264 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %261, i32 0, i32 1
  %265 = load %Array*, %Array** %264, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %265, i32 -1)
  %266 = bitcast { %Array*, %Array* }* %261 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %266, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %267 = add i64 %257, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %268 = sub i64 %48, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %269 = phi i64 [ 0, %exit__18 ], [ %279, %exiting__19 ]
  %270 = icmp sle i64 %269, %268
  br i1 %270, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %271 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %269)
  %272 = bitcast i8* %271 to { %Array*, %Array* }**
  %273 = load { %Array*, %Array* }*, { %Array*, %Array* }** %272, align 8
  %274 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %273, i32 0, i32 0
  %275 = load %Array*, %Array** %274, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %275, i32 -1)
  %276 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %273, i32 0, i32 1
  %277 = load %Array*, %Array** %276, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %277, i32 -1)
  %278 = bitcast { %Array*, %Array* }* %273 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %278, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %279 = add i64 %269, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %280 = sub i64 %65, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %281 = phi i64 [ 0, %exit__19 ], [ %292, %exiting__20 ]
  %282 = icmp sle i64 %281, %280
  br i1 %282, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %283 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %281)
  %284 = bitcast i8* %283 to { { double, double }*, %Array* }**
  %285 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %284, align 8
  %286 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %285, i32 0, i32 0
  %287 = load { double, double }*, { double, double }** %286, align 8
  %288 = bitcast { double, double }* %287 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %288, i32 -1)
  %289 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %285, i32 0, i32 1
  %290 = load %Array*, %Array** %289, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %290, i32 -1)
  %291 = bitcast { { double, double }*, %Array* }* %285 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %291, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %292 = add i64 %281, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genIdxFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genIdxFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %145, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genIdxFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genIdxFunction, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %153, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %153, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %154, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %155, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %genIdxFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %genIdxFunction, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %145, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %153, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %153, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %154, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %155, i32 -1)
  %293 = bitcast { double, { { %Callable* }* }* }* %147 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %293, i32 -1)
  ret { { i64, i64 }*, { double, %Callable* }* }* %168
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerBlockEncodingGeneratorSystem__body({ %Array*, %Array*, %Array*, %Array* }* %data) {
entry:
  %finalIdx = alloca i64, align 8
  %startIdx = alloca i64, align 8
  %genIdxes = alloca %Array*, align 8
  %0 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 0
  %ZData = load %Array*, %Array** %0, align 8
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZData)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %3)
  %6 = bitcast i8* %5 to { %Array*, %Array* }**
  %7 = load { %Array*, %Array* }*, { %Array*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array*, %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 1)
  %14 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 1
  %ZZData = load %Array*, %Array** %14, align 8
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZZData)
  %16 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %17)
  %20 = bitcast i8* %19 to { %Array*, %Array* }**
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 1)
  %28 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 2
  %PQandPQQRData = load %Array*, %Array** %28, align 8
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %PQandPQQRData)
  %30 = sub i64 %29, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, %Array* }**
  %35 = load { %Array*, %Array* }*, { %Array*, %Array* }** %34, align 8
  %36 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 0
  %37 = load %Array*, %Array** %36, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i32 1)
  %38 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 1
  %39 = load %Array*, %Array** %38, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 1)
  %40 = bitcast { %Array*, %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 3
  %h0123Data = load %Array*, %Array** %42, align 8
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %h0123Data)
  %44 = sub i64 %43, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %55, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %45)
  %48 = bitcast i8* %47 to { %Array*, %Array* }**
  %49 = load { %Array*, %Array* }*, { %Array*, %Array* }** %48, align 8
  %50 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %49, i32 0, i32 0
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  %52 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %49, i32 0, i32 1
  %53 = load %Array*, %Array** %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  %54 = bitcast { %Array*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %55 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 1)
  %56 = bitcast { %Array*, %Array*, %Array*, %Array* }* %data to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  %57 = sub i64 %1, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %58 = phi i64 [ 0, %exit__4 ], [ %68, %exiting__5 ]
  %59 = icmp sle i64 %58, %57
  br i1 %59, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %58)
  %61 = bitcast i8* %60 to { %Array*, %Array* }**
  %62 = load { %Array*, %Array* }*, { %Array*, %Array* }** %61, align 8
  %63 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %65 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  %67 = bitcast { %Array*, %Array* }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %68 = add i64 %58, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 1)
  %69 = sub i64 %15, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %70 = phi i64 [ 0, %exit__5 ], [ %80, %exiting__6 ]
  %71 = icmp sle i64 %70, %69
  br i1 %71, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %70)
  %73 = bitcast i8* %72 to { %Array*, %Array* }**
  %74 = load { %Array*, %Array* }*, { %Array*, %Array* }** %73, align 8
  %75 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %74, i32 0, i32 0
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %74, i32 0, i32 1
  %78 = load %Array*, %Array** %77, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %78, i32 1)
  %79 = bitcast { %Array*, %Array* }* %74 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %80 = add i64 %70, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 1)
  %81 = sub i64 %29, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %82 = phi i64 [ 0, %exit__6 ], [ %92, %exiting__7 ]
  %83 = icmp sle i64 %82, %81
  br i1 %83, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %82)
  %85 = bitcast i8* %84 to { %Array*, %Array* }**
  %86 = load { %Array*, %Array* }*, { %Array*, %Array* }** %85, align 8
  %87 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %86, i32 0, i32 0
  %88 = load %Array*, %Array** %87, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 1)
  %89 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %86, i32 0, i32 1
  %90 = load %Array*, %Array** %89, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %90, i32 1)
  %91 = bitcast { %Array*, %Array* }* %86 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %91, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %92 = add i64 %82, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 1)
  %93 = sub i64 %43, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %94 = phi i64 [ 0, %exit__7 ], [ %104, %exiting__8 ]
  %95 = icmp sle i64 %94, %93
  br i1 %95, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %94)
  %97 = bitcast i8* %96 to { %Array*, %Array* }**
  %98 = load { %Array*, %Array* }*, { %Array*, %Array* }** %97, align 8
  %99 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %98, i32 0, i32 0
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %98, i32 0, i32 1
  %102 = load %Array*, %Array** %101, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %102, i32 1)
  %103 = bitcast { %Array*, %Array* }* %98 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %103, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %104 = add i64 %94, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 1)
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %106 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %107 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %108 = bitcast %Tuple* %107 to { %Array*, %Array* }*
  %109 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %108, i32 0, i32 0
  %110 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %108, i32 0, i32 1
  store %Array* %105, %Array** %109, align 8
  store %Array* %106, %Array** %110, align 8
  %111 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %112 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array* }*, %Array* }* getelementptr ({ { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* null, i32 1) to i64))
  %113 = bitcast %Tuple* %112 to { { %Array*, %Array* }*, %Array* }*
  %114 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %113, i32 0, i32 0
  %115 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %113, i32 0, i32 1
  store { %Array*, %Array* }* %108, { %Array*, %Array* }** %114, align 8
  store %Array* %111, %Array** %115, align 8
  %116 = add i64 %1, %15
  %117 = mul i64 2, %29
  %118 = add i64 %116, %117
  %119 = mul i64 8, %43
  %120 = add i64 %118, %119
  %121 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %120)
  %122 = sub i64 %120, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %123 = phi i64 [ 0, %exit__8 ], [ %134, %exiting__9 ]
  %124 = icmp sle i64 %123, %122
  br i1 %124, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 %123)
  %126 = bitcast i8* %125 to { { %Array*, %Array* }*, %Array* }**
  store { { %Array*, %Array* }*, %Array* }* %113, { { %Array*, %Array* }*, %Array* }** %126, align 8
  %127 = load { %Array*, %Array* }*, { %Array*, %Array* }** %114, align 8
  %128 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %127, i32 0, i32 0
  %129 = load %Array*, %Array** %128, align 8
  %130 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %127, i32 0, i32 1
  %131 = load %Array*, %Array** %130, align 8
  %132 = load %Array*, %Array** %115, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %129, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  %133 = bitcast { %Array*, %Array* }* %127 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %112, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %134 = add i64 %123, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  store %Array* %121, %Array** %genIdxes, align 8
  %135 = sub i64 %120, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %136 = phi i64 [ 0, %exit__9 ], [ %151, %exiting__10 ]
  %137 = icmp sle i64 %136, %135
  br i1 %137, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 %136)
  %139 = bitcast i8* %138 to { { %Array*, %Array* }*, %Array* }**
  %140 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %139, align 8
  %141 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %140, i32 0, i32 0
  %142 = load { %Array*, %Array* }*, { %Array*, %Array* }** %141, align 8
  %143 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %142, i32 0, i32 0
  %144 = load %Array*, %Array** %143, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %144, i32 1)
  %145 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %142, i32 0, i32 1
  %146 = load %Array*, %Array** %145, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %146, i32 1)
  %147 = bitcast { %Array*, %Array* }* %142 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %147, i32 1)
  %148 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %140, i32 0, i32 1
  %149 = load %Array*, %Array** %148, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %149, i32 1)
  %150 = bitcast { { %Array*, %Array* }*, %Array* }* %140 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %150, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %151 = add i64 %136, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %121, i32 1)
  store i64 0, i64* %startIdx, align 4
  %152 = call %Range @Microsoft__Quantum__Arrays___700b015a14454be98b56de747498937e_IndexRange__body(%Array* %ZData)
  %153 = extractvalue %Range %152, 0
  %154 = extractvalue %Range %152, 1
  %155 = extractvalue %Range %152, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__10
  %156 = icmp sgt i64 %154, 0
  br label %header__11

header__11:                                       ; preds = %exiting__11, %preheader__1
  %idx = phi i64 [ %153, %preheader__1 ], [ %208, %exiting__11 ]
  %157 = icmp sle i64 %idx, %155
  %158 = icmp sge i64 %idx, %155
  %159 = select i1 %156, i1 %157, i1 %158
  br i1 %159, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %160 = load %Array*, %Array** %genIdxes, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %160, i32 -1)
  %161 = call %Array* @__quantum__rt__array_copy(%Array* %160, i1 false)
  %162 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %idx)
  %163 = bitcast i8* %162 to { %Array*, %Array* }**
  %164 = load { %Array*, %Array* }*, { %Array*, %Array* }** %163, align 8
  %165 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 0)
  %167 = bitcast i8* %166 to i64*
  store i64 0, i64* %167, align 4
  %168 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermToGenIdx__body({ %Array*, %Array* }* %164, %Array* %165)
  %169 = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ZTermToPauliGenIdx____body({ { %Array*, %Array* }*, %Array* }* %168)
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %169, i64 0)
  %171 = bitcast i8* %170 to { { %Array*, %Array* }*, %Array* }**
  %172 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %171, align 8
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %161, i64 %idx)
  %174 = bitcast i8* %173 to { { %Array*, %Array* }*, %Array* }**
  %175 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %172, i32 0, i32 0
  %176 = load { %Array*, %Array* }*, { %Array*, %Array* }** %175, align 8
  %177 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %176, i32 0, i32 0
  %178 = load %Array*, %Array** %177, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %178, i32 1)
  %179 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %176, i32 0, i32 1
  %180 = load %Array*, %Array** %179, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %180, i32 1)
  %181 = bitcast { %Array*, %Array* }* %176 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %181, i32 1)
  %182 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %172, i32 0, i32 1
  %183 = load %Array*, %Array** %182, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %183, i32 1)
  %184 = bitcast { { %Array*, %Array* }*, %Array* }* %172 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %184, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %178, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %180, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %181, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %183, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %184, i32 1)
  %185 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %174, align 8
  %186 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %185, i32 0, i32 0
  %187 = load { %Array*, %Array* }*, { %Array*, %Array* }** %186, align 8
  %188 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %187, i32 0, i32 0
  %189 = load %Array*, %Array** %188, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %189, i32 -1)
  %190 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %187, i32 0, i32 1
  %191 = load %Array*, %Array** %190, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %191, i32 -1)
  %192 = bitcast { %Array*, %Array* }* %187 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %192, i32 -1)
  %193 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %185, i32 0, i32 1
  %194 = load %Array*, %Array** %193, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %194, i32 -1)
  %195 = bitcast { { %Array*, %Array* }*, %Array* }* %185 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %195, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %189, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %191, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %192, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %195, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %172, { { %Array*, %Array* }*, %Array* }** %174, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %161, i32 1)
  store %Array* %161, %Array** %genIdxes, align 8
  %196 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %168, i32 0, i32 0
  %197 = load { %Array*, %Array* }*, { %Array*, %Array* }** %196, align 8
  %198 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %197, i32 0, i32 0
  %199 = load %Array*, %Array** %198, align 8
  %200 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %197, i32 0, i32 1
  %201 = load %Array*, %Array** %200, align 8
  %202 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %168, i32 0, i32 1
  %203 = load %Array*, %Array** %202, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %160, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %165, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %199, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %201, i32 -1)
  %204 = bitcast { %Array*, %Array* }* %197 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %204, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %203, i32 -1)
  %205 = bitcast { { %Array*, %Array* }*, %Array* }* %168 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %205, i32 -1)
  %206 = call i64 @__quantum__rt__array_get_size_1d(%Array* %169)
  %207 = sub i64 %206, 1
  br label %header__12

exiting__11:                                      ; preds = %exit__12
  %208 = add i64 %idx, %154
  br label %header__11

exit__11:                                         ; preds = %header__11
  store i64 %1, i64* %startIdx, align 4
  %209 = call %Range @Microsoft__Quantum__Arrays___700b015a14454be98b56de747498937e_IndexRange__body(%Array* %ZZData)
  %210 = extractvalue %Range %209, 0
  %211 = extractvalue %Range %209, 1
  %212 = extractvalue %Range %209, 2
  br label %preheader__2

header__12:                                       ; preds = %exiting__12, %body__11
  %213 = phi i64 [ 0, %body__11 ], [ %228, %exiting__12 ]
  %214 = icmp sle i64 %213, %207
  br i1 %214, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %169, i64 %213)
  %216 = bitcast i8* %215 to { { %Array*, %Array* }*, %Array* }**
  %217 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %216, align 8
  %218 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %217, i32 0, i32 0
  %219 = load { %Array*, %Array* }*, { %Array*, %Array* }** %218, align 8
  %220 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %219, i32 0, i32 0
  %221 = load %Array*, %Array** %220, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %221, i32 -1)
  %222 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %219, i32 0, i32 1
  %223 = load %Array*, %Array** %222, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %223, i32 -1)
  %224 = bitcast { %Array*, %Array* }* %219 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %224, i32 -1)
  %225 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %217, i32 0, i32 1
  %226 = load %Array*, %Array** %225, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %226, i32 -1)
  %227 = bitcast { { %Array*, %Array* }*, %Array* }* %217 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %227, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %228 = add i64 %213, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %169, i32 -1)
  br label %exiting__11

preheader__2:                                     ; preds = %exit__11
  %229 = icmp sgt i64 %211, 0
  br label %header__13

header__13:                                       ; preds = %exiting__13, %preheader__2
  %idx__1 = phi i64 [ %210, %preheader__2 ], [ %283, %exiting__13 ]
  %230 = icmp sle i64 %idx__1, %212
  %231 = icmp sge i64 %idx__1, %212
  %232 = select i1 %229, i1 %230, i1 %231
  br i1 %232, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %233 = load %Array*, %Array** %genIdxes, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %233, i32 -1)
  %234 = call %Array* @__quantum__rt__array_copy(%Array* %233, i1 false)
  %235 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %idx__1)
  %236 = bitcast i8* %235 to { %Array*, %Array* }**
  %237 = load { %Array*, %Array* }*, { %Array*, %Array* }** %236, align 8
  %238 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %239 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %238, i64 0)
  %240 = bitcast i8* %239 to i64*
  store i64 1, i64* %240, align 4
  %241 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermToGenIdx__body({ %Array*, %Array* }* %237, %Array* %238)
  %242 = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ZZTermToPauliGenIdx____body({ { %Array*, %Array* }*, %Array* }* %241)
  %243 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %242, i64 0)
  %244 = bitcast i8* %243 to { { %Array*, %Array* }*, %Array* }**
  %245 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %244, align 8
  %246 = load i64, i64* %startIdx, align 4
  %247 = add i64 %246, %idx__1
  %248 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %234, i64 %247)
  %249 = bitcast i8* %248 to { { %Array*, %Array* }*, %Array* }**
  %250 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %245, i32 0, i32 0
  %251 = load { %Array*, %Array* }*, { %Array*, %Array* }** %250, align 8
  %252 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %251, i32 0, i32 0
  %253 = load %Array*, %Array** %252, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %253, i32 1)
  %254 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %251, i32 0, i32 1
  %255 = load %Array*, %Array** %254, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %255, i32 1)
  %256 = bitcast { %Array*, %Array* }* %251 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %256, i32 1)
  %257 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %245, i32 0, i32 1
  %258 = load %Array*, %Array** %257, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %258, i32 1)
  %259 = bitcast { { %Array*, %Array* }*, %Array* }* %245 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %259, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %253, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %255, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %256, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %258, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %259, i32 1)
  %260 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %249, align 8
  %261 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %260, i32 0, i32 0
  %262 = load { %Array*, %Array* }*, { %Array*, %Array* }** %261, align 8
  %263 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %262, i32 0, i32 0
  %264 = load %Array*, %Array** %263, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %264, i32 -1)
  %265 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %262, i32 0, i32 1
  %266 = load %Array*, %Array** %265, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %266, i32 -1)
  %267 = bitcast { %Array*, %Array* }* %262 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %267, i32 -1)
  %268 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %260, i32 0, i32 1
  %269 = load %Array*, %Array** %268, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %269, i32 -1)
  %270 = bitcast { { %Array*, %Array* }*, %Array* }* %260 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %270, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %264, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %266, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %267, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %269, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %270, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %245, { { %Array*, %Array* }*, %Array* }** %249, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %234, i32 1)
  store %Array* %234, %Array** %genIdxes, align 8
  %271 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %241, i32 0, i32 0
  %272 = load { %Array*, %Array* }*, { %Array*, %Array* }** %271, align 8
  %273 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %272, i32 0, i32 0
  %274 = load %Array*, %Array** %273, align 8
  %275 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %272, i32 0, i32 1
  %276 = load %Array*, %Array** %275, align 8
  %277 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %241, i32 0, i32 1
  %278 = load %Array*, %Array** %277, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %233, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %238, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %274, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %276, i32 -1)
  %279 = bitcast { %Array*, %Array* }* %272 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %279, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %278, i32 -1)
  %280 = bitcast { { %Array*, %Array* }*, %Array* }* %241 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %280, i32 -1)
  %281 = call i64 @__quantum__rt__array_get_size_1d(%Array* %242)
  %282 = sub i64 %281, 1
  br label %header__14

exiting__13:                                      ; preds = %exit__14
  %283 = add i64 %idx__1, %211
  br label %header__13

exit__13:                                         ; preds = %header__13
  %284 = load i64, i64* %startIdx, align 4
  %285 = add i64 %284, %15
  store i64 %285, i64* %startIdx, align 4
  %286 = call %Range @Microsoft__Quantum__Arrays___700b015a14454be98b56de747498937e_IndexRange__body(%Array* %PQandPQQRData)
  %287 = extractvalue %Range %286, 0
  %288 = extractvalue %Range %286, 1
  %289 = extractvalue %Range %286, 2
  br label %preheader__3

header__14:                                       ; preds = %exiting__14, %body__13
  %290 = phi i64 [ 0, %body__13 ], [ %305, %exiting__14 ]
  %291 = icmp sle i64 %290, %282
  br i1 %291, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %292 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %242, i64 %290)
  %293 = bitcast i8* %292 to { { %Array*, %Array* }*, %Array* }**
  %294 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %293, align 8
  %295 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %294, i32 0, i32 0
  %296 = load { %Array*, %Array* }*, { %Array*, %Array* }** %295, align 8
  %297 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %296, i32 0, i32 0
  %298 = load %Array*, %Array** %297, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %298, i32 -1)
  %299 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %296, i32 0, i32 1
  %300 = load %Array*, %Array** %299, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %300, i32 -1)
  %301 = bitcast { %Array*, %Array* }* %296 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %301, i32 -1)
  %302 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %294, i32 0, i32 1
  %303 = load %Array*, %Array** %302, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %303, i32 -1)
  %304 = bitcast { { %Array*, %Array* }*, %Array* }* %294 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %304, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %305 = add i64 %290, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %242, i32 -1)
  br label %exiting__13

preheader__3:                                     ; preds = %exit__13
  %306 = icmp sgt i64 %288, 0
  br label %header__15

header__15:                                       ; preds = %exiting__15, %preheader__3
  %idx__2 = phi i64 [ %287, %preheader__3 ], [ %319, %exiting__15 ]
  %307 = icmp sle i64 %idx__2, %289
  %308 = icmp sge i64 %idx__2, %289
  %309 = select i1 %306, i1 %307, i1 %308
  br i1 %309, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %310 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %idx__2)
  %311 = bitcast i8* %310 to { %Array*, %Array* }**
  %312 = load { %Array*, %Array* }*, { %Array*, %Array* }** %311, align 8
  %313 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %314 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %313, i64 0)
  %315 = bitcast i8* %314 to i64*
  store i64 2, i64* %315, align 4
  %316 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermToGenIdx__body({ %Array*, %Array* }* %312, %Array* %313)
  %genArr = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PQandPQQRTermToPauliGenIdx_____body({ { %Array*, %Array* }*, %Array* }* %316)
  %317 = call i64 @__quantum__rt__array_get_size_1d(%Array* %genArr)
  %318 = sub i64 %317, 1
  br label %header__16

exiting__15:                                      ; preds = %exit__18
  %319 = add i64 %idx__2, %288
  br label %header__15

exit__15:                                         ; preds = %header__15
  %320 = load i64, i64* %startIdx, align 4
  %321 = mul i64 2, %29
  %322 = add i64 %320, %321
  store i64 %322, i64* %startIdx, align 4
  store i64 %322, i64* %finalIdx, align 4
  %323 = sub i64 %43, 1
  br label %header__19

header__16:                                       ; preds = %exiting__16, %body__15
  %324 = phi i64 [ 0, %body__15 ], [ %339, %exiting__16 ]
  %325 = icmp sle i64 %324, %318
  br i1 %325, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %326 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr, i64 %324)
  %327 = bitcast i8* %326 to { { %Array*, %Array* }*, %Array* }**
  %328 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %327, align 8
  %329 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %328, i32 0, i32 0
  %330 = load { %Array*, %Array* }*, { %Array*, %Array* }** %329, align 8
  %331 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %330, i32 0, i32 0
  %332 = load %Array*, %Array** %331, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %332, i32 1)
  %333 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %330, i32 0, i32 1
  %334 = load %Array*, %Array** %333, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %334, i32 1)
  %335 = bitcast { %Array*, %Array* }* %330 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %335, i32 1)
  %336 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %328, i32 0, i32 1
  %337 = load %Array*, %Array** %336, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %337, i32 1)
  %338 = bitcast { { %Array*, %Array* }*, %Array* }* %328 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %338, i32 1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %339 = add i64 %324, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %genArr, i32 1)
  %340 = load %Array*, %Array** %genIdxes, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %340, i32 -1)
  %341 = call %Array* @__quantum__rt__array_copy(%Array* %340, i1 false)
  %342 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr, i64 0)
  %343 = bitcast i8* %342 to { { %Array*, %Array* }*, %Array* }**
  %344 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %343, align 8
  %345 = load i64, i64* %startIdx, align 4
  %346 = mul i64 2, %idx__2
  %347 = add i64 %345, %346
  %348 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %341, i64 %347)
  %349 = bitcast i8* %348 to { { %Array*, %Array* }*, %Array* }**
  %350 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %344, i32 0, i32 0
  %351 = load { %Array*, %Array* }*, { %Array*, %Array* }** %350, align 8
  %352 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %351, i32 0, i32 0
  %353 = load %Array*, %Array** %352, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %353, i32 1)
  %354 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %351, i32 0, i32 1
  %355 = load %Array*, %Array** %354, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %355, i32 1)
  %356 = bitcast { %Array*, %Array* }* %351 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %356, i32 1)
  %357 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %344, i32 0, i32 1
  %358 = load %Array*, %Array** %357, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %358, i32 1)
  %359 = bitcast { { %Array*, %Array* }*, %Array* }* %344 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %359, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %353, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %355, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %356, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %358, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %359, i32 1)
  %360 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %349, align 8
  %361 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %360, i32 0, i32 0
  %362 = load { %Array*, %Array* }*, { %Array*, %Array* }** %361, align 8
  %363 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %362, i32 0, i32 0
  %364 = load %Array*, %Array** %363, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %364, i32 -1)
  %365 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %362, i32 0, i32 1
  %366 = load %Array*, %Array** %365, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %366, i32 -1)
  %367 = bitcast { %Array*, %Array* }* %362 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %367, i32 -1)
  %368 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %360, i32 0, i32 1
  %369 = load %Array*, %Array** %368, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %369, i32 -1)
  %370 = bitcast { { %Array*, %Array* }*, %Array* }* %360 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %370, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %364, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %366, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %367, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %369, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %370, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %344, { { %Array*, %Array* }*, %Array* }** %349, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %341, i32 1)
  store %Array* %341, %Array** %genIdxes, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %341, i32 -1)
  %371 = call %Array* @__quantum__rt__array_copy(%Array* %341, i1 false)
  %372 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr, i64 1)
  %373 = bitcast i8* %372 to { { %Array*, %Array* }*, %Array* }**
  %374 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %373, align 8
  %375 = mul i64 2, %idx__2
  %376 = add i64 %345, %375
  %377 = add i64 %376, 1
  %378 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %371, i64 %377)
  %379 = bitcast i8* %378 to { { %Array*, %Array* }*, %Array* }**
  %380 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %374, i32 0, i32 0
  %381 = load { %Array*, %Array* }*, { %Array*, %Array* }** %380, align 8
  %382 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %381, i32 0, i32 0
  %383 = load %Array*, %Array** %382, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %383, i32 1)
  %384 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %381, i32 0, i32 1
  %385 = load %Array*, %Array** %384, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %385, i32 1)
  %386 = bitcast { %Array*, %Array* }* %381 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %386, i32 1)
  %387 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %374, i32 0, i32 1
  %388 = load %Array*, %Array** %387, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %388, i32 1)
  %389 = bitcast { { %Array*, %Array* }*, %Array* }* %374 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %389, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %383, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %385, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %386, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %388, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %389, i32 1)
  %390 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %379, align 8
  %391 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %390, i32 0, i32 0
  %392 = load { %Array*, %Array* }*, { %Array*, %Array* }** %391, align 8
  %393 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %392, i32 0, i32 0
  %394 = load %Array*, %Array** %393, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %394, i32 -1)
  %395 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %392, i32 0, i32 1
  %396 = load %Array*, %Array** %395, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %396, i32 -1)
  %397 = bitcast { %Array*, %Array* }* %392 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %397, i32 -1)
  %398 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %390, i32 0, i32 1
  %399 = load %Array*, %Array** %398, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %399, i32 -1)
  %400 = bitcast { { %Array*, %Array* }*, %Array* }* %390 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %400, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %394, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %396, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %397, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %399, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %400, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %374, { { %Array*, %Array* }*, %Array* }** %379, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %371, i32 1)
  store %Array* %371, %Array** %genIdxes, align 8
  %401 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %316, i32 0, i32 0
  %402 = load { %Array*, %Array* }*, { %Array*, %Array* }** %401, align 8
  %403 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %402, i32 0, i32 0
  %404 = load %Array*, %Array** %403, align 8
  %405 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %402, i32 0, i32 1
  %406 = load %Array*, %Array** %405, align 8
  %407 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %316, i32 0, i32 1
  %408 = load %Array*, %Array** %407, align 8
  %409 = sub i64 %317, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %410 = phi i64 [ 0, %exit__16 ], [ %425, %exiting__17 ]
  %411 = icmp sle i64 %410, %409
  br i1 %411, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %412 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr, i64 %410)
  %413 = bitcast i8* %412 to { { %Array*, %Array* }*, %Array* }**
  %414 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %413, align 8
  %415 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %414, i32 0, i32 0
  %416 = load { %Array*, %Array* }*, { %Array*, %Array* }** %415, align 8
  %417 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %416, i32 0, i32 0
  %418 = load %Array*, %Array** %417, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %418, i32 -1)
  %419 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %416, i32 0, i32 1
  %420 = load %Array*, %Array** %419, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %420, i32 -1)
  %421 = bitcast { %Array*, %Array* }* %416 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %421, i32 -1)
  %422 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %414, i32 0, i32 1
  %423 = load %Array*, %Array** %422, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %423, i32 -1)
  %424 = bitcast { { %Array*, %Array* }*, %Array* }* %414 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %424, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %425 = add i64 %410, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %genArr, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %313, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %404, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %406, i32 -1)
  %426 = bitcast { %Array*, %Array* }* %402 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %426, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %408, i32 -1)
  %427 = bitcast { { %Array*, %Array* }*, %Array* }* %316 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %427, i32 -1)
  %428 = sub i64 %317, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %429 = phi i64 [ 0, %exit__17 ], [ %444, %exiting__18 ]
  %430 = icmp sle i64 %429, %428
  br i1 %430, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %431 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr, i64 %429)
  %432 = bitcast i8* %431 to { { %Array*, %Array* }*, %Array* }**
  %433 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %432, align 8
  %434 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %433, i32 0, i32 0
  %435 = load { %Array*, %Array* }*, { %Array*, %Array* }** %434, align 8
  %436 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %435, i32 0, i32 0
  %437 = load %Array*, %Array** %436, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %437, i32 -1)
  %438 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %435, i32 0, i32 1
  %439 = load %Array*, %Array** %438, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %439, i32 -1)
  %440 = bitcast { %Array*, %Array* }* %435 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %440, i32 -1)
  %441 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %433, i32 0, i32 1
  %442 = load %Array*, %Array** %441, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %442, i32 -1)
  %443 = bitcast { { %Array*, %Array* }*, %Array* }* %433 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %443, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %444 = add i64 %429, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_reference_count(%Array* %genArr, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %340, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %341, i32 -1)
  br label %exiting__15

header__19:                                       ; preds = %exiting__19, %exit__15
  %idx__3 = phi i64 [ 0, %exit__15 ], [ %455, %exiting__19 ]
  %445 = icmp sle i64 %idx__3, %323
  br i1 %445, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %446 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %idx__3)
  %447 = bitcast i8* %446 to { %Array*, %Array* }**
  %448 = load { %Array*, %Array* }*, { %Array*, %Array* }** %447, align 8
  %449 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %450 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %449, i64 0)
  %451 = bitcast i8* %450 to i64*
  store i64 3, i64* %451, align 4
  %452 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermToGenIdx__body({ %Array*, %Array* }* %448, %Array* %449)
  %genArr__1 = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___V0123TermToPauliGenIdx_____body({ { %Array*, %Array* }*, %Array* }* %452)
  %453 = call i64 @__quantum__rt__array_get_size_1d(%Array* %genArr__1)
  %454 = sub i64 %453, 1
  br label %header__20

exiting__19:                                      ; preds = %exit__23
  %455 = add i64 %idx__3, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  %456 = load i64, i64* %finalIdx, align 4
  %457 = load %Array*, %Array** %genIdxes, align 8
  %458 = sub i64 %456, 1
  %459 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %458, 2
  %460 = call %Array* @__quantum__rt__array_slice_1d(%Array* %457, %Range %459, i1 true)
  %461 = call %Callable* @Microsoft__Quantum__Arrays___afda34fbc524426087f3337291e18d1f_LookupFunction__body(%Array* %460)
  %462 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %456, %Callable* %461)
  %463 = load { %Array*, %Array* }*, { %Array*, %Array* }** %114, align 8
  %464 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %463, i32 0, i32 0
  %465 = load %Array*, %Array** %464, align 8
  %466 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %463, i32 0, i32 1
  %467 = load %Array*, %Array** %466, align 8
  %468 = load %Array*, %Array** %115, align 8
  %469 = sub i64 %1, 1
  br label %header__24

header__20:                                       ; preds = %exiting__20, %body__19
  %470 = phi i64 [ 0, %body__19 ], [ %485, %exiting__20 ]
  %471 = icmp sle i64 %470, %454
  br i1 %471, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %472 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr__1, i64 %470)
  %473 = bitcast i8* %472 to { { %Array*, %Array* }*, %Array* }**
  %474 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %473, align 8
  %475 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %474, i32 0, i32 0
  %476 = load { %Array*, %Array* }*, { %Array*, %Array* }** %475, align 8
  %477 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %476, i32 0, i32 0
  %478 = load %Array*, %Array** %477, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %478, i32 1)
  %479 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %476, i32 0, i32 1
  %480 = load %Array*, %Array** %479, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %480, i32 1)
  %481 = bitcast { %Array*, %Array* }* %476 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %481, i32 1)
  %482 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %474, i32 0, i32 1
  %483 = load %Array*, %Array** %482, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %483, i32 1)
  %484 = bitcast { { %Array*, %Array* }*, %Array* }* %474 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %484, i32 1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %485 = add i64 %470, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %genArr__1, i32 1)
  %486 = call %Range @Microsoft__Quantum__Arrays___1282ba485eb84ebd9e61ed357fc1aebb_IndexRange__body(%Array* %genArr__1)
  %487 = extractvalue %Range %486, 0
  %488 = extractvalue %Range %486, 1
  %489 = extractvalue %Range %486, 2
  br label %preheader__4

preheader__4:                                     ; preds = %exit__20
  %490 = icmp sgt i64 %488, 0
  br label %header__21

header__21:                                       ; preds = %exiting__21, %preheader__4
  %idx0123 = phi i64 [ %487, %preheader__4 ], [ %524, %exiting__21 ]
  %491 = icmp sle i64 %idx0123, %489
  %492 = icmp sge i64 %idx0123, %489
  %493 = select i1 %490, i1 %491, i1 %492
  br i1 %493, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %494 = load %Array*, %Array** %genIdxes, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %494, i32 -1)
  %495 = call %Array* @__quantum__rt__array_copy(%Array* %494, i1 false)
  %496 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr__1, i64 %idx0123)
  %497 = bitcast i8* %496 to { { %Array*, %Array* }*, %Array* }**
  %498 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %497, align 8
  %499 = load i64, i64* %finalIdx, align 4
  %500 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %495, i64 %499)
  %501 = bitcast i8* %500 to { { %Array*, %Array* }*, %Array* }**
  %502 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %498, i32 0, i32 0
  %503 = load { %Array*, %Array* }*, { %Array*, %Array* }** %502, align 8
  %504 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %503, i32 0, i32 0
  %505 = load %Array*, %Array** %504, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %505, i32 1)
  %506 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %503, i32 0, i32 1
  %507 = load %Array*, %Array** %506, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %507, i32 1)
  %508 = bitcast { %Array*, %Array* }* %503 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %508, i32 1)
  %509 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %498, i32 0, i32 1
  %510 = load %Array*, %Array** %509, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %510, i32 1)
  %511 = bitcast { { %Array*, %Array* }*, %Array* }* %498 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %511, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %505, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %507, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %508, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %510, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %511, i32 1)
  %512 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %501, align 8
  %513 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %512, i32 0, i32 0
  %514 = load { %Array*, %Array* }*, { %Array*, %Array* }** %513, align 8
  %515 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %514, i32 0, i32 0
  %516 = load %Array*, %Array** %515, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %516, i32 -1)
  %517 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %514, i32 0, i32 1
  %518 = load %Array*, %Array** %517, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %518, i32 -1)
  %519 = bitcast { %Array*, %Array* }* %514 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %519, i32 -1)
  %520 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %512, i32 0, i32 1
  %521 = load %Array*, %Array** %520, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %521, i32 -1)
  %522 = bitcast { { %Array*, %Array* }*, %Array* }* %512 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %522, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %516, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %518, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %519, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %521, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %522, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %498, { { %Array*, %Array* }*, %Array* }** %501, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %495, i32 1)
  store %Array* %495, %Array** %genIdxes, align 8
  %523 = add i64 %499, 1
  store i64 %523, i64* %finalIdx, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %494, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %524 = add i64 %idx0123, %488
  br label %header__21

exit__21:                                         ; preds = %header__21
  %525 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %452, i32 0, i32 0
  %526 = load { %Array*, %Array* }*, { %Array*, %Array* }** %525, align 8
  %527 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %526, i32 0, i32 0
  %528 = load %Array*, %Array** %527, align 8
  %529 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %526, i32 0, i32 1
  %530 = load %Array*, %Array** %529, align 8
  %531 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %452, i32 0, i32 1
  %532 = load %Array*, %Array** %531, align 8
  %533 = sub i64 %453, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %534 = phi i64 [ 0, %exit__21 ], [ %549, %exiting__22 ]
  %535 = icmp sle i64 %534, %533
  br i1 %535, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %536 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr__1, i64 %534)
  %537 = bitcast i8* %536 to { { %Array*, %Array* }*, %Array* }**
  %538 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %537, align 8
  %539 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %538, i32 0, i32 0
  %540 = load { %Array*, %Array* }*, { %Array*, %Array* }** %539, align 8
  %541 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %540, i32 0, i32 0
  %542 = load %Array*, %Array** %541, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %542, i32 -1)
  %543 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %540, i32 0, i32 1
  %544 = load %Array*, %Array** %543, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %544, i32 -1)
  %545 = bitcast { %Array*, %Array* }* %540 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %545, i32 -1)
  %546 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %538, i32 0, i32 1
  %547 = load %Array*, %Array** %546, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %547, i32 -1)
  %548 = bitcast { { %Array*, %Array* }*, %Array* }* %538 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %548, i32 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %549 = add i64 %534, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_alias_count(%Array* %genArr__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %449, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %528, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %530, i32 -1)
  %550 = bitcast { %Array*, %Array* }* %526 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %550, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %532, i32 -1)
  %551 = bitcast { { %Array*, %Array* }*, %Array* }* %452 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %551, i32 -1)
  %552 = sub i64 %453, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %553 = phi i64 [ 0, %exit__22 ], [ %568, %exiting__23 ]
  %554 = icmp sle i64 %553, %552
  br i1 %554, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %555 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %genArr__1, i64 %553)
  %556 = bitcast i8* %555 to { { %Array*, %Array* }*, %Array* }**
  %557 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %556, align 8
  %558 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %557, i32 0, i32 0
  %559 = load { %Array*, %Array* }*, { %Array*, %Array* }** %558, align 8
  %560 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %559, i32 0, i32 0
  %561 = load %Array*, %Array** %560, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %561, i32 -1)
  %562 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %559, i32 0, i32 1
  %563 = load %Array*, %Array** %562, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %563, i32 -1)
  %564 = bitcast { %Array*, %Array* }* %559 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %564, i32 -1)
  %565 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %557, i32 0, i32 1
  %566 = load %Array*, %Array** %565, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %566, i32 -1)
  %567 = bitcast { { %Array*, %Array* }*, %Array* }* %557 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %567, i32 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %568 = add i64 %553, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_reference_count(%Array* %genArr__1, i32 -1)
  br label %exiting__19

header__24:                                       ; preds = %exiting__24, %exit__19
  %569 = phi i64 [ 0, %exit__19 ], [ %579, %exiting__24 ]
  %570 = icmp sle i64 %569, %469
  br i1 %570, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %571 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %569)
  %572 = bitcast i8* %571 to { %Array*, %Array* }**
  %573 = load { %Array*, %Array* }*, { %Array*, %Array* }** %572, align 8
  %574 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %573, i32 0, i32 0
  %575 = load %Array*, %Array** %574, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %575, i32 -1)
  %576 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %573, i32 0, i32 1
  %577 = load %Array*, %Array** %576, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %577, i32 -1)
  %578 = bitcast { %Array*, %Array* }* %573 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %578, i32 -1)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %579 = add i64 %569, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 -1)
  %580 = sub i64 %15, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %exit__24
  %581 = phi i64 [ 0, %exit__24 ], [ %591, %exiting__25 ]
  %582 = icmp sle i64 %581, %580
  br i1 %582, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %583 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %581)
  %584 = bitcast i8* %583 to { %Array*, %Array* }**
  %585 = load { %Array*, %Array* }*, { %Array*, %Array* }** %584, align 8
  %586 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %585, i32 0, i32 0
  %587 = load %Array*, %Array** %586, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %587, i32 -1)
  %588 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %585, i32 0, i32 1
  %589 = load %Array*, %Array** %588, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %589, i32 -1)
  %590 = bitcast { %Array*, %Array* }* %585 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %590, i32 -1)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %591 = add i64 %581, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 -1)
  %592 = sub i64 %29, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %593 = phi i64 [ 0, %exit__25 ], [ %603, %exiting__26 ]
  %594 = icmp sle i64 %593, %592
  br i1 %594, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %595 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %593)
  %596 = bitcast i8* %595 to { %Array*, %Array* }**
  %597 = load { %Array*, %Array* }*, { %Array*, %Array* }** %596, align 8
  %598 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %597, i32 0, i32 0
  %599 = load %Array*, %Array** %598, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %599, i32 -1)
  %600 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %597, i32 0, i32 1
  %601 = load %Array*, %Array** %600, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %601, i32 -1)
  %602 = bitcast { %Array*, %Array* }* %597 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %602, i32 -1)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %603 = add i64 %593, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 -1)
  %604 = sub i64 %43, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %605 = phi i64 [ 0, %exit__26 ], [ %615, %exiting__27 ]
  %606 = icmp sle i64 %605, %604
  br i1 %606, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %607 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %605)
  %608 = bitcast i8* %607 to { %Array*, %Array* }**
  %609 = load { %Array*, %Array* }*, { %Array*, %Array* }** %608, align 8
  %610 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %609, i32 0, i32 0
  %611 = load %Array*, %Array** %610, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %611, i32 -1)
  %612 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %609, i32 0, i32 1
  %613 = load %Array*, %Array** %612, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %613, i32 -1)
  %614 = bitcast { %Array*, %Array* }* %609 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %614, i32 -1)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %615 = add i64 %605, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  %616 = sub i64 %1, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %617 = phi i64 [ 0, %exit__27 ], [ %627, %exiting__28 ]
  %618 = icmp sle i64 %617, %616
  br i1 %618, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %619 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %617)
  %620 = bitcast i8* %619 to { %Array*, %Array* }**
  %621 = load { %Array*, %Array* }*, { %Array*, %Array* }** %620, align 8
  %622 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %621, i32 0, i32 0
  %623 = load %Array*, %Array** %622, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %623, i32 -1)
  %624 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %621, i32 0, i32 1
  %625 = load %Array*, %Array** %624, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %625, i32 -1)
  %626 = bitcast { %Array*, %Array* }* %621 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %626, i32 -1)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %627 = add i64 %617, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 -1)
  %628 = sub i64 %15, 1
  br label %header__29

header__29:                                       ; preds = %exiting__29, %exit__28
  %629 = phi i64 [ 0, %exit__28 ], [ %639, %exiting__29 ]
  %630 = icmp sle i64 %629, %628
  br i1 %630, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %631 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %629)
  %632 = bitcast i8* %631 to { %Array*, %Array* }**
  %633 = load { %Array*, %Array* }*, { %Array*, %Array* }** %632, align 8
  %634 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %633, i32 0, i32 0
  %635 = load %Array*, %Array** %634, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %635, i32 -1)
  %636 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %633, i32 0, i32 1
  %637 = load %Array*, %Array** %636, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %637, i32 -1)
  %638 = bitcast { %Array*, %Array* }* %633 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %638, i32 -1)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %639 = add i64 %629, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 -1)
  %640 = sub i64 %29, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %641 = phi i64 [ 0, %exit__29 ], [ %651, %exiting__30 ]
  %642 = icmp sle i64 %641, %640
  br i1 %642, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %643 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %641)
  %644 = bitcast i8* %643 to { %Array*, %Array* }**
  %645 = load { %Array*, %Array* }*, { %Array*, %Array* }** %644, align 8
  %646 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %645, i32 0, i32 0
  %647 = load %Array*, %Array** %646, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %647, i32 -1)
  %648 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %645, i32 0, i32 1
  %649 = load %Array*, %Array** %648, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %649, i32 -1)
  %650 = bitcast { %Array*, %Array* }* %645 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %650, i32 -1)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %651 = add i64 %641, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 -1)
  %652 = sub i64 %43, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %653 = phi i64 [ 0, %exit__30 ], [ %663, %exiting__31 ]
  %654 = icmp sle i64 %653, %652
  br i1 %654, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %655 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %653)
  %656 = bitcast i8* %655 to { %Array*, %Array* }**
  %657 = load { %Array*, %Array* }*, { %Array*, %Array* }** %656, align 8
  %658 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %657, i32 0, i32 0
  %659 = load %Array*, %Array** %658, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %659, i32 -1)
  %660 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %657, i32 0, i32 1
  %661 = load %Array*, %Array** %660, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %661, i32 -1)
  %662 = bitcast { %Array*, %Array* }* %657 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %662, i32 -1)
  br label %exiting__31

exiting__31:                                      ; preds = %body__31
  %663 = add i64 %653, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 -1)
  %664 = call i64 @__quantum__rt__array_get_size_1d(%Array* %457)
  %665 = sub i64 %664, 1
  br label %header__32

header__32:                                       ; preds = %exiting__32, %exit__31
  %666 = phi i64 [ 0, %exit__31 ], [ %681, %exiting__32 ]
  %667 = icmp sle i64 %666, %665
  br i1 %667, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %668 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %457, i64 %666)
  %669 = bitcast i8* %668 to { { %Array*, %Array* }*, %Array* }**
  %670 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %669, align 8
  %671 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %670, i32 0, i32 0
  %672 = load { %Array*, %Array* }*, { %Array*, %Array* }** %671, align 8
  %673 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %672, i32 0, i32 0
  %674 = load %Array*, %Array** %673, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %674, i32 -1)
  %675 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %672, i32 0, i32 1
  %676 = load %Array*, %Array** %675, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %676, i32 -1)
  %677 = bitcast { %Array*, %Array* }* %672 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %677, i32 -1)
  %678 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %670, i32 0, i32 1
  %679 = load %Array*, %Array** %678, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %679, i32 -1)
  %680 = bitcast { { %Array*, %Array* }*, %Array* }* %670 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %680, i32 -1)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %681 = add i64 %666, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_update_alias_count(%Array* %457, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %465, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %467, i32 -1)
  %682 = bitcast { %Array*, %Array* }* %463 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %682, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %468, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %112, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %460, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %461, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %461, i32 -1)
  %683 = sub i64 %664, 1
  br label %header__33

header__33:                                       ; preds = %exiting__33, %exit__32
  %684 = phi i64 [ 0, %exit__32 ], [ %699, %exiting__33 ]
  %685 = icmp sle i64 %684, %683
  br i1 %685, label %body__33, label %exit__33

body__33:                                         ; preds = %header__33
  %686 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %457, i64 %684)
  %687 = bitcast i8* %686 to { { %Array*, %Array* }*, %Array* }**
  %688 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %687, align 8
  %689 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %688, i32 0, i32 0
  %690 = load { %Array*, %Array* }*, { %Array*, %Array* }** %689, align 8
  %691 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %690, i32 0, i32 0
  %692 = load %Array*, %Array** %691, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %692, i32 -1)
  %693 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %690, i32 0, i32 1
  %694 = load %Array*, %Array** %693, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %694, i32 -1)
  %695 = bitcast { %Array*, %Array* }* %690 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %695, i32 -1)
  %696 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %688, i32 0, i32 1
  %697 = load %Array*, %Array** %696, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %697, i32 -1)
  %698 = bitcast { { %Array*, %Array* }*, %Array* }* %688 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %698, i32 -1)
  br label %exiting__33

exiting__33:                                      ; preds = %body__33
  %699 = add i64 %684, 1
  br label %header__33

exit__33:                                         ; preds = %header__33
  call void @__quantum__rt__array_update_reference_count(%Array* %457, i32 -1)
  ret { i64, %Callable* }* %462
}

define internal { double, { { %Callable* }* }* }* @Microsoft__Quantum__Simulation__PauliBlockEncoding__body({ i64, %Callable* }* %generatorSystem) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %statePrepUnitary = call %Callable* @Microsoft__Quantum__Canon___6a714b914d4d48de8a4ad7810cc0d5d1_CurriedOpCA__body(%Callable* %3)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  %multiplexer = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__MultiplexerFromGenerator__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %multiplexer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i32 1)
  %4 = call { double, { { %Callable* }* }* }* @Microsoft__Quantum__Simulation____QsRef3___PauliBlockEncoding____body({ i64, %Callable* }* %generatorSystem, %Callable* %statePrepUnitary, %Callable* %multiplexer)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %multiplexer, i32 -1)
  ret { double, { { %Callable* }* }* }* %4
}

define internal i64 @Microsoft__Quantum__Math__Ceiling__body(double %value) {
entry:
  %0 = call { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef2__ExtendedTruncation____body(double %value)
  %1 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 0
  %truncated = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 1
  %remainder = load double, double* %2, align 8
  %3 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 2
  %isPositive = load i1, i1* %3, align 1
  %4 = call double @Microsoft__Quantum__Math__AbsD__body(double %remainder)
  %5 = fcmp ole double %4, 1.000000e-15
  br i1 %5, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %6 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret i64 %truncated

else__1:                                          ; preds = %entry
  br i1 %isPositive, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %7 = add i64 %truncated, 1
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %8 = phi i64 [ %7, %condTrue__1 ], [ %truncated, %condFalse__1 ]
  %9 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret i64 %8

continue__1:                                      ; No predecessors!
  unreachable
}

define internal double @Microsoft__Quantum__Math__Lg__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  %1 = call double @Microsoft__Quantum__Math__LogOf2__body()
  %2 = fdiv double %0, %1
  ret double %2
}

define internal %Callable* @Microsoft__Quantum__Simulation__QuantumWalkByQubitization__body({ { %Callable* }* }* %blockEncoding) {
entry:
  %0 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %blockEncoding, i32 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = bitcast { { %Callable* }* }* %blockEncoding to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { { %Callable* }* }* }* getelementptr ({ %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, { { %Callable* }* }* }*
  %9 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %8, i32 0, i32 1
  store %Callable* %6, %Callable** %9, align 8
  store { { %Callable* }* }* %blockEncoding, { { %Callable* }* }** %10, align 8
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__58__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__34__FunctionTable, %Tuple* %7)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  ret %Callable* %11
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___V0123TermToPauliGenIdx_____body({ { %Array*, %Array* }*, %Array* }* %term) {
entry:
  %nonZero = alloca i64, align 8
  %genIdxes = alloca %Array*, align 8
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %v0123 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %8, align 4
  %12 = load i64, i64* %10, align 4
  %qubitsPQ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubitsPQ, i64 0)
  %14 = bitcast i8* %13 to i64*
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubitsPQ, i64 1)
  %16 = bitcast i8* %15 to i64*
  store i64 %11, i64* %14, align 4
  store i64 %12, i64* %16, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %18 = bitcast i8* %17 to i64*
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %18, align 4
  %22 = load i64, i64* %20, align 4
  %qubitsRS = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubitsRS, i64 0)
  %24 = bitcast i8* %23 to i64*
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubitsRS, i64 1)
  %26 = bitcast i8* %25 to i64*
  store i64 %21, i64* %24, align 4
  store i64 %22, i64* %26, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 1)
  %27 = add i64 %11, 1
  %28 = sub i64 %12, 1
  %29 = insertvalue %Range zeroinitializer, i64 %27, 0
  %30 = insertvalue %Range %29, i64 1, 1
  %31 = insertvalue %Range %30, i64 %28, 2
  %qubitsPQJW = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %31)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 1)
  %32 = add i64 %21, 1
  %33 = sub i64 %22, 1
  %34 = insertvalue %Range zeroinitializer, i64 %32, 0
  %35 = insertvalue %Range %34, i64 1, 1
  %36 = insertvalue %Range %35, i64 %33, 2
  %qubitsRSJW = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %36)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 1)
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 0)
  %39 = bitcast i8* %38 to i64*
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 1)
  %41 = bitcast i8* %40 to i64*
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 2)
  %43 = bitcast i8* %42 to i64*
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 3)
  %45 = bitcast i8* %44 to i64*
  store i64 1, i64* %39, align 4
  store i64 1, i64* %41, align 4
  store i64 1, i64* %43, align 4
  store i64 1, i64* %45, align 4
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to i64*
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 1)
  %50 = bitcast i8* %49 to i64*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 2)
  %52 = bitcast i8* %51 to i64*
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 3)
  %54 = bitcast i8* %53 to i64*
  store i64 1, i64* %48, align 4
  store i64 1, i64* %50, align 4
  store i64 2, i64* %52, align 4
  store i64 2, i64* %54, align 4
  %55 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 0)
  %57 = bitcast i8* %56 to i64*
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 1)
  %59 = bitcast i8* %58 to i64*
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 2)
  %61 = bitcast i8* %60 to i64*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 3)
  %63 = bitcast i8* %62 to i64*
  store i64 1, i64* %57, align 4
  store i64 2, i64* %59, align 4
  store i64 1, i64* %61, align 4
  store i64 2, i64* %63, align 4
  %64 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 0)
  %66 = bitcast i8* %65 to i64*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 1)
  %68 = bitcast i8* %67 to i64*
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 2)
  %70 = bitcast i8* %69 to i64*
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 3)
  %72 = bitcast i8* %71 to i64*
  store i64 2, i64* %66, align 4
  store i64 1, i64* %68, align 4
  store i64 1, i64* %70, align 4
  store i64 2, i64* %72, align 4
  %73 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 0)
  %75 = bitcast i8* %74 to i64*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 1)
  %77 = bitcast i8* %76 to i64*
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 2)
  %79 = bitcast i8* %78 to i64*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 3)
  %81 = bitcast i8* %80 to i64*
  store i64 2, i64* %75, align 4
  store i64 2, i64* %77, align 4
  store i64 2, i64* %79, align 4
  store i64 2, i64* %81, align 4
  %82 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 0)
  %84 = bitcast i8* %83 to i64*
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 1)
  %86 = bitcast i8* %85 to i64*
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 2)
  %88 = bitcast i8* %87 to i64*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 3)
  %90 = bitcast i8* %89 to i64*
  store i64 2, i64* %84, align 4
  store i64 2, i64* %86, align 4
  store i64 1, i64* %88, align 4
  store i64 1, i64* %90, align 4
  %91 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 0)
  %93 = bitcast i8* %92 to i64*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 1)
  %95 = bitcast i8* %94 to i64*
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 2)
  %97 = bitcast i8* %96 to i64*
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 3)
  %99 = bitcast i8* %98 to i64*
  store i64 2, i64* %93, align 4
  store i64 1, i64* %95, align 4
  store i64 2, i64* %97, align 4
  store i64 1, i64* %99, align 4
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 0)
  %102 = bitcast i8* %101 to i64*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 1)
  %104 = bitcast i8* %103 to i64*
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 2)
  %106 = bitcast i8* %105 to i64*
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 3)
  %108 = bitcast i8* %107 to i64*
  store i64 1, i64* %102, align 4
  store i64 2, i64* %104, align 4
  store i64 2, i64* %106, align 4
  store i64 1, i64* %108, align 4
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %110 = bitcast i8* %109 to %Array**
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %112 = bitcast i8* %111 to %Array**
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %114 = bitcast i8* %113 to %Array**
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %116 = bitcast i8* %115 to %Array**
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %118 = bitcast i8* %117 to %Array**
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %120 = bitcast i8* %119 to %Array**
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %122 = bitcast i8* %121 to %Array**
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %124 = bitcast i8* %123 to %Array**
  store %Array* %37, %Array** %110, align 8
  store %Array* %46, %Array** %112, align 8
  store %Array* %55, %Array** %114, align 8
  store %Array* %64, %Array** %116, align 8
  store %Array* %73, %Array** %118, align 8
  store %Array* %82, %Array** %120, align 8
  store %Array* %91, %Array** %122, align 8
  store %Array* %100, %Array** %124, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %125 = phi i64 [ 0, %entry ], [ %130, %exiting__1 ]
  %126 = icmp sle i64 %125, 7
  br i1 %126, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %125)
  %128 = bitcast i8* %127 to %Array**
  %129 = load %Array*, %Array** %128, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %129, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %130 = add i64 %125, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %131 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %132 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %133 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %134 = bitcast %Tuple* %133 to { %Array*, %Array* }*
  %135 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %134, i32 0, i32 0
  %136 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %134, i32 0, i32 1
  store %Array* %131, %Array** %135, align 8
  store %Array* %132, %Array** %136, align 8
  %137 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %138 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array* }*, %Array* }* getelementptr ({ { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* null, i32 1) to i64))
  %139 = bitcast %Tuple* %138 to { { %Array*, %Array* }*, %Array* }*
  %140 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %139, i32 0, i32 0
  %141 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %139, i32 0, i32 1
  store { %Array*, %Array* }* %134, { %Array*, %Array* }** %140, align 8
  store %Array* %137, %Array** %141, align 8
  %142 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %143 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 0)
  %144 = bitcast i8* %143 to { { %Array*, %Array* }*, %Array* }**
  %145 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 1)
  %146 = bitcast i8* %145 to { { %Array*, %Array* }*, %Array* }**
  %147 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 2)
  %148 = bitcast i8* %147 to { { %Array*, %Array* }*, %Array* }**
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 3)
  %150 = bitcast i8* %149 to { { %Array*, %Array* }*, %Array* }**
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 4)
  %152 = bitcast i8* %151 to { { %Array*, %Array* }*, %Array* }**
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 5)
  %154 = bitcast i8* %153 to { { %Array*, %Array* }*, %Array* }**
  %155 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 6)
  %156 = bitcast i8* %155 to { { %Array*, %Array* }*, %Array* }**
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 7)
  %158 = bitcast i8* %157 to { { %Array*, %Array* }*, %Array* }**
  store { { %Array*, %Array* }*, %Array* }* %139, { { %Array*, %Array* }*, %Array* }** %144, align 8
  store { { %Array*, %Array* }*, %Array* }* %139, { { %Array*, %Array* }*, %Array* }** %146, align 8
  store { { %Array*, %Array* }*, %Array* }* %139, { { %Array*, %Array* }*, %Array* }** %148, align 8
  store { { %Array*, %Array* }*, %Array* }* %139, { { %Array*, %Array* }*, %Array* }** %150, align 8
  store { { %Array*, %Array* }*, %Array* }* %139, { { %Array*, %Array* }*, %Array* }** %152, align 8
  store { { %Array*, %Array* }*, %Array* }* %139, { { %Array*, %Array* }*, %Array* }** %154, align 8
  store { { %Array*, %Array* }*, %Array* }* %139, { { %Array*, %Array* }*, %Array* }** %156, align 8
  store { { %Array*, %Array* }*, %Array* }* %139, { { %Array*, %Array* }*, %Array* }** %158, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 1)
  store %Array* %142, %Array** %genIdxes, align 8
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %159 = phi i64 [ 0, %exit__1 ], [ %174, %exiting__2 ]
  %160 = icmp sle i64 %159, 7
  br i1 %160, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %161 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %142, i64 %159)
  %162 = bitcast i8* %161 to { { %Array*, %Array* }*, %Array* }**
  %163 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %162, align 8
  %164 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %163, i32 0, i32 0
  %165 = load { %Array*, %Array* }*, { %Array*, %Array* }** %164, align 8
  %166 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %165, i32 0, i32 0
  %167 = load %Array*, %Array** %166, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %167, i32 1)
  %168 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %165, i32 0, i32 1
  %169 = load %Array*, %Array** %168, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %169, i32 1)
  %170 = bitcast { %Array*, %Array* }* %165 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %170, i32 1)
  %171 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %163, i32 0, i32 1
  %172 = load %Array*, %Array** %171, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %172, i32 1)
  %173 = bitcast { { %Array*, %Array* }*, %Array* }* %163 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %173, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %174 = add i64 %159, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %142, i32 1)
  store i64 0, i64* %nonZero, align 4
  %175 = call %Range @Microsoft__Quantum__Arrays___17428b9baa64414f9b1034cbf7f4a1b5_IndexRange__body(%Array* %ops)
  %176 = extractvalue %Range %175, 0
  %177 = extractvalue %Range %175, 1
  %178 = extractvalue %Range %175, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__2
  %179 = icmp sgt i64 %177, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %idxOp = phi i64 [ %176, %preheader__1 ], [ %249, %exiting__3 ]
  %180 = icmp sle i64 %idxOp, %178
  %181 = icmp sge i64 %idxOp, %178
  %182 = select i1 %179, i1 %180, i1 %181
  br i1 %182, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %183 = srem i64 %idxOp, 4
  %184 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %183)
  %185 = bitcast i8* %184 to double*
  %186 = load double, double* %185, align 8
  %187 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %186)
  br i1 %187, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__3
  %188 = srem i64 %idxOp, 4
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %188)
  %190 = bitcast i8* %189 to double*
  %191 = load double, double* %190, align 8
  %newCoeff = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoeff, i64 0)
  %193 = bitcast i8* %192 to double*
  store double %191, double* %193, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoeff, i32 1)
  %194 = load %Array*, %Array** %genIdxes, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %194, i32 -1)
  %195 = call %Array* @__quantum__rt__array_copy(%Array* %194, i1 false)
  %196 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %idxOp)
  %197 = bitcast i8* %196 to %Array**
  %198 = load %Array*, %Array** %197, align 8
  %199 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsPQJW)
  %200 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsRSJW)
  %201 = add i64 %199, %200
  %202 = call %Array* @Microsoft__Quantum__Arrays___776c59d7915545a6a81beb8cdb98d2a4_ConstantArray__body(i64 %201, i64 3)
  %203 = call %Array* @__quantum__rt__array_concatenate(%Array* %198, %Array* %202)
  call void @__quantum__rt__array_update_reference_count(%Array* %203, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %202, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %203, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 1)
  %204 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %205 = bitcast %Tuple* %204 to { %Array*, %Array* }*
  %206 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %205, i32 0, i32 0
  %207 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %205, i32 0, i32 1
  store %Array* %203, %Array** %206, align 8
  store %Array* %newCoeff, %Array** %207, align 8
  %208 = load i64, i64* %14, align 4
  %209 = load i64, i64* %16, align 4
  %210 = load i64, i64* %24, align 4
  %211 = load i64, i64* %26, align 4
  %212 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %213 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %212, i64 0)
  %214 = bitcast i8* %213 to i64*
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %212, i64 1)
  %216 = bitcast i8* %215 to i64*
  %217 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %212, i64 2)
  %218 = bitcast i8* %217 to i64*
  %219 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %212, i64 3)
  %220 = bitcast i8* %219 to i64*
  store i64 %208, i64* %214, align 4
  store i64 %209, i64* %216, align 4
  store i64 %210, i64* %218, align 4
  store i64 %211, i64* %220, align 4
  %221 = call %Array* @__quantum__rt__array_concatenate(%Array* %212, %Array* %qubitsPQJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %221, i32 1)
  %222 = call %Array* @__quantum__rt__array_concatenate(%Array* %221, %Array* %qubitsRSJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %222, i32 1)
  %223 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %205, %Array* %222)
  %224 = load i64, i64* %nonZero, align 4
  %225 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %195, i64 %224)
  %226 = bitcast i8* %225 to { { %Array*, %Array* }*, %Array* }**
  %227 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %223, i32 0, i32 0
  %228 = load { %Array*, %Array* }*, { %Array*, %Array* }** %227, align 8
  %229 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %228, i32 0, i32 0
  %230 = load %Array*, %Array** %229, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %230, i32 1)
  %231 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %228, i32 0, i32 1
  %232 = load %Array*, %Array** %231, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %232, i32 1)
  %233 = bitcast { %Array*, %Array* }* %228 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %233, i32 1)
  %234 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %223, i32 0, i32 1
  %235 = load %Array*, %Array** %234, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %235, i32 1)
  %236 = bitcast { { %Array*, %Array* }*, %Array* }* %223 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %236, i32 1)
  %237 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %226, align 8
  %238 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %237, i32 0, i32 0
  %239 = load { %Array*, %Array* }*, { %Array*, %Array* }** %238, align 8
  %240 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %239, i32 0, i32 0
  %241 = load %Array*, %Array** %240, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %241, i32 -1)
  %242 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %239, i32 0, i32 1
  %243 = load %Array*, %Array** %242, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %243, i32 -1)
  %244 = bitcast { %Array*, %Array* }* %239 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %244, i32 -1)
  %245 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %237, i32 0, i32 1
  %246 = load %Array*, %Array** %245, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %246, i32 -1)
  %247 = bitcast { { %Array*, %Array* }*, %Array* }* %237 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %247, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %241, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %243, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %244, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %246, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %247, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %223, { { %Array*, %Array* }*, %Array* }** %226, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %195, i32 1)
  store %Array* %195, %Array** %genIdxes, align 8
  %248 = add i64 %224, 1
  store i64 %248, i64* %nonZero, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %203, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %204, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %212, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %221, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %221, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %222, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %222, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__3
  br label %exiting__3

exiting__3:                                       ; preds = %continue__1
  %249 = add i64 %idxOp, %177
  br label %header__3

exit__3:                                          ; preds = %header__3
  %250 = load %Array*, %Array** %genIdxes, align 8
  %251 = load i64, i64* %nonZero, align 4
  %252 = sub i64 %251, 1
  %253 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %252, 2
  %254 = call %Array* @__quantum__rt__array_slice_1d(%Array* %250, %Range %253, i1 true)
  %255 = call i64 @__quantum__rt__array_get_size_1d(%Array* %254)
  %256 = sub i64 %255, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %257 = phi i64 [ 0, %exit__3 ], [ %272, %exiting__4 ]
  %258 = icmp sle i64 %257, %256
  br i1 %258, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %259 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %254, i64 %257)
  %260 = bitcast i8* %259 to { { %Array*, %Array* }*, %Array* }**
  %261 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %260, align 8
  %262 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %261, i32 0, i32 0
  %263 = load { %Array*, %Array* }*, { %Array*, %Array* }** %262, align 8
  %264 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %263, i32 0, i32 0
  %265 = load %Array*, %Array** %264, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %265, i32 1)
  %266 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %263, i32 0, i32 1
  %267 = load %Array*, %Array** %266, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %267, i32 1)
  %268 = bitcast { %Array*, %Array* }* %263 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %268, i32 1)
  %269 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %261, i32 0, i32 1
  %270 = load %Array*, %Array** %269, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %270, i32 1)
  %271 = bitcast { { %Array*, %Array* }*, %Array* }* %261 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %271, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %272 = add i64 %257, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %254, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %273 = phi i64 [ 0, %exit__4 ], [ %278, %exiting__5 ]
  %274 = icmp sle i64 %273, 7
  br i1 %274, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %275 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %273)
  %276 = bitcast i8* %275 to %Array**
  %277 = load %Array*, %Array** %276, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %277, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %278 = add i64 %273, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  %279 = call i64 @__quantum__rt__array_get_size_1d(%Array* %250)
  %280 = sub i64 %279, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %281 = phi i64 [ 0, %exit__5 ], [ %296, %exiting__6 ]
  %282 = icmp sle i64 %281, %280
  br i1 %282, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %283 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %250, i64 %281)
  %284 = bitcast i8* %283 to { { %Array*, %Array* }*, %Array* }**
  %285 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %284, align 8
  %286 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %285, i32 0, i32 0
  %287 = load { %Array*, %Array* }*, { %Array*, %Array* }** %286, align 8
  %288 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %287, i32 0, i32 0
  %289 = load %Array*, %Array** %288, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %289, i32 -1)
  %290 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %287, i32 0, i32 1
  %291 = load %Array*, %Array** %290, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %291, i32 -1)
  %292 = bitcast { %Array*, %Array* }* %287 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %292, i32 -1)
  %293 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %285, i32 0, i32 1
  %294 = load %Array*, %Array** %293, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %294, i32 -1)
  %295 = bitcast { { %Array*, %Array* }*, %Array* }* %285 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %295, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %296 = add i64 %281, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %250, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %297 = phi i64 [ 0, %exit__6 ], [ %302, %exiting__7 ]
  %298 = icmp sle i64 %297, 7
  br i1 %298, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %299 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %297)
  %300 = bitcast i8* %299 to %Array**
  %301 = load %Array*, %Array** %300, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %301, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %302 = add i64 %297, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %133, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %137, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %254, i32 -1)
  %303 = sub i64 %279, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %304 = phi i64 [ 0, %exit__7 ], [ %319, %exiting__8 ]
  %305 = icmp sle i64 %304, %303
  br i1 %305, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %306 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %250, i64 %304)
  %307 = bitcast i8* %306 to { { %Array*, %Array* }*, %Array* }**
  %308 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %307, align 8
  %309 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %308, i32 0, i32 0
  %310 = load { %Array*, %Array* }*, { %Array*, %Array* }** %309, align 8
  %311 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %310, i32 0, i32 0
  %312 = load %Array*, %Array** %311, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %312, i32 -1)
  %313 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %310, i32 0, i32 1
  %314 = load %Array*, %Array** %313, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %314, i32 -1)
  %315 = bitcast { %Array*, %Array* }* %310 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %315, i32 -1)
  %316 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %308, i32 0, i32 1
  %317 = load %Array*, %Array** %316, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %317, i32 -1)
  %318 = bitcast { { %Array*, %Array* }*, %Array* }* %308 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %318, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %319 = add i64 %304, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %250, i32 -1)
  ret %Array* %254
}

define internal %Range @Microsoft__Quantum__Arrays___17428b9baa64414f9b1034cbf7f4a1b5_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = sub i64 %0, 1
  %9 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %8, 2
  %10 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %11)
  %14 = bitcast i8* %13 to %Array**
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %9
}

declare %Array* @__quantum__rt__array_copy(%Array*, i1)

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ZTermToPauliGenIdx____body({ { %Array*, %Array* }*, %Array* }* %term) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 0)
  %9 = bitcast i8* %8 to i64*
  store i64 3, i64* %9, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %coeff, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Array* }*
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 1
  store %Array* %7, %Array** %12, align 8
  store %Array* %coeff, %Array** %13, align 8
  %14 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %11, %Array* %idxFermions)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 0)
  %17 = bitcast i8* %16 to { { %Array*, %Array* }*, %Array* }**
  store { { %Array*, %Array* }*, %Array* }* %14, { { %Array*, %Array* }*, %Array* }** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret %Array* %15
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ZZTermToPauliGenIdx____body({ { %Array*, %Array* }*, %Array* }* %term) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 0)
  %9 = bitcast i8* %8 to i64*
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 1)
  %11 = bitcast i8* %10 to i64*
  store i64 3, i64* %9, align 4
  store i64 3, i64* %11, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %coeff, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  store %Array* %7, %Array** %14, align 8
  store %Array* %coeff, %Array** %15, align 8
  %16 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %13, %Array* %idxFermions)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to { { %Array*, %Array* }*, %Array* }**
  store { { %Array*, %Array* }*, %Array* }* %16, { { %Array*, %Array* }*, %Array* }** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret %Array* %17
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0__JordanWignerStateAsGeneratorIndex____body(%Array* %data, i64 %idx) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %idx)
  %15 = bitcast i8* %14 to { { double, double }*, %Array* }**
  %16 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %15, align 8
  %17 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %16, i32 0, i32 0
  %18 = load { double, double }*, { double, double }** %17, align 8
  %19 = getelementptr inbounds { double, double }, { double, double }* %18, i32 0, i32 0
  %real = load double, double* %19, align 8
  %20 = getelementptr inbounds { double, double }, { double, double }* %18, i32 0, i32 1
  %imaginary = load double, double* %20, align 8
  %21 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %16, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %23 = icmp eq i64 %22, 2
  br i1 %23, label %then0__1, label %test1__1

then0__1:                                         ; preds = %exit__1
  %24 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 0)
  %26 = bitcast i8* %25 to i64*
  store i64 0, i64* %26, align 4
  %27 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 0)
  %29 = bitcast i8* %28 to double*
  store double %real, double* %29, align 8
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Array*, %Array* }*
  %32 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %31, i32 0, i32 1
  store %Array* %24, %Array** %32, align 8
  store %Array* %27, %Array** %33, align 8
  %34 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %31, %Array* %idxFermions)
  %35 = sub i64 %0, 1
  br label %header__2

test1__1:                                         ; preds = %exit__1
  %36 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %37 = icmp eq i64 %36, 4
  br i1 %37, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 0)
  %40 = bitcast i8* %39 to i64*
  store i64 2, i64* %40, align 4
  %41 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 0)
  %43 = bitcast i8* %42 to double*
  store double %real, double* %43, align 8
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %45 = bitcast %Tuple* %44 to { %Array*, %Array* }*
  %46 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %45, i32 0, i32 0
  %47 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %45, i32 0, i32 1
  store %Array* %38, %Array** %46, align 8
  store %Array* %41, %Array** %47, align 8
  %48 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %45, %Array* %idxFermions)
  %49 = sub i64 %0, 1
  br label %header__3

else__1:                                          ; preds = %test1__1
  %50 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 0)
  %52 = bitcast i8* %51 to i64*
  store i64 -1, i64* %52, align 4
  %53 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 0)
  %55 = bitcast i8* %54 to double*
  store double 0.000000e+00, double* %55, align 8
  %56 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %57 = bitcast %Tuple* %56 to { %Array*, %Array* }*
  %58 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %57, i32 0, i32 0
  %59 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %57, i32 0, i32 1
  store %Array* %50, %Array** %58, align 8
  store %Array* %53, %Array** %59, align 8
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i64*
  store i64 0, i64* %62, align 4
  %63 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %57, %Array* %60)
  %64 = sub i64 %0, 1
  br label %header__4

continue__1:                                      ; No predecessors!
  unreachable

header__2:                                        ; preds = %exiting__2, %then0__1
  %65 = phi i64 [ 0, %then0__1 ], [ %76, %exiting__2 ]
  %66 = icmp sle i64 %65, %35
  br i1 %66, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %65)
  %68 = bitcast i8* %67 to { { double, double }*, %Array* }**
  %69 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %68, align 8
  %70 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %69, i32 0, i32 0
  %71 = load { double, double }*, { double, double }** %70, align 8
  %72 = bitcast { double, double }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %72, i32 -1)
  %73 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %69, i32 0, i32 1
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 -1)
  %75 = bitcast { { double, double }*, %Array* }* %69 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %75, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %76 = add i64 %65, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %34

header__3:                                        ; preds = %exiting__3, %then1__1
  %77 = phi i64 [ 0, %then1__1 ], [ %88, %exiting__3 ]
  %78 = icmp sle i64 %77, %49
  br i1 %78, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %77)
  %80 = bitcast i8* %79 to { { double, double }*, %Array* }**
  %81 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %80, align 8
  %82 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %81, i32 0, i32 0
  %83 = load { double, double }*, { double, double }** %82, align 8
  %84 = bitcast { double, double }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %84, i32 -1)
  %85 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %81, i32 0, i32 1
  %86 = load %Array*, %Array** %85, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %86, i32 -1)
  %87 = bitcast { { double, double }*, %Array* }* %81 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %87, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %88 = add i64 %77, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %44, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %48

header__4:                                        ; preds = %exiting__4, %else__1
  %89 = phi i64 [ 0, %else__1 ], [ %100, %exiting__4 ]
  %90 = icmp sle i64 %89, %64
  br i1 %90, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %89)
  %92 = bitcast i8* %91 to { { double, double }*, %Array* }**
  %93 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %92, align 8
  %94 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %93, i32 0, i32 0
  %95 = load { double, double }*, { double, double }** %94, align 8
  %96 = bitcast { double, double }* %95 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %96, i32 -1)
  %97 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %93, i32 0, i32 1
  %98 = load %Array*, %Array** %97, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 -1)
  %99 = bitcast { { double, double }*, %Array* }* %93 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %99, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %100 = add i64 %89, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %63
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %angle = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %12 = bitcast i8* %11 to i64*
  %qubitQidx = load i64, i64* %12, align 4
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %14 = icmp eq i64 %13, 2
  br i1 %14, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 0)
  %17 = bitcast i8* %16 to double*
  store double 1.000000e+00, double* %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, %Array* }*
  %20 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %19, i32 0, i32 1
  store %Array* %idxTermType, %Array** %20, align 8
  store %Array* %15, %Array** %21, align 8
  %termPR0 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %19, %Array* %idxFermions)
  %22 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR0, i32 0, i32 0
  %23 = load { %Array*, %Array* }*, { %Array*, %Array* }** %22, align 8
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 0
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 1
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = bitcast { %Array*, %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  %29 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR0, i32 0, i32 1
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 1)
  %31 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 1)
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___body({ { %Array*, %Array* }*, %Array* }* %termPR0, double %angle, %Array* %32, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %entry
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = icmp slt i64 %35, %qubitQidx
  br i1 %36, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = icmp slt i64 %qubitQidx, %39
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %41 = phi i1 [ %40, %condTrue__1 ], [ %36, %else__1 ]
  br i1 %41, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %42 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 0)
  %44 = bitcast i8* %43 to double*
  store double 1.000000e+00, double* %44, align 8
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { %Array*, %Array* }*
  %47 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 0
  %48 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 1
  store %Array* %idxTermType, %Array** %47, align 8
  store %Array* %42, %Array** %48, align 8
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 4
  %55 = sub i64 %54, 1
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to i64*
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 1)
  %60 = bitcast i8* %59 to i64*
  store i64 %51, i64* %58, align 4
  store i64 %55, i64* %60, align 4
  %termPR1 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %46, %Array* %56)
  %61 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1, i32 0, i32 0
  %62 = load { %Array*, %Array* }*, { %Array*, %Array* }** %61, align 8
  %63 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %65 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  %67 = bitcast { %Array*, %Array* }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  %68 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1, i32 0, i32 1
  %69 = load %Array*, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 1)
  %70 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 1)
  %71 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i64*
  store i64 %qubitQidx, i64* %74, align 4
  %75 = call %Array* @Microsoft__Quantum__Arrays___d4fd6982c609481a8ea49bf9914e223e_Excluding__body(%Array* %72, %Array* %qubits)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___body({ { %Array*, %Array* }*, %Array* }* %termPR1, double %angle, %Array* %71, %Array* %75)
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %75, i32 -1)
  br label %continue__2

else__2:                                          ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %76 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 0)
  %78 = bitcast i8* %77 to double*
  store double 1.000000e+00, double* %78, align 8
  %79 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %80 = bitcast %Tuple* %79 to { %Array*, %Array* }*
  %81 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %80, i32 0, i32 0
  %82 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %80, i32 0, i32 1
  store %Array* %idxTermType, %Array** %81, align 8
  store %Array* %76, %Array** %82, align 8
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %84 = bitcast i8* %83 to i64*
  %85 = load i64, i64* %84, align 4
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %87 = bitcast i8* %86 to i64*
  %88 = load i64, i64* %87, align 4
  %89 = sub i64 %85, %88
  %90 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 0)
  %92 = bitcast i8* %91 to i64*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 1)
  %94 = bitcast i8* %93 to i64*
  store i64 0, i64* %92, align 4
  store i64 %89, i64* %94, align 4
  %termPR1__1 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %80, %Array* %90)
  %95 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1__1, i32 0, i32 0
  %96 = load { %Array*, %Array* }*, { %Array*, %Array* }** %95, align 8
  %97 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 0
  %98 = load %Array*, %Array** %97, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 1)
  %99 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 1
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = bitcast { %Array*, %Array* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 1)
  %102 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1__1, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR1__1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %qubitQidx)
  %106 = bitcast i8* %105 to %Qubit**
  %107 = load %Qubit*, %Qubit** %106, align 8
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to %Qubit**
  store %Qubit* %107, %Qubit** %110, align 8
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 4
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 4
  %117 = insertvalue %Range zeroinitializer, i64 %113, 0
  %118 = insertvalue %Range %117, i64 1, 1
  %119 = insertvalue %Range %118, i64 %116, 2
  %120 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %119, i1 true)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___body({ { %Array*, %Array* }*, %Array* }* %termPR1__1, double %angle, %Array* %108, %Array* %120)
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %90, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %98, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %101, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %103, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %108, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__2, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %extraParityQubits, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %angle = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %12, align 4
  %16 = load i64, i64* %14, align 4
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to i64*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 1)
  %21 = bitcast i8* %20 to i64*
  store i64 %15, i64* %19, align 4
  store i64 %16, i64* %21, align 4
  %qubitsPQ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %17, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 4
  %25 = add i64 %24, 1
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = sub i64 %28, 1
  %30 = insertvalue %Range zeroinitializer, i64 %25, 0
  %31 = insertvalue %Range %30, i64 1, 1
  %32 = insertvalue %Range %31, i64 %29, 2
  %qubitsJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %32, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsJW, i32 1)
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to i2*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 1)
  %37 = bitcast i8* %36 to i2*
  store i2 1, i2* %35, align 1
  store i2 1, i2* %37, align 1
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 0)
  %40 = bitcast i8* %39 to i2*
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 1)
  %42 = bitcast i8* %41 to i2*
  store i2 -1, i2* %40, align 1
  store i2 -1, i2* %42, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %44 = bitcast i8* %43 to %Array**
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %46 = bitcast i8* %45 to %Array**
  store %Array* %33, %Array** %44, align 8
  store %Array* %38, %Array** %46, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %47 = phi i64 [ 0, %entry ], [ %52, %exiting__1 ]
  %48 = icmp sle i64 %47, 1
  br i1 %48, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %47)
  %50 = bitcast i8* %49 to %Array**
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %52 = add i64 %47, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %53 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsJW)
  %54 = call i64 @__quantum__rt__array_get_size_1d(%Array* %extraParityQubits)
  %55 = add i64 %53, %54
  %padding = call %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %55, i2 -2)
  call void @__quantum__rt__array_update_alias_count(%Array* %padding, i32 1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %56 = phi i64 [ 0, %exit__1 ], [ %61, %exiting__2 ]
  %57 = icmp sle i64 %56, 1
  br i1 %57, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %56)
  %59 = bitcast i8* %58 to %Array**
  %op = load %Array*, %Array** %59, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %paulis = call %Array* @__quantum__rt__array_concatenate(%Array* %op, %Array* %padding)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %60 = call %Array* @__quantum__rt__array_concatenate(%Array* %qubitsPQ, %Array* %qubitsJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %60, %Array* %extraParityQubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %angle, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %61 = add i64 %56, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsJW, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %62 = phi i64 [ 0, %exit__2 ], [ %67, %exiting__3 ]
  %63 = icmp sle i64 %62, 1
  br i1 %63, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %62)
  %65 = bitcast i8* %64 to %Array**
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %67 = add i64 %62, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %padding, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsJW, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %68 = phi i64 [ 0, %exit__3 ], [ %73, %exiting__4 ]
  %69 = icmp sle i64 %68, 1
  br i1 %69, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %68)
  %71 = bitcast i8* %70 to %Array**
  %72 = load %Array*, %Array** %71, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %73 = add i64 %68, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %padding, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___d4fd6982c609481a8ea49bf9914e223e_Excluding__body(%Array* %remove, %Array* %array) {
entry:
  %counter = alloca i64, align 8
  %sliced = alloca %Array*, align 8
  %arrayKeep = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %remove, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %remove)
  %nElements = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %nElements, %nSliced
  %1 = icmp sle i64 %0, 0
  br i1 %1, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %remove, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %2

continue__1:                                      ; preds = %entry
  %3 = sub i64 %nElements, 1
  %4 = call %Array* @Microsoft__Quantum__Arrays__SequenceI__body(i64 0, i64 %3)
  store %Array* %4, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = sub i64 %nElements, %nSliced
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %8)
  %10 = sub i64 %8, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %11 = phi i64 [ 0, %continue__1 ], [ %15, %exiting__1 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %11)
  %14 = bitcast i8* %13 to %Qubit**
  store %Qubit* %7, %Qubit** %14, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %11, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %9, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  store i64 0, i64* %counter, align 4
  %16 = sub i64 %nSliced, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %remove, i64 %17)
  %20 = bitcast i8* %19 to i64*
  %idx = load i64, i64* %20, align 4
  %21 = load %Array*, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  %22 = call %Array* @__quantum__rt__array_copy(%Array* %21, i1 false)
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %22, i64 %idx)
  %24 = bitcast i8* %23 to i64*
  store i64 -1, i64* %24, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 1)
  store %Array* %22, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %26 = load %Array*, %Array** %arrayKeep, align 8
  %27 = call i64 @__quantum__rt__array_get_size_1d(%Array* %26)
  %28 = sub i64 %27, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %43, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %29)
  %32 = bitcast i8* %31 to i64*
  %idx__1 = load i64, i64* %32, align 4
  %33 = icmp sge i64 %idx__1, 0
  br i1 %33, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__3
  %34 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = call %Array* @__quantum__rt__array_copy(%Array* %34, i1 false)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx__1)
  %37 = bitcast i8* %36 to %Qubit**
  %38 = load %Qubit*, %Qubit** %37, align 8
  %39 = load i64, i64* %counter, align 4
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %39)
  %41 = bitcast i8* %40 to %Qubit**
  store %Qubit* %38, %Qubit** %41, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  store %Array* %35, %Array** %sliced, align 8
  %42 = add i64 %39, 1
  store i64 %42, i64* %counter, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %body__3
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %43 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %44 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %remove, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  ret %Array* %44
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %__qsVar3__angle__ = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %12 = bitcast i8* %11 to i64*
  %__qsVar4__qubitQidx__ = load i64, i64* %12, align 4
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar2__idxFermions__)
  %14 = icmp eq i64 %13, 2
  br i1 %14, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 0)
  %17 = bitcast i8* %16 to double*
  store double 1.000000e+00, double* %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, %Array* }*
  %20 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %19, i32 0, i32 1
  store %Array* %__qsVar0__idxTermType__, %Array** %20, align 8
  store %Array* %15, %Array** %21, align 8
  %__qsVar5__termPR0__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %19, %Array* %__qsVar2__idxFermions__)
  %22 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, i32 0, i32 0
  %23 = load { %Array*, %Array* }*, { %Array*, %Array* }** %22, align 8
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 0
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 1
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = bitcast { %Array*, %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  %29 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, i32 0, i32 1
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 1)
  %31 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 1)
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___adj({ { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, double %__qsVar3__angle__, %Array* %32, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %entry
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = icmp slt i64 %35, %__qsVar4__qubitQidx__
  br i1 %36, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = icmp slt i64 %__qsVar4__qubitQidx__, %39
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %41 = phi i1 [ %40, %condTrue__1 ], [ %36, %else__1 ]
  br i1 %41, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %42 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 0)
  %44 = bitcast i8* %43 to double*
  store double 1.000000e+00, double* %44, align 8
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { %Array*, %Array* }*
  %47 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 0
  %48 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 1
  store %Array* %__qsVar0__idxTermType__, %Array** %47, align 8
  store %Array* %42, %Array** %48, align 8
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 4
  %55 = sub i64 %54, 1
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to i64*
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 1)
  %60 = bitcast i8* %59 to i64*
  store i64 %51, i64* %58, align 4
  store i64 %55, i64* %60, align 4
  %__qsVar6__termPR1__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %46, %Array* %56)
  %61 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, i32 0, i32 0
  %62 = load { %Array*, %Array* }*, { %Array*, %Array* }** %61, align 8
  %63 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %65 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  %67 = bitcast { %Array*, %Array* }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  %68 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, i32 0, i32 1
  %69 = load %Array*, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 1)
  %70 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 1)
  %71 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i64*
  store i64 %__qsVar4__qubitQidx__, i64* %74, align 4
  %75 = call %Array* @Microsoft__Quantum__Arrays___d4fd6982c609481a8ea49bf9914e223e_Excluding__body(%Array* %72, %Array* %qubits)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___adj({ { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, double %__qsVar3__angle__, %Array* %71, %Array* %75)
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %75, i32 -1)
  br label %continue__2

else__2:                                          ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %76 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 0)
  %78 = bitcast i8* %77 to double*
  store double 1.000000e+00, double* %78, align 8
  %79 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %80 = bitcast %Tuple* %79 to { %Array*, %Array* }*
  %81 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %80, i32 0, i32 0
  %82 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %80, i32 0, i32 1
  store %Array* %__qsVar0__idxTermType__, %Array** %81, align 8
  store %Array* %76, %Array** %82, align 8
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %84 = bitcast i8* %83 to i64*
  %85 = load i64, i64* %84, align 4
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %87 = bitcast i8* %86 to i64*
  %88 = load i64, i64* %87, align 4
  %89 = sub i64 %85, %88
  %90 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 0)
  %92 = bitcast i8* %91 to i64*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 1)
  %94 = bitcast i8* %93 to i64*
  store i64 0, i64* %92, align 4
  store i64 %89, i64* %94, align 4
  %__qsVar7__termPR1__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %80, %Array* %90)
  %95 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, i32 0, i32 0
  %96 = load { %Array*, %Array* }*, { %Array*, %Array* }** %95, align 8
  %97 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 0
  %98 = load %Array*, %Array** %97, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 1)
  %99 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 1
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = bitcast { %Array*, %Array* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 1)
  %102 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar4__qubitQidx__)
  %106 = bitcast i8* %105 to %Qubit**
  %107 = load %Qubit*, %Qubit** %106, align 8
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to %Qubit**
  store %Qubit* %107, %Qubit** %110, align 8
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 4
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 4
  %117 = insertvalue %Range zeroinitializer, i64 %113, 0
  %118 = insertvalue %Range %117, i64 1, 1
  %119 = insertvalue %Range %118, i64 %116, 2
  %120 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %119, i1 true)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___adj({ { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, double %__qsVar3__angle__, %Array* %108, %Array* %120)
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %90, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %98, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %101, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %103, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %108, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__2, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %extraParityQubits, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %__qsVar3__angle__ = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %12, align 4
  %16 = load i64, i64* %14, align 4
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to i64*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 1)
  %21 = bitcast i8* %20 to i64*
  store i64 %15, i64* %19, align 4
  store i64 %16, i64* %21, align 4
  %__qsVar4__qubitsPQ__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %17, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 4
  %25 = add i64 %24, 1
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = sub i64 %28, 1
  %30 = insertvalue %Range zeroinitializer, i64 %25, 0
  %31 = insertvalue %Range %30, i64 1, 1
  %32 = insertvalue %Range %31, i64 %29, 2
  %__qsVar5__qubitsJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %32, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsJW__, i32 1)
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to i2*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 1)
  %37 = bitcast i8* %36 to i2*
  store i2 1, i2* %35, align 1
  store i2 1, i2* %37, align 1
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 0)
  %40 = bitcast i8* %39 to i2*
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 1)
  %42 = bitcast i8* %41 to i2*
  store i2 -1, i2* %40, align 1
  store i2 -1, i2* %42, align 1
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %44 = bitcast i8* %43 to %Array**
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %46 = bitcast i8* %45 to %Array**
  store %Array* %33, %Array** %44, align 8
  store %Array* %38, %Array** %46, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %47 = phi i64 [ 0, %entry ], [ %52, %exiting__1 ]
  %48 = icmp sle i64 %47, 1
  br i1 %48, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %47)
  %50 = bitcast i8* %49 to %Array**
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %52 = add i64 %47, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 1)
  %53 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar5__qubitsJW__)
  %54 = call i64 @__quantum__rt__array_get_size_1d(%Array* %extraParityQubits)
  %55 = add i64 %53, %54
  %__qsVar7__padding__ = call %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %55, i2 -2)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__padding__, i32 1)
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 1)
  %60 = bitcast i8* %59 to %Array**
  store %Array* %38, %Array** %58, align 8
  store %Array* %33, %Array** %60, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %61 = phi i64 [ 0, %exit__1 ], [ %66, %exiting__2 ]
  %62 = icmp sle i64 %61, 1
  br i1 %62, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %61)
  %64 = bitcast i8* %63 to %Array**
  %__qsVar8__op__ = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar8__op__, %Array* %__qsVar7__padding__)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %65 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar4__qubitsPQ__, %Array* %__qsVar5__qubitsJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %65, %Array* %extraParityQubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %__qsVar3__angle__, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %66 = add i64 %61, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsJW__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %67 = phi i64 [ 0, %exit__2 ], [ %72, %exiting__3 ]
  %68 = icmp sle i64 %67, 1
  br i1 %68, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %67)
  %70 = bitcast i8* %69 to %Array**
  %71 = load %Array*, %Array** %70, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %71, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %72 = add i64 %67, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__padding__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar5__qubitsJW__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %73 = phi i64 [ 0, %exit__3 ], [ %78, %exiting__4 ]
  %74 = icmp sle i64 %73, 1
  br i1 %74, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %73)
  %76 = bitcast i8* %75 to %Array**
  %77 = load %Array*, %Array** %76, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %78 = add i64 %73, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__padding__, i32 -1)
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %79 = phi i64 [ 0, %exit__4 ], [ %84, %exiting__5 ]
  %80 = icmp sle i64 %79, 1
  br i1 %80, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %79)
  %82 = bitcast i8* %81 to %Array**
  %83 = load %Array*, %Array** %82, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %84 = add i64 %79, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %angle = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %16 = bitcast i8* %15 to i64*
  %qubitQidx = load i64, i64* %16, align 4
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %18 = icmp eq i64 %17, 2
  br i1 %18, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 0)
  %21 = bitcast i8* %20 to double*
  store double 1.000000e+00, double* %21, align 8
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { %Array*, %Array* }*
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 1
  store %Array* %idxTermType, %Array** %24, align 8
  store %Array* %19, %Array** %25, align 8
  %termPR0 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %23, %Array* %idxFermions)
  %26 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR0, i32 0, i32 0
  %27 = load { %Array*, %Array* }*, { %Array*, %Array* }** %26, align 8
  %28 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 1)
  %30 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 1
  %31 = load %Array*, %Array** %30, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  %32 = bitcast { %Array*, %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 1)
  %33 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR0, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %35 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %39 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38, i32 0, i32 1
  %41 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38, i32 0, i32 2
  %42 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38, i32 0, i32 3
  store { { %Array*, %Array* }*, %Array* }* %termPR0, { { %Array*, %Array* }*, %Array* }** %39, align 8
  store double %angle, double* %40, align 8
  store %Array* %36, %Array** %41, align 8
  store %Array* %qubits, %Array** %42, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38)
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %entry
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 4
  %46 = icmp slt i64 %45, %qubitQidx
  br i1 %46, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 4
  %50 = icmp slt i64 %qubitQidx, %49
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %51 = phi i1 [ %50, %condTrue__1 ], [ %46, %else__1 ]
  br i1 %51, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %52 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 0)
  %54 = bitcast i8* %53 to double*
  store double 1.000000e+00, double* %54, align 8
  %55 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %56 = bitcast %Tuple* %55 to { %Array*, %Array* }*
  %57 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %56, i32 0, i32 0
  %58 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %56, i32 0, i32 1
  store %Array* %idxTermType, %Array** %57, align 8
  store %Array* %52, %Array** %58, align 8
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %60 = bitcast i8* %59 to i64*
  %61 = load i64, i64* %60, align 4
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %63 = bitcast i8* %62 to i64*
  %64 = load i64, i64* %63, align 4
  %65 = sub i64 %64, 1
  %66 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 0)
  %68 = bitcast i8* %67 to i64*
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 1)
  %70 = bitcast i8* %69 to i64*
  store i64 %61, i64* %68, align 4
  store i64 %65, i64* %70, align 4
  %termPR1 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %56, %Array* %66)
  %71 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1, i32 0, i32 0
  %72 = load { %Array*, %Array* }*, { %Array*, %Array* }** %71, align 8
  %73 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %72, i32 0, i32 0
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 1)
  %75 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %72, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { %Array*, %Array* }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  %78 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1, i32 0, i32 1
  %79 = load %Array*, %Array** %78, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 1)
  %80 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 1)
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %82 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 0)
  %84 = bitcast i8* %83 to i64*
  store i64 %qubitQidx, i64* %84, align 4
  %85 = call %Array* @Microsoft__Quantum__Arrays___d4fd6982c609481a8ea49bf9914e223e_Excluding__body(%Array* %82, %Array* %qubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  %86 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %87 = bitcast %Tuple* %86 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %88 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87, i32 0, i32 0
  %89 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87, i32 0, i32 1
  %90 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87, i32 0, i32 2
  %91 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87, i32 0, i32 3
  store { { %Array*, %Array* }*, %Array* }* %termPR1, { { %Array*, %Array* }*, %Array* }** %88, align 8
  store double %angle, double* %89, align 8
  store %Array* %81, %Array** %90, align 8
  store %Array* %85, %Array** %91, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87)
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %85, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %86, i32 -1)
  br label %continue__2

else__2:                                          ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %92 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 0)
  %94 = bitcast i8* %93 to double*
  store double 1.000000e+00, double* %94, align 8
  %95 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %96 = bitcast %Tuple* %95 to { %Array*, %Array* }*
  %97 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 0
  %98 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 1
  store %Array* %idxTermType, %Array** %97, align 8
  store %Array* %92, %Array** %98, align 8
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %100 = bitcast i8* %99 to i64*
  %101 = load i64, i64* %100, align 4
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %103 = bitcast i8* %102 to i64*
  %104 = load i64, i64* %103, align 4
  %105 = sub i64 %101, %104
  %106 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 0)
  %108 = bitcast i8* %107 to i64*
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 1)
  %110 = bitcast i8* %109 to i64*
  store i64 0, i64* %108, align 4
  store i64 %105, i64* %110, align 4
  %termPR1__1 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %96, %Array* %106)
  %111 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1__1, i32 0, i32 0
  %112 = load { %Array*, %Array* }*, { %Array*, %Array* }** %111, align 8
  %113 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 0
  %114 = load %Array*, %Array** %113, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 1)
  %115 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 1
  %116 = load %Array*, %Array** %115, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 1)
  %117 = bitcast { %Array*, %Array* }* %112 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 1)
  %118 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1__1, i32 0, i32 1
  %119 = load %Array*, %Array** %118, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 1)
  %120 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR1__1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 1)
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %qubitQidx)
  %122 = bitcast i8* %121 to %Qubit**
  %123 = load %Qubit*, %Qubit** %122, align 8
  %124 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %124, i64 0)
  %126 = bitcast i8* %125 to %Qubit**
  store %Qubit* %123, %Qubit** %126, align 8
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %128 = bitcast i8* %127 to i64*
  %129 = load i64, i64* %128, align 4
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %131 = bitcast i8* %130 to i64*
  %132 = load i64, i64* %131, align 4
  %133 = insertvalue %Range zeroinitializer, i64 %129, 0
  %134 = insertvalue %Range %133, i64 1, 1
  %135 = insertvalue %Range %134, i64 %132, 2
  %136 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %135, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %136, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %136, i32 -1)
  %137 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %138 = bitcast %Tuple* %137 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %139 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138, i32 0, i32 0
  %140 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138, i32 0, i32 1
  %141 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138, i32 0, i32 2
  %142 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138, i32 0, i32 3
  store { { %Array*, %Array* }*, %Array* }* %termPR1__1, { { %Array*, %Array* }*, %Array* }** %139, align 8
  store double %angle, double* %140, align 8
  store %Array* %124, %Array** %141, align 8
  store %Array* %136, %Array** %142, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138)
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %92, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %124, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %136, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %137, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__2, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 2
  %extraParityQubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 1)
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %15 = fmul double 1.000000e+00, %14
  %angle = fmul double %15, %stepSize
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %17 = bitcast i8* %16 to i64*
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %17, align 4
  %21 = load i64, i64* %19, align 4
  %22 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %22, i64 0)
  %24 = bitcast i8* %23 to i64*
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %22, i64 1)
  %26 = bitcast i8* %25 to i64*
  store i64 %20, i64* %24, align 4
  store i64 %21, i64* %26, align 4
  %qubitsPQ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %22, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 4
  %30 = add i64 %29, 1
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 4
  %34 = sub i64 %33, 1
  %35 = insertvalue %Range zeroinitializer, i64 %30, 0
  %36 = insertvalue %Range %35, i64 1, 1
  %37 = insertvalue %Range %36, i64 %34, 2
  %qubitsJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %37, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsJW, i32 1)
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 0)
  %40 = bitcast i8* %39 to i2*
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 1)
  %42 = bitcast i8* %41 to i2*
  store i2 1, i2* %40, align 1
  store i2 1, i2* %42, align 1
  %43 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %43, i64 0)
  %45 = bitcast i8* %44 to i2*
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %43, i64 1)
  %47 = bitcast i8* %46 to i2*
  store i2 -1, i2* %45, align 1
  store i2 -1, i2* %47, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %49 = bitcast i8* %48 to %Array**
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %51 = bitcast i8* %50 to %Array**
  store %Array* %38, %Array** %49, align 8
  store %Array* %43, %Array** %51, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %52 = phi i64 [ 0, %entry ], [ %57, %exiting__1 ]
  %53 = icmp sle i64 %52, 1
  br i1 %53, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %52)
  %55 = bitcast i8* %54 to %Array**
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %57 = add i64 %52, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsJW)
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %extraParityQubits)
  %60 = add i64 %58, %59
  %padding = call %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %60, i2 -2)
  call void @__quantum__rt__array_update_alias_count(%Array* %padding, i32 1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %61 = phi i64 [ 0, %exit__1 ], [ %71, %exiting__2 ]
  %62 = icmp sle i64 %61, 1
  br i1 %62, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %61)
  %64 = bitcast i8* %63 to %Array**
  %op = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_concatenate(%Array* %op, %Array* %padding)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %65 = call %Array* @__quantum__rt__array_concatenate(%Array* %qubitsPQ, %Array* %qubitsJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %65, %Array* %extraParityQubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %66 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %67 = bitcast %Tuple* %66 to { %Array*, double, %Array* }*
  %68 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %67, i32 0, i32 0
  %69 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %67, i32 0, i32 1
  %70 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %67, i32 0, i32 2
  store %Array* %paulis, %Array** %68, align 8
  store double %angle, double* %69, align 8
  store %Array* %qubits__1, %Array** %70, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %67)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %71 = add i64 %61, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsJW, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %72 = phi i64 [ 0, %exit__2 ], [ %77, %exiting__3 ]
  %73 = icmp sle i64 %72, 1
  br i1 %73, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %72)
  %75 = bitcast i8* %74 to %Array**
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %77 = add i64 %72, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %padding, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsJW, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %78 = phi i64 [ 0, %exit__3 ], [ %83, %exiting__4 ]
  %79 = icmp sle i64 %78, 1
  br i1 %79, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %78)
  %81 = bitcast i8* %80 to %Array**
  %82 = load %Array*, %Array** %81, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %83 = add i64 %78, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %padding, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %__qsVar3__angle__ = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %16 = bitcast i8* %15 to i64*
  %__qsVar4__qubitQidx__ = load i64, i64* %16, align 4
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar2__idxFermions__)
  %18 = icmp eq i64 %17, 2
  br i1 %18, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 0)
  %21 = bitcast i8* %20 to double*
  store double 1.000000e+00, double* %21, align 8
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { %Array*, %Array* }*
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 1
  store %Array* %__qsVar0__idxTermType__, %Array** %24, align 8
  store %Array* %19, %Array** %25, align 8
  %__qsVar5__termPR0__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %23, %Array* %__qsVar2__idxFermions__)
  %26 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, i32 0, i32 0
  %27 = load { %Array*, %Array* }*, { %Array*, %Array* }** %26, align 8
  %28 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 1)
  %30 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 1
  %31 = load %Array*, %Array** %30, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  %32 = bitcast { %Array*, %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 1)
  %33 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %35 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %39 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38, i32 0, i32 1
  %41 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38, i32 0, i32 2
  %42 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38, i32 0, i32 3
  store { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, { { %Array*, %Array* }*, %Array* }** %39, align 8
  store double %__qsVar3__angle__, double* %40, align 8
  store %Array* %36, %Array** %41, align 8
  store %Array* %qubits, %Array** %42, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %38)
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %entry
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 4
  %46 = icmp slt i64 %45, %__qsVar4__qubitQidx__
  br i1 %46, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 4
  %50 = icmp slt i64 %__qsVar4__qubitQidx__, %49
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %51 = phi i1 [ %50, %condTrue__1 ], [ %46, %else__1 ]
  br i1 %51, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %52 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 0)
  %54 = bitcast i8* %53 to double*
  store double 1.000000e+00, double* %54, align 8
  %55 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %56 = bitcast %Tuple* %55 to { %Array*, %Array* }*
  %57 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %56, i32 0, i32 0
  %58 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %56, i32 0, i32 1
  store %Array* %__qsVar0__idxTermType__, %Array** %57, align 8
  store %Array* %52, %Array** %58, align 8
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %60 = bitcast i8* %59 to i64*
  %61 = load i64, i64* %60, align 4
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %63 = bitcast i8* %62 to i64*
  %64 = load i64, i64* %63, align 4
  %65 = sub i64 %64, 1
  %66 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 0)
  %68 = bitcast i8* %67 to i64*
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 1)
  %70 = bitcast i8* %69 to i64*
  store i64 %61, i64* %68, align 4
  store i64 %65, i64* %70, align 4
  %__qsVar6__termPR1__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %56, %Array* %66)
  %71 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, i32 0, i32 0
  %72 = load { %Array*, %Array* }*, { %Array*, %Array* }** %71, align 8
  %73 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %72, i32 0, i32 0
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 1)
  %75 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %72, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { %Array*, %Array* }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  %78 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, i32 0, i32 1
  %79 = load %Array*, %Array** %78, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 1)
  %80 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 1)
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %82 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 0)
  %84 = bitcast i8* %83 to i64*
  store i64 %__qsVar4__qubitQidx__, i64* %84, align 4
  %85 = call %Array* @Microsoft__Quantum__Arrays___d4fd6982c609481a8ea49bf9914e223e_Excluding__body(%Array* %82, %Array* %qubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  %86 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %87 = bitcast %Tuple* %86 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %88 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87, i32 0, i32 0
  %89 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87, i32 0, i32 1
  %90 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87, i32 0, i32 2
  %91 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87, i32 0, i32 3
  store { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, { { %Array*, %Array* }*, %Array* }** %88, align 8
  store double %__qsVar3__angle__, double* %89, align 8
  store %Array* %81, %Array** %90, align 8
  store %Array* %85, %Array** %91, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %87)
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %85, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %86, i32 -1)
  br label %continue__2

else__2:                                          ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %92 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 0)
  %94 = bitcast i8* %93 to double*
  store double 1.000000e+00, double* %94, align 8
  %95 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %96 = bitcast %Tuple* %95 to { %Array*, %Array* }*
  %97 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 0
  %98 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 1
  store %Array* %__qsVar0__idxTermType__, %Array** %97, align 8
  store %Array* %92, %Array** %98, align 8
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %100 = bitcast i8* %99 to i64*
  %101 = load i64, i64* %100, align 4
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %103 = bitcast i8* %102 to i64*
  %104 = load i64, i64* %103, align 4
  %105 = sub i64 %101, %104
  %106 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 0)
  %108 = bitcast i8* %107 to i64*
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 1)
  %110 = bitcast i8* %109 to i64*
  store i64 0, i64* %108, align 4
  store i64 %105, i64* %110, align 4
  %__qsVar7__termPR1__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %96, %Array* %106)
  %111 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, i32 0, i32 0
  %112 = load { %Array*, %Array* }*, { %Array*, %Array* }** %111, align 8
  %113 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 0
  %114 = load %Array*, %Array** %113, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 1)
  %115 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 1
  %116 = load %Array*, %Array** %115, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 1)
  %117 = bitcast { %Array*, %Array* }* %112 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 1)
  %118 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, i32 0, i32 1
  %119 = load %Array*, %Array** %118, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 1)
  %120 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 1)
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar4__qubitQidx__)
  %122 = bitcast i8* %121 to %Qubit**
  %123 = load %Qubit*, %Qubit** %122, align 8
  %124 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %124, i64 0)
  %126 = bitcast i8* %125 to %Qubit**
  store %Qubit* %123, %Qubit** %126, align 8
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %128 = bitcast i8* %127 to i64*
  %129 = load i64, i64* %128, align 4
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %131 = bitcast i8* %130 to i64*
  %132 = load i64, i64* %131, align 4
  %133 = insertvalue %Range zeroinitializer, i64 %129, 0
  %134 = insertvalue %Range %133, i64 1, 1
  %135 = insertvalue %Range %134, i64 %132, 2
  %136 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %135, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %136, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %136, i32 -1)
  %137 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %138 = bitcast %Tuple* %137 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %139 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138, i32 0, i32 0
  %140 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138, i32 0, i32 1
  %141 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138, i32 0, i32 2
  %142 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138, i32 0, i32 3
  store { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, { { %Array*, %Array* }*, %Array* }** %139, align 8
  store double %__qsVar3__angle__, double* %140, align 8
  store %Array* %124, %Array** %141, align 8
  store %Array* %136, %Array** %142, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %138)
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %92, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %124, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %136, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %137, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__2, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 2
  %extraParityQubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 1)
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %15 = fmul double 1.000000e+00, %14
  %__qsVar3__angle__ = fmul double %15, %stepSize
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %17 = bitcast i8* %16 to i64*
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %17, align 4
  %21 = load i64, i64* %19, align 4
  %22 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %22, i64 0)
  %24 = bitcast i8* %23 to i64*
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %22, i64 1)
  %26 = bitcast i8* %25 to i64*
  store i64 %20, i64* %24, align 4
  store i64 %21, i64* %26, align 4
  %__qsVar4__qubitsPQ__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %22, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 1)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 4
  %30 = add i64 %29, 1
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 4
  %34 = sub i64 %33, 1
  %35 = insertvalue %Range zeroinitializer, i64 %30, 0
  %36 = insertvalue %Range %35, i64 1, 1
  %37 = insertvalue %Range %36, i64 %34, 2
  %__qsVar5__qubitsJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %37, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsJW__, i32 1)
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 0)
  %40 = bitcast i8* %39 to i2*
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 1)
  %42 = bitcast i8* %41 to i2*
  store i2 1, i2* %40, align 1
  store i2 1, i2* %42, align 1
  %43 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %43, i64 0)
  %45 = bitcast i8* %44 to i2*
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %43, i64 1)
  %47 = bitcast i8* %46 to i2*
  store i2 -1, i2* %45, align 1
  store i2 -1, i2* %47, align 1
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %49 = bitcast i8* %48 to %Array**
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %51 = bitcast i8* %50 to %Array**
  store %Array* %38, %Array** %49, align 8
  store %Array* %43, %Array** %51, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %52 = phi i64 [ 0, %entry ], [ %57, %exiting__1 ]
  %53 = icmp sle i64 %52, 1
  br i1 %53, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %52)
  %55 = bitcast i8* %54 to %Array**
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %57 = add i64 %52, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 1)
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar5__qubitsJW__)
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %extraParityQubits)
  %60 = add i64 %58, %59
  %__qsVar7__padding__ = call %Array* @Microsoft__Quantum__Arrays___041f4b97ff464238a7f7da162bd94e8e_ConstantArray__body(i64 %60, i2 -2)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__padding__, i32 1)
  %61 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 0)
  %63 = bitcast i8* %62 to %Array**
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 1)
  %65 = bitcast i8* %64 to %Array**
  store %Array* %43, %Array** %63, align 8
  store %Array* %38, %Array** %65, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %43, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %66 = phi i64 [ 0, %exit__1 ], [ %76, %exiting__2 ]
  %67 = icmp sle i64 %66, 1
  br i1 %67, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %66)
  %69 = bitcast i8* %68 to %Array**
  %__qsVar8__op__ = load %Array*, %Array** %69, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar8__op__, %Array* %__qsVar7__padding__)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %70 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar4__qubitsPQ__, %Array* %__qsVar5__qubitsJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %70, %Array* %extraParityQubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { %Array*, double, %Array* }*
  %73 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %72, i32 0, i32 0
  %74 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %72, i32 0, i32 1
  %75 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %72, i32 0, i32 2
  store %Array* %paulis, %Array** %73, align 8
  store double %__qsVar3__angle__, double* %74, align 8
  store %Array* %qubits__1, %Array** %75, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %72)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %76 = add i64 %66, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsJW__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %77 = phi i64 [ 0, %exit__2 ], [ %82, %exiting__3 ]
  %78 = icmp sle i64 %77, 1
  br i1 %78, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %77)
  %80 = bitcast i8* %79 to %Array**
  %81 = load %Array*, %Array** %80, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %82 = add i64 %77, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__padding__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar5__qubitsJW__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %83 = phi i64 [ 0, %exit__3 ], [ %88, %exiting__4 ]
  %84 = icmp sle i64 %83, 1
  br i1 %84, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %83)
  %86 = bitcast i8* %85 to %Array**
  %87 = load %Array*, %Array** %86, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %88 = add i64 %83, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__padding__, i32 -1)
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %89 = phi i64 [ 0, %exit__4 ], [ %94, %exiting__5 ]
  %90 = icmp sle i64 %89, 1
  br i1 %90, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %89)
  %92 = bitcast i8* %91 to %Array**
  %93 = load %Array*, %Array** %92, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %93, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %94 = add i64 %89, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %angle = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %13)
  %15 = bitcast i8* %14 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %15, align 8
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %17 = bitcast i8* %16 to i2*
  store i2 -2, i2* %17, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 0)
  %19 = bitcast i8* %18 to %Qubit**
  store %Qubit* %qubit, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %angle, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %__qsVar3__angle__ = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %13)
  %15 = bitcast i8* %14 to %Qubit**
  %__qsVar4__qubit__ = load %Qubit*, %Qubit** %15, align 8
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %17 = bitcast i8* %16 to i2*
  store i2 -2, i2* %17, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 0)
  %19 = bitcast i8* %18 to %Qubit**
  store %Qubit* %__qsVar4__qubit__, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %__qsVar3__angle__, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %angle = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %17)
  %19 = bitcast i8* %18 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %21 = bitcast i8* %20 to i2*
  store i2 -2, i2* %21, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 0)
  %23 = bitcast i8* %22 to %Qubit**
  store %Qubit* %qubit, %Qubit** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, double, %Array* }*
  %26 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %25, i32 0, i32 2
  store %Array* %paulis, %Array** %26, align 8
  store double %angle, double* %27, align 8
  store %Array* %qubits__1, %Array** %28, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %25)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %__qsVar3__angle__ = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %17)
  %19 = bitcast i8* %18 to %Qubit**
  %__qsVar4__qubit__ = load %Qubit*, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %21 = bitcast i8* %20 to i2*
  store i2 -2, i2* %21, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %qubits__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 0)
  %23 = bitcast i8* %22 to %Qubit**
  store %Qubit* %__qsVar4__qubit__, %Qubit** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, double, %Array* }*
  %26 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %25, i32 0, i32 2
  store %Array* %paulis, %Array** %26, align 8
  store double %__qsVar3__angle__, double* %27, align 8
  store %Array* %qubits__1, %Array** %28, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %25)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %angle = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %12, align 4
  %16 = load i64, i64* %14, align 4
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to i64*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 1)
  %21 = bitcast i8* %20 to i64*
  store i64 %15, i64* %19, align 4
  store i64 %16, i64* %21, align 4
  %qubitsZZ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %17, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %23 = bitcast i8* %22 to i2*
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 1)
  %25 = bitcast i8* %24 to i2*
  store i2 -2, i2* %23, align 1
  store i2 -2, i2* %25, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %angle, %Array* %qubitsZZ)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsZZ, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %__qsVar3__angle__ = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %12, align 4
  %16 = load i64, i64* %14, align 4
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to i64*
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 1)
  %21 = bitcast i8* %20 to i64*
  store i64 %15, i64* %19, align 4
  store i64 %16, i64* %21, align 4
  %__qsVar4__qubitsZZ__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %17, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %23 = bitcast i8* %22 to i2*
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 1)
  %25 = bitcast i8* %24 to i2*
  store i2 -2, i2* %23, align 1
  store i2 -2, i2* %25, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %__qsVar3__angle__, %Array* %__qsVar4__qubitsZZ__)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %angle = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %16 = bitcast i8* %15 to i64*
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %16, align 4
  %20 = load i64, i64* %18, align 4
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 0)
  %23 = bitcast i8* %22 to i64*
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 1)
  %25 = bitcast i8* %24 to i64*
  store i64 %19, i64* %23, align 4
  store i64 %20, i64* %25, align 4
  %qubitsZZ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %21, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %27 = bitcast i8* %26 to i2*
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 1)
  %29 = bitcast i8* %28 to i2*
  store i2 -2, i2* %27, align 1
  store i2 -2, i2* %29, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsZZ, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Array*, double, %Array* }*
  %32 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 1
  %34 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 2
  store %Array* %paulis, %Array** %32, align 8
  store double %angle, double* %33, align 8
  store %Array* %qubitsZZ, %Array** %34, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %31)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsZZ, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %__qsVar3__angle__ = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %16 = bitcast i8* %15 to i64*
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %16, align 4
  %20 = load i64, i64* %18, align 4
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 0)
  %23 = bitcast i8* %22 to i64*
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 1)
  %25 = bitcast i8* %24 to i64*
  store i64 %19, i64* %23, align 4
  store i64 %20, i64* %25, align 4
  %__qsVar4__qubitsZZ__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %21, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %27 = bitcast i8* %26 to i2*
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 1)
  %29 = bitcast i8* %28 to i2*
  store i2 -2, i2* %27, align 1
  store i2 -2, i2* %29, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsZZ__, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Array*, double, %Array* }*
  %32 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 1
  %34 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 2
  store %Array* %paulis, %Array** %32, align 8
  store double %__qsVar3__angle__, double* %33, align 8
  store %Array* %__qsVar4__qubitsZZ__, %Array** %34, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %31)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerBitString__body(i64 %nFermions, %Array* %idxFermions) {
entry:
  %zString = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %1 = srem i64 %0, 2
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([86 x i8], [86 x i8]* @4, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nFermions)
  %5 = sub i64 %nFermions, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %6 = phi i64 [ 0, %continue__1 ], [ %10, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %6)
  %9 = bitcast i8* %8 to i1*
  store i1 false, i1* %9, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %4, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %13)
  %16 = bitcast i8* %15 to i64*
  %fermionIdx = load i64, i64* %16, align 4
  %17 = icmp sge i64 %fermionIdx, %nFermions
  br i1 %17, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__2
  %18 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @5, i32 0, i32 0))
  %19 = call %String* @__quantum__rt__int_to_string(i64 %fermionIdx)
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @6, i32 0, i32 0))
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  %23 = load %Array*, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__fail(%String* %22)
  unreachable

continue__2:                                      ; preds = %body__2
  br label %header__3

exiting__2:                                       ; preds = %exit__3
  %24 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %25 = sub i64 %11, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %continue__2
  %idx = phi i64 [ 0, %continue__2 ], [ %35, %exiting__3 ]
  %26 = icmp sle i64 %idx, %fermionIdx
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = load %Array*, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  %28 = call %Array* @__quantum__rt__array_copy(%Array* %27, i1 false)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %idx)
  %30 = bitcast i8* %29 to i1*
  %31 = load i1, i1* %30, align 1
  %32 = xor i1 %31, true
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %idx)
  %34 = bitcast i8* %33 to i1*
  store i1 %32, i1* %34, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  store %Array* %28, %Array** %zString, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %idx, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  br label %exiting__2

header__4:                                        ; preds = %exiting__4, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__4 ]
  %37 = icmp sle i64 %36, %25
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %36)
  %39 = bitcast i8* %38 to i64*
  %fermionIdx__1 = load i64, i64* %39, align 4
  %40 = load %Array*, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  %41 = call %Array* @__quantum__rt__array_copy(%Array* %40, i1 false)
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %fermionIdx__1)
  %43 = bitcast i8* %42 to i1*
  store i1 false, i1* %43, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  store %Array* %41, %Array** %zString, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %44 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %45 = load %Array*, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 -1)
  ret %Array* %45
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliZString__body(i64 %nFermions, %Array* %idxFermions) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %bitString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerBitString__body(i64 %nFermions, %Array* %idxFermions)
  call void @__quantum__rt__array_update_alias_count(%Array* %bitString, i32 1)
  %0 = call %Array* @Microsoft__Quantum__Convert__BoolArrayAsPauli__body(i2 -2, i1 true, %Array* %bitString)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bitString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bitString, i32 -1)
  ret %Array* %0
}

define internal %Range @Microsoft__Quantum__Arrays___f18da7cbe4e940478813d7485ea738db_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %2
}

define internal %Array* @Microsoft__Quantum__Convert__BoolArrayAsPauli__body(i2 %pauli, i1 %bitApply, %Array* %bits) {
entry:
  %paulis = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nBits)
  %1 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to i2*
  store i2 0, i2* %5, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %0, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  %7 = sub i64 %nBits, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxBit = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %8 = icmp sle i64 %idxBit, %7
  br i1 %8, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %9 = load %Array*, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 -1)
  %10 = call %Array* @__quantum__rt__array_copy(%Array* %9, i1 false)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %12 = bitcast i8* %11 to i1*
  %13 = load i1, i1* %12, align 1
  %14 = icmp eq i1 %13, %bitApply
  %15 = select i1 %14, i2 %pauli, i2 0
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %idxBit)
  %17 = bitcast i8* %16 to i2*
  store i2 %15, i2* %17, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  store %Array* %10, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %idxBit, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %19 = load %Array*, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 -1)
  ret %Array* %19
}

define internal i64 @Microsoft__Quantum__Math__Min__body(%Array* %values) {
entry:
  %min = alloca i64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 0)
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1, align 4
  store i64 %2, i64* %min, align 4
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %3 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = load i64, i64* %min, align 4
  %9 = icmp slt i64 %7, %8
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 4
  store i64 %12, i64* %min, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %13 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = load i64, i64* %min, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 -1)
  ret i64 %14
}

define internal i64 @Microsoft__Quantum__Math__Max__body(%Array* %values) {
entry:
  %max = alloca i64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 0)
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1, align 4
  store i64 %2, i64* %max, align 4
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %3 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = load i64, i64* %max, align 4
  %9 = icmp sgt i64 %7, %8
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 4
  store i64 %12, i64* %max, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %13 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = load i64, i64* %max, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 -1)
  ret i64 %14
}

define internal %Range @Microsoft__Quantum__Arrays___700b015a14454be98b56de747498937e_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %13 = sub i64 %0, 1
  %14 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %13, 2
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %26, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to { %Array*, %Array* }**
  %20 = load { %Array*, %Array* }*, { %Array*, %Array* }** %19, align 8
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 -1)
  %23 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  %24 = load %Array*, %Array** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 -1)
  %25 = bitcast { %Array*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %14
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermToGenIdx__body({ %Array*, %Array* }* %term, %Array* %termType) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %term, i32 0, i32 0
  %idxFermions = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %term, i32 0, i32 1
  %coeff = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %2 = bitcast { %Array*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %termType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coeff, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, %Array* }*
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  store %Array* %termType, %Array** %5, align 8
  store %Array* %coeff, %Array** %6, align 8
  %7 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %4, %Array* %idxFermions)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %termType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %7
}

define internal %Range @Microsoft__Quantum__Arrays___1282ba485eb84ebd9e61ed357fc1aebb_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { %Array*, %Array* }*, %Array* }**
  %6 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 0
  %8 = load { %Array*, %Array* }*, { %Array*, %Array* }** %7, align 8
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %16 = bitcast { { %Array*, %Array* }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %18 = sub i64 %0, 1
  %19 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %18, 2
  %20 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %21)
  %24 = bitcast i8* %23 to { { %Array*, %Array* }*, %Array* }**
  %25 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %24, align 8
  %26 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %25, i32 0, i32 0
  %27 = load { %Array*, %Array* }*, { %Array*, %Array* }** %26, align 8
  %28 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  %30 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 1
  %31 = load %Array*, %Array** %30, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 -1)
  %32 = bitcast { %Array*, %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  %33 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %25, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = bitcast { { %Array*, %Array* }*, %Array* }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %19
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %__Item1__, %Callable* %__Item2__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item2__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item2__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, %Callable* }*
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %1, i32 0, i32 1
  store i64 %__Item1__, i64* %2, align 4
  store %Callable* %__Item2__, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item2__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item2__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item2__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item2__, i32 -1)
  ret { i64, %Callable* }* %1
}

define internal %Callable* @Microsoft__Quantum__Arrays___afda34fbc524426087f3337291e18d1f_LookupFunction__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { %Array*, %Array* }*, %Array* }**
  %6 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 0
  %8 = load { %Array*, %Array* }*, { %Array*, %Array* }** %7, align 8
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %16 = bitcast { { %Array*, %Array* }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___b20df4913ab0459888bcf1448be084b3_ElementAt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %19 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %35, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { { %Array*, %Array* }*, %Array* }**
  %24 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %24, i32 0, i32 0
  %26 = load { %Array*, %Array* }*, { %Array*, %Array* }** %25, align 8
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %26, i32 0, i32 0
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  %29 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %26, i32 0, i32 1
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 1)
  %31 = bitcast { %Array*, %Array* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 1)
  %32 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %24, i32 0, i32 1
  %33 = load %Array*, %Array** %32, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 1)
  %34 = bitcast { { %Array*, %Array* }*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %35 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %array, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Callable*, %Array* }*
  %38 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %37, i32 0, i32 1
  store %Callable* %18, %Callable** %38, align 8
  store %Array* %array, %Array** %39, align 8
  %40 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__52__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__28__FunctionTable, %Tuple* %36)
  %41 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %42 = phi i64 [ 0, %exit__2 ], [ %57, %exiting__3 ]
  %43 = icmp sle i64 %42, %41
  br i1 %43, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %42)
  %45 = bitcast i8* %44 to { { %Array*, %Array* }*, %Array* }**
  %46 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %45, align 8
  %47 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %46, i32 0, i32 0
  %48 = load { %Array*, %Array* }*, { %Array*, %Array* }** %47, align 8
  %49 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %48, i32 0, i32 0
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 -1)
  %51 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %48, i32 0, i32 1
  %52 = load %Array*, %Array** %51, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %52, i32 -1)
  %53 = bitcast { %Array*, %Array* }* %48 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i32 -1)
  %54 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %46, i32 0, i32 1
  %55 = load %Array*, %Array** %54, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %55, i32 -1)
  %56 = bitcast { { %Array*, %Array* }*, %Array* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %57 = add i64 %42, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Callable* %40
}

define internal { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorEvolutionSet__body() {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorFunction____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %0)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret { %Callable* }* %1
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorFunction____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, %Array* }*, %Array* }*
  %1 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___JordanWignerClusterOperatorFunction____body({ { %Array*, %Array* }*, %Array* }* %0)
  %2 = bitcast %Tuple* %result-tuple to { { %Callable* }* }*
  %3 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %2, i32 0, i32 0
  store { %Callable* }* %1, { %Callable* }** %3, align 8
  ret void
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorGeneratorSystem__body(%Array* %data) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 1)
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0__JordanWignerStateAsGeneratorIndex____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %16)
  %19 = bitcast i8* %18 to { { double, double }*, %Array* }**
  %20 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %19, align 8
  %21 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 0
  %22 = load { double, double }*, { double, double }** %21, align 8
  %23 = bitcast { double, double }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 1)
  %24 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 1)
  %26 = bitcast { { double, double }*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %data, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { %Callable*, %Array* }*
  %30 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %29, i32 0, i32 1
  store %Callable* %14, %Callable** %30, align 8
  store %Array* %data, %Array** %31, align 8
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__7__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__5__FunctionTable, %Tuple* %28)
  %33 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %0, %Callable* %32)
  %34 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %46, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %35)
  %38 = bitcast i8* %37 to { { double, double }*, %Array* }**
  %39 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %38, align 8
  %40 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %39, i32 0, i32 0
  %41 = load { double, double }*, { double, double }** %40, align 8
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  %43 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %39, i32 0, i32 1
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 -1)
  %45 = bitcast { { double, double }*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %46 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  ret { i64, %Callable* }* %33
}

define internal void @Lifted__PartialApplication__7__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64 }*
  %4 = getelementptr inbounds { i64 }, { i64 }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, i64 }* getelementptr ({ %Array*, i64 }, { %Array*, i64 }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, i64 }*
  %8 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store i64 %5, i64* %9, align 4
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0__JordanWignerStateAsGeneratorIndex____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, i64 }*
  %1 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load i64, i64* %2, align 4
  %5 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0__JordanWignerStateAsGeneratorIndex____body(%Array* %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %7 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %6, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %5, { { %Array*, %Array* }*, %Array* }** %7, align 8
  ret void
}

define internal void @MemoryManagement__5__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  %15 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 1
  %16 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__5__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  %15 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 1
  %16 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %16, i32 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionEvolutionSet__body() {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %0)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, %Array* }*, %Array* }*
  %1 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__body({ { %Array*, %Array* }*, %Array* }* %0)
  %2 = bitcast %Tuple* %result-tuple to { { %Callable* }* }*
  %3 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %2, i32 0, i32 0
  store { %Callable* }* %1, { %Callable* }** %3, align 8
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %12, i32 0, i32 1
  store %Callable* %10, %Callable** %13, align 8
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %14, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__8__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__3__FunctionTable, %Tuple* %11)
  %16 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret { %Callable* }* %16
}

define internal void @Lifted__PartialApplication__8__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store double %5, double* %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__8__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store double %5, double* %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__8__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14, align 8
  store double %9, double* %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__8__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14, align 8
  store double %9, double* %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__body({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__adj({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctl(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctladj(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %idxDoubles = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %8 = bitcast i8* %7 to i64*
  %termType = load i64, i64* %8, align 4
  %9 = icmp eq i64 %termType, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %termType, 1
  br i1 %10, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %11 = icmp eq i64 %termType, 2
  br i1 %11, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %12 = icmp eq i64 %termType, 3
  br i1 %12, label %then3__1, label %continue__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWigner0123Term_____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then3__1, %test3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__termType__ = load i64, i64* %8, align 4
  %9 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %__qsVar3__termType__, 1
  br i1 %10, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %11 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %11, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %12 = icmp eq i64 %__qsVar3__termType__, 3
  br i1 %12, label %then3__1, label %continue__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWigner0123Term_____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then3__1, %test3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %idxDoubles = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %12 = bitcast i8* %11 to i64*
  %termType = load i64, i64* %12, align 4
  %13 = icmp eq i64 %termType, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16, align 8
  store double %stepSize, double* %17, align 8
  store %Array* %qubits, %Array** %18, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %termType, 1
  br i1 %19, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22, align 8
  store double %stepSize, double* %23, align 8
  store %Array* %qubits, %Array** %24, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %25 = icmp eq i64 %termType, 2
  br i1 %25, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %28 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 1
  %30 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %28, align 8
  store double %stepSize, double* %29, align 8
  store %Array* %qubits, %Array** %30, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %31 = icmp eq i64 %termType, 3
  br i1 %31, label %then3__1, label %continue__1

then3__1:                                         ; preds = %test3__1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %34 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %34, align 8
  store double %stepSize, double* %35, align 8
  store %Array* %qubits, %Array** %36, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWigner0123Term_____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then3__1, %test3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__termType__ = load i64, i64* %12, align 4
  %13 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16, align 8
  store double %stepSize, double* %17, align 8
  store %Array* %qubits, %Array** %18, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %__qsVar3__termType__, 1
  br i1 %19, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22, align 8
  store double %stepSize, double* %23, align 8
  store %Array* %qubits, %Array** %24, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %25 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %25, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %28 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 1
  %30 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %28, align 8
  store double %stepSize, double* %29, align 8
  store %Array* %qubits, %Array** %30, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %31 = icmp eq i64 %__qsVar3__termType__, 3
  br i1 %31, label %then3__1, label %continue__1

then3__1:                                         ; preds = %test3__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %34 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %34, align 8
  store double %stepSize, double* %35, align 8
  store %Array* %qubits, %Array** %36, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___ApplyJordanWigner0123Term_____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then3__1, %test3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerGeneratorSystem__body({ %Array*, %Array*, %Array*, %Array* }* %data) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 0
  %ZData = load %Array*, %Array** %0, align 8
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZData)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %3)
  %6 = bitcast i8* %5 to { %Array*, %Array* }**
  %7 = load { %Array*, %Array* }*, { %Array*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array*, %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 1)
  %14 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 1
  %ZZData = load %Array*, %Array** %14, align 8
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZZData)
  %16 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %17)
  %20 = bitcast i8* %19 to { %Array*, %Array* }**
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 1)
  %28 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 2
  %PQandPQQRData = load %Array*, %Array** %28, align 8
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %PQandPQQRData)
  %30 = sub i64 %29, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, %Array* }**
  %35 = load { %Array*, %Array* }*, { %Array*, %Array* }** %34, align 8
  %36 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 0
  %37 = load %Array*, %Array** %36, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i32 1)
  %38 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 1
  %39 = load %Array*, %Array** %38, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 1)
  %40 = bitcast { %Array*, %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 3
  %h0123Data = load %Array*, %Array** %42, align 8
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %h0123Data)
  %44 = sub i64 %43, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %55, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %45)
  %48 = bitcast i8* %47 to { %Array*, %Array* }**
  %49 = load { %Array*, %Array* }*, { %Array*, %Array* }** %48, align 8
  %50 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %49, i32 0, i32 0
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  %52 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %49, i32 0, i32 1
  %53 = load %Array*, %Array** %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  %54 = bitcast { %Array*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %55 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 1)
  %56 = bitcast { %Array*, %Array*, %Array*, %Array* }* %data to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  %57 = sub i64 %1, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %58 = phi i64 [ 0, %exit__4 ], [ %68, %exiting__5 ]
  %59 = icmp sle i64 %58, %57
  br i1 %59, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %58)
  %61 = bitcast i8* %60 to { %Array*, %Array* }**
  %62 = load { %Array*, %Array* }*, { %Array*, %Array* }** %61, align 8
  %63 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %65 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  %67 = bitcast { %Array*, %Array* }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %68 = add i64 %58, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 1)
  %69 = sub i64 %15, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %70 = phi i64 [ 0, %exit__5 ], [ %80, %exiting__6 ]
  %71 = icmp sle i64 %70, %69
  br i1 %71, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %70)
  %73 = bitcast i8* %72 to { %Array*, %Array* }**
  %74 = load { %Array*, %Array* }*, { %Array*, %Array* }** %73, align 8
  %75 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %74, i32 0, i32 0
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %74, i32 0, i32 1
  %78 = load %Array*, %Array** %77, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %78, i32 1)
  %79 = bitcast { %Array*, %Array* }* %74 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %80 = add i64 %70, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 1)
  %81 = sub i64 %29, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %82 = phi i64 [ 0, %exit__6 ], [ %92, %exiting__7 ]
  %83 = icmp sle i64 %82, %81
  br i1 %83, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %82)
  %85 = bitcast i8* %84 to { %Array*, %Array* }**
  %86 = load { %Array*, %Array* }*, { %Array*, %Array* }** %85, align 8
  %87 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %86, i32 0, i32 0
  %88 = load %Array*, %Array** %87, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 1)
  %89 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %86, i32 0, i32 1
  %90 = load %Array*, %Array** %89, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %90, i32 1)
  %91 = bitcast { %Array*, %Array* }* %86 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %91, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %92 = add i64 %82, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 1)
  %93 = sub i64 %43, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %94 = phi i64 [ 0, %exit__7 ], [ %104, %exiting__8 ]
  %95 = icmp sle i64 %94, %93
  br i1 %95, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %94)
  %97 = bitcast i8* %96 to { %Array*, %Array* }**
  %98 = load { %Array*, %Array* }*, { %Array*, %Array* }** %97, align 8
  %99 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %98, i32 0, i32 0
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %98, i32 0, i32 1
  %102 = load %Array*, %Array** %101, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %102, i32 1)
  %103 = bitcast { %Array*, %Array* }* %98 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %103, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %104 = add i64 %94, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 1)
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to i64*
  store i64 0, i64* %107, align 4
  %ZGenSys = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %ZData, %Array* %105)
  %108 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %ZGenSys, i32 0, i32 1
  %109 = load %Callable*, %Callable** %108, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %109, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %109, i32 1)
  %110 = bitcast { i64, %Callable* }* %ZGenSys to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %110, i32 1)
  %111 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %111, i64 0)
  %113 = bitcast i8* %112 to i64*
  store i64 1, i64* %113, align 4
  %ZZGenSys = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %ZZData, %Array* %111)
  %114 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %ZZGenSys, i32 0, i32 1
  %115 = load %Callable*, %Callable** %114, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %115, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %115, i32 1)
  %116 = bitcast { i64, %Callable* }* %ZZGenSys to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 1)
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to i64*
  store i64 2, i64* %119, align 4
  %PQandPQQRGenSys = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %PQandPQQRData, %Array* %117)
  %120 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %PQandPQQRGenSys, i32 0, i32 1
  %121 = load %Callable*, %Callable** %120, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %121, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %121, i32 1)
  %122 = bitcast { i64, %Callable* }* %PQandPQQRGenSys to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %122, i32 1)
  %123 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %123, i64 0)
  %125 = bitcast i8* %124 to i64*
  store i64 3, i64* %125, align 4
  %h0123GenSys = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %h0123Data, %Array* %123)
  %126 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %h0123GenSys, i32 0, i32 1
  %127 = load %Callable*, %Callable** %126, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %127, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %127, i32 1)
  %128 = bitcast { i64, %Callable* }* %h0123GenSys to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %109, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %109, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %110, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %115, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %115, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %116, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %121, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %121, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %122, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %127, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %127, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i32 1)
  %129 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 0)
  %131 = bitcast i8* %130 to { i64, %Callable* }**
  %132 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 1)
  %133 = bitcast i8* %132 to { i64, %Callable* }**
  %134 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 2)
  %135 = bitcast i8* %134 to { i64, %Callable* }**
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 3)
  %137 = bitcast i8* %136 to { i64, %Callable* }**
  store { i64, %Callable* }* %ZGenSys, { i64, %Callable* }** %131, align 8
  store { i64, %Callable* }* %ZZGenSys, { i64, %Callable* }** %133, align 8
  store { i64, %Callable* }* %PQandPQQRGenSys, { i64, %Callable* }** %135, align 8
  store { i64, %Callable* }* %h0123GenSys, { i64, %Callable* }** %137, align 8
  %138 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__SumGeneratorSystems__body(%Array* %129)
  %139 = sub i64 %1, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %140 = phi i64 [ 0, %exit__8 ], [ %150, %exiting__9 ]
  %141 = icmp sle i64 %140, %139
  br i1 %141, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %140)
  %143 = bitcast i8* %142 to { %Array*, %Array* }**
  %144 = load { %Array*, %Array* }*, { %Array*, %Array* }** %143, align 8
  %145 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %144, i32 0, i32 0
  %146 = load %Array*, %Array** %145, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %146, i32 -1)
  %147 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %144, i32 0, i32 1
  %148 = load %Array*, %Array** %147, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %148, i32 -1)
  %149 = bitcast { %Array*, %Array* }* %144 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %149, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %150 = add i64 %140, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 -1)
  %151 = sub i64 %15, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %152 = phi i64 [ 0, %exit__9 ], [ %162, %exiting__10 ]
  %153 = icmp sle i64 %152, %151
  br i1 %153, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %152)
  %155 = bitcast i8* %154 to { %Array*, %Array* }**
  %156 = load { %Array*, %Array* }*, { %Array*, %Array* }** %155, align 8
  %157 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %156, i32 0, i32 0
  %158 = load %Array*, %Array** %157, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %158, i32 -1)
  %159 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %156, i32 0, i32 1
  %160 = load %Array*, %Array** %159, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %160, i32 -1)
  %161 = bitcast { %Array*, %Array* }* %156 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %161, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %162 = add i64 %152, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 -1)
  %163 = sub i64 %29, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %164 = phi i64 [ 0, %exit__10 ], [ %174, %exiting__11 ]
  %165 = icmp sle i64 %164, %163
  br i1 %165, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %164)
  %167 = bitcast i8* %166 to { %Array*, %Array* }**
  %168 = load { %Array*, %Array* }*, { %Array*, %Array* }** %167, align 8
  %169 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %168, i32 0, i32 0
  %170 = load %Array*, %Array** %169, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %170, i32 -1)
  %171 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %168, i32 0, i32 1
  %172 = load %Array*, %Array** %171, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %172, i32 -1)
  %173 = bitcast { %Array*, %Array* }* %168 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %173, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %174 = add i64 %164, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 -1)
  %175 = sub i64 %43, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %176 = phi i64 [ 0, %exit__11 ], [ %186, %exiting__12 ]
  %177 = icmp sle i64 %176, %175
  br i1 %177, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %176)
  %179 = bitcast i8* %178 to { %Array*, %Array* }**
  %180 = load { %Array*, %Array* }*, { %Array*, %Array* }** %179, align 8
  %181 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %180, i32 0, i32 0
  %182 = load %Array*, %Array** %181, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 -1)
  %183 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %180, i32 0, i32 1
  %184 = load %Array*, %Array** %183, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %184, i32 -1)
  %185 = bitcast { %Array*, %Array* }* %180 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %185, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %186 = add i64 %176, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  %187 = sub i64 %1, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %188 = phi i64 [ 0, %exit__12 ], [ %198, %exiting__13 ]
  %189 = icmp sle i64 %188, %187
  br i1 %189, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %190 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %188)
  %191 = bitcast i8* %190 to { %Array*, %Array* }**
  %192 = load { %Array*, %Array* }*, { %Array*, %Array* }** %191, align 8
  %193 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %192, i32 0, i32 0
  %194 = load %Array*, %Array** %193, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %194, i32 -1)
  %195 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %192, i32 0, i32 1
  %196 = load %Array*, %Array** %195, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %196, i32 -1)
  %197 = bitcast { %Array*, %Array* }* %192 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %197, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %198 = add i64 %188, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 -1)
  %199 = sub i64 %15, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %200 = phi i64 [ 0, %exit__13 ], [ %210, %exiting__14 ]
  %201 = icmp sle i64 %200, %199
  br i1 %201, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %200)
  %203 = bitcast i8* %202 to { %Array*, %Array* }**
  %204 = load { %Array*, %Array* }*, { %Array*, %Array* }** %203, align 8
  %205 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %204, i32 0, i32 0
  %206 = load %Array*, %Array** %205, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 -1)
  %207 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %204, i32 0, i32 1
  %208 = load %Array*, %Array** %207, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %208, i32 -1)
  %209 = bitcast { %Array*, %Array* }* %204 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %209, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %210 = add i64 %200, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 -1)
  %211 = sub i64 %29, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %212 = phi i64 [ 0, %exit__14 ], [ %222, %exiting__15 ]
  %213 = icmp sle i64 %212, %211
  br i1 %213, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %214 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %212)
  %215 = bitcast i8* %214 to { %Array*, %Array* }**
  %216 = load { %Array*, %Array* }*, { %Array*, %Array* }** %215, align 8
  %217 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %216, i32 0, i32 0
  %218 = load %Array*, %Array** %217, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %218, i32 -1)
  %219 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %216, i32 0, i32 1
  %220 = load %Array*, %Array** %219, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %220, i32 -1)
  %221 = bitcast { %Array*, %Array* }* %216 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %221, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %222 = add i64 %212, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 -1)
  %223 = sub i64 %43, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %224 = phi i64 [ 0, %exit__15 ], [ %234, %exiting__16 ]
  %225 = icmp sle i64 %224, %223
  br i1 %225, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %226 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %224)
  %227 = bitcast i8* %226 to { %Array*, %Array* }**
  %228 = load { %Array*, %Array* }*, { %Array*, %Array* }** %227, align 8
  %229 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %228, i32 0, i32 0
  %230 = load %Array*, %Array** %229, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %230, i32 -1)
  %231 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %228, i32 0, i32 1
  %232 = load %Array*, %Array** %231, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %232, i32 -1)
  %233 = bitcast { %Array*, %Array* }* %228 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %233, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %234 = add i64 %224, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %109, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %109, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %110, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %115, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %115, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %121, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %121, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %122, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %127, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %127, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %109, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %109, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %110, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %111, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %115, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %115, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %116, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %117, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %121, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %121, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %122, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %123, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %127, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %127, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i32 -1)
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %235 = phi i64 [ 0, %exit__16 ], [ %243, %exiting__17 ]
  %236 = icmp sle i64 %235, 3
  br i1 %236, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %237 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 %235)
  %238 = bitcast i8* %237 to { i64, %Callable* }**
  %239 = load { i64, %Callable* }*, { i64, %Callable* }** %238, align 8
  %240 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %239, i32 0, i32 1
  %241 = load %Callable*, %Callable** %240, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %241, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %241, i32 -1)
  %242 = bitcast { i64, %Callable* }* %239 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %242, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %243 = add i64 %235, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_reference_count(%Array* %129, i32 -1)
  ret { i64, %Callable* }* %138
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %data, %Array* %termType) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 1)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__HTermsToGenIdx__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %15)
  %18 = bitcast i8* %17 to { %Array*, %Array* }**
  %19 = load { %Array*, %Array* }*, { %Array*, %Array* }** %18, align 8
  %20 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %19, i32 0, i32 0
  %21 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 1)
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %19, i32 0, i32 1
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 1)
  %24 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %data, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %termType, i32 1)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Array* }* getelementptr ({ %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Callable*, %Array*, %Array* }*
  %28 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %27, i32 0, i32 1
  %30 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %27, i32 0, i32 2
  store %Callable* %13, %Callable** %28, align 8
  store %Array* %data, %Array** %29, align 8
  store %Array* %termType, %Array** %30, align 8
  %31 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__13__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__9__FunctionTable, %Tuple* %26)
  %32 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %0, %Callable* %31)
  %33 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %34 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %34)
  %37 = bitcast i8* %36 to { %Array*, %Array* }**
  %38 = load { %Array*, %Array* }*, { %Array*, %Array* }** %37, align 8
  %39 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 0
  %40 = load %Array*, %Array** %39, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  %41 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 1
  %42 = load %Array*, %Array** %41, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 -1)
  %43 = bitcast { %Array*, %Array* }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %34, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  ret { i64, %Callable* }* %32
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Simulation__SumGeneratorSystems__body(%Array* %generatorSystems) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %generatorSystems)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %generatorSystems, i64 %2)
  %5 = bitcast i8* %4 to { i64, %Callable* }**
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %generatorSystems, i32 1)
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__AddGeneratorSystems__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %12 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__IdentityGeneratorSystem__body()
  %13 = call { i64, %Callable* }* @Microsoft__Quantum__Arrays___a0f596cedd8444258509c1c2bf5316bc_Fold__body(%Callable* %11, { i64, %Callable* }* %12, %Array* %generatorSystems)
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 1
  %15 = load %Callable*, %Callable** %14, align 8
  %16 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %generatorSystems, i64 %17)
  %20 = bitcast i8* %19 to { i64, %Callable* }**
  %21 = load { i64, %Callable* }*, { i64, %Callable* }** %20, align 8
  %22 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %21, i32 0, i32 1
  %23 = load %Callable*, %Callable** %22, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %23, i32 -1)
  %24 = bitcast { i64, %Callable* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %generatorSystems, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  %26 = bitcast { i64, %Callable* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  ret { i64, %Callable* }* %13
}

define internal void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__body(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___a8e1efd738ea4e35a379366d158d6002_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %1, %preheader__1 ], [ %14, %exiting__1 ]
  %5 = icmp sle i64 %idxQubit, %3
  %6 = icmp sge i64 %idxQubit, %3
  %7 = select i1 %4, i1 %5, i1 %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Qubit* }*
  %13 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %12, i32 0, i32 0
  store %Qubit* %10, %Qubit** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %singleElementOperation, %Tuple* %11, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %14 = add i64 %idxQubit, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__adj(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___a8e1efd738ea4e35a379366d158d6002_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  %4 = sub i64 %3, %1
  %5 = sdiv i64 %4, %2
  %6 = mul i64 %2, %5
  %7 = add i64 %1, %6
  %8 = sub i64 0, %2
  %9 = insertvalue %Range zeroinitializer, i64 %7, 0
  %10 = insertvalue %Range %9, i64 %8, 1
  %11 = insertvalue %Range %10, i64 %1, 2
  %12 = extractvalue %Range %11, 0
  %13 = extractvalue %Range %11, 1
  %14 = extractvalue %Range %11, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %15 = icmp sgt i64 %13, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %12, %preheader__1 ], [ %26, %exiting__1 ]
  %16 = icmp sle i64 %__qsVar0__idxQubit__, %14
  %17 = icmp sge i64 %__qsVar0__idxQubit__, %14
  %18 = select i1 %15, i1 %16, i1 %17
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %21 = bitcast i8* %20 to %Qubit**
  %22 = load %Qubit*, %Qubit** %21, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Qubit* }*
  %25 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %24, i32 0, i32 0
  store %Qubit* %22, %Qubit** %25, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %23, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %26 = add i64 %__qsVar0__idxQubit__, %13
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %register = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %3 = call %Range @Microsoft__Quantum__Arrays___a8e1efd738ea4e35a379366d158d6002_IndexRange__body(%Array* %register)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %7 = icmp sgt i64 %5, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %4, %preheader__1 ], [ %19, %exiting__1 ]
  %8 = icmp sle i64 %idxQubit, %6
  %9 = icmp sge i64 %idxQubit, %6
  %10 = select i1 %7, i1 %8, i1 %9
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = load %Qubit*, %Qubit** %13, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, %Qubit* }*
  %17 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %16, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %17, align 8
  store %Qubit* %14, %Qubit** %18, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %15, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idxQubit, %5
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %register = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %3 = call %Range @Microsoft__Quantum__Arrays___a8e1efd738ea4e35a379366d158d6002_IndexRange__body(%Array* %register)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  %7 = sub i64 %6, %4
  %8 = sdiv i64 %7, %5
  %9 = mul i64 %5, %8
  %10 = add i64 %4, %9
  %11 = sub i64 0, %5
  %12 = insertvalue %Range zeroinitializer, i64 %10, 0
  %13 = insertvalue %Range %12, i64 %11, 1
  %14 = insertvalue %Range %13, i64 %4, 2
  %15 = extractvalue %Range %14, 0
  %16 = extractvalue %Range %14, 1
  %17 = extractvalue %Range %14, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %18 = icmp sgt i64 %16, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %15, %preheader__1 ], [ %30, %exiting__1 ]
  %19 = icmp sle i64 %__qsVar0__idxQubit__, %17
  %20 = icmp sge i64 %__qsVar0__idxQubit__, %17
  %21 = select i1 %18, i1 %19, i1 %20
  br i1 %21, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %22)
  call void @__quantum__rt__callable_make_controlled(%Callable* %22)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %24 = bitcast i8* %23 to %Qubit**
  %25 = load %Qubit*, %Qubit** %24, align 8
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Array*, %Qubit* }*
  %28 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %27, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %28, align 8
  store %Qubit* %25, %Qubit** %29, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %26, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %30 = add i64 %__qsVar0__idxQubit__, %16
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSparseMultiConfigurationalState__body(%Callable* %initialStatePreparation, %Array* %excitations, %Array* %qubits) {
entry:
  %success = alloca i1, align 1
  %applyFlips = alloca %Array*, align 8
  %coefficientsNewComplexPolar = alloca %Array*, align 8
  %coefficientsSqrtAbs = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %initialStatePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i32 1)
  %nExcitations = call i64 @__quantum__rt__array_get_size_1d(%Array* %excitations)
  %0 = sub i64 %nExcitations, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %1)
  %4 = bitcast i8* %3 to { { double, double }*, %Array* }**
  %5 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %4, align 8
  %6 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %5, i32 0, i32 0
  %7 = load { double, double }*, { double, double }** %6, align 8
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %5, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { { double, double }*, %Array* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %excitations, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %14 = sub i64 %nExcitations, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %15)
  %18 = bitcast i8* %17 to double*
  store double 0.000000e+00, double* %18, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  store %Array* %13, %Array** %coefficientsSqrtAbs, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %20 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %22 = sub i64 %nExcitations, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %23)
  %26 = bitcast i8* %25 to { double, double }**
  store { double, double }* %20, { double, double }** %26, align 8
  %27 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %21, %Array** %coefficientsNewComplexPolar, align 8
  %29 = sub i64 %nExcitations, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %30 = phi i64 [ 0, %exit__3 ], [ %36, %exiting__4 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %30)
  %33 = bitcast i8* %32 to { double, double }**
  %34 = load { double, double }*, { double, double }** %33, align 8
  %35 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %36 = add i64 %30, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %39 = sub i64 %nExcitations, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %40 = phi i64 [ 0, %exit__4 ], [ %44, %exiting__5 ]
  %41 = icmp sle i64 %40, %39
  br i1 %41, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 %40)
  %43 = bitcast i8* %42 to %Array**
  store %Array* %37, %Array** %43, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %44 = add i64 %40, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  store %Array* %38, %Array** %applyFlips, align 8
  %45 = sub i64 %nExcitations, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %46 = phi i64 [ 0, %exit__5 ], [ %51, %exiting__6 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %51 = add i64 %46, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i32 1)
  %52 = sub i64 %nExcitations, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %idx = phi i64 [ 0, %exit__6 ], [ %94, %exiting__7 ]
  %53 = icmp sle i64 %idx, %52
  br i1 %53, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %idx)
  %55 = bitcast i8* %54 to { { double, double }*, %Array* }**
  %56 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %55, align 8
  %57 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %56, i32 0, i32 0
  %x = load { double, double }*, { double, double }** %57, align 8
  %58 = bitcast { double, double }* %x to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %58, i32 1)
  %59 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %56, i32 0, i32 1
  %excitation = load %Array*, %Array** %59, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i32 1)
  %60 = load %Array*, %Array** %coefficientsSqrtAbs, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 -1)
  %61 = call %Array* @__quantum__rt__array_copy(%Array* %60, i1 false)
  %62 = getelementptr inbounds { double, double }, { double, double }* %x, i32 0, i32 0
  %63 = getelementptr inbounds { double, double }, { double, double }* %x, i32 0, i32 1
  %64 = load double, double* %62, align 8
  %65 = load double, double* %63, align 8
  %66 = call { double, double }* @Microsoft__Quantum__Math__Complex__body(double %64, double %65)
  %67 = call { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %66)
  %d = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %67)
  %68 = call double @__quantum__qis__sqrt__body(double %d)
  %69 = bitcast { double, double }* %66 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %69, i32 -1)
  %70 = bitcast { double, double }* %67 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %70, i32 -1)
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %idx)
  %72 = bitcast i8* %71 to double*
  store double %68, double* %72, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 1)
  store %Array* %61, %Array** %coefficientsSqrtAbs, align 8
  %73 = load %Array*, %Array** %coefficientsNewComplexPolar, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %73, i32 -1)
  %74 = call %Array* @__quantum__rt__array_copy(%Array* %73, i1 false)
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %idx)
  %76 = bitcast i8* %75 to double*
  %77 = load double, double* %76, align 8
  %78 = call { double, double }* @Microsoft__Quantum__Math__Complex__body(double %64, double %65)
  %79 = call { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %78)
  %80 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %79)
  %81 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %77, double %80)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 %idx)
  %83 = bitcast i8* %82 to { double, double }**
  %84 = bitcast { double, double }* %81 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %84, i32 1)
  %85 = load { double, double }*, { double, double }** %83, align 8
  %86 = bitcast { double, double }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %86, i32 -1)
  store { double, double }* %81, { double, double }** %83, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 1)
  store %Array* %74, %Array** %coefficientsNewComplexPolar, align 8
  %87 = load %Array*, %Array** %applyFlips, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %87, i32 -1)
  %88 = call %Array* @__quantum__rt__array_copy(%Array* %87, i1 false)
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 %idx)
  %90 = bitcast i8* %89 to %Array**
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %excitation, i32 1)
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i32 -1)
  store %Array* %excitation, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 1)
  store %Array* %88, %Array** %applyFlips, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %58, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %73, i32 -1)
  %92 = bitcast { double, double }* %78 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %92, i32 -1)
  %93 = bitcast { double, double }* %79 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %93, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %94 = add i64 %idx, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  %95 = sitofp i64 %nExcitations to double
  %96 = call double @Microsoft__Quantum__Math__Lg__body(double %95)
  %nBitsIndices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %96)
  br label %repeat__1

repeat__1:                                        ; preds = %fixup__1, %exit__7
  store i1 false, i1* %success, align 1
  %97 = add i64 %nBitsIndices, 1
  %auxillary = call %Array* @__quantum__rt__qubit_allocate_array(i64 %97)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxillary, i32 1)
  %flag = call %Qubit* @__quantum__rt__qubit_allocate()
  %98 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PrepareSingleConfigurationalStateSingleSiteOccupation____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %99 = load %Array*, %Array** %applyFlips, align 8
  %100 = call %Array* @Microsoft__Quantum__Arrays___2f6981dc34504975878034851493f61b_Mapped__body(%Callable* %98, %Array* %99)
  %101 = call %Callable* @Microsoft__Quantum__Arrays___5f8f6915612f46e7aec067f52ac7aceb_LookupFunction__body(%Array* %100)
  %multiplexer = call %Callable* @Microsoft__Quantum__Canon__MultiplexerBruteForceFromGenerator__body(i64 %nExcitations, %Callable* %101)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %multiplexer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i32 1)
  %102 = load %Array*, %Array** %coefficientsNewComplexPolar, align 8
  %103 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body(%Array* %102, { %Array* }* %103)
  %104 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %105 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %106 = bitcast %Tuple* %105 to { { %Array* }*, %Array* }*
  %107 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %106, i32 0, i32 0
  %108 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %106, i32 0, i32 1
  store { %Array* }* %104, { %Array* }** %107, align 8
  store %Array* %qubits, %Array** %108, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %multiplexer, %Tuple* %105, %Tuple* null)
  %109 = load %Array*, %Array** %coefficientsSqrtAbs, align 8
  %110 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %109, { %Array* }* %110)
  %111 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %112 = call %Callable* @Microsoft__Quantum__Canon___5677538337b642fcacbb1c21675a13c0_ControlledOnInt__body(i64 0, %Callable* %111)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxillary, i32 1)
  %113 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %114 = bitcast %Tuple* %113 to { %Array*, %Qubit* }*
  %115 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %114, i32 0, i32 0
  %116 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %114, i32 0, i32 1
  store %Array* %auxillary, %Array** %115, align 8
  store %Qubit* %flag, %Qubit** %116, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %112, %Tuple* %113, %Tuple* null)
  %outcome = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %flag)
  %117 = call %Result* @__quantum__rt__result_get_one()
  %118 = call i1 @__quantum__rt__result_equal(%Result* %outcome, %Result* %117)
  store i1 %118, i1* %success, align 1
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %auxillary)
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %flag)
  %119 = getelementptr inbounds { %Array* }, { %Array* }* %103, i32 0, i32 0
  %120 = load %Array*, %Array** %119, align 8
  %121 = getelementptr inbounds { %Array* }, { %Array* }* %104, i32 0, i32 0
  %122 = load %Array*, %Array** %121, align 8
  %123 = getelementptr inbounds { %Array* }, { %Array* }* %110, i32 0, i32 0
  %124 = load %Array*, %Array** %123, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %98, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %98, i32 -1)
  %125 = call i64 @__quantum__rt__array_get_size_1d(%Array* %100)
  %126 = sub i64 %125, 1
  br label %header__8

until__1:                                         ; preds = %exit__8
  br i1 %118, label %rend__1, label %fixup__1

fixup__1:                                         ; preds = %until__1
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits)
  br label %repeat__1

rend__1:                                          ; preds = %until__1
  %127 = load %Array*, %Array** %coefficientsSqrtAbs, align 8
  %128 = load %Array*, %Array** %coefficientsNewComplexPolar, align 8
  %129 = load %Array*, %Array** %applyFlips, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %initialStatePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i32 -1)
  %130 = sub i64 %nExcitations, 1
  br label %header__9

header__8:                                        ; preds = %exiting__8, %repeat__1
  %131 = phi i64 [ 0, %repeat__1 ], [ %136, %exiting__8 ]
  %132 = icmp sle i64 %131, %126
  br i1 %132, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %131)
  %134 = bitcast i8* %133 to %Callable**
  %135 = load %Callable*, %Callable** %134, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %135, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %135, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %136 = add i64 %131, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %101, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %101, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  %137 = bitcast { %Array* }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %137, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %122, i32 -1)
  %138 = bitcast { %Array* }* %104 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %105, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %124, i32 -1)
  %139 = bitcast { %Array* }* %110 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %139, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %112, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %112, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxillary, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %113, i32 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %outcome, i32 -1)
  call void @__quantum__rt__qubit_release(%Qubit* %flag)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxillary, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %auxillary)
  br label %until__1

header__9:                                        ; preds = %exiting__9, %rend__1
  %140 = phi i64 [ 0, %rend__1 ], [ %151, %exiting__9 ]
  %141 = icmp sle i64 %140, %130
  br i1 %141, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %140)
  %143 = bitcast i8* %142 to { { double, double }*, %Array* }**
  %144 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %143, align 8
  %145 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %144, i32 0, i32 0
  %146 = load { double, double }*, { double, double }** %145, align 8
  %147 = bitcast { double, double }* %146 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %147, i32 -1)
  %148 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %144, i32 0, i32 1
  %149 = load %Array*, %Array** %148, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %149, i32 -1)
  %150 = bitcast { { double, double }*, %Array* }* %144 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %150, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %151 = add i64 %140, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %excitations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %127, i32 -1)
  %152 = call i64 @__quantum__rt__array_get_size_1d(%Array* %128)
  %153 = sub i64 %152, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %154 = phi i64 [ 0, %exit__9 ], [ %160, %exiting__10 ]
  %155 = icmp sle i64 %154, %153
  br i1 %155, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %156 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %154)
  %157 = bitcast i8* %156 to { double, double }**
  %158 = load { double, double }*, { double, double }** %157, align 8
  %159 = bitcast { double, double }* %158 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %159, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %160 = add i64 %154, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %128, i32 -1)
  %161 = call i64 @__quantum__rt__array_get_size_1d(%Array* %129)
  %162 = sub i64 %161, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %163 = phi i64 [ 0, %exit__10 ], [ %168, %exiting__11 ]
  %164 = icmp sle i64 %163, %162
  br i1 %164, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %165 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 %163)
  %166 = bitcast i8* %165 to %Array**
  %167 = load %Array*, %Array** %166, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %167, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %168 = add i64 %163, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %129, i32 -1)
  %169 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %169, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %127, i32 -1)
  %170 = sub i64 %152, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %171 = phi i64 [ 0, %exit__11 ], [ %177, %exiting__12 ]
  %172 = icmp sle i64 %171, %170
  br i1 %172, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %171)
  %174 = bitcast i8* %173 to { double, double }**
  %175 = load { double, double }*, { double, double }** %174, align 8
  %176 = bitcast { double, double }* %175 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %176, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %177 = add i64 %171, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %128, i32 -1)
  %178 = sub i64 %161, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %179 = phi i64 [ 0, %exit__12 ], [ %184, %exiting__13 ]
  %180 = icmp sle i64 %179, %178
  br i1 %180, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %181 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 %179)
  %182 = bitcast i8* %181 to %Array**
  %183 = load %Array*, %Array** %182, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %183, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %184 = add i64 %179, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_reference_count(%Array* %129, i32 -1)
  ret void
}

define internal { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %Magnitude, double %Argument) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double %Magnitude, double* %2, align 8
  store double %Argument, double* %3, align 8
  ret { double, double }* %1
}

define internal double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 0
  %2 = load double, double* %1, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %2
}

define internal { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = call double @Microsoft__Quantum__Math__AbsComplex__body({ double, double }* %input)
  %2 = call double @Microsoft__Quantum__Math__ArgComplex__body({ double, double }* %input)
  %3 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %1, double %2)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret { double, double }* %3
}

define internal { double, double }* @Microsoft__Quantum__Math__Complex__body(double %Real, double %Imag) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double %Real, double* %2, align 8
  store double %Imag, double* %3, align 8
  ret { double, double }* %1
}

declare double @__quantum__qis__sqrt__body(double)

define internal double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 1
  %2 = load double, double* %1, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %2
}

declare %Qubit* @__quantum__rt__qubit_allocate()

declare %Array* @__quantum__rt__qubit_allocate_array(i64)

declare void @__quantum__rt__qubit_release_array(%Array*)

declare void @__quantum__rt__qubit_release(%Qubit*)

define internal %Callable* @Microsoft__Quantum__Canon__MultiplexerBruteForceFromGenerator__body(i64 %0, %Callable* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %unitaryGenerator = bitcast %Tuple* %2 to { i64, %Callable* }*
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %4 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store %Callable* %1, %Callable** %4, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { i64, %Callable* }* }* getelementptr ({ %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, { i64, %Callable* }* }*
  %8 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %7, i32 0, i32 1
  store %Callable* %5, %Callable** %8, align 8
  store { i64, %Callable* }* %unitaryGenerator, { i64, %Callable* }** %9, align 8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__26__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__12__FunctionTable, %Tuple* %6)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret %Callable* %10
}

define internal %Callable* @Microsoft__Quantum__Arrays___5f8f6915612f46e7aec067f52ac7aceb_LookupFunction__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___7d83b54afca94675b63617b69b56aa7a_ElementAt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %10)
  %13 = bitcast i8* %12 to %Callable**
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %array, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, %Array* }*
  %18 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %17, i32 0, i32 1
  store %Callable* %8, %Callable** %18, align 8
  store %Array* %array, %Array** %19, align 8
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__51__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__27__FunctionTable, %Tuple* %16)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %22)
  %25 = bitcast i8* %24 to %Callable**
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Callable* %20
}

define internal %Array* @Microsoft__Quantum__Arrays___2f6981dc34504975878034851493f61b_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to %Array**
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %7 = icmp eq i64 %length, 0
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %9 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %11 = bitcast i8* %10 to %Array**
  %12 = load %Array*, %Array** %11, align 8
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr inbounds { %Array* }, { %Array* }* %14, i32 0, i32 0
  store %Array* %12, %Array** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %13, %Tuple* %16)
  %17 = bitcast %Tuple* %16 to { %Callable* }*
  %18 = getelementptr inbounds { %Callable* }, { %Callable* }* %17, i32 0, i32 0
  %first = load %Callable*, %Callable** %18, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %first, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %first, i32 1)
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %20 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %21 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %22 = icmp sle i64 %21, %9
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %21)
  %24 = bitcast i8* %23 to %Array**
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %8

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %20
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %27)
  %30 = bitcast i8* %29 to %Callable**
  store %Callable* %first, %Callable** %30, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %first, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %first, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %19, %Array** %retval, align 8
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %33 = phi i64 [ 0, %exit__3 ], [ %38, %exiting__4 ]
  %34 = icmp sle i64 %33, %32
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %33)
  %36 = bitcast i8* %35 to %Callable**
  %37 = load %Callable*, %Callable** %36, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %37, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %37, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %38 = add i64 %33, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %39 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %56, %exiting__5 ]
  %40 = icmp sle i64 %idx, %39
  br i1 %40, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %41 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  %42 = call %Array* @__quantum__rt__array_copy(%Array* %41, i1 false)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %44 = bitcast i8* %43 to %Array**
  %45 = load %Array*, %Array** %44, align 8
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { %Array* }*
  %48 = getelementptr inbounds { %Array* }, { %Array* }* %47, i32 0, i32 0
  store %Array* %45, %Array** %48, align 8
  %49 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %46, %Tuple* %49)
  %50 = bitcast %Tuple* %49 to { %Callable* }*
  %51 = getelementptr inbounds { %Callable* }, { %Callable* }* %50, i32 0, i32 0
  %52 = load %Callable*, %Callable** %51, align 8
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 %idx)
  %54 = bitcast i8* %53 to %Callable**
  call void @__quantum__rt__capture_update_alias_count(%Callable* %52, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %52, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %52, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %52, i32 1)
  %55 = load %Callable*, %Callable** %54, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %55, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %55, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %55, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %55, i32 -1)
  store %Callable* %52, %Callable** %54, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 1)
  store %Array* %42, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %56 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %57 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %58 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %59 = phi i64 [ 0, %exit__5 ], [ %64, %exiting__6 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %59)
  %62 = bitcast i8* %61 to %Array**
  %63 = load %Array*, %Array** %62, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %63, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %64 = add i64 %59, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %first, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %first, i32 -1)
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %66 = sub i64 %65, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %67 = phi i64 [ 0, %exit__6 ], [ %72, %exiting__7 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %67)
  %70 = bitcast i8* %69 to %Callable**
  %71 = load %Callable*, %Callable** %70, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %71, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %71, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %72 = add i64 %67, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %first, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %first, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret %Array* %57
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PrepareSingleConfigurationalStateSingleSiteOccupation____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr inbounds { %Array* }, { %Array* }* %0, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Callable* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___PrepareSingleConfigurationalStateSingleSiteOccupation____body(%Array* %2)
  %4 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %5 = getelementptr inbounds { %Callable* }, { %Callable* }* %4, i32 0, i32 0
  store %Callable* %3, %Callable** %5, align 8
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  ret void
}

define internal { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %__Item1__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %1, i32 0, i32 0
  store %Array* %__Item1__, %Array** %2, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 -1)
  ret { %Array* }* %1
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__adj(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___5677538337b642fcacbb1c21675a13c0_ControlledOnInt__body(i64 %numberState, %Callable* %oracle) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, i64, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %2, i32 0, i32 2
  store %Callable* %0, %Callable** %3, align 8
  store i64 %numberState, i64* %4, align 4
  store %Callable* %oracle, %Callable** %5, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__40__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__17__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  ret %Callable* %6
}

define internal %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit) {
entry:
  %bases = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bases, i64 0)
  %1 = bitcast i8* %0 to i2*
  store i2 -2, i2* %1, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %3 = bitcast i8* %2 to %Qubit**
  store %Qubit* %qubit, %Qubit** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %4 = call %Result* @__quantum__qis__measure__body(%Array* %bases, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  ret %Result* %4
}

declare %Result* @__quantum__rt__result_get_one()

declare i1 @__quantum__rt__result_equal(%Result*, %Result*)

define internal void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %2)
  %5 = bitcast i8* %4 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %qubit)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %qubit) {
entry:
  %0 = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit)
  %1 = call %Result* @__quantum__rt__result_get_one()
  %2 = call i1 @__quantum__rt__result_equal(%Result* %0, %Result* %1)
  call void @__quantum__rt__result_update_reference_count(%Result* %0, i32 -1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

declare void @__quantum__rt__result_update_reference_count(%Result*, i32)

define internal i1 @Microsoft__Quantum__Arrays___0fcd31919d144fe58f058d4e79e5219d_IsEmpty__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %14 = icmp eq i64 %0, 0
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to { { double, double }*, %Array* }**
  %20 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %19, align 8
  %21 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 0
  %22 = load { double, double }*, { double, double }** %21, align 8
  %23 = bitcast { double, double }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 -1)
  %24 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  %26 = bitcast { { double, double }*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %14
}

define internal void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr inbounds { %Array* }, { %Array* }* %0, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  call void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__body(%Array* %2)
  ret void
}

define internal void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr inbounds { %Array* }, { %Array* }* %0, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  call void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__adj(%Array* %2)
  ret void
}

define internal void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__ctl(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__ctladj(%Array* %3, %Array* %4)
  ret void
}

define internal void @Lifted__PartialApplication__9__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Array* }*
  %7 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Array* %4, %Array** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Array* }*, %Array* }* getelementptr ({ { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { i64, %Array* }*, %Array* }*
  %14 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %13, i32 0, i32 1
  store { i64, %Array* }* %6, { i64, %Array* }** %14, align 8
  store %Array* %11, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @MemoryManagement__6__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  %15 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 1
  %16 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__6__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  %15 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 1
  %16 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %16, i32 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareUnitaryCoupledClusterState__body(%Callable* %initialStatePreparation, %Array* %clusterOperator, double %trotterStepSize, %Array* %qubits) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %initialStatePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %clusterOperator)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %clusterOperator, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %clusterOperator, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %clusterOperatorGeneratorSystem = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorGeneratorSystem__body(%Array* %clusterOperator)
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %clusterOperatorGeneratorSystem, i32 0, i32 1
  %15 = load %Callable*, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i32 1)
  %16 = bitcast { i64, %Callable* }* %clusterOperatorGeneratorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %17 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorEvolutionSet__body()
  %evolutionGenerator = call { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %17, { i64, %Callable* }* %clusterOperatorGeneratorSystem)
  %18 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %19 = load { %Callable* }*, { %Callable* }** %18, align 8
  %20 = getelementptr inbounds { %Callable* }, { %Callable* }* %19, i32 0, i32 0
  %21 = load %Callable*, %Callable** %20, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i32 1)
  %22 = bitcast { %Callable* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  %23 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %24 = load { i64, %Callable* }*, { i64, %Callable* }** %23, align 8
  %25 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %24, i32 0, i32 1
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 1)
  %27 = bitcast { i64, %Callable* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 1)
  %28 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  %29 = call { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 1)
  %30 = getelementptr inbounds { %Callable* }, { %Callable* }* %29, i32 0, i32 0
  %simulationAlgorithm = load %Callable*, %Callable** %30, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 1)
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* getelementptr ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %33 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i32 0, i32 0
  %34 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i32 0, i32 1
  %35 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i32 0, i32 2
  store %Callable* %simulationAlgorithm, %Callable** %33, align 8
  store double 1.000000e+00, double* %34, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %35, align 8
  %oracle = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__10__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__7__FunctionTable, %Tuple* %31)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array* }*
  %38 = getelementptr inbounds { %Array* }, { %Array* }* %37, i32 0, i32 0
  store %Array* %qubits, %Array** %38, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %initialStatePreparation, %Tuple* %36, %Tuple* null)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Array* }*
  %41 = getelementptr inbounds { %Array* }, { %Array* }* %40, i32 0, i32 0
  store %Array* %qubits, %Array** %41, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %oracle, %Tuple* %39, %Tuple* null)
  %42 = getelementptr inbounds { %Callable* }, { %Callable* }* %17, i32 0, i32 0
  %43 = load %Callable*, %Callable** %42, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %initialStatePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i32 -1)
  %44 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %45 = phi i64 [ 0, %exit__1 ], [ %56, %exiting__2 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %clusterOperator, i64 %45)
  %48 = bitcast i8* %47 to { { double, double }*, %Array* }**
  %49 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %48, align 8
  %50 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %49, i32 0, i32 0
  %51 = load { double, double }*, { double, double }** %50, align 8
  %52 = bitcast { double, double }* %51 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i32 -1)
  %53 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %49, i32 0, i32 1
  %54 = load %Array*, %Array** %53, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %54, i32 -1)
  %55 = bitcast { { double, double }*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %55, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %56 = add i64 %45, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %clusterOperator, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i32 -1)
  %57 = bitcast { %Callable* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %simulationAlgorithm, i32 -1)
  %58 = bitcast { %Callable* }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__body(%Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__adj(%Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__ctl(%Array* %__controlQubits__, %Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___69173d15e6dc43acae43a0cef86fdeba_NoOp__ctladj(%Array* %__controlQubits__, %Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 -1)
  ret void
}

define internal { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %__Item1__, { i64, %Callable* }* %__Item2__) {
entry:
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %__Item1__, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__Item2__, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  %5 = bitcast { i64, %Callable* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }*, { i64, %Callable* }* }* getelementptr ({ { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Callable* }*, { i64, %Callable* }* }*
  %8 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %7, i32 0, i32 1
  store { %Callable* }* %__Item1__, { %Callable* }** %8, align 8
  store { i64, %Callable* }* %__Item2__, { i64, %Callable* }** %9, align 8
  %10 = getelementptr inbounds { %Callable* }, { %Callable* }* %__Item1__, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__Item2__, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 1)
  %14 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 1)
  %15 = bitcast { i64, %Callable* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  ret { { %Callable* }*, { i64, %Callable* }* }* %7
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 %trotterOrder) {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, double, i64 }*
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %2, i32 0, i32 2
  store %Callable* %0, %Callable** %3, align 8
  store double %trotterStepSize, double* %4, align 8
  store i64 %trotterOrder, i64* %5, align 4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__59__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__35__FunctionTable, %Tuple* %1)
  %7 = call { %Callable* }* @Microsoft__Quantum__Simulation__SimulationAlgorithm__body(%Callable* %6)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  ret { %Callable* }* %7
}

define internal void @Lifted__PartialApplication__10__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @MemoryManagement__7__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__7__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__11__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, i64, %Array* }*
  %10 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store i64 %4, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, i64, %Array* }*
  %10 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store i64 %4, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, i64 }*
  %6 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Callable*, i64, %Array* }*
  %12 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %11, i32 0, i32 2
  store %Callable* %7, %Callable** %12, align 8
  store i64 %9, i64* %13, align 4
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, i64, %Array* }* }* getelementptr ({ %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { %Callable*, i64, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { %Callable*, i64, %Array* }* %11, { %Callable*, i64, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, i64 }*
  %6 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Callable*, i64, %Array* }*
  %12 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %11, i32 0, i32 2
  store %Callable* %7, %Callable** %12, align 8
  store i64 %9, i64* %13, align 4
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, i64, %Array* }* }* getelementptr ({ %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { %Callable*, i64, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { %Callable*, i64, %Array* }* %11, { %Callable*, i64, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____body(%Callable* %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____adj(%Callable* %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, i64, %Array* }*, { %Callable*, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____ctl(%Array* %3, { %Callable*, i64, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, i64, %Array* }*, { %Callable*, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef0___MergeTwoRegisters_____ctladj(%Array* %3, { %Callable*, i64, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__8__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__8__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__12__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__12__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__12__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__12__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermsToGenIdx__body(%Array* %data, %Array* %termType, i64 %idx) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %idx)
  %14 = bitcast i8* %13 to { %Array*, %Array* }**
  %15 = load { %Array*, %Array* }*, { %Array*, %Array* }** %14, align 8
  %16 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermToGenIdx__body({ %Array*, %Array* }* %15, %Array* %termType)
  %17 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %18 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %18)
  %21 = bitcast i8* %20 to { %Array*, %Array* }**
  %22 = load { %Array*, %Array* }*, { %Array*, %Array* }** %21, align 8
  %23 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %22, i32 0, i32 0
  %24 = load %Array*, %Array** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 -1)
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %22, i32 0, i32 1
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 -1)
  %27 = bitcast { %Array*, %Array* }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %18, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %16
}

define internal void @Lifted__PartialApplication__13__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { i64 }*
  %6 = getelementptr inbounds { i64 }, { i64 }* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 4
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, i64 }* getelementptr ({ %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array*, i64 }*
  %10 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %9, i32 0, i32 2
  store %Array* %2, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  store i64 %7, i64* %12, align 4
  %13 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__HTermsToGenIdx__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array*, i64 }*
  %1 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load i64, i64* %3, align 4
  %7 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermsToGenIdx__body(%Array* %4, %Array* %5, i64 %6)
  %8 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %8, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %9, align 8
  ret void
}

define internal void @MemoryManagement__9__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { %Array*, %Array* }**
  %11 = load { %Array*, %Array* }*, { %Array*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 %count-change)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 %count-change)
  %16 = bitcast { %Array*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %18 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__9__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { %Array*, %Array* }**
  %11 = load { %Array*, %Array* }*, { %Array*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 %count-change)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 %count-change)
  %16 = bitcast { %Array*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %18 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Math__AbsD__body(double %a) {
entry:
  %0 = fcmp olt double %a, 0.000000e+00
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = fneg double %a
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi double [ %1, %condTrue__1 ], [ %a, %condFalse__1 ]
  ret double %2
}

define internal double @Microsoft__Quantum__Math__PowD__body(double %x, double %y) {
entry:
  %0 = call double @llvm.pow.f64(double %x, double %y)
  ret double %0
}

define internal { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef2__ExtendedTruncation____body(double %value) {
entry:
  %truncated = fptosi double %value to i64
  %0 = sitofp i64 %truncated to double
  %1 = fsub double %0, %value
  %2 = fcmp oge double %value, 0.000000e+00
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, i1 }* getelementptr ({ i64, double, i1 }, { i64, double, i1 }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { i64, double, i1 }*
  %5 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %4, i32 0, i32 1
  %7 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %4, i32 0, i32 2
  store i64 %truncated, i64* %5, align 4
  store double %1, double* %6, align 8
  store i1 %2, i1* %7, align 1
  ret { i64, double, i1 }* %4
}

define internal double @Microsoft__Quantum__Math__AbsComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %d = call double @Microsoft__Quantum__Math__AbsSquaredComplex__body({ double, double }* %input)
  %1 = call double @__quantum__qis__sqrt__body(double %d)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %1
}

define internal double @Microsoft__Quantum__Math__AbsSquaredComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 0
  %real = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 1
  %imaginary = load double, double* %2, align 8
  %3 = fmul double %real, %real
  %4 = fmul double %imaginary, %imaginary
  %5 = fadd double %3, %4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %5
}

define internal i64 @Microsoft__Quantum__Math__AbsI__body(i64 %a) {
entry:
  %0 = icmp slt i64 %a, 0
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = sub i64 0, %a
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi i64 [ %1, %condTrue__1 ], [ %a, %condFalse__1 ]
  ret i64 %2
}

define internal double @Microsoft__Quantum__Math__ArcTan2__body(double %y, double %x) {
entry:
  %0 = call double @__quantum__qis__arctan2__body(double %y, double %x)
  ret double %0
}

declare double @__quantum__qis__arctan2__body(double, double)

define internal double @Microsoft__Quantum__Math__ArgComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 0
  %real = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 1
  %imaginary = load double, double* %2, align 8
  %3 = call double @__quantum__qis__arctan2__body(double %imaginary, double %real)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %3
}

define internal double @Microsoft__Quantum__Math__Cos__body(double %theta) {
entry:
  %0 = call double @__quantum__qis__cos__body(double %theta)
  ret double %0
}

declare double @__quantum__qis__cos__body(double)

declare double @__quantum__qis__log__body(double)

define internal double @Microsoft__Quantum__Math__LogOf2__body() {
entry:
  ret double 0x3FE62E42FEFA39EF
}

define internal double @Microsoft__Quantum__Math__Log__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  ret double %0
}

define internal i64 @Microsoft__Quantum__Math__MaxI__body(i64 %a, i64 %b) {
entry:
  %0 = icmp sgt i64 %a, %b
  %1 = select i1 %0, i64 %a, i64 %b
  ret i64 %1
}

define internal i64 @Microsoft__Quantum__Math__MinI__body(i64 %a, i64 %b) {
entry:
  %0 = icmp slt i64 %a, %b
  %1 = select i1 %0, i64 %a, i64 %b
  ret i64 %1
}

define internal double @Microsoft__Quantum__Math__PI__body() {
entry:
  ret double 0x400921FB54442D18
}

define internal double @Microsoft__Quantum__Math__PNorm__body(double %p, %Array* %array) {
entry:
  %norm = alloca double, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = fcmp ole double %p, 0.000000e+00
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @8, i32 0, i32 0))
  %2 = call %String* @__quantum__rt__double_to_string(double %p)
  %3 = call %String* @__quantum__rt__string_concatenate(%String* %1, %String* %2)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  %4 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %5 = call %String* @__quantum__rt__string_concatenate(%String* %3, %String* %4)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__fail(%String* %5)
  unreachable

continue__1:                                      ; preds = %entry
  store double 0.000000e+00, double* %norm, align 8
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %7 = sub i64 %6, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %8 = phi i64 [ 0, %continue__1 ], [ %16, %exiting__1 ]
  %9 = icmp sle i64 %8, %7
  br i1 %9, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %8)
  %11 = bitcast i8* %10 to double*
  %element = load double, double* %11, align 8
  %12 = load double, double* %norm, align 8
  %13 = call double @Microsoft__Quantum__Math__AbsD__body(double %element)
  %14 = call double @Microsoft__Quantum__Math__PowD__body(double %13, double %p)
  %15 = fadd double %12, %14
  store double %15, double* %norm, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %16 = add i64 %8, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %17 = load double, double* %norm, align 8
  %18 = fdiv double 1.000000e+00, %p
  %19 = call double @Microsoft__Quantum__Math__PowD__body(double %17, double %18)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret double %19
}

declare %String* @__quantum__rt__double_to_string(double)

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #0

define internal double @Microsoft__Quantum__Math__RealMod__body(double %value, double %modulo, double %minValue) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fmul double 2.000000e+00, %0
  %2 = fsub double %value, %minValue
  %3 = fdiv double %2, %modulo
  %4 = fsub double %3, 5.000000e-01
  %fractionalValue = fmul double %1, %4
  %cosFracValue = call double @__quantum__qis__cos__body(double %fractionalValue)
  %sinFracValue = call double @__quantum__qis__sin__body(double %fractionalValue)
  %5 = call double @__quantum__qis__arctan2__body(double %sinFracValue, double %cosFracValue)
  %6 = call double @Microsoft__Quantum__Math__PI__body()
  %7 = fmul double 2.000000e+00, %6
  %8 = fdiv double %5, %7
  %moduloValue = fadd double 5.000000e-01, %8
  %9 = fmul double %moduloValue, %modulo
  %output = fadd double %9, %minValue
  ret double %output
}

define internal double @Microsoft__Quantum__Math__Sin__body(double %theta) {
entry:
  %0 = call double @__quantum__qis__sin__body(double %theta)
  ret double %0
}

define internal double @Microsoft__Quantum__Math__Sqrt__body(double %d) {
entry:
  %0 = call double @__quantum__qis__sqrt__body(double %d)
  ret double %0
}

define internal i64 @Microsoft__Quantum__Convert__BoolArrayAsInt__body(%Array* %bits) {
entry:
  %number = alloca i64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = icmp slt i64 %nBits, 64
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @10, i32 0, i32 0))
  %2 = call %String* @__quantum__rt__int_to_string(i64 %nBits)
  %3 = call %String* @__quantum__rt__string_concatenate(%String* %1, %String* %2)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  %4 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %5 = call %String* @__quantum__rt__string_concatenate(%String* %3, %String* %4)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %0, %String* %5)
  store i64 0, i64* %number, align 4
  %6 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxBit = phi i64 [ 0, %entry ], [ %16, %exiting__1 ]
  %7 = icmp sle i64 %idxBit, %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %9 = bitcast i8* %8 to i1*
  %10 = load i1, i1* %9, align 1
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %11 = load i64, i64* %number, align 4
  %12 = trunc i64 %idxBit to i32
  %13 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %12)
  %14 = fptosi double %13 to i64
  %15 = add i64 %11, %14
  store i64 %15, i64* %number, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %16 = add i64 %idxBit, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %17 = load i64, i64* %number, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %5, i32 -1)
  ret i64 %17
}

define internal void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %actual, %String* %message) {
entry:
  %0 = xor i1 %actual, true
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__string_update_reference_count(%String* %message, i32 1)
  call void @__quantum__rt__fail(%String* %message)
  unreachable

continue__1:                                      ; preds = %entry
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.powi.f64.i32(double, i32) #0

define internal %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %number, i64 %bits) {
entry:
  %tempInt = alloca i64, align 8
  %outputBits = alloca %Array*, align 8
  %0 = icmp sge i64 %bits, 0
  br i1 %0, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %1 = icmp sle i64 %bits, 63
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %2 = phi i1 [ %1, %condTrue__1 ], [ %0, %entry ]
  %3 = trunc i64 %bits to i32
  %4 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %3)
  %5 = fptosi double %4 to i64
  %6 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @11, i32 0, i32 0))
  %7 = call %String* @__quantum__rt__int_to_string(i64 %5)
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %6, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %6, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %8)
  %9 = icmp slt i64 %bits, 63
  br i1 %9, label %condTrue__2, label %condFalse__1

condTrue__2:                                      ; preds = %condContinue__1
  %10 = shl i64 1, %bits
  br label %condContinue__2

condFalse__1:                                     ; preds = %condContinue__1
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__1, %condTrue__2
  %max = phi i64 [ %10, %condTrue__2 ], [ 9223372036854775807, %condFalse__1 ]
  %11 = icmp sge i64 %number, 0
  br i1 %11, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condContinue__2
  %12 = icmp sle i64 %number, %max
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condContinue__2
  %13 = phi i1 [ %12, %condTrue__3 ], [ %11, %condContinue__2 ]
  %14 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @12, i32 0, i32 0))
  %15 = call %String* @__quantum__rt__int_to_string(i64 %bits)
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i32 -1)
  %17 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @13, i32 0, i32 0))
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__int_to_string(i64 %number)
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %13, %String* %22)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %bits)
  %24 = sub i64 %bits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %condContinue__3
  %25 = phi i64 [ 0, %condContinue__3 ], [ %29, %exiting__1 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %25)
  %28 = bitcast i8* %27 to i1*
  store i1 false, i1* %28, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %29 = add i64 %25, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %23, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  store i64 %number, i64* %tempInt, align 4
  %30 = sub i64 %bits, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxBit = phi i64 [ 0, %exit__1 ], [ %41, %exiting__2 ]
  %31 = icmp sle i64 %idxBit, %30
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = load %Array*, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = load i64, i64* %tempInt, align 4
  %35 = srem i64 %34, 2
  %36 = icmp eq i64 %35, 0
  %37 = select i1 %36, i1 false, i1 true
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxBit)
  %39 = bitcast i8* %38 to i1*
  store i1 %37, i1* %39, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %outputBits, align 8
  %40 = sdiv i64 %34, 2
  store i64 %40, i64* %tempInt, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %41 = add i64 %idxBit, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %42 = load %Array*, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i32 -1)
  ret %Array* %42
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target) {
entry:
  %__controlQubits__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__controlQubits__, i64 0)
  %1 = bitcast i8* %0 to %Qubit**
  store %Qubit* %control, %Qubit** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__x__ctl(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* %control, %Qubit** %5, align 8
  %__controlQubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %3)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__1, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__ctladj(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit*, %Qubit* }*
  %5 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 1
  store %Qubit* %control, %Qubit** %5, align 8
  store %Qubit* %target, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 0
  %paulis = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 2
  store %Array* %paulis, %Array** %6, align 8
  store double %theta, double* %7, align 8
  store %Array* %qubits, %Array** %8, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 0
  %paulis = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 2
  store %Array* %paulis, %Array** %6, align 8
  store double %theta, double* %7, align 8
  store %Array* %qubits, %Array** %8, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__h__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__h__ctl(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare %Result* @__quantum__qis__measure__body(%Array*, %Array*)

define internal %Result* @Microsoft__Quantum__Intrinsic__Measure__body(%Array* %bases, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Result* @__quantum__qis__measure__body(%Array* %bases, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret %Result* %0
}

define internal void @Microsoft__Quantum__Intrinsic__R__body(i2 %pauli, double %theta, %Qubit* %qubit) {
entry:
  call void @__quantum__qis__r__body(i2 %pauli, double %theta, %Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__r__body(i2, double, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__R__adj(i2 %pauli, double %theta, %Qubit* %qubit) {
entry:
  call void @__quantum__qis__r__adj(i2 %pauli, double %theta, %Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__r__adj(i2, double, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__R__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 2
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { i2, double, %Qubit* }*
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 2
  store i2 %pauli, i2* %6, align 1
  store double %theta, double* %7, align 8
  store %Qubit* %qubit, %Qubit** %8, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

declare void @__quantum__qis__r__ctl(%Array*, { i2, double, %Qubit* }*)

define internal void @Microsoft__Quantum__Intrinsic__R__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 2
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { i2, double, %Qubit* }*
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 2
  store i2 %pauli, i2* %6, align 1
  store double %theta, double* %7, align 8
  store %Qubit* %qubit, %Qubit** %8, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

declare void @__quantum__qis__r__ctladj(%Array*, { i2, double, %Qubit* }*)

define internal void @Microsoft__Quantum__Intrinsic__R1__body(double %theta, %Qubit* %qubit) {
entry:
  call void @__quantum__qis__r__body(i2 -2, double %theta, %Qubit* %qubit)
  %theta__2 = fneg double %theta
  call void @__quantum__qis__r__body(i2 0, double %theta__2, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__adj(double %theta, %Qubit* %qubit) {
entry:
  %theta__1 = fneg double %theta
  call void @__quantum__qis__r__adj(i2 0, double %theta__1, %Qubit* %qubit)
  call void @__quantum__qis__r__adj(i2 -2, double %theta, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { i2, double, %Qubit* }*
  %5 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 1
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 2
  store i2 -2, i2* %5, align 1
  store double %theta, double* %6, align 8
  store %Qubit* %qubit, %Qubit** %7, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %theta__2 = fneg double %theta
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i2, double, %Qubit* }*
  %10 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 2
  store i2 0, i2* %10, align 1
  store double %theta__2, double* %11, align 8
  store %Qubit* %qubit, %Qubit** %12, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %9)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %theta__1 = fneg double %theta
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { i2, double, %Qubit* }*
  %5 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 1
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 2
  store i2 0, i2* %5, align 1
  store double %theta__1, double* %6, align 8
  store %Qubit* %qubit, %Qubit** %7, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i2, double, %Qubit* }*
  %10 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 2
  store i2 -2, i2* %10, align 1
  store double %theta, double* %11, align 8
  store %Qubit* %qubit, %Qubit** %12, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %9)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__x__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__RFrac__body(i2 %pauli, i64 %numerator, i64 %power, %Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fmul double -2.000000e+00, %0
  %2 = sitofp i64 %numerator to double
  %3 = fmul double %1, %2
  %4 = sitofp i64 %power to double
  %5 = call double @llvm.pow.f64(double 2.000000e+00, double %4)
  %angle = fdiv double %3, %5
  call void @__quantum__qis__r__body(i2 %pauli, double %angle, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__RFrac__adj(i2 %pauli, i64 %numerator, i64 %power, %Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fmul double -2.000000e+00, %0
  %2 = sitofp i64 %numerator to double
  %3 = fmul double %1, %2
  %4 = sitofp i64 %power to double
  %5 = call double @llvm.pow.f64(double 2.000000e+00, double %4)
  %__qsVar0__angle__ = fdiv double %3, %5
  call void @__quantum__qis__r__adj(i2 %pauli, double %__qsVar0__angle__, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__RFrac__ctl(%Array* %__controlQubits__, { i2, i64, i64, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 1
  %numerator = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 2
  %power = load i64, i64* %3, align 4
  %4 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 3
  %qubit = load %Qubit*, %Qubit** %4, align 8
  %5 = call double @Microsoft__Quantum__Math__PI__body()
  %6 = fmul double -2.000000e+00, %5
  %7 = sitofp i64 %numerator to double
  %8 = fmul double %6, %7
  %9 = sitofp i64 %power to double
  %10 = call double @llvm.pow.f64(double 2.000000e+00, double %9)
  %angle = fdiv double %8, %10
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i2, double, %Qubit* }*
  %13 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 2
  store i2 %pauli, i2* %13, align 1
  store double %angle, double* %14, align 8
  store %Qubit* %qubit, %Qubit** %15, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__RFrac__ctladj(%Array* %__controlQubits__, { i2, i64, i64, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 1
  %numerator = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 2
  %power = load i64, i64* %3, align 4
  %4 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 3
  %qubit = load %Qubit*, %Qubit** %4, align 8
  %5 = call double @Microsoft__Quantum__Math__PI__body()
  %6 = fmul double -2.000000e+00, %5
  %7 = sitofp i64 %numerator to double
  %8 = fmul double %6, %7
  %9 = sitofp i64 %power to double
  %10 = call double @llvm.pow.f64(double 2.000000e+00, double %9)
  %__qsVar0__angle__ = fdiv double %8, %10
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i2, double, %Qubit* }*
  %13 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 2
  store i2 %pauli, i2* %13, align 1
  store double %__qsVar0__angle__, double* %14, align 8
  store %Qubit* %qubit, %Qubit** %15, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__body(double %theta, %Qubit* %qubit) {
entry:
  call void @__quantum__qis__r__body(i2 -2, double %theta, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__adj(double %theta, %Qubit* %qubit) {
entry:
  %theta__1 = fneg double %theta
  call void @__quantum__qis__r__body(i2 -2, double %theta__1, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { i2, double, %Qubit* }*
  %5 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 1
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 2
  store i2 -2, i2* %5, align 1
  store double %theta, double* %6, align 8
  store %Qubit* %qubit, %Qubit** %7, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %theta__1 = fneg double %theta
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { i2, double, %Qubit* }*
  %5 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 1
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 2
  store i2 -2, i2* %5, align 1
  store double %theta__1, double* %6, align 8
  store %Qubit* %qubit, %Qubit** %7, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__s__body(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__s__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__s__adj(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__s__adj(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__s__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__s__ctl(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__s__ctladj(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__s__ctladj(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__t__body(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__t__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__t__adj(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__t__adj(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__T__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__t__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__t__ctl(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__T__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__t__ctladj(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__t__ctladj(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__Y__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__y__body(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__y__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__Y__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__y__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__y__ctl(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__Y__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__z__body(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__z__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__Z__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__z__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

declare void @__quantum__qis__z__ctl(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__Z__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal i64 @Microsoft__Quantum__Canon____QsRef3__Angle____body(i64 %index) {
entry:
  %0 = call i64 @Microsoft__Quantum__Canon____QsRef3__HammingWeightI____body(i64 %index)
  %1 = srem i64 %0, 2
  %2 = icmp eq i64 %1, 1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %3 = phi i64 [ 1, %condTrue__1 ], [ -1, %condFalse__1 ]
  ret i64 %3
}

define internal i64 @Microsoft__Quantum__Canon____QsRef3__HammingWeightI____body(i64 %number) {
entry:
  %cnt = alloca i64, align 8
  store i64 %number, i64* %cnt, align 4
  %0 = and i64 %number, 6148914691236517205
  %1 = ashr i64 %number, 1
  %2 = and i64 %1, 6148914691236517205
  %3 = add i64 %0, %2
  store i64 %3, i64* %cnt, align 4
  %4 = and i64 %3, 3689348814741910323
  %5 = ashr i64 %3, 2
  %6 = and i64 %5, 3689348814741910323
  %7 = add i64 %4, %6
  store i64 %7, i64* %cnt, align 4
  %8 = and i64 %7, 1085102592571150095
  %9 = ashr i64 %7, 4
  %10 = and i64 %9, 1085102592571150095
  %11 = add i64 %8, %10
  store i64 %11, i64* %cnt, align 4
  %12 = and i64 %11, 71777214294589695
  %13 = ashr i64 %11, 8
  %14 = and i64 %13, 71777214294589695
  %15 = add i64 %12, %14
  store i64 %15, i64* %cnt, align 4
  %16 = and i64 %15, 281470681808895
  %17 = ashr i64 %15, 16
  %18 = and i64 %17, 281470681808895
  %19 = add i64 %16, %18
  store i64 %19, i64* %cnt, align 4
  %20 = and i64 %19, 4294967295
  %21 = ashr i64 %19, 32
  %22 = and i64 %21, 4294967295
  %23 = add i64 %20, %22
  store i64 %23, i64* %cnt, align 4
  ret i64 %23
}

define internal i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceCP____body(double %tolerance, %Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %10)
  %13 = bitcast i8* %12 to { double, double }**
  %coefficient = load { double, double }*, { double, double }** %13, align 8
  %14 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %coefficient)
  %16 = fcmp ogt double %15, %tolerance
  br i1 %16, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  %17 = sub i64 %0, 1
  br label %header__3

continue__1:                                      ; preds = %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %18 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %19 = sub i64 %0, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__3 ]
  %21 = icmp sle i64 %20, %17
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %26 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 true

header__4:                                        ; preds = %exiting__4, %exit__2
  %27 = phi i64 [ 0, %exit__2 ], [ %33, %exiting__4 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %27)
  %30 = bitcast i8* %29 to { double, double }**
  %31 = load { double, double }*, { double, double }** %30, align 8
  %32 = bitcast { double, double }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %33 = add i64 %27, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 false
}

define internal i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to double*
  %coefficient = load double, double* %5, align 8
  %6 = call double @Microsoft__Quantum__Math__AbsD__body(double %coefficient)
  %7 = fcmp oge double %6, %tolerance
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 true

continue__1:                                      ; preds = %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 false
}

define internal void @Microsoft__Quantum__Canon____QsRef3__ApplyAndChain____body(%Array* %auxRegister, %Array* %ctrlRegister, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %auxRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %ctrlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctrlRegister)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctrlRegister)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %4 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %ctrlRegister)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %4, %Qubit* %target)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %auxRegister)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctrlRegister)
  %7 = sub i64 %6, 2
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @14, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactI__body(i64 %5, i64 %7, %String* %8)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctrlRegister, i64 0)
  %10 = bitcast i8* %9 to %Qubit**
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 0)
  %14 = bitcast i8* %13 to %Qubit**
  store %Qubit* %11, %Qubit** %14, align 8
  %controls1 = call %Array* @__quantum__rt__array_concatenate(%Array* %12, %Array* %auxRegister)
  call void @__quantum__rt__array_update_reference_count(%Array* %controls1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls1, i32 1)
  %controls2 = call %Array* @Microsoft__Quantum__Arrays___8eccbbf2f2c44c66bcf118fa86e46f90_Rest__body(%Array* %ctrlRegister)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls2, i32 1)
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 0)
  %17 = bitcast i8* %16 to %Qubit**
  store %Qubit* %target, %Qubit** %17, align 8
  %targets = call %Array* @__quantum__rt__array_concatenate(%Array* %auxRegister, %Array* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %targets, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targets, i32 1)
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApplyAnd__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %19 = call %Array* @Microsoft__Quantum__Arrays___149f6d26e7564d73ab41ea09c9b1a83d_Zipped3__body(%Array* %controls1, %Array* %controls2, %Array* %targets)
  call void @Microsoft__Quantum__Canon___9454df5e02c74932b4fb0c010e9b8d13_ApplyToEachA__body(%Callable* %18, %Array* %19)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targets, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controls1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controls1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controls2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targets, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targets, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  %20 = call i64 @__quantum__rt__array_get_size_1d(%Array* %19)
  %21 = sub i64 %20, 1
  br label %header__1

continue__1:                                      ; preds = %exit__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %auxRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %ctrlRegister, i32 -1)
  ret void

header__1:                                        ; preds = %exiting__1, %else__1
  %22 = phi i64 [ 0, %else__1 ], [ %28, %exiting__1 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %22)
  %25 = bitcast i8* %24 to { %Qubit*, %Qubit*, %Qubit* }**
  %26 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %25, align 8
  %27 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %28 = add i64 %22, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  br label %continue__1
}

define internal %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp sgt i64 %0, 0
  %2 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @33, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %1, i1 true, %String* %2)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %4 = bitcast i8* %3 to %Qubit**
  %5 = load %Qubit*, %Qubit** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  ret %Qubit* %5
}

define internal void @Microsoft__Quantum__Diagnostics__EqualityFactI__body(i64 %actual, i64 %expected, %String* %message) {
entry:
  %0 = icmp ne i64 %actual, %expected
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Diagnostics___1cff4dbf452349c0aab5551517df2535___QsRef3__FormattedFailure____body(i64 %actual, i64 %expected, %String* %message)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___8eccbbf2f2c44c66bcf118fa86e46f90_Rest__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range { i64 1, i64 1, i64 0 }, i64 %1, 2
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %2, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  ret %Array* %3
}

define internal void @Microsoft__Quantum__Canon___9454df5e02c74932b4fb0c010e9b8d13_ApplyToEachA__body(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %2)
  %5 = bitcast i8* %4 to { %Qubit*, %Qubit*, %Qubit* }**
  %6 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %5, align 8
  %7 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %9 = call %Range @Microsoft__Quantum__Arrays___be8c93aed1174ddf9a1dc1ba0169742c_IndexRange__body(%Array* %register)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %13 = icmp sgt i64 %11, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxQubit = phi i64 [ %10, %preheader__1 ], [ %21, %exiting__2 ]
  %14 = icmp sle i64 %idxQubit, %12
  %15 = icmp sge i64 %idxQubit, %12
  %16 = select i1 %13, i1 %14, i1 %15
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %18 = bitcast i8* %17 to { %Qubit*, %Qubit*, %Qubit* }**
  %19 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %18, align 8
  %20 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %19 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %singleElementOperation, %Tuple* %20, %Tuple* null)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %idxQubit, %11
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %22 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %29, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %23)
  %26 = bitcast i8* %25 to { %Qubit*, %Qubit*, %Qubit* }**
  %27 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %26, align 8
  %28 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %29 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyAnd__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit*, %Qubit*, %Qubit* }*
  %1 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 2
  %4 = load %Qubit*, %Qubit** %1, align 8
  %5 = load %Qubit*, %Qubit** %2, align 8
  %6 = load %Qubit*, %Qubit** %3, align 8
  call void @Microsoft__Quantum__Canon__ApplyAnd__body(%Qubit* %4, %Qubit* %5, %Qubit* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyAnd__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit*, %Qubit*, %Qubit* }*
  %1 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 2
  %4 = load %Qubit*, %Qubit** %1, align 8
  %5 = load %Qubit*, %Qubit** %2, align 8
  %6 = load %Qubit*, %Qubit** %3, align 8
  call void @Microsoft__Quantum__Canon__ApplyAnd__adj(%Qubit* %4, %Qubit* %5, %Qubit* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyAnd__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApplyAnd__ctl(%Array* %3, { %Qubit*, %Qubit*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyAnd__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApplyAnd__ctladj(%Array* %3, { %Qubit*, %Qubit*, %Qubit* }* %4)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___149f6d26e7564d73ab41ea09c9b1a83d_Zipped3__body(%Array* %first, %Array* %second, %Array* %third) {
entry:
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %second, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %third, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %first)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %second)
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %third)
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 3)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to i64*
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 1)
  %7 = bitcast i8* %6 to i64*
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 2)
  %9 = bitcast i8* %8 to i64*
  store i64 %0, i64* %5, align 4
  store i64 %1, i64* %7, align 4
  store i64 %2, i64* %9, align 4
  %nElements = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %3)
  %10 = icmp eq i64 %nElements, 0
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %second, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %third, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  ret %Array* %11

continue__1:                                      ; preds = %entry
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %first, i64 0)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = load %Qubit*, %Qubit** %13, align 8
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %second, i64 0)
  %16 = bitcast i8* %15 to %Qubit**
  %17 = load %Qubit*, %Qubit** %16, align 8
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %third, i64 0)
  %19 = bitcast i8* %18 to %Qubit**
  %20 = load %Qubit*, %Qubit** %19, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Qubit*, %Qubit*, %Qubit* }*
  %23 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %22, i32 0, i32 1
  %25 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %22, i32 0, i32 2
  store %Qubit* %14, %Qubit** %23, align 8
  store %Qubit* %17, %Qubit** %24, align 8
  store %Qubit* %20, %Qubit** %25, align 8
  %26 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %27 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %28 = phi i64 [ 0, %continue__1 ], [ %32, %exiting__1 ]
  %29 = icmp sle i64 %28, %27
  br i1 %29, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %28)
  %31 = bitcast i8* %30 to { %Qubit*, %Qubit*, %Qubit* }**
  store { %Qubit*, %Qubit*, %Qubit* }* %22, { %Qubit*, %Qubit*, %Qubit* }** %31, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %32 = add i64 %28, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %26, %Array** %output, align 8
  %33 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %34 = phi i64 [ 0, %exit__1 ], [ %40, %exiting__2 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %34)
  %37 = bitcast i8* %36 to { %Qubit*, %Qubit*, %Qubit* }**
  %38 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %37, align 8
  %39 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %40 = add i64 %34, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %41 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 1, %exit__2 ], [ %63, %exiting__3 ]
  %42 = icmp sle i64 %idxElement, %41
  br i1 %42, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %43 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 -1)
  %44 = call %Array* @__quantum__rt__array_copy(%Array* %43, i1 false)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %first, i64 %idxElement)
  %46 = bitcast i8* %45 to %Qubit**
  %47 = load %Qubit*, %Qubit** %46, align 8
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %second, i64 %idxElement)
  %49 = bitcast i8* %48 to %Qubit**
  %50 = load %Qubit*, %Qubit** %49, align 8
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %third, i64 %idxElement)
  %52 = bitcast i8* %51 to %Qubit**
  %53 = load %Qubit*, %Qubit** %52, align 8
  %54 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* null, i32 1) to i64))
  %55 = bitcast %Tuple* %54 to { %Qubit*, %Qubit*, %Qubit* }*
  %56 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %55, i32 0, i32 0
  %57 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %55, i32 0, i32 1
  %58 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %55, i32 0, i32 2
  store %Qubit* %47, %Qubit** %56, align 8
  store %Qubit* %50, %Qubit** %57, align 8
  store %Qubit* %53, %Qubit** %58, align 8
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %idxElement)
  %60 = bitcast i8* %59 to { %Qubit*, %Qubit*, %Qubit* }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 1)
  %61 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %60, align 8
  %62 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %61 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i32 -1)
  store { %Qubit*, %Qubit*, %Qubit* }* %55, { %Qubit*, %Qubit*, %Qubit* }** %60, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 1)
  store %Array* %44, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %63 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %64 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %second, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %third, i32 -1)
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %66 = sub i64 %65, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %67 = phi i64 [ 0, %exit__3 ], [ %73, %exiting__4 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %67)
  %70 = bitcast i8* %69 to { %Qubit*, %Qubit*, %Qubit* }**
  %71 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %70, align 8
  %72 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %72, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %73 = add i64 %67, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  ret %Array* %64
}

define internal void @Microsoft__Quantum__Canon__ApplyAnd__body(%Qubit* %control1, %Qubit* %control2, %Qubit* %target) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to %Qubit**
  store %Qubit* %target, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Diagnostics__AssertAllZero__body(%Array* %0)
  call void @__quantum__qis__h__body(%Qubit* %target)
  call void @__quantum__qis__t__body(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control1, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control2, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %target, %Qubit* %control2)
  call void @__quantum__qis__t__adj(%Qubit* %control1)
  call void @__quantum__qis__t__adj(%Qubit* %control2)
  call void @__quantum__qis__t__body(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %target, %Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Canon__HY__body(%Qubit* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyAnd__adj(%Qubit* %control1, %Qubit* %control2, %Qubit* %target) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %target)
  %bases = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bases, i64 0)
  %1 = bitcast i8* %0 to i2*
  store i2 -2, i2* %1, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %3 = bitcast i8* %2 to %Qubit**
  store %Qubit* %target, %Qubit** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %result = call %Result* @__quantum__rt__result_get_one()
  %msg = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @15, i32 0, i32 0))
  call void @__quantum__qis__assertmeasurementprobability__body(%Array* %bases, %Array* %qubits, %Result* %result, double 5.000000e-01, %String* %msg, double 1.000000e-10)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %msg, i32 -1)
  %4 = call %Result* @Microsoft__Quantum__Measurement__MResetZ__body(%Qubit* %target)
  %5 = call i1 @Microsoft__Quantum__Canon__IsResultOne__body(%Result* %4)
  call void @__quantum__rt__result_update_reference_count(%Result* %4, i32 -1)
  br i1 %5, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Canon__CZ__body(%Qubit* %control1, %Qubit* %control2)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyAnd__ctl(%Array* %controls, { %Qubit*, %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control1 = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %control2 = load %Qubit*, %Qubit** %2, align 8
  %3 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 1)
  %8 = bitcast i8* %7 to %Qubit**
  store %Qubit* %control1, %Qubit** %6, align 8
  store %Qubit* %control2, %Qubit** %8, align 8
  %9 = call %Array* @__quantum__rt__array_concatenate(%Array* %controls, %Array* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 1)
  call void @Microsoft__Quantum__Canon____QsRef3__ApplyMultiplyControlledAnd____body(%Array* %9, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyAnd__ctladj(%Array* %controls, { %Qubit*, %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control1 = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %control2 = load %Qubit*, %Qubit** %2, align 8
  %3 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 1)
  %8 = bitcast i8* %7 to %Qubit**
  store %Qubit* %control1, %Qubit** %6, align 8
  store %Qubit* %control2, %Qubit** %8, align 8
  %9 = call %Array* @__quantum__rt__array_concatenate(%Array* %controls, %Array* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 1)
  call void @Microsoft__Quantum__Canon____QsRef3__ApplyMultiplyControlledAnd____adj(%Array* %9, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon____QsRef3__ApplyAndChain____adj(%Array* %auxRegister, %Array* %ctrlRegister, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %auxRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %ctrlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctrlRegister)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctrlRegister)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %4 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %ctrlRegister)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %4, %Qubit* %target)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %auxRegister)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctrlRegister)
  %7 = sub i64 %6, 2
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @14, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactI__body(i64 %5, i64 %7, %String* %8)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctrlRegister, i64 0)
  %10 = bitcast i8* %9 to %Qubit**
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 0)
  %14 = bitcast i8* %13 to %Qubit**
  store %Qubit* %11, %Qubit** %14, align 8
  %__qsVar0__controls1__ = call %Array* @__quantum__rt__array_concatenate(%Array* %12, %Array* %auxRegister)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controls1__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controls1__, i32 1)
  %__qsVar1__controls2__ = call %Array* @Microsoft__Quantum__Arrays___8eccbbf2f2c44c66bcf118fa86e46f90_Rest__body(%Array* %ctrlRegister)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__controls2__, i32 1)
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 0)
  %17 = bitcast i8* %16 to %Qubit**
  store %Qubit* %target, %Qubit** %17, align 8
  %__qsVar2__targets__ = call %Array* @__quantum__rt__array_concatenate(%Array* %auxRegister, %Array* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__targets__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__targets__, i32 1)
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApplyAnd__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %19 = call %Array* @Microsoft__Quantum__Arrays___149f6d26e7564d73ab41ea09c9b1a83d_Zipped3__body(%Array* %__qsVar0__controls1__, %Array* %__qsVar1__controls2__, %Array* %__qsVar2__targets__)
  call void @Microsoft__Quantum__Canon___9454df5e02c74932b4fb0c010e9b8d13_ApplyToEachA__adj(%Callable* %18, %Array* %19)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controls1__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__controls2__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__targets__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controls1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controls1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__controls2__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__targets__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__targets__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  %20 = call i64 @__quantum__rt__array_get_size_1d(%Array* %19)
  %21 = sub i64 %20, 1
  br label %header__1

continue__1:                                      ; preds = %exit__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %auxRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %ctrlRegister, i32 -1)
  ret void

header__1:                                        ; preds = %exiting__1, %else__1
  %22 = phi i64 [ 0, %else__1 ], [ %28, %exiting__1 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %22)
  %25 = bitcast i8* %24 to { %Qubit*, %Qubit*, %Qubit* }**
  %26 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %25, align 8
  %27 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %28 = add i64 %22, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  br label %continue__1
}

define internal void @Microsoft__Quantum__Canon___9454df5e02c74932b4fb0c010e9b8d13_ApplyToEachA__adj(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %2)
  %5 = bitcast i8* %4 to { %Qubit*, %Qubit*, %Qubit* }**
  %6 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %5, align 8
  %7 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %9 = call %Range @Microsoft__Quantum__Arrays___be8c93aed1174ddf9a1dc1ba0169742c_IndexRange__body(%Array* %register)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  %13 = sub i64 %12, %10
  %14 = sdiv i64 %13, %11
  %15 = mul i64 %11, %14
  %16 = add i64 %10, %15
  %17 = sub i64 0, %11
  %18 = insertvalue %Range zeroinitializer, i64 %16, 0
  %19 = insertvalue %Range %18, i64 %17, 1
  %20 = insertvalue %Range %19, i64 %10, 2
  %21 = extractvalue %Range %20, 0
  %22 = extractvalue %Range %20, 1
  %23 = extractvalue %Range %20, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %24 = icmp sgt i64 %22, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %21, %preheader__1 ], [ %33, %exiting__2 ]
  %25 = icmp sle i64 %__qsVar0__idxQubit__, %23
  %26 = icmp sge i64 %__qsVar0__idxQubit__, %23
  %27 = select i1 %24, i1 %25, i1 %26
  br i1 %27, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %28 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %28)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %30 = bitcast i8* %29 to { %Qubit*, %Qubit*, %Qubit* }**
  %31 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %30, align 8
  %32 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %31 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %28, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %28, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %__qsVar0__idxQubit__, %22
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %34 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %35)
  %38 = bitcast i8* %37 to { %Qubit*, %Qubit*, %Qubit* }**
  %39 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %38, align 8
  %40 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon____QsRef3__ApplyMultiplyControlledAnd____body(%Array* %controls, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %vars = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to %Qubit**
  store %Qubit* %target, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Diagnostics__AssertAllZero__body(%Array* %0)
  call void @__quantum__qis__h__body(%Qubit* %target)
  %code = call %Array* @Microsoft__Quantum__Canon____QsRef3__GrayCode____body(i64 %vars)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %code)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %code, i64 %5)
  %8 = bitcast i8* %7 to { i64, i64 }**
  %9 = load { i64, i64 }*, { i64, i64 }** %8, align 8
  %10 = bitcast { i64, i64 }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %code, i32 1)
  %12 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %j = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %13 = icmp sle i64 %j, %12
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %code, i64 %j)
  %15 = bitcast i8* %14 to { i64, i64 }**
  %16 = load { i64, i64 }*, { i64, i64 }** %15, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0
  %offset = load i64, i64* %17, align 4
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1
  %ctrl = load i64, i64* %18, align 4
  %19 = call i64 @Microsoft__Quantum__Canon____QsRef3__Angle____body(i64 %offset)
  %20 = add i64 %vars, 1
  call void @Microsoft__Quantum__Intrinsic__RFrac__body(i2 -2, i64 %19, i64 %20, %Qubit* %target)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %ctrl)
  %22 = bitcast i8* %21 to %Qubit**
  %23 = load %Qubit*, %Qubit** %22, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %23, %Qubit* %target)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %j, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @Microsoft__Quantum__Canon__HY__body(%Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  %25 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %26 = phi i64 [ 0, %exit__2 ], [ %32, %exiting__3 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %code, i64 %26)
  %29 = bitcast i8* %28 to { i64, i64 }**
  %30 = load { i64, i64 }*, { i64, i64 }** %29, align 8
  %31 = bitcast { i64, i64 }* %30 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %32 = add i64 %26, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %code, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  %33 = sub i64 %3, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %34 = phi i64 [ 0, %exit__3 ], [ %40, %exiting__4 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %code, i64 %34)
  %37 = bitcast i8* %36 to { i64, i64 }**
  %38 = load { i64, i64 }*, { i64, i64 }** %37, align 8
  %39 = bitcast { i64, i64 }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %40 = add i64 %34, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %code, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertAllZero__body(%Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %2)
  %5 = bitcast i8* %4 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %5, align 8
  %6 = call %Result* @__quantum__rt__result_get_zero()
  call void @Microsoft__Quantum__Diagnostics__AssertQubit__body(%Result* %6, %Qubit* %qubit)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Canon____QsRef3__GrayCode____body(i64 %n) {
entry:
  %current = alloca %Array*, align 8
  %j = alloca i64, align 8
  %res = alloca %Array*, align 8
  %N = shl i64 1, %n
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64 }* getelementptr ({ i64, i64 }, { i64, i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, i64 }*
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1
  store i64 0, i64* %2, align 4
  store i64 0, i64* %3, align 4
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %N)
  %5 = sub i64 %N, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %6 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %6)
  %9 = bitcast i8* %8 to { i64, i64 }**
  store { i64, i64 }* %1, { i64, i64 }** %9, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %4, %Array** %res, align 8
  %11 = sub i64 %N, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %12)
  %15 = bitcast i8* %14 to { i64, i64 }**
  %16 = load { i64, i64 }*, { i64, i64 }** %15, align 8
  %17 = bitcast { i64, i64 }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  store i64 0, i64* %j, align 4
  %19 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 0, i64 %n)
  store %Array* %19, %Array** %current, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %20 = sub i64 %N, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %i = phi i64 [ 0, %exit__2 ], [ %59, %exiting__3 ]
  %21 = icmp sle i64 %i, %20
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = srem i64 %i, 2
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %then0__1, label %else__1

then0__1:                                         ; preds = %body__3
  store i64 0, i64* %j, align 4
  br label %continue__1

else__1:                                          ; preds = %body__3
  %24 = load %Array*, %Array** %current, align 8
  %25 = sub i64 %N, 1
  %26 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %25, 2
  %27 = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %26)
  %e = call %Array* @Microsoft__Quantum__Arrays___d2cffdff45fe42ce8be877d5eee9264a_Zipped__body(%Array* %24, %Array* %27)
  %28 = call i64 @__quantum__rt__array_get_size_1d(%Array* %e)
  %29 = sub i64 %28, 1
  br label %header__4

continue__1:                                      ; preds = %exit__7, %then0__1
  %30 = load i64, i64* %j, align 4
  %31 = sub i64 %n, 1
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 0)
  %34 = bitcast i8* %33 to i64*
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 1)
  %36 = bitcast i8* %35 to i64*
  store i64 %30, i64* %34, align 4
  store i64 %31, i64* %36, align 4
  %37 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %32)
  %38 = call i64 @Microsoft__Quantum__Math__MaxI__body(i64 0, i64 %37)
  store i64 %38, i64* %j, align 4
  %39 = load %Array*, %Array** %res, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 -1)
  %40 = call %Array* @__quantum__rt__array_copy(%Array* %39, i1 false)
  %41 = load %Array*, %Array** %current, align 8
  %42 = call i64 @Microsoft__Quantum__Convert__BoolArrayAsInt__body(%Array* %41)
  %43 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64 }* getelementptr ({ i64, i64 }, { i64, i64 }* null, i32 1) to i64))
  %44 = bitcast %Tuple* %43 to { i64, i64 }*
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 0
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 1
  store i64 %42, i64* %45, align 4
  store i64 %38, i64* %46, align 4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 %i)
  %48 = bitcast i8* %47 to { i64, i64 }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 1)
  %49 = load { i64, i64 }*, { i64, i64 }** %48, align 8
  %50 = bitcast { i64, i64 }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 -1)
  store { i64, i64 }* %44, { i64, i64 }** %48, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 1)
  store %Array* %40, %Array** %res, align 8
  %51 = icmp slt i64 %38, %n
  br i1 %51, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  %52 = call %Array* @__quantum__rt__array_copy(%Array* %41, i1 false)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %38)
  %54 = bitcast i8* %53 to i1*
  %55 = load i1, i1* %54, align 1
  %56 = xor i1 %55, true
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 %38)
  %58 = bitcast i8* %57 to i1*
  store i1 %56, i1* %58, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %52, i32 1)
  store %Array* %52, %Array** %current, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %59 = add i64 %i, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %60 = load %Array*, %Array** %res, align 8
  %61 = load %Array*, %Array** %current, align 8
  %62 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %63 = sub i64 %62, 1
  br label %header__8

header__4:                                        ; preds = %exiting__4, %else__1
  %64 = phi i64 [ 0, %else__1 ], [ %70, %exiting__4 ]
  %65 = icmp sle i64 %64, %29
  br i1 %65, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %e, i64 %64)
  %67 = bitcast i8* %66 to { i1, i64 }**
  %68 = load { i1, i64 }*, { i1, i64 }** %67, align 8
  %69 = bitcast { i1, i64 }* %68 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %69, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %70 = add i64 %64, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %e, i32 1)
  %71 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___b950c6e85b1944ae91a2dee4f20f4c18_Fst__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %72 = call %Array* @Microsoft__Quantum__Arrays___4c1a69a66933447c844ced0239fa6495_Filtered__body(%Callable* %71, %Array* %e)
  %73 = call { i1, i64 }* @Microsoft__Quantum__Arrays___819954bcd82146a6a8342446e1190957_Head__body(%Array* %72)
  %74 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %73, i32 0, i32 0
  %75 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %73, i32 0, i32 1
  %76 = load i1, i1* %74, align 1
  %77 = load i64, i64* %75, align 4
  %78 = call i64 @Microsoft__Quantum__Canon___8222e5371d1140e18441af955cbd378d_Snd__body(i1 %76, i64 %77)
  %79 = add i64 %78, 1
  store i64 %79, i64* %j, align 4
  %80 = sub i64 %28, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %81 = phi i64 [ 0, %exit__4 ], [ %87, %exiting__5 ]
  %82 = icmp sle i64 %81, %80
  br i1 %82, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %e, i64 %81)
  %84 = bitcast i8* %83 to { i1, i64 }**
  %85 = load { i1, i64 }*, { i1, i64 }** %84, align 8
  %86 = bitcast { i1, i64 }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %87 = add i64 %81, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %e, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  %88 = sub i64 %28, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %89 = phi i64 [ 0, %exit__5 ], [ %95, %exiting__6 ]
  %90 = icmp sle i64 %89, %88
  br i1 %90, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %e, i64 %89)
  %92 = bitcast i8* %91 to { i1, i64 }**
  %93 = load { i1, i64 }*, { i1, i64 }** %92, align 8
  %94 = bitcast { i1, i64 }* %93 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %94, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %95 = add i64 %89, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %e, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %71, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %71, i32 -1)
  %96 = call i64 @__quantum__rt__array_get_size_1d(%Array* %72)
  %97 = sub i64 %96, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %98 = phi i64 [ 0, %exit__6 ], [ %104, %exiting__7 ]
  %99 = icmp sle i64 %98, %97
  br i1 %99, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 %98)
  %101 = bitcast i8* %100 to { i1, i64 }**
  %102 = load { i1, i64 }*, { i1, i64 }** %101, align 8
  %103 = bitcast { i1, i64 }* %102 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %104 = add i64 %98, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  %105 = bitcast { i1, i64 }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %105, i32 -1)
  br label %continue__1

header__8:                                        ; preds = %exiting__8, %exit__3
  %106 = phi i64 [ 0, %exit__3 ], [ %112, %exiting__8 ]
  %107 = icmp sle i64 %106, %63
  br i1 %107, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %106)
  %109 = bitcast i8* %108 to { i64, i64 }**
  %110 = load { i64, i64 }*, { i64, i64 }** %109, align 8
  %111 = bitcast { i64, i64 }* %110 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %111, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %112 = add i64 %106, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  ret %Array* %60
}

define internal void @Microsoft__Quantum__Canon__HY__body(%Qubit* %target) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %target)
  call void @__quantum__qis__s__body(%Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Canon____QsRef3__ApplyMultiplyControlledAnd____adj(%Array* %controls, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %vars = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  call void @__quantum__qis__h__body(%Qubit* %target)
  %bases = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bases, i64 0)
  %1 = bitcast i8* %0 to i2*
  store i2 -2, i2* %1, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %3 = bitcast i8* %2 to %Qubit**
  store %Qubit* %target, %Qubit** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %result = call %Result* @__quantum__rt__result_get_one()
  %msg = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @15, i32 0, i32 0))
  call void @__quantum__qis__assertmeasurementprobability__body(%Array* %bases, %Array* %qubits, %Result* %result, double 5.000000e-01, %String* %msg, double 1.000000e-10)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %msg, i32 -1)
  %4 = call %Result* @Microsoft__Quantum__Measurement__MResetZ__body(%Qubit* %target)
  %5 = call i1 @Microsoft__Quantum__Canon__IsResultOne__body(%Result* %4)
  call void @__quantum__rt__result_update_reference_count(%Result* %4, i32 -1)
  br i1 %5, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %6 = sub i64 %vars, 1
  br label %header__1

continue__1:                                      ; preds = %exit__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  ret void

header__1:                                        ; preds = %exiting__1, %then0__1
  %i = phi i64 [ 0, %then0__1 ], [ %10, %exiting__1 ]
  %7 = icmp sle i64 %i, %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %start = shl i64 1, %i
  %code = call %Array* @Microsoft__Quantum__Canon____QsRef3__GrayCode____body(i64 %i)
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %code)
  %9 = sub i64 %8, 1
  br label %header__2

exiting__1:                                       ; preds = %exit__5
  %10 = add i64 %i, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  br label %continue__1

header__2:                                        ; preds = %exiting__2, %body__1
  %11 = phi i64 [ 0, %body__1 ], [ %17, %exiting__2 ]
  %12 = icmp sle i64 %11, %9
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %code, i64 %11)
  %14 = bitcast i8* %13 to { i64, i64 }**
  %15 = load { i64, i64 }*, { i64, i64 }** %14, align 8
  %16 = bitcast { i64, i64 }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %17 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %code, i32 1)
  %18 = sub i64 %8, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %j = phi i64 [ 0, %exit__2 ], [ %38, %exiting__3 ]
  %19 = icmp sle i64 %j, %18
  br i1 %19, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %code, i64 %j)
  %21 = bitcast i8* %20 to { i64, i64 }**
  %22 = load { i64, i64 }*, { i64, i64 }** %21, align 8
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %22, i32 0, i32 0
  %offset = load i64, i64* %23, align 4
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %22, i32 0, i32 1
  %ctrl = load i64, i64* %24, align 4
  %25 = add i64 %start, %offset
  %26 = call i64 @Microsoft__Quantum__Canon____QsRef3__Angle____body(i64 %25)
  %27 = sub i64 0, %26
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %i)
  %29 = bitcast i8* %28 to %Qubit**
  %30 = load %Qubit*, %Qubit** %29, align 8
  call void @Microsoft__Quantum__Intrinsic__RFrac__body(i2 -2, i64 %27, i64 %vars, %Qubit* %30)
  %31 = icmp ne i64 %i, 0
  br i1 %31, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__3
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %ctrl)
  %33 = bitcast i8* %32 to %Qubit**
  %34 = load %Qubit*, %Qubit** %33, align 8
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %i)
  %36 = bitcast i8* %35 to %Qubit**
  %37 = load %Qubit*, %Qubit** %36, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %34, %Qubit* %37)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %body__3
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %38 = add i64 %j, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %39 = sub i64 %8, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %40 = phi i64 [ 0, %exit__3 ], [ %46, %exiting__4 ]
  %41 = icmp sle i64 %40, %39
  br i1 %41, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %code, i64 %40)
  %43 = bitcast i8* %42 to { i64, i64 }**
  %44 = load { i64, i64 }*, { i64, i64 }** %43, align 8
  %45 = bitcast { i64, i64 }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %40, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %code, i32 -1)
  %47 = sub i64 %8, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %48 = phi i64 [ 0, %exit__4 ], [ %54, %exiting__5 ]
  %49 = icmp sle i64 %48, %47
  br i1 %49, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %code, i64 %48)
  %51 = bitcast i8* %50 to { i64, i64 }**
  %52 = load { i64, i64 }*, { i64, i64 }** %51, align 8
  %53 = bitcast { i64, i64 }* %52 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %54 = add i64 %48, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %code, i32 -1)
  br label %exiting__1
}

declare void @__quantum__qis__assertmeasurementprobability__body(%Array*, %Array*, %Result*, double, %String*, double)

define internal i1 @Microsoft__Quantum__Canon__IsResultOne__body(%Result* %input) {
entry:
  %0 = call %Result* @__quantum__rt__result_get_one()
  %1 = call i1 @__quantum__rt__result_equal(%Result* %input, %Result* %0)
  ret i1 %1
}

define internal %Result* @Microsoft__Quantum__Measurement__MResetZ__body(%Qubit* %target) {
entry:
  %result = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %target)
  %0 = call %Result* @__quantum__rt__result_get_one()
  %1 = call i1 @__quantum__rt__result_equal(%Result* %result, %Result* %0)
  br i1 %1, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret %Result* %result
}

define internal %Array* @Microsoft__Quantum__Arrays___d2cffdff45fe42ce8be877d5eee9264a_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = icmp eq i64 %nElements, 0
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %4

continue__1:                                      ; preds = %condContinue__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %6 = bitcast i8* %5 to i1*
  %7 = load i1, i1* %6, align 1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, i64 }* getelementptr ({ i1, i64 }, { i1, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i1, i64 }*
  %13 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %12, i32 0, i32 1
  store i1 %7, i1* %13, align 1
  store i64 %10, i64* %14, align 4
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %16 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %17 = phi i64 [ 0, %continue__1 ], [ %21, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %17)
  %20 = bitcast i8* %19 to { i1, i64 }**
  store { i1, i64 }* %12, { i1, i64 }** %20, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %21 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %15, %Array** %output, align 8
  %22 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %23)
  %26 = bitcast i8* %25 to { i1, i64 }**
  %27 = load { i1, i64 }*, { i1, i64 }** %26, align 8
  %28 = bitcast { i1, i64 }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %30 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 1, %exit__2 ], [ %48, %exiting__3 ]
  %31 = icmp sle i64 %idxElement, %30
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %35 = bitcast i8* %34 to i1*
  %36 = load i1, i1* %35, align 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, i64 }* getelementptr ({ i1, i64 }, { i1, i64 }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i1, i64 }*
  %42 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %41, i32 0, i32 1
  store i1 %36, i1* %42, align 1
  store i64 %39, i64* %43, align 4
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxElement)
  %45 = bitcast i8* %44 to { i1, i64 }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %46 = load { i1, i64 }*, { i1, i64 }** %45, align 8
  %47 = bitcast { i1, i64 }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  store { i1, i64 }* %41, { i1, i64 }** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { i1, i64 }**
  %56 = load { i1, i64 }*, { i1, i64 }** %55, align 8
  %57 = bitcast { i1, i64 }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret %Array* %49
}

define internal i64 @Microsoft__Quantum__Canon___8222e5371d1140e18441af955cbd378d_Snd__body(i1 %0, i64 %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, i64 }* getelementptr ({ i1, i64 }, { i1, i64 }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { i1, i64 }*
  %3 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %pair, i32 0, i32 1
  store i1 %0, i1* %3, align 1
  store i64 %1, i64* %4, align 4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret i64 %1
}

define internal { i1, i64 }* @Microsoft__Quantum__Arrays___819954bcd82146a6a8342446e1190957_Head__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i1, i64 }**
  %6 = load { i1, i64 }*, { i1, i64 }** %5, align 8
  %7 = bitcast { i1, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = icmp sgt i64 %0, 0
  %10 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @33, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %9, i1 true, %String* %10)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %12 = bitcast i8* %11 to { i1, i64 }**
  %13 = load { i1, i64 }*, { i1, i64 }** %12, align 8
  %14 = bitcast { i1, i64 }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to { i1, i64 }**
  %20 = load { i1, i64 }*, { i1, i64 }** %19, align 8
  %21 = bitcast { i1, i64 }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  ret { i1, i64 }* %13
}

define internal %Array* @Microsoft__Quantum__Arrays___4c1a69a66933447c844ced0239fa6495_Filtered__body(%Callable* %predicate, %Array* %array) {
entry:
  %idxArray = alloca %Array*, align 8
  %totalFound = alloca i64, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %predicate, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %predicate, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i1, i64 }**
  %6 = load { i1, i64 }*, { i1, i64 }** %5, align 8
  %7 = bitcast { i1, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  store i64 0, i64* %totalFound, align 4
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %10 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %11)
  %14 = bitcast i8* %13 to i64*
  store i64 0, i64* %14, align 4
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  store %Array* %9, %Array** %idxArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %16 = call %Range @Microsoft__Quantum__Arrays___94a71e0233254bc7929a7d7210bcd75d_IndexRange__body(%Array* %array)
  %17 = extractvalue %Range %16, 0
  %18 = extractvalue %Range %16, 1
  %19 = extractvalue %Range %16, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__2
  %20 = icmp sgt i64 %18, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %idxElement = phi i64 [ %17, %preheader__1 ], [ %38, %exiting__3 ]
  %21 = icmp sle i64 %idxElement, %19
  %22 = icmp sge i64 %idxElement, %19
  %23 = select i1 %20, i1 %21, i1 %22
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %25 = bitcast i8* %24 to { i1, i64 }**
  %26 = load { i1, i64 }*, { i1, i64 }** %25, align 8
  %27 = bitcast { i1, i64 }* %26 to %Tuple*
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %predicate, %Tuple* %27, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { i1 }*
  %30 = getelementptr inbounds { i1 }, { i1 }* %29, i32 0, i32 0
  %31 = load i1, i1* %30, align 1
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  br i1 %31, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__3
  %32 = load %Array*, %Array** %idxArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = load i64, i64* %totalFound, align 4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %34)
  %36 = bitcast i8* %35 to i64*
  store i64 %idxElement, i64* %36, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %idxArray, align 8
  %37 = add i64 %34, 1
  store i64 %37, i64* %totalFound, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__3
  br label %exiting__3

exiting__3:                                       ; preds = %continue__1
  %38 = add i64 %idxElement, %18
  br label %header__3

exit__3:                                          ; preds = %header__3
  %39 = load %Array*, %Array** %idxArray, align 8
  %40 = load i64, i64* %totalFound, align 4
  %41 = sub i64 %40, 1
  %42 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %41, 2
  %43 = call %Array* @__quantum__rt__array_slice_1d(%Array* %39, %Range %42, i1 true)
  %44 = call %Array* @Microsoft__Quantum__Arrays___350337fdf0114f61a4061047b90dbf85_Subarray__body(%Array* %43, %Array* %array)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %predicate, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %predicate, i32 -1)
  %45 = sub i64 %0, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %46)
  %49 = bitcast i8* %48 to { i1, i64 }**
  %50 = load { i1, i64 }*, { i1, i64 }** %49, align 8
  %51 = bitcast { i1, i64 }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %43, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  ret %Array* %44
}

define internal void @Microsoft__Quantum__Canon___b950c6e85b1944ae91a2dee4f20f4c18_Fst__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1, i64 }*
  %1 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %0, i32 0, i32 1
  %3 = load i1, i1* %1, align 1
  %4 = load i64, i64* %2, align 4
  %5 = call i1 @Microsoft__Quantum__Canon___b950c6e85b1944ae91a2dee4f20f4c18_Fst__body(i1 %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { i1 }*
  %7 = getelementptr inbounds { i1 }, { i1 }* %6, i32 0, i32 0
  store i1 %5, i1* %7, align 1
  ret void
}

define internal i1 @Microsoft__Quantum__Canon___b950c6e85b1944ae91a2dee4f20f4c18_Fst__body(i1 %0, i64 %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, i64 }* getelementptr ({ i1, i64 }, { i1, i64 }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { i1, i64 }*
  %3 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %pair, i32 0, i32 1
  store i1 %0, i1* %3, align 1
  store i64 %1, i64* %4, align 4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret i1 %0
}

define internal { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %coefficients) {
entry:
  %coefficients1 = alloca %Array*, align 8
  %coefficients0 = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %newCoefficientsLength = sdiv i64 %0, 2
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %2 = sub i64 %newCoefficientsLength, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to double*
  store double 0.000000e+00, double* %6, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %1, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %9 = sub i64 %newCoefficientsLength, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %14, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %10)
  %13 = bitcast i8* %12 to double*
  store double 0.000000e+00, double* %13, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %14 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  store %Array* %8, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %15 = sub i64 %newCoefficientsLength, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxCoeff = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %16 = icmp sle i64 %idxCoeff, %15
  br i1 %16, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %17 = load %Array*, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20, align 8
  %22 = add i64 %idxCoeff, %newCoefficientsLength
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %22)
  %24 = bitcast i8* %23 to double*
  %25 = load double, double* %24, align 8
  %26 = fadd double %21, %25
  %27 = fmul double 5.000000e-01, %26
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idxCoeff)
  %29 = bitcast i8* %28 to double*
  store double %27, double* %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  store %Array* %18, %Array** %coefficients0, align 8
  %30 = load %Array*, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  %31 = call %Array* @__quantum__rt__array_copy(%Array* %30, i1 false)
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %33 = bitcast i8* %32 to double*
  %34 = load double, double* %33, align 8
  %35 = add i64 %idxCoeff, %newCoefficientsLength
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %35)
  %37 = bitcast i8* %36 to double*
  %38 = load double, double* %37, align 8
  %39 = fsub double %34, %38
  %40 = fmul double 5.000000e-01, %39
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %idxCoeff)
  %42 = bitcast i8* %41 to double*
  %43 = load double, double* %42, align 8
  store double %40, double* %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  store %Array* %31, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %idxCoeff, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %45 = load %Array*, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 1)
  %46 = load %Array*, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { %Array*, %Array* }*
  %49 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %48, i32 0, i32 1
  store %Array* %45, %Array** %49, align 8
  store %Array* %46, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %46, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  ret { %Array*, %Array* }* %48
}

define internal double @Microsoft__Quantum__Canon____QsRef3__TrotterStepSize____body(i64 %order) {
entry:
  %0 = sitofp i64 %order to double
  %1 = fsub double %0, 1.000000e+00
  %2 = fdiv double 1.000000e+00, %1
  %3 = call double @Microsoft__Quantum__Math__PowD__body(double 4.000000e+00, double %2)
  %4 = fsub double 4.000000e+00, %3
  %5 = fdiv double 1.000000e+00, %4
  ret double %5
}

define internal void @Microsoft__Quantum__Canon__CZ__body(%Qubit* %control, %Qubit* %target) {
entry:
  %__controlQubits__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__controlQubits__, i64 0)
  %1 = bitcast i8* %0 to %Qubit**
  store %Qubit* %control, %Qubit** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__body(i2 %pauli, %Qubit* %target) {
entry:
  %0 = icmp eq i2 %pauli, 1
  br i1 %0, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %1 = icmp eq i2 %pauli, -1
  br i1 %1, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__qis__y__body(%Qubit* %target)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %2 = icmp eq i2 %pauli, -2
  br i1 %2, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__qis__z__body(%Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__adj(i2 %pauli, %Qubit* %target) {
entry:
  %0 = icmp eq i2 %pauli, 1
  br i1 %0, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %1 = icmp eq i2 %pauli, -1
  br i1 %1, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__qis__y__body(%Qubit* %target)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %2 = icmp eq i2 %pauli, -2
  br i1 %2, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__qis__z__body(%Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__ctl(%Array* %__controlQubits__, { i2, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = icmp eq i2 %pauli, 1
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %4 = icmp eq i2 %pauli, -1
  br i1 %4, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %5 = icmp eq i2 %pauli, -2
  br i1 %5, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__ctladj(%Array* %__controlQubits__, { i2, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = icmp eq i2 %pauli, 1
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %4 = icmp eq i2 %pauli, -1
  br i1 %4, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %5 = icmp eq i2 %pauli, -2
  br i1 %5, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyPauli__body(%Array* %pauli, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApplyP__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___bb1c4270ad5b4be0bab2024b59f8dcff_Zipped__body(%Array* %pauli, %Array* %target)
  call void @Microsoft__Quantum__Canon___df1542a7adba4b8098971b98d88b9125_ApplyToEachCA__body(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { i2, %Qubit* }**
  %8 = load { i2, %Qubit* }*, { i2, %Qubit* }** %7, align 8
  %9 = bitcast { i2, %Qubit* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___df1542a7adba4b8098971b98d88b9125_ApplyToEachCA__body(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %2)
  %5 = bitcast i8* %4 to { i2, %Qubit* }**
  %6 = load { i2, %Qubit* }*, { i2, %Qubit* }** %5, align 8
  %7 = bitcast { i2, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %9 = call %Range @Microsoft__Quantum__Arrays___efb0462d99e445f898c5269230c6127d_IndexRange__body(%Array* %register)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %13 = icmp sgt i64 %11, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxQubit = phi i64 [ %10, %preheader__1 ], [ %21, %exiting__2 ]
  %14 = icmp sle i64 %idxQubit, %12
  %15 = icmp sge i64 %idxQubit, %12
  %16 = select i1 %13, i1 %14, i1 %15
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %18 = bitcast i8* %17 to { i2, %Qubit* }**
  %19 = load { i2, %Qubit* }*, { i2, %Qubit* }** %18, align 8
  %20 = bitcast { i2, %Qubit* }* %19 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %singleElementOperation, %Tuple* %20, %Tuple* null)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %idxQubit, %11
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %22 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %29, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %23)
  %26 = bitcast i8* %25 to { i2, %Qubit* }**
  %27 = load { i2, %Qubit* }*, { i2, %Qubit* }** %26, align 8
  %28 = bitcast { i2, %Qubit* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %29 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i2, %Qubit* }*
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %3 = load i2, i2* %1, align 1
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Canon__ApplyP__body(i2 %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i2, %Qubit* }*
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %3 = load i2, i2* %1, align 1
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Canon__ApplyP__adj(i2 %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i2, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i2, %Qubit* }*, { i2, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApplyP__ctl(%Array* %3, { i2, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i2, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i2, %Qubit* }*, { i2, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApplyP__ctladj(%Array* %3, { i2, %Qubit* }* %4)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___bb1c4270ad5b4be0bab2024b59f8dcff_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = icmp eq i64 %nElements, 0
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %4

continue__1:                                      ; preds = %condContinue__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %6 = bitcast i8* %5 to i2*
  %7 = load i2, i2* %6, align 1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i2, %Qubit* }*
  %13 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %12, i32 0, i32 1
  store i2 %7, i2* %13, align 1
  store %Qubit* %10, %Qubit** %14, align 8
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %16 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %17 = phi i64 [ 0, %continue__1 ], [ %21, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %17)
  %20 = bitcast i8* %19 to { i2, %Qubit* }**
  store { i2, %Qubit* }* %12, { i2, %Qubit* }** %20, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %21 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %15, %Array** %output, align 8
  %22 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %23)
  %26 = bitcast i8* %25 to { i2, %Qubit* }**
  %27 = load { i2, %Qubit* }*, { i2, %Qubit* }** %26, align 8
  %28 = bitcast { i2, %Qubit* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %30 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 1, %exit__2 ], [ %48, %exiting__3 ]
  %31 = icmp sle i64 %idxElement, %30
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %35 = bitcast i8* %34 to i2*
  %36 = load i2, i2* %35, align 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %38 = bitcast i8* %37 to %Qubit**
  %39 = load %Qubit*, %Qubit** %38, align 8
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i2, %Qubit* }*
  %42 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %41, i32 0, i32 1
  store i2 %36, i2* %42, align 1
  store %Qubit* %39, %Qubit** %43, align 8
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxElement)
  %45 = bitcast i8* %44 to { i2, %Qubit* }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %46 = load { i2, %Qubit* }*, { i2, %Qubit* }** %45, align 8
  %47 = bitcast { i2, %Qubit* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  store { i2, %Qubit* }* %41, { i2, %Qubit* }** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { i2, %Qubit* }**
  %56 = load { i2, %Qubit* }*, { i2, %Qubit* }** %55, align 8
  %57 = bitcast { i2, %Qubit* }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret %Array* %49
}

define internal void @Microsoft__Quantum__Canon__ApplyPauli__adj(%Array* %pauli, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApplyP__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___bb1c4270ad5b4be0bab2024b59f8dcff_Zipped__body(%Array* %pauli, %Array* %target)
  call void @Microsoft__Quantum__Canon___df1542a7adba4b8098971b98d88b9125_ApplyToEachCA__adj(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { i2, %Qubit* }**
  %8 = load { i2, %Qubit* }*, { i2, %Qubit* }** %7, align 8
  %9 = bitcast { i2, %Qubit* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___df1542a7adba4b8098971b98d88b9125_ApplyToEachCA__adj(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %2)
  %5 = bitcast i8* %4 to { i2, %Qubit* }**
  %6 = load { i2, %Qubit* }*, { i2, %Qubit* }** %5, align 8
  %7 = bitcast { i2, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %9 = call %Range @Microsoft__Quantum__Arrays___efb0462d99e445f898c5269230c6127d_IndexRange__body(%Array* %register)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  %13 = sub i64 %12, %10
  %14 = sdiv i64 %13, %11
  %15 = mul i64 %11, %14
  %16 = add i64 %10, %15
  %17 = sub i64 0, %11
  %18 = insertvalue %Range zeroinitializer, i64 %16, 0
  %19 = insertvalue %Range %18, i64 %17, 1
  %20 = insertvalue %Range %19, i64 %10, 2
  %21 = extractvalue %Range %20, 0
  %22 = extractvalue %Range %20, 1
  %23 = extractvalue %Range %20, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %24 = icmp sgt i64 %22, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %21, %preheader__1 ], [ %33, %exiting__2 ]
  %25 = icmp sle i64 %__qsVar0__idxQubit__, %23
  %26 = icmp sge i64 %__qsVar0__idxQubit__, %23
  %27 = select i1 %24, i1 %25, i1 %26
  br i1 %27, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %28 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %28)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %30 = bitcast i8* %29 to { i2, %Qubit* }**
  %31 = load { i2, %Qubit* }*, { i2, %Qubit* }** %30, align 8
  %32 = bitcast { i2, %Qubit* }* %31 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %28, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %28, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %__qsVar0__idxQubit__, %22
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %34 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %35)
  %38 = bitcast i8* %37 to { i2, %Qubit* }**
  %39 = load { i2, %Qubit* }*, { i2, %Qubit* }** %38, align 8
  %40 = bitcast { i2, %Qubit* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyPauli__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %pauli = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApplyP__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Array* @Microsoft__Quantum__Arrays___bb1c4270ad5b4be0bab2024b59f8dcff_Zipped__body(%Array* %pauli, %Array* %target)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, %Array* }*
  %7 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 1
  store %Callable* %3, %Callable** %7, align 8
  store %Array* %4, %Array** %8, align 8
  call void @Microsoft__Quantum__Canon___df1542a7adba4b8098971b98d88b9125_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %6)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %10 = sub i64 %9, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %11 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %11)
  %14 = bitcast i8* %13 to { i2, %Qubit* }**
  %15 = load { i2, %Qubit* }*, { i2, %Qubit* }** %14, align 8
  %16 = bitcast { i2, %Qubit* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %11, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___df1542a7adba4b8098971b98d88b9125_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %register = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %5)
  %8 = bitcast i8* %7 to { i2, %Qubit* }**
  %9 = load { i2, %Qubit* }*, { i2, %Qubit* }** %8, align 8
  %10 = bitcast { i2, %Qubit* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %12 = call %Range @Microsoft__Quantum__Arrays___efb0462d99e445f898c5269230c6127d_IndexRange__body(%Array* %register)
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %16 = icmp sgt i64 %14, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxQubit = phi i64 [ %13, %preheader__1 ], [ %29, %exiting__2 ]
  %17 = icmp sle i64 %idxQubit, %15
  %18 = icmp sge i64 %idxQubit, %15
  %19 = select i1 %16, i1 %17, i1 %18
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %20)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %22 = bitcast i8* %21 to { i2, %Qubit* }**
  %23 = load { i2, %Qubit* }*, { i2, %Qubit* }** %22, align 8
  %24 = bitcast { i2, %Qubit* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i2, %Qubit* }* }* getelementptr ({ %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Array*, { i2, %Qubit* }* }*
  %27 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %26, i32 0, i32 0
  %28 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %26, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %27, align 8
  store { i2, %Qubit* }* %23, { i2, %Qubit* }** %28, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %25, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %idxQubit, %14
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %30 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %37, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %31)
  %34 = bitcast i8* %33 to { i2, %Qubit* }**
  %35 = load { i2, %Qubit* }*, { i2, %Qubit* }** %34, align 8
  %36 = bitcast { i2, %Qubit* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %37 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyPauli__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %pauli = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApplyP__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Array* @Microsoft__Quantum__Arrays___bb1c4270ad5b4be0bab2024b59f8dcff_Zipped__body(%Array* %pauli, %Array* %target)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, %Array* }*
  %7 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 1
  store %Callable* %3, %Callable** %7, align 8
  store %Array* %4, %Array** %8, align 8
  call void @Microsoft__Quantum__Canon___df1542a7adba4b8098971b98d88b9125_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %6)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %10 = sub i64 %9, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %11 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %11)
  %14 = bitcast i8* %13 to { i2, %Qubit* }**
  %15 = load { i2, %Qubit* }*, { i2, %Qubit* }** %14, align 8
  %16 = bitcast { i2, %Qubit* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %11, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___df1542a7adba4b8098971b98d88b9125_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %register = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %5)
  %8 = bitcast i8* %7 to { i2, %Qubit* }**
  %9 = load { i2, %Qubit* }*, { i2, %Qubit* }** %8, align 8
  %10 = bitcast { i2, %Qubit* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %12 = call %Range @Microsoft__Quantum__Arrays___efb0462d99e445f898c5269230c6127d_IndexRange__body(%Array* %register)
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  %16 = sub i64 %15, %13
  %17 = sdiv i64 %16, %14
  %18 = mul i64 %14, %17
  %19 = add i64 %13, %18
  %20 = sub i64 0, %14
  %21 = insertvalue %Range zeroinitializer, i64 %19, 0
  %22 = insertvalue %Range %21, i64 %20, 1
  %23 = insertvalue %Range %22, i64 %13, 2
  %24 = extractvalue %Range %23, 0
  %25 = extractvalue %Range %23, 1
  %26 = extractvalue %Range %23, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %27 = icmp sgt i64 %25, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %24, %preheader__1 ], [ %40, %exiting__2 ]
  %28 = icmp sle i64 %__qsVar0__idxQubit__, %26
  %29 = icmp sge i64 %__qsVar0__idxQubit__, %26
  %30 = select i1 %27, i1 %28, i1 %29
  br i1 %30, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %31 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %31)
  call void @__quantum__rt__callable_make_controlled(%Callable* %31)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %33 = bitcast i8* %32 to { i2, %Qubit* }**
  %34 = load { i2, %Qubit* }*, { i2, %Qubit* }** %33, align 8
  %35 = bitcast { i2, %Qubit* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i2, %Qubit* }* }* getelementptr ({ %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array*, { i2, %Qubit* }* }*
  %38 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %37, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %38, align 8
  store { i2, %Qubit* }* %34, { i2, %Qubit* }** %39, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %31, %Tuple* %36, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %40 = add i64 %__qsVar0__idxQubit__, %25
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %41 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %42 = phi i64 [ 0, %exit__2 ], [ %48, %exiting__3 ]
  %43 = icmp sle i64 %42, %41
  br i1 %43, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %42)
  %45 = bitcast i8* %44 to { i2, %Qubit* }**
  %46 = load { i2, %Qubit* }*, { i2, %Qubit* }** %45, align 8
  %47 = bitcast { i2, %Qubit* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %42, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %pauli, i1 %bitApply, %Array* %bits, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = call %Array* @Microsoft__Quantum__Arrays___6cd6404b5119404bb0bed9c3be2cb761_Zipped__body(%Array* %bits, %Array* %qubits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %0)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %3)
  %6 = bitcast i8* %5 to { i1, %Qubit* }**
  %7 = load { i1, %Qubit* }*, { i1, %Qubit* }** %6, align 8
  %8 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %7, i32 0, i32 0
  %bit = load i1, i1* %8, align 1
  %9 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %7, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %9, align 8
  %10 = icmp eq i1 %bit, %bitApply
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @Microsoft__Quantum__Canon__ApplyP__body(i2 %pauli, %Qubit* %qubit)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %11 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %12 = sub i64 %1, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %13)
  %16 = bitcast i8* %15 to { i1, %Qubit* }**
  %17 = load { i1, %Qubit* }*, { i1, %Qubit* }** %16, align 8
  %18 = bitcast { i1, %Qubit* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___6cd6404b5119404bb0bed9c3be2cb761_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = icmp eq i64 %nElements, 0
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %4

continue__1:                                      ; preds = %condContinue__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %6 = bitcast i8* %5 to i1*
  %7 = load i1, i1* %6, align 1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Qubit* }* getelementptr ({ i1, %Qubit* }, { i1, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i1, %Qubit* }*
  %13 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %12, i32 0, i32 1
  store i1 %7, i1* %13, align 1
  store %Qubit* %10, %Qubit** %14, align 8
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %16 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %17 = phi i64 [ 0, %continue__1 ], [ %21, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %17)
  %20 = bitcast i8* %19 to { i1, %Qubit* }**
  store { i1, %Qubit* }* %12, { i1, %Qubit* }** %20, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %21 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %15, %Array** %output, align 8
  %22 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %23)
  %26 = bitcast i8* %25 to { i1, %Qubit* }**
  %27 = load { i1, %Qubit* }*, { i1, %Qubit* }** %26, align 8
  %28 = bitcast { i1, %Qubit* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %30 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 1, %exit__2 ], [ %48, %exiting__3 ]
  %31 = icmp sle i64 %idxElement, %30
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %35 = bitcast i8* %34 to i1*
  %36 = load i1, i1* %35, align 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %38 = bitcast i8* %37 to %Qubit**
  %39 = load %Qubit*, %Qubit** %38, align 8
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Qubit* }* getelementptr ({ i1, %Qubit* }, { i1, %Qubit* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i1, %Qubit* }*
  %42 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %41, i32 0, i32 1
  store i1 %36, i1* %42, align 1
  store %Qubit* %39, %Qubit** %43, align 8
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxElement)
  %45 = bitcast i8* %44 to { i1, %Qubit* }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %46 = load { i1, %Qubit* }*, { i1, %Qubit* }** %45, align 8
  %47 = bitcast { i1, %Qubit* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  store { i1, %Qubit* }* %41, { i1, %Qubit* }** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { i1, %Qubit* }**
  %56 = load { i1, %Qubit* }*, { i1, %Qubit* }** %55, align 8
  %57 = bitcast { i1, %Qubit* }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret %Array* %49
}

define internal void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %pauli, i1 %bitApply, %Array* %bits, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %__qsVar0__nBits__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = call %Array* @Microsoft__Quantum__Arrays___6cd6404b5119404bb0bed9c3be2cb761_Zipped__body(%Array* %bits, %Array* %qubits)
  %1 = call %Array* @Microsoft__Quantum__Arrays___6cd6404b5119404bb0bed9c3be2cb761_Zipped__body(%Array* %bits, %Array* %qubits)
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  %4 = insertvalue %Range zeroinitializer, i64 %3, 0
  %5 = insertvalue %Range %4, i64 -1, 1
  %6 = insertvalue %Range %5, i64 0, 2
  %7 = call %Array* @__quantum__rt__array_slice_1d(%Array* %0, %Range %6, i1 true)
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %7)
  %9 = sub i64 %8, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %10 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %10)
  %13 = bitcast i8* %12 to { i1, %Qubit* }**
  %14 = load { i1, %Qubit* }*, { i1, %Qubit* }** %13, align 8
  %15 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %14, i32 0, i32 0
  %__qsVar1__bit__ = load i1, i1* %15, align 1
  %16 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %14, i32 0, i32 1
  %__qsVar2__qubit__ = load %Qubit*, %Qubit** %16, align 8
  %17 = icmp eq i1 %__qsVar1__bit__, %bitApply
  br i1 %17, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @Microsoft__Quantum__Canon__ApplyP__adj(i2 %pauli, %Qubit* %__qsVar2__qubit__)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %18 = add i64 %10, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %0)
  %20 = sub i64 %19, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %21)
  %24 = bitcast i8* %23 to { i1, %Qubit* }**
  %25 = load { i1, %Qubit* }*, { i1, %Qubit* }** %24, align 8
  %26 = bitcast { i1, %Qubit* }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %29)
  %32 = bitcast i8* %31 to { i1, %Qubit* }**
  %33 = load { i1, %Qubit* }*, { i1, %Qubit* }** %32, align 8
  %34 = bitcast { i1, %Qubit* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__ctl(%Array* %__controlQubits__, { i2, i1, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 1
  %bitApply = load i1, i1* %2, align 1
  %3 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 2
  %bits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %4 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %5 = call %Array* @Microsoft__Quantum__Arrays___6cd6404b5119404bb0bed9c3be2cb761_Zipped__body(%Array* %bits, %Array* %qubits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %7 = sub i64 %6, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %8 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %9 = icmp sle i64 %8, %7
  br i1 %9, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %8)
  %11 = bitcast i8* %10 to { i1, %Qubit* }**
  %12 = load { i1, %Qubit* }*, { i1, %Qubit* }** %11, align 8
  %13 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %12, i32 0, i32 0
  %bit = load i1, i1* %13, align 1
  %14 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %12, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %14, align 8
  %15 = icmp eq i1 %bit, %bitApply
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i2, %Qubit* }*
  %18 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %17, i32 0, i32 1
  store i2 %pauli, i2* %18, align 1
  store %Qubit* %qubit, %Qubit** %19, align 8
  call void @Microsoft__Quantum__Canon__ApplyP__ctl(%Array* %__controlQubits__, { i2, %Qubit* }* %17)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %20 = add i64 %8, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %21 = sub i64 %6, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %22 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %22)
  %25 = bitcast i8* %24 to { i1, %Qubit* }**
  %26 = load { i1, %Qubit* }*, { i1, %Qubit* }** %25, align 8
  %27 = bitcast { i1, %Qubit* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %22, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__ctladj(%Array* %__controlQubits__, { i2, i1, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 1
  %bitApply = load i1, i1* %2, align 1
  %3 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 2
  %bits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %4 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %__qsVar0__nBits__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %5 = call %Array* @Microsoft__Quantum__Arrays___6cd6404b5119404bb0bed9c3be2cb761_Zipped__body(%Array* %bits, %Array* %qubits)
  %6 = call %Array* @Microsoft__Quantum__Arrays___6cd6404b5119404bb0bed9c3be2cb761_Zipped__body(%Array* %bits, %Array* %qubits)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  %9 = insertvalue %Range zeroinitializer, i64 %8, 0
  %10 = insertvalue %Range %9, i64 -1, 1
  %11 = insertvalue %Range %10, i64 0, 2
  %12 = call %Array* @__quantum__rt__array_slice_1d(%Array* %5, %Range %11, i1 true)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %12)
  %14 = sub i64 %13, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %15 = phi i64 [ 0, %entry ], [ %27, %exiting__1 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %15)
  %18 = bitcast i8* %17 to { i1, %Qubit* }**
  %19 = load { i1, %Qubit* }*, { i1, %Qubit* }** %18, align 8
  %20 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %19, i32 0, i32 0
  %__qsVar1__bit__ = load i1, i1* %20, align 1
  %21 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %19, i32 0, i32 1
  %__qsVar2__qubit__ = load %Qubit*, %Qubit** %21, align 8
  %22 = icmp eq i1 %__qsVar1__bit__, %bitApply
  br i1 %22, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { i2, %Qubit* }*
  %25 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %24, i32 0, i32 1
  store i2 %pauli, i2* %25, align 1
  store %Qubit* %__qsVar2__qubit__, %Qubit** %26, align 8
  call void @Microsoft__Quantum__Canon__ApplyP__ctladj(%Array* %__controlQubits__, { i2, %Qubit* }* %24)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %27 = add i64 %15, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %28 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %29 = sub i64 %28, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %30)
  %33 = bitcast i8* %32 to { i1, %Qubit* }**
  %34 = load { i1, %Qubit* }*, { i1, %Qubit* }** %33, align 8
  %35 = bitcast { i1, %Qubit* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  %37 = sub i64 %7, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %38)
  %41 = bitcast i8* %40 to { i1, %Qubit* }**
  %42 = load { i1, %Qubit* }*, { i1, %Qubit* }** %41, align 8
  %43 = bitcast { i1, %Qubit* }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %qubits__1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  %1 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = call i1 @Microsoft__Quantum__Arrays___4b7f49d75c874a3d9275080e156c5c7c_IsEmpty__body(%Array* %qubits__1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @16, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %5 = trunc i64 %4 to i32
  %6 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %5)
  %7 = fptosi double %6 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %7, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %8 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  %11 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %qubits__1)
  %12 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %11)
  %13 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %qubits__1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %12, %Qubit* %13)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %15 = icmp eq i64 %14, 2
  br i1 %15, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %17 = bitcast i8* %16 to double*
  %18 = load double, double* %17, align 8
  %19 = call double @Microsoft__Quantum__Math__AbsD__body(double %18)
  %20 = fcmp ogt double %19, %tolerance
  br i1 %20, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %22 = bitcast i8* %21 to i2*
  store i2 0, i2* %22, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %24 = bitcast i8* %23 to double*
  %25 = load double, double* %24, align 8
  %theta = fmul double 1.000000e+00, %25
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %26 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %qubits__1)
  %27 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %26)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients0, { %Array* }* %27)
  %28 = getelementptr inbounds { %Array* }, { %Array* }* %27, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  %30 = bitcast { %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %31 = getelementptr inbounds { %Array* }, { %Array* }* %12, i32 0, i32 0
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %33 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  %34 = bitcast { %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  ret void
}

define internal i1 @Microsoft__Quantum__Arrays___4b7f49d75c874a3d9275080e156c5c7c_IsEmpty__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp eq i64 %0, 0
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %1
}

define internal %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %nElementsTotal, double %defaultElement, %Array* %inputArray) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 1)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %nAbsElementsTotal = call i64 @Microsoft__Quantum__Math__AbsI__body(i64 %nElementsTotal)
  %0 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @35, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %0, i1 true, %String* %1)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___aadf45b9686643c385c8db16f19e226a_ConstantArray__body(i64 %nElementsPad, double %defaultElement)
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 1)
  %2 = icmp sge i64 %nElementsTotal, 0
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %3 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %5 = phi %Array* [ %3, %condTrue__1 ], [ %4, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %padArray, i32 -1)
  ret %Array* %5
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %4)
  %6 = fptosi double %5 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %13 = fcmp ogt double %12, %tolerance
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %15 = bitcast i8* %14 to i2*
  store i2 -2, i2* %15, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %17 = bitcast i8* %16 to double*
  %theta = load double, double* %17, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %19 = bitcast i8* %18 to %Qubit**
  store %Qubit* %target, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %20 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  %23 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %1)
  %24 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %23)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %24, %Qubit* %target)
  %25 = call i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %25, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %26 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %26, %Qubit* %target)
  %27 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %1)
  %28 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %27)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %28, %Qubit* %target)
  %29 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %29, %Qubit* %target)
  %30 = getelementptr inbounds { %Array* }, { %Array* }* %28, i32 0, i32 0
  %31 = load %Array*, %Array** %30, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  %32 = bitcast { %Array* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %33 = getelementptr inbounds { %Array* }, { %Array* }* %24, i32 0, i32 0
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %35 = bitcast { %Array*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  %36 = bitcast { %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 2
  %2 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %1, 2
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %2, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  ret %Array* %3
}

define internal %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp sgt i64 %0, 0
  %2 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @33, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %1, i1 true, %String* %2)
  %3 = sub i64 %0, 1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %3)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  ret %Qubit* %6
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %qubits__1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  %1 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = call i1 @Microsoft__Quantum__Arrays___4b7f49d75c874a3d9275080e156c5c7c_IsEmpty__body(%Array* %qubits__1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @16, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %5 = trunc i64 %4 to i32
  %6 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %5)
  %7 = fptosi double %6 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %7, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %8 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %12 = icmp eq i64 %11, 2
  br i1 %12, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %14 = bitcast i8* %13 to double*
  %15 = load double, double* %14, align 8
  %16 = call double @Microsoft__Quantum__Math__AbsD__body(double %15)
  %17 = fcmp ogt double %16, %tolerance
  br i1 %17, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %19 = bitcast i8* %18 to i2*
  store i2 0, i2* %19, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %21 = bitcast i8* %20 to double*
  %22 = load double, double* %21, align 8
  %theta = fmul double 1.000000e+00, %22
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %23 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %qubits__1)
  %24 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %23)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %24)
  %25 = getelementptr inbounds { %Array* }, { %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  %27 = bitcast { %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %28 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %qubits__1)
  %29 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %28)
  %30 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %qubits__1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %29, %Qubit* %30)
  %31 = getelementptr inbounds { %Array* }, { %Array* }* %29, i32 0, i32 0
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %33 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  %34 = bitcast { %Array* }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %4)
  %6 = fptosi double %5 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %13 = fcmp ogt double %12, %tolerance
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %15 = bitcast i8* %14 to i2*
  store i2 -2, i2* %15, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %17 = bitcast i8* %16 to double*
  %theta = load double, double* %17, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %19 = bitcast i8* %18 to %Qubit**
  store %Qubit* %target, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %20 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %23 = call i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %23, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %24 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %24, %Qubit* %target)
  %25 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %1)
  %26 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %25)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %26, %Qubit* %target)
  %27 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %27, %Qubit* %target)
  %28 = getelementptr inbounds { %Array* }, { %Array* }* %26, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  %30 = bitcast { %Array* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %31 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %1)
  %32 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %31)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %32, %Qubit* %target)
  %33 = getelementptr inbounds { %Array* }, { %Array* }* %32, i32 0, i32 0
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %35 = bitcast { %Array*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  %36 = bitcast { %Array* }* %32 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %qubits__1 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call i1 @Microsoft__Quantum__Arrays___4b7f49d75c874a3d9275080e156c5c7c_IsEmpty__body(%Array* %qubits__1)
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @16, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %9 = trunc i64 %8 to i32
  %10 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %9)
  %11 = fptosi double %10 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %11, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %12 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 1)
  %15 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %qubits__1)
  %16 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  %17 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %qubits__1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, { %Array* }*, %Qubit* }*
  %20 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %19, i32 0, i32 3
  store double %tolerance, double* %20, align 8
  store %Array* %coefficients1, %Array** %21, align 8
  store { %Array* }* %16, { %Array* }** %22, align 8
  store %Qubit* %17, %Qubit** %23, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %19)
  %24 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %25 = icmp eq i64 %24, 2
  br i1 %25, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %27 = bitcast i8* %26 to double*
  %28 = load double, double* %27, align 8
  %29 = call double @Microsoft__Quantum__Math__AbsD__body(double %28)
  %30 = fcmp ogt double %29, %tolerance
  br i1 %30, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %32 = bitcast i8* %31 to i2*
  store i2 0, i2* %32, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %34 = bitcast i8* %33 to double*
  %35 = load double, double* %34, align 8
  %theta = fmul double 1.000000e+00, %35
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array*, double, %Array* }*
  %38 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %37, i32 0, i32 1
  %40 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %37, i32 0, i32 2
  store %Array* %paulis, %Array** %38, align 8
  store double %theta, double* %39, align 8
  store %Array* %qubits__1, %Array** %40, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %37)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 1)
  %41 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %qubits__1)
  %42 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %41)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  %43 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %44 = bitcast %Tuple* %43 to { double, %Array*, { %Array* }* }*
  %45 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %44, i32 0, i32 0
  %46 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %44, i32 0, i32 1
  %47 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %44, i32 0, i32 2
  store double %tolerance, double* %45, align 8
  store %Array* %coefficients0, %Array** %46, align 8
  store { %Array* }* %42, { %Array* }** %47, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %44)
  %48 = getelementptr inbounds { %Array* }, { %Array* }* %42, i32 0, i32 0
  %49 = load %Array*, %Array** %48, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  %50 = bitcast { %Array* }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %51 = getelementptr inbounds { %Array* }, { %Array* }* %16, i32 0, i32 0
  %52 = load %Array*, %Array** %51, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %53 = bitcast { %Array*, %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  %54 = bitcast { %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %54, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %target = load %Qubit*, %Qubit** %7, align 8
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %10)
  %12 = fptosi double %11 to i64
  %13 = trunc i64 %8 to i32
  %14 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %13)
  %15 = fptosi double %14 to i64
  %16 = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %15, double 0.000000e+00, %Array* %coefficients)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %12, double 0.000000e+00, %Array* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %control, %Qubit* %target)
  %20 = call i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %21 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %qubits__1 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call i1 @Microsoft__Quantum__Arrays___4b7f49d75c874a3d9275080e156c5c7c_IsEmpty__body(%Array* %qubits__1)
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @16, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %9 = trunc i64 %8 to i32
  %10 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %9)
  %11 = fptosi double %10 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %11, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %12 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %16 = icmp eq i64 %15, 2
  br i1 %16, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %18 = bitcast i8* %17 to double*
  %19 = load double, double* %18, align 8
  %20 = call double @Microsoft__Quantum__Math__AbsD__body(double %19)
  %21 = fcmp ogt double %20, %tolerance
  br i1 %21, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %23 = bitcast i8* %22 to i2*
  store i2 0, i2* %23, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %25 = bitcast i8* %24 to double*
  %26 = load double, double* %25, align 8
  %theta = fmul double 1.000000e+00, %26
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, double, %Array* }*
  %29 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %28, i32 0, i32 1
  %31 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %28, i32 0, i32 2
  store %Array* %paulis, %Array** %29, align 8
  store double %theta, double* %30, align 8
  store %Array* %qubits__1, %Array** %31, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %28)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %32 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %qubits__1)
  %33 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %32)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { double, %Array*, { %Array* }* }*
  %36 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %35, i32 0, i32 0
  %37 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %35, i32 0, i32 1
  %38 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %35, i32 0, i32 2
  store double %tolerance, double* %36, align 8
  store %Array* %__qsVar1__coefficients0__, %Array** %37, align 8
  store { %Array* }* %33, { %Array* }** %38, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %35)
  %39 = getelementptr inbounds { %Array* }, { %Array* }* %33, i32 0, i32 0
  %40 = load %Array*, %Array** %39, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  %41 = bitcast { %Array* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %42 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %qubits__1)
  %43 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %42)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  %44 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %qubits__1)
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { double, %Array*, { %Array* }*, %Qubit* }*
  %47 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %46, i32 0, i32 0
  %48 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %46, i32 0, i32 1
  %49 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %46, i32 0, i32 2
  %50 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %46, i32 0, i32 3
  store double %tolerance, double* %47, align 8
  store %Array* %__qsVar2__coefficients1__, %Array** %48, align 8
  store { %Array* }* %43, { %Array* }** %49, align 8
  store %Qubit* %44, %Qubit** %50, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %46)
  %51 = getelementptr inbounds { %Array* }, { %Array* }* %43, i32 0, i32 0
  %52 = load %Array*, %Array** %51, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %53 = bitcast { %Array*, %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  %54 = bitcast { %Array* }* %43 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %54, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %target = load %Qubit*, %Qubit** %7, align 8
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %10)
  %12 = fptosi double %11 to i64
  %13 = trunc i64 %8 to i32
  %14 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %13)
  %15 = fptosi double %14 to i64
  %16 = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %15, double 0.000000e+00, %Array* %coefficients)
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___363cc02fdfc747c5803543b2d61fb3a1_Padded__body(i64 %12, double 0.000000e+00, %Array* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef3__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %20 = call i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %21 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = icmp eq i2 %pauli, -2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 2
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 3
  store %Callable* %4, %Callable** %7, align 8
  store double %tolerance, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %control, { %Array* }** %10, align 8
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__14__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__10__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Qubit* }*
  %13 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %12, i32 0, i32 0
  store %Qubit* %target, %Qubit** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %11, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %14 = icmp eq i2 %pauli, 1
  br i1 %14, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %18 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 3
  %22 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 4
  store %Callable* %15, %Callable** %18, align 8
  store double %tolerance, double* %19, align 8
  store %Array* %coefficients, %Array** %20, align 8
  store i2 -2, i2* %21, align 1
  store { %Array* }* %control, { %Array* }** %22, align 8
  %op__1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__15__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %16)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 1)
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__body(%Callable* %23, %Callable* %op__1, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %24 = icmp eq i2 %pauli, -1
  br i1 %24, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %25 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %28 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 1
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 2
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 3
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 4
  store %Callable* %25, %Callable** %28, align 8
  store double %tolerance, double* %29, align 8
  store %Array* %coefficients, %Array** %30, align 8
  store i2 1, i2* %31, align 1
  store { %Array* }* %control, { %Array* }** %32, align 8
  %op__2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__16__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %26)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 1)
  %33 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__body(%Callable* %33, %Callable* %op__2, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %34 = icmp eq i2 %pauli, 0
  br i1 %34, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %35 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @17, i32 0, i32 0))
  %36 = icmp eq i2 1, %pauli
  br i1 %36, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %37 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @18, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %38 = icmp eq i2 -1, %pauli
  br i1 %38, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %39 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %40 = icmp eq i2 -2, %pauli
  br i1 %40, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %41 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %43 = phi %String* [ %41, %condTrue__3 ], [ %42, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %44 = phi %String* [ %39, %condTrue__2 ], [ %43, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %45 = phi %String* [ %37, %condTrue__1 ], [ %44, %condContinue__2 ]
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %35, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  %47 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %48 = call %String* @__quantum__rt__string_concatenate(%String* %46, %String* %47)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__fail(%String* %48)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__14__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__14__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__14__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__14__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = load double, double* %1, align 8
  %6 = load %Array*, %Array** %2, align 8
  %7 = load { %Array* }*, { %Array* }** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = load double, double* %1, align 8
  %6 = load %Array*, %Array** %2, align 8
  %7 = load { %Array* }*, { %Array* }** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__10__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__10__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__15__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__15__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__15__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__15__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Array* }*, { %Array* }** %4, align 8
  %10 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Array* }*, { %Array* }** %4, align 8
  %10 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__11__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__11__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__body(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Qubit* }*
  %2 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %1, i32 0, i32 0
  store %Qubit* %target, %Qubit** %2, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %0, %Tuple* null)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit* }*
  %5 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %4, i32 0, i32 0
  store %Qubit* %target, %Qubit** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %innerOperation, %Tuple* %3, %Tuple* null)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Qubit* }*
  %9 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %8, i32 0, i32 0
  store %Qubit* %target, %Qubit** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Lifted__PartialApplication__16__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__16__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__16__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__16__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = icmp eq i2 %pauli, -2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 2
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 3
  store %Callable* %4, %Callable** %7, align 8
  store double %tolerance, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %control, { %Array* }** %10, align 8
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__17__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__10__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Qubit* }*
  %14 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %13, i32 0, i32 0
  store %Qubit* %target, %Qubit** %14, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %15 = icmp eq i2 %pauli, 1
  br i1 %15, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %16 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 1
  %21 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 2
  %22 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 3
  %23 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 4
  store %Callable* %16, %Callable** %19, align 8
  store double %tolerance, double* %20, align 8
  store %Array* %coefficients, %Array** %21, align 8
  store i2 -2, i2* %22, align 1
  store { %Array* }* %control, { %Array* }** %23, align 8
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__18__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %17)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  %24 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__adj(%Callable* %24, %Callable* %__qsVar1__op__, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %25 = icmp eq i2 %pauli, -1
  br i1 %25, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %26 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 1
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 2
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 3
  %33 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 4
  store %Callable* %26, %Callable** %29, align 8
  store double %tolerance, double* %30, align 8
  store %Array* %coefficients, %Array** %31, align 8
  store i2 1, i2* %32, align 1
  store { %Array* }* %control, { %Array* }** %33, align 8
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__19__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %27)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  %34 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %34)
  call void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__adj(%Callable* %34, %Callable* %__qsVar2__op__, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %34, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %35 = icmp eq i2 %pauli, 0
  br i1 %35, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %36 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @17, i32 0, i32 0))
  %37 = icmp eq i2 1, %pauli
  br i1 %37, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %38 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @18, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %39 = icmp eq i2 -1, %pauli
  br i1 %39, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %40 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %41 = icmp eq i2 -2, %pauli
  br i1 %41, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %43 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %44 = phi %String* [ %42, %condTrue__3 ], [ %43, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %45 = phi %String* [ %40, %condTrue__2 ], [ %44, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %46 = phi %String* [ %38, %condTrue__1 ], [ %45, %condContinue__2 ]
  %47 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %46)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  %48 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %49 = call %String* @__quantum__rt__string_concatenate(%String* %47, %String* %48)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__fail(%String* %49)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %pauli = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %target = load %Qubit*, %Qubit** %8, align 8
  %9 = icmp eq i2 %pauli, -2
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 2
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 3
  store %Callable* %10, %Callable** %13, align 8
  store double %tolerance, double* %14, align 8
  store %Array* %coefficients, %Array** %15, align 8
  store { %Array* }* %control, { %Array* }** %16, align 8
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__20__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__10__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %17 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %17)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, %Qubit* }*
  %20 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %19, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %20, align 8
  store %Qubit* %target, %Qubit** %21, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %18, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %22 = icmp eq i2 %pauli, 1
  br i1 %22, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %26 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 2
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 3
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 4
  store %Callable* %23, %Callable** %26, align 8
  store double %tolerance, double* %27, align 8
  store %Array* %coefficients, %Array** %28, align 8
  store i2 -2, i2* %29, align 1
  store { %Array* }* %control, { %Array* }** %30, align 8
  %op__1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__21__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %24)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 1)
  %31 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { %Callable*, %Callable*, %Qubit* }*
  %34 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 2
  store %Callable* %31, %Callable** %34, align 8
  store %Callable* %op__1, %Callable** %35, align 8
  store %Qubit* %target, %Qubit** %36, align 8
  call void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %33)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %37 = icmp eq i2 %pauli, -1
  br i1 %37, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %41 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 0
  %42 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 1
  %43 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 2
  %44 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 3
  %45 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 4
  store %Callable* %38, %Callable** %41, align 8
  store double %tolerance, double* %42, align 8
  store %Array* %coefficients, %Array** %43, align 8
  store i2 1, i2* %44, align 1
  store { %Array* }* %control, { %Array* }** %45, align 8
  %op__2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__22__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %39)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 1)
  %46 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %46)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { %Callable*, %Callable*, %Qubit* }*
  %49 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 1
  %51 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 2
  store %Callable* %46, %Callable** %49, align 8
  store %Callable* %op__2, %Callable** %50, align 8
  store %Qubit* %target, %Qubit** %51, align 8
  call void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %48)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %52 = icmp eq i2 %pauli, 0
  br i1 %52, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { double, %Array*, { %Array* }* }*
  %55 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 0
  %56 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 1
  %57 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 2
  store double %tolerance, double* %55, align 8
  store %Array* %coefficients, %Array** %56, align 8
  store { %Array* }* %control, { %Array* }** %57, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %54)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %58 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @17, i32 0, i32 0))
  %59 = icmp eq i2 1, %pauli
  br i1 %59, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %60 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @18, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %61 = icmp eq i2 -1, %pauli
  br i1 %61, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %62 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %63 = icmp eq i2 -2, %pauli
  br i1 %63, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %64 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %65 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %66 = phi %String* [ %64, %condTrue__3 ], [ %65, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %67 = phi %String* [ %62, %condTrue__2 ], [ %66, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %68 = phi %String* [ %60, %condTrue__1 ], [ %67, %condContinue__2 ]
  %69 = call %String* @__quantum__rt__string_concatenate(%String* %58, %String* %68)
  call void @__quantum__rt__string_update_reference_count(%String* %58, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %68, i32 -1)
  %70 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %71 = call %String* @__quantum__rt__string_concatenate(%String* %69, %String* %70)
  call void @__quantum__rt__string_update_reference_count(%String* %69, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %70, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__fail(%String* %71)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %pauli = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %target = load %Qubit*, %Qubit** %8, align 8
  %9 = icmp eq i2 %pauli, -2
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 2
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 3
  store %Callable* %10, %Callable** %13, align 8
  store double %tolerance, double* %14, align 8
  store %Array* %coefficients, %Array** %15, align 8
  store { %Array* }* %control, { %Array* }** %16, align 8
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__23__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__10__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %17 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %17)
  call void @__quantum__rt__callable_make_controlled(%Callable* %17)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, %Qubit* }*
  %20 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %19, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %20, align 8
  store %Qubit* %target, %Qubit** %21, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %18, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %22 = icmp eq i2 %pauli, 1
  br i1 %22, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %26 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 2
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 3
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 4
  store %Callable* %23, %Callable** %26, align 8
  store double %tolerance, double* %27, align 8
  store %Array* %coefficients, %Array** %28, align 8
  store i2 -2, i2* %29, align 1
  store { %Array* }* %control, { %Array* }** %30, align 8
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__24__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %24)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  %31 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { %Callable*, %Callable*, %Qubit* }*
  %34 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 2
  store %Callable* %31, %Callable** %34, align 8
  store %Callable* %__qsVar1__op__, %Callable** %35, align 8
  store %Qubit* %target, %Qubit** %36, align 8
  call void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %33)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %37 = icmp eq i2 %pauli, -1
  br i1 %37, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %41 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 0
  %42 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 1
  %43 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 2
  %44 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 3
  %45 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 4
  store %Callable* %38, %Callable** %41, align 8
  store double %tolerance, double* %42, align 8
  store %Array* %coefficients, %Array** %43, align 8
  store i2 1, i2* %44, align 1
  store { %Array* }* %control, { %Array* }** %45, align 8
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__25__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %39)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  %46 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %46)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { %Callable*, %Callable*, %Qubit* }*
  %49 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 1
  %51 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 2
  store %Callable* %46, %Callable** %49, align 8
  store %Callable* %__qsVar2__op__, %Callable** %50, align 8
  store %Qubit* %target, %Qubit** %51, align 8
  call void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %48)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %52 = icmp eq i2 %pauli, 0
  br i1 %52, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { double, %Array*, { %Array* }* }*
  %55 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 0
  %56 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 1
  %57 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 2
  store double %tolerance, double* %55, align 8
  store %Array* %coefficients, %Array** %56, align 8
  store { %Array* }* %control, { %Array* }** %57, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %54)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %58 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @17, i32 0, i32 0))
  %59 = icmp eq i2 1, %pauli
  br i1 %59, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %60 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @18, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %61 = icmp eq i2 -1, %pauli
  br i1 %61, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %62 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %63 = icmp eq i2 -2, %pauli
  br i1 %63, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %64 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %65 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %66 = phi %String* [ %64, %condTrue__3 ], [ %65, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %67 = phi %String* [ %62, %condTrue__2 ], [ %66, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %68 = phi %String* [ %60, %condTrue__1 ], [ %67, %condContinue__2 ]
  %69 = call %String* @__quantum__rt__string_concatenate(%String* %58, %String* %68)
  call void @__quantum__rt__string_update_reference_count(%String* %58, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %68, i32 -1)
  %70 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %71 = call %String* @__quantum__rt__string_concatenate(%String* %69, %String* %70)
  call void @__quantum__rt__string_update_reference_count(%String* %69, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %70, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__fail(%String* %71)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__17__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__17__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__17__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__17__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__18__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__18__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__18__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__18__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__adj(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Qubit* }*
  %3 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %2, i32 0, i32 0
  store %Qubit* %target, %Qubit** %3, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %1, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %6, i32 0, i32 0
  store %Qubit* %target, %Qubit** %7, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Qubit* }*
  %11 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %10, i32 0, i32 0
  store %Qubit* %target, %Qubit** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__19__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__19__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__19__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__19__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__ctl(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Qubit* }*
  %6 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %5, i32 0, i32 0
  store %Qubit* %target, %Qubit** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %4, %Tuple* null)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Qubit* }*
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 1
  store %Array* %controlRegister, %Array** %10, align 8
  store %Qubit* %target, %Qubit** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Qubit* }*
  %15 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %14, i32 0, i32 0
  store %Qubit* %target, %Qubit** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3c45b07de5f646989fd7fbe3113e5a3d_ApplyWithCA__ctladj(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %6, i32 0, i32 0
  store %Qubit* %target, %Qubit** %7, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array*, %Qubit* }*
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 1
  store %Array* %controlRegister, %Array** %11, align 8
  store %Qubit* %target, %Qubit** %12, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Qubit* }*
  %16 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %15, i32 0, i32 0
  store %Qubit* %target, %Qubit** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %14, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__CZ__adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Canon__CZ__body(%Qubit* %control, %Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Canon__CZ__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* %control, %Qubit** %5, align 8
  %__controlQubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %3)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__1, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__CZ__ctladj(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit*, %Qubit* }*
  %5 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 1
  store %Qubit* %control, %Qubit** %5, align 8
  store %Qubit* %target, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Canon__CZ__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__HY__adj(%Qubit* %target) {
entry:
  call void @__quantum__qis__s__adj(%Qubit* %target)
  call void @__quantum__qis__h__body(%Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Canon__HY__ctl(%Array* %__controlQubits__, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__s__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__HY__ctladj(%Array* %__controlQubits__, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__s__ctladj(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rng) {
entry:
  %0 = extractvalue %Range %rng, 0
  %1 = extractvalue %Range %rng, 1
  %2 = extractvalue %Range %rng, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %3 = icmp sgt i64 %1, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %0, %preheader__1 ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %idx, %2
  %5 = icmp sge i64 %idx, %2
  %6 = select i1 %3, i1 %4, i1 %5
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  ret i1 false

exiting__1:                                       ; No predecessors!
  %7 = add i64 %idx, %1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret i1 true
}

define internal void @Lifted__PartialApplication__26__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %4 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4, align 8
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 2
  store { i64, %Callable* }* %2, { i64, %Callable* }** %10, align 8
  store { %Array* }* %5, { %Array* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %4 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4, align 8
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 2
  store { i64, %Callable* }* %2, { i64, %Callable* }** %10, align 8
  store { %Array* }* %5, { %Array* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %9 = load { %Array* }*, { %Array* }** %8, align 8
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %14 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 2
  store { i64, %Callable* }* %7, { i64, %Callable* }** %14, align 8
  store { %Array* }* %9, { %Array* }** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, { { i64, %Callable* }*, { %Array* }*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %9 = load { %Array* }*, { %Array* }** %8, align 8
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %14 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 2
  store { i64, %Callable* }* %7, { i64, %Callable* }** %14, align 8
  store { %Array* }* %9, { %Array* }** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, { { i64, %Callable* }*, { %Array* }*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load { %Array* }*, { %Array* }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__body({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load { %Array* }*, { %Array* }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__adj({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__ctl(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__ctladj(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__12__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %4, i32 0, i32 1
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__12__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %4, i32 0, i32 1
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__body({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %1 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = trunc i64 %nIndex to i32
  %6 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %5)
  %nStates = fptosi double %6 to i64
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %nUnitaries = load i64, i64* %7, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %8 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %nStates, i64 %nUnitaries)
  %9 = sub i64 %8, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxOp = phi i64 [ 0, %entry ], [ %24, %exiting__1 ]
  %10 = icmp sle i64 %idxOp, %9
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i64 }*
  %13 = getelementptr inbounds { i64 }, { i64 }* %12, i32 0, i32 0
  store i64 %idxOp, i64* %13, align 4
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %11, %Tuple* %14)
  %15 = bitcast %Tuple* %14 to { %Callable* }*
  %16 = getelementptr inbounds { %Callable* }, { %Callable* }* %15, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @Microsoft__Quantum__Canon___91404c39c82d4109956a843f5ebe997e_ControlledOnInt__body(i64 %idxOp, %Callable* %17)
  %19 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  store %Array* %19, %Array** %22, align 8
  store %Array* %target, %Array** %23, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %24 = add i64 %idxOp, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  %25 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__adj({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %__qsVar3__unitaryFunction__ = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  %1 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = trunc i64 %__qsVar0__nIndex__ to i32
  %6 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %5)
  %__qsVar1__nStates__ = fptosi double %6 to i64
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %7, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  %8 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %__qsVar1__nStates__, i64 %__qsVar2__nUnitaries__)
  %9 = sub i64 %8, 1
  %10 = sub i64 %9, 0
  %11 = sdiv i64 %10, 1
  %12 = mul i64 1, %11
  %13 = add i64 0, %12
  %14 = insertvalue %Range zeroinitializer, i64 %13, 0
  %15 = insertvalue %Range %14, i64 -1, 1
  %16 = insertvalue %Range %15, i64 0, 2
  %17 = extractvalue %Range %16, 0
  %18 = extractvalue %Range %16, 1
  %19 = extractvalue %Range %16, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %20 = icmp sgt i64 %18, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar4__idxOp__ = phi i64 [ %17, %preheader__1 ], [ %38, %exiting__1 ]
  %21 = icmp sle i64 %__qsVar4__idxOp__, %19
  %22 = icmp sge i64 %__qsVar4__idxOp__, %19
  %23 = select i1 %20, i1 %21, i1 %22
  br i1 %23, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64 }*
  %26 = getelementptr inbounds { i64 }, { i64 }* %25, i32 0, i32 0
  store i64 %__qsVar4__idxOp__, i64* %26, align 4
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__unitaryFunction__, %Tuple* %24, %Tuple* %27)
  %28 = bitcast %Tuple* %27 to { %Callable* }*
  %29 = getelementptr inbounds { %Callable* }, { %Callable* }* %28, i32 0, i32 0
  %30 = load %Callable*, %Callable** %29, align 8
  %31 = call %Callable* @Microsoft__Quantum__Canon___91404c39c82d4109956a843f5ebe997e_ControlledOnInt__body(i64 %__qsVar4__idxOp__, %Callable* %30)
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %31, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %32)
  %33 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { %Array*, %Array* }*
  %36 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 0
  %37 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 1
  store %Array* %33, %Array** %36, align 8
  store %Array* %target, %Array** %37, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %34, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %38 = add i64 %__qsVar4__idxOp__, %18
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  %39 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %3 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %index = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %9 = trunc i64 %nIndex to i32
  %10 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %9)
  %nStates = fptosi double %10 to i64
  %11 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %nUnitaries = load i64, i64* %11, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %12 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %nStates, i64 %nUnitaries)
  %13 = sub i64 %12, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxOp = phi i64 [ 0, %entry ], [ %33, %exiting__1 ]
  %14 = icmp sle i64 %idxOp, %13
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { i64 }*
  %17 = getelementptr inbounds { i64 }, { i64 }* %16, i32 0, i32 0
  store i64 %idxOp, i64* %17, align 4
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %15, %Tuple* %18)
  %19 = bitcast %Tuple* %18 to { %Callable* }*
  %20 = getelementptr inbounds { %Callable* }, { %Callable* }* %19, i32 0, i32 0
  %21 = load %Callable*, %Callable** %20, align 8
  %22 = call %Callable* @Microsoft__Quantum__Canon___91404c39c82d4109956a843f5ebe997e_ControlledOnInt__body(i64 %idxOp, %Callable* %21)
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %24 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Array*, %Array* }*
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %26, i32 0, i32 0
  %28 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %26, i32 0, i32 1
  store %Array* %24, %Array** %27, align 8
  store %Array* %target, %Array** %28, align 8
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { %Array*, { %Array*, %Array* }* }*
  %31 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %30, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %31, align 8
  store { %Array*, %Array* }* %26, { %Array*, %Array* }** %32, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %29, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %33 = add i64 %idxOp, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  %34 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___dae13232a52742a7a1f5472999176521_MultiplexOperationsBruteForceFromGenerator__ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %__qsVar3__unitaryFunction__ = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  %3 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %index = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %9 = trunc i64 %__qsVar0__nIndex__ to i32
  %10 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %9)
  %__qsVar1__nStates__ = fptosi double %10 to i64
  %11 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %11, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  %12 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %__qsVar1__nStates__, i64 %__qsVar2__nUnitaries__)
  %13 = sub i64 %12, 1
  %14 = sub i64 %13, 0
  %15 = sdiv i64 %14, 1
  %16 = mul i64 1, %15
  %17 = add i64 0, %16
  %18 = insertvalue %Range zeroinitializer, i64 %17, 0
  %19 = insertvalue %Range %18, i64 -1, 1
  %20 = insertvalue %Range %19, i64 0, 2
  %21 = extractvalue %Range %20, 0
  %22 = extractvalue %Range %20, 1
  %23 = extractvalue %Range %20, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %24 = icmp sgt i64 %22, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar4__idxOp__ = phi i64 [ %21, %preheader__1 ], [ %46, %exiting__1 ]
  %25 = icmp sle i64 %__qsVar4__idxOp__, %23
  %26 = icmp sge i64 %__qsVar4__idxOp__, %23
  %27 = select i1 %24, i1 %25, i1 %26
  br i1 %27, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64 }*
  %30 = getelementptr inbounds { i64 }, { i64 }* %29, i32 0, i32 0
  store i64 %__qsVar4__idxOp__, i64* %30, align 4
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__unitaryFunction__, %Tuple* %28, %Tuple* %31)
  %32 = bitcast %Tuple* %31 to { %Callable* }*
  %33 = getelementptr inbounds { %Callable* }, { %Callable* }* %32, i32 0, i32 0
  %34 = load %Callable*, %Callable** %33, align 8
  %35 = call %Callable* @Microsoft__Quantum__Canon___91404c39c82d4109956a843f5ebe997e_ControlledOnInt__body(i64 %__qsVar4__idxOp__, %Callable* %34)
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %37 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %38 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %39 = bitcast %Tuple* %38 to { %Array*, %Array* }*
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 0
  %41 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 1
  store %Array* %37, %Array** %40, align 8
  store %Array* %target, %Array** %41, align 8
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Array*, { %Array*, %Array* }* }*
  %44 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %43, i32 0, i32 0
  %45 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %43, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %44, align 8
  store { %Array*, %Array* }* %39, { %Array*, %Array* }** %45, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %42, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %38, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %46 = add i64 %__qsVar4__idxOp__, %22
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  %47 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon__MultiplexerFromGenerator__body(i64 %0, %Callable* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %unitaryGenerator = bitcast %Tuple* %2 to { i64, %Callable* }*
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %4 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store %Callable* %1, %Callable** %4, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { i64, %Callable* }* }* getelementptr ({ %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, { i64, %Callable* }* }*
  %8 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %7, i32 0, i32 1
  store %Callable* %5, %Callable** %8, align 8
  store { i64, %Callable* }* %unitaryGenerator, { i64, %Callable* }** %9, align 8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__27__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__13__FunctionTable, %Tuple* %6)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret %Callable* %10
}

define internal void @Lifted__PartialApplication__27__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %4 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4, align 8
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 2
  store { i64, %Callable* }* %2, { i64, %Callable* }** %10, align 8
  store { %Array* }* %5, { %Array* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %4 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4, align 8
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 2
  store { i64, %Callable* }* %2, { i64, %Callable* }** %10, align 8
  store { %Array* }* %5, { %Array* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %9 = load { %Array* }*, { %Array* }** %8, align 8
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %14 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 2
  store { i64, %Callable* }* %7, { i64, %Callable* }** %14, align 8
  store { %Array* }* %9, { %Array* }** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, { { i64, %Callable* }*, { %Array* }*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %9 = load { %Array* }*, { %Array* }** %8, align 8
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %14 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 2
  store { i64, %Callable* }* %7, { i64, %Callable* }** %14, align 8
  store { %Array* }* %9, { %Array* }** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, { { i64, %Callable* }*, { %Array* }*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load { %Array* }*, { %Array* }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__body({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load { %Array* }*, { %Array* }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__adj({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__ctl(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__ctladj(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__13__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %4, i32 0, i32 1
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__13__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %4, i32 0, i32 1
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__body({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %1 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %nUnitaries = load i64, i64* %5, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, %Callable* }* getelementptr ({ i64, i64, %Callable* }, { i64, i64, %Callable* }* null, i32 1) to i64))
  %unitaryGeneratorWithOffset = bitcast %Tuple* %6 to { i64, i64, %Callable* }*
  %7 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGeneratorWithOffset, i32 0, i32 0
  %8 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGeneratorWithOffset, i32 0, i32 1
  %9 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGeneratorWithOffset, i32 0, i32 2
  store i64 %nUnitaries, i64* %7, align 4
  store i64 0, i64* %8, align 4
  store %Callable* %unitaryFunction, %Callable** %9, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %10 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @22, i32 0, i32 0))
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__fail(%String* %12)
  unreachable

continue__1:                                      ; preds = %entry
  %13 = icmp sgt i64 %nUnitaries, 0
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %auxiliary = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____adj({ i64, i64, %Callable* }* %unitaryGeneratorWithOffset, %Array* %auxiliary, { %Array* }* %index, %Array* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__adj({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %__qsVar1__unitaryFunction__ = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  %1 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %__qsVar0__nUnitaries__ = load i64, i64* %5, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, %Callable* }* getelementptr ({ i64, i64, %Callable* }, { i64, i64, %Callable* }* null, i32 1) to i64))
  %__qsVar2__unitaryGeneratorWithOffset__ = bitcast %Tuple* %6 to { i64, i64, %Callable* }*
  %7 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar2__unitaryGeneratorWithOffset__, i32 0, i32 0
  %8 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar2__unitaryGeneratorWithOffset__, i32 0, i32 1
  %9 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar2__unitaryGeneratorWithOffset__, i32 0, i32 2
  store i64 %__qsVar0__nUnitaries__, i64* %7, align 4
  store i64 0, i64* %8, align 4
  store %Callable* %__qsVar1__unitaryFunction__, %Callable** %9, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %10 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @22, i32 0, i32 0))
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__fail(%String* %12)
  unreachable

continue__1:                                      ; preds = %entry
  %13 = icmp sgt i64 %__qsVar0__nUnitaries__, 0
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %__qsVar3__auxiliary__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar3__auxiliary__, i32 1)
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____body({ i64, i64, %Callable* }* %__qsVar2__unitaryGeneratorWithOffset__, %Array* %__qsVar3__auxiliary__, { %Array* }* %index, %Array* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar3__auxiliary__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar3__auxiliary__, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %3 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %index = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %nUnitaries = load i64, i64* %9, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, %Callable* }* getelementptr ({ i64, i64, %Callable* }, { i64, i64, %Callable* }* null, i32 1) to i64))
  %unitaryGeneratorWithOffset = bitcast %Tuple* %10 to { i64, i64, %Callable* }*
  %11 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGeneratorWithOffset, i32 0, i32 0
  %12 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGeneratorWithOffset, i32 0, i32 1
  %13 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGeneratorWithOffset, i32 0, i32 2
  store i64 %nUnitaries, i64* %11, align 4
  store i64 0, i64* %12, align 4
  store %Callable* %unitaryFunction, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @22, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__fail(%String* %16)
  unreachable

continue__1:                                      ; preds = %entry
  %17 = icmp sgt i64 %nUnitaries, 0
  br i1 %17, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %auxiliary = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* getelementptr ({ { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }*
  %20 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19, i32 0, i32 3
  store { i64, i64, %Callable* }* %unitaryGeneratorWithOffset, { i64, i64, %Callable* }** %20, align 8
  store %Array* %auxiliary, %Array** %21, align 8
  store { %Array* }* %index, { %Array* }** %22, align 8
  store %Array* %target, %Array** %23, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____ctladj(%Array* %__controlQubits__, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___4b6c2741135544ffade7e32677715e11_MultiplexOperationsFromGenerator__ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %__qsVar1__unitaryFunction__ = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  %3 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %index = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %__qsVar0__nUnitaries__ = load i64, i64* %9, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, %Callable* }* getelementptr ({ i64, i64, %Callable* }, { i64, i64, %Callable* }* null, i32 1) to i64))
  %__qsVar2__unitaryGeneratorWithOffset__ = bitcast %Tuple* %10 to { i64, i64, %Callable* }*
  %11 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar2__unitaryGeneratorWithOffset__, i32 0, i32 0
  %12 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar2__unitaryGeneratorWithOffset__, i32 0, i32 1
  %13 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar2__unitaryGeneratorWithOffset__, i32 0, i32 2
  store i64 %__qsVar0__nUnitaries__, i64* %11, align 4
  store i64 0, i64* %12, align 4
  store %Callable* %__qsVar1__unitaryFunction__, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @22, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__fail(%String* %16)
  unreachable

continue__1:                                      ; preds = %entry
  %17 = icmp sgt i64 %__qsVar0__nUnitaries__, 0
  br i1 %17, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %__qsVar3__auxiliary__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar3__auxiliary__, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar3__auxiliary__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* getelementptr ({ { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }*
  %20 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19, i32 0, i32 3
  store { i64, i64, %Callable* }* %__qsVar2__unitaryGeneratorWithOffset__, { i64, i64, %Callable* }** %20, align 8
  store %Array* %__qsVar3__auxiliary__, %Array** %21, align 8
  store { %Array* }* %index, { %Array* }** %22, align 8
  store %Array* %target, %Array** %23, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____ctl(%Array* %__controlQubits__, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %19)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar3__auxiliary__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar3__auxiliary__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar3__auxiliary__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll0__body(double %phase, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Callable*, %Callable* }*
  %4 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %3, i32 0, i32 1
  store %Callable* %0, %Callable** %4, align 8
  store %Callable* %1, %Callable** %5, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__28__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__14__FunctionTable, %Tuple* %2)
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__RAll1__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, double }*
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store double %phase, double* %11, align 8
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__29__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %8)
  call void @Microsoft__Quantum__Canon___b8eceb214cf14baa8c0de4f62e56342e_ApplyWithCA__body(%Callable* %6, %Callable* %12, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___b8eceb214cf14baa8c0de4f62e56342e_ApplyWithCA__body(%Callable* %outerOperation, %Callable* %innerOperation, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %1, i32 0, i32 0
  store %Array* %target, %Array** %2, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %0, %Tuple* null)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  store %Array* %target, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %innerOperation, %Tuple* %3, %Tuple* null)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array* }*
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %8, i32 0, i32 0
  store %Array* %target, %Array** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, %Array* }* %9, { %Callable*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, %Array* }* %9, { %Callable*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__body(%Callable* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__adj(%Callable* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, %Array* }*, { %Callable*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctl(%Array* %3, { %Callable*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, %Array* }*, { %Callable*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__ctladj(%Array* %3, { %Callable*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__14__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__14__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__29__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__29__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__29__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__29__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll1__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %1 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon__RAll1__body(double %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll1__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %1 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon__RAll1__adj(double %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll1__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon__RAll1__ctl(%Array* %3, { double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll1__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon__RAll1__ctladj(%Array* %3, { double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__15__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__15__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll1__body(double %phase, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call { %Qubit*, %Array* }* @Microsoft__Quantum__Arrays___775dd5af95874d5da5182ed798734ac2_HeadAndRest__body(%Array* %qubits)
  %1 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %0, i32 0, i32 0
  %flagQubit = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %0, i32 0, i32 1
  %systemRegister = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %systemRegister, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__R1__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  store %Callable* %3, %Callable** %6, align 8
  store double %phase, double* %7, align 8
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__36__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %4)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %systemRegister, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array*, %Qubit* }*
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 1
  store %Array* %systemRegister, %Array** %11, align 8
  store %Qubit* %flagQubit, %Qubit** %12, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %systemRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %systemRegister, i32 -1)
  %13 = bitcast { %Qubit*, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %systemRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll1__adj(double %phase, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call { %Qubit*, %Array* }* @Microsoft__Quantum__Arrays___775dd5af95874d5da5182ed798734ac2_HeadAndRest__body(%Array* %qubits)
  %1 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %0, i32 0, i32 0
  %__qsVar0__flagQubit__ = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %0, i32 0, i32 1
  %__qsVar1__systemRegister__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__systemRegister__, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__R1__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  store %Callable* %3, %Callable** %6, align 8
  store double %phase, double* %7, align 8
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__37__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %4)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__systemRegister__, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array*, %Qubit* }*
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 1
  store %Array* %__qsVar1__systemRegister__, %Array** %11, align 8
  store %Qubit* %__qsVar0__flagQubit__, %Qubit** %12, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__systemRegister__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__systemRegister__, i32 -1)
  %13 = bitcast { %Qubit*, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__systemRegister__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll1__ctl(%Array* %__controlQubits__, { double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 0
  %phase = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = call { %Qubit*, %Array* }* @Microsoft__Quantum__Arrays___775dd5af95874d5da5182ed798734ac2_HeadAndRest__body(%Array* %qubits)
  %4 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %3, i32 0, i32 0
  %flagQubit = load %Qubit*, %Qubit** %4, align 8
  %5 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %3, i32 0, i32 1
  %systemRegister = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %systemRegister, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__R1__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, double }*
  %9 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %8, i32 0, i32 1
  store %Callable* %6, %Callable** %9, align 8
  store double %phase, double* %10, align 8
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__38__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %systemRegister, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 1
  store %Array* %systemRegister, %Array** %14, align 8
  store %Qubit* %flagQubit, %Qubit** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %systemRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %systemRegister, i32 -1)
  %20 = bitcast { %Qubit*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %systemRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll1__ctladj(%Array* %__controlQubits__, { double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 0
  %phase = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = call { %Qubit*, %Array* }* @Microsoft__Quantum__Arrays___775dd5af95874d5da5182ed798734ac2_HeadAndRest__body(%Array* %qubits)
  %4 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__flagQubit__ = load %Qubit*, %Qubit** %4, align 8
  %5 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__systemRegister__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__systemRegister__, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__R1__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, double }*
  %9 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %8, i32 0, i32 1
  store %Callable* %6, %Callable** %9, align 8
  store double %phase, double* %10, align 8
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__39__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %11)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__systemRegister__, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 1
  store %Array* %__qsVar1__systemRegister__, %Array** %14, align 8
  store %Qubit* %__qsVar0__flagQubit__, %Qubit** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__systemRegister__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__systemRegister__, i32 -1)
  %20 = bitcast { %Qubit*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__systemRegister__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll0__adj(double %phase, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Callable*, %Callable* }*
  %4 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %3, i32 0, i32 1
  store %Callable* %0, %Callable** %4, align 8
  store %Callable* %1, %Callable** %5, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__30__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__14__FunctionTable, %Tuple* %2)
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__RAll1__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, double }*
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store double %phase, double* %11, align 8
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__31__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %8)
  call void @Microsoft__Quantum__Canon___b8eceb214cf14baa8c0de4f62e56342e_ApplyWithCA__adj(%Callable* %6, %Callable* %12, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___b8eceb214cf14baa8c0de4f62e56342e_ApplyWithCA__adj(%Callable* %outerOperation, %Callable* %innerOperation, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Array* }*
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %2, i32 0, i32 0
  store %Array* %target, %Array** %3, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %1, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %target, %Array** %7, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array* }*
  %11 = getelementptr inbounds { %Array* }, { %Array* }* %10, i32 0, i32 0
  store %Array* %target, %Array** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__30__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__30__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__30__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, %Array* }* %9, { %Callable*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__30__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, %Array* }* %9, { %Callable*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__31__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__31__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__31__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__31__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll0__ctl(%Array* %__controlQubits__, { double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 0
  %phase = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, %Callable* }*
  %7 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %6, i32 0, i32 1
  store %Callable* %3, %Callable** %7, align 8
  store %Callable* %4, %Callable** %8, align 8
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__32__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__14__FunctionTable, %Tuple* %5)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__RAll1__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double }*
  %13 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %12, i32 0, i32 1
  store %Callable* %10, %Callable** %13, align 8
  store double %phase, double* %14, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__33__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Array* }* getelementptr ({ %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, %Callable*, %Array* }*
  %18 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %17, i32 0, i32 2
  store %Callable* %9, %Callable** %18, align 8
  store %Callable* %15, %Callable** %19, align 8
  store %Array* %qubits, %Array** %20, align 8
  call void @Microsoft__Quantum__Canon___b8eceb214cf14baa8c0de4f62e56342e_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Array* }* %17)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___b8eceb214cf14baa8c0de4f62e56342e_ApplyWithCA__ctl(%Array* %controlRegister, { %Callable*, %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  store %Array* %target, %Array** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %4, %Tuple* null)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %controlRegister, %Array** %10, align 8
  store %Array* %target, %Array** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr inbounds { %Array* }, { %Array* }* %14, i32 0, i32 0
  store %Array* %target, %Array** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__32__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__32__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__32__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, %Array* }* %9, { %Callable*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__32__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, %Array* }* %9, { %Callable*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__33__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__33__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__33__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__33__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__RAll0__ctladj(%Array* %__controlQubits__, { double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 0
  %phase = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___45b59a51e4694638a6ed8a754a6e18f6_ApplyToEachCA__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, %Callable* }*
  %7 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %6, i32 0, i32 1
  store %Callable* %3, %Callable** %7, align 8
  store %Callable* %4, %Callable** %8, align 8
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__34__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__14__FunctionTable, %Tuple* %5)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__RAll1__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double }*
  %13 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %12, i32 0, i32 1
  store %Callable* %10, %Callable** %13, align 8
  store double %phase, double* %14, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__35__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Array* }* getelementptr ({ %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, %Callable*, %Array* }*
  %18 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %17, i32 0, i32 2
  store %Callable* %9, %Callable** %18, align 8
  store %Callable* %15, %Callable** %19, align 8
  store %Array* %qubits, %Array** %20, align 8
  call void @Microsoft__Quantum__Canon___b8eceb214cf14baa8c0de4f62e56342e_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Array* }* %17)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___b8eceb214cf14baa8c0de4f62e56342e_ApplyWithCA__ctladj(%Array* %controlRegister, { %Callable*, %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Array* }, { %Callable*, %Callable*, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %target, %Array** %7, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array*, %Array* }*
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 1
  store %Array* %controlRegister, %Array** %11, align 8
  store %Array* %target, %Array** %12, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  store %Array* %target, %Array** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %14, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__34__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__34__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__34__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, %Array* }* %9, { %Callable*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__34__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, %Array* }* }, { %Array*, { %Callable*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, %Array* }* %9, { %Callable*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__35__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__35__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__35__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__35__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal { %Qubit*, %Array* }* @Microsoft__Quantum__Arrays___775dd5af95874d5da5182ed798734ac2_HeadAndRest__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %array)
  %1 = call %Array* @Microsoft__Quantum__Arrays___8eccbbf2f2c44c66bcf118fa86e46f90_Rest__body(%Array* %array)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Array* }* getelementptr ({ %Qubit*, %Array* }, { %Qubit*, %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Qubit*, %Array* }*
  %4 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Qubit*, %Array* }, { %Qubit*, %Array* }* %3, i32 0, i32 1
  store %Qubit* %0, %Qubit** %4, align 8
  store %Array* %1, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret { %Qubit*, %Array* }* %3
}

define internal void @Lifted__PartialApplication__36__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %4 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %3, i32 0, i32 0
  %5 = load %Qubit*, %Qubit** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Qubit* %5, %Qubit** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__36__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %4 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %3, i32 0, i32 0
  %5 = load %Qubit*, %Qubit** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Qubit* %5, %Qubit** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__36__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Qubit* }*
  %10 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Qubit* %4, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Qubit* }* %9, { double, %Qubit* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__36__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Qubit* }*
  %10 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Qubit* %4, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Qubit* }* %9, { double, %Qubit* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Qubit* }*
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__R1__body(double %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Qubit* }*
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__R1__adj(double %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__R1__ctl(%Array* %3, { double, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__R1__ctladj(%Array* %3, { double, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__16__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__16__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__37__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %4 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %3, i32 0, i32 0
  %5 = load %Qubit*, %Qubit** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Qubit* %5, %Qubit** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__37__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %4 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %3, i32 0, i32 0
  %5 = load %Qubit*, %Qubit** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Qubit* %5, %Qubit** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__37__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Qubit* }*
  %10 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Qubit* %4, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Qubit* }* %9, { double, %Qubit* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__37__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Qubit* }*
  %10 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Qubit* %4, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Qubit* }* %9, { double, %Qubit* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__38__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %4 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %3, i32 0, i32 0
  %5 = load %Qubit*, %Qubit** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Qubit* %5, %Qubit** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__38__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %4 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %3, i32 0, i32 0
  %5 = load %Qubit*, %Qubit** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Qubit* %5, %Qubit** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__38__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Qubit* }*
  %10 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Qubit* %4, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Qubit* }* %9, { double, %Qubit* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__38__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Qubit* }*
  %10 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Qubit* %4, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Qubit* }* %9, { double, %Qubit* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__39__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %4 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %3, i32 0, i32 0
  %5 = load %Qubit*, %Qubit** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Qubit* %5, %Qubit** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__39__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %4 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %3, i32 0, i32 0
  %5 = load %Qubit*, %Qubit** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Qubit* %5, %Qubit** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__39__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Qubit* }*
  %10 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Qubit* %4, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Qubit* }* %9, { double, %Qubit* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__39__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Qubit* }*
  %10 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Qubit* %4, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Qubit* }* %9, { double, %Qubit* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____body({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, double, %Array* }*
  %7 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 2
  store i64 %idx, i64* %7, align 4
  store double %stepSize, double* %8, align 8
  store %Array* %target, %Array** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %5, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____adj({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = sub i64 %nSteps, 1
  %4 = sub i64 %3, 0
  %5 = sdiv i64 %4, 1
  %6 = mul i64 1, %5
  %7 = add i64 0, %6
  %8 = insertvalue %Range zeroinitializer, i64 %7, 0
  %9 = insertvalue %Range %8, i64 -1, 1
  %10 = insertvalue %Range %9, i64 0, 2
  %11 = extractvalue %Range %10, 0
  %12 = extractvalue %Range %10, 1
  %13 = extractvalue %Range %10, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %14 = icmp sgt i64 %12, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idx__ = phi i64 [ %11, %preheader__1 ], [ %24, %exiting__1 ]
  %15 = icmp sle i64 %__qsVar0__idx__, %13
  %16 = icmp sge i64 %__qsVar0__idx__, %13
  %17 = select i1 %14, i1 %15, i1 %16
  br i1 %17, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { i64, double, %Array* }*
  %21 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %20, i32 0, i32 1
  %23 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %20, i32 0, i32 2
  store i64 %__qsVar0__idx__, i64* %21, align 4
  store double %stepSize, double* %22, align 8
  store %Array* %target, %Array** %23, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %24 = add i64 %__qsVar0__idx__, %12
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %3, align 8
  %4 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 0
  %nSteps = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 1
  %op = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %7 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %8 = icmp sle i64 %idx, %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %9)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, double, %Array* }*
  %12 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %11, i32 0, i32 2
  store i64 %idx, i64* %12, align 4
  store double %stepSize, double* %13, align 8
  store %Array* %target, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { i64, double, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %16, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %17, align 8
  store { i64, double, %Array* }* %11, { i64, double, %Array* }** %18, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %15, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %3, align 8
  %4 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 0
  %nSteps = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 1
  %op = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %7 = sub i64 %nSteps, 1
  %8 = sub i64 %7, 0
  %9 = sdiv i64 %8, 1
  %10 = mul i64 1, %9
  %11 = add i64 0, %10
  %12 = insertvalue %Range zeroinitializer, i64 %11, 0
  %13 = insertvalue %Range %12, i64 -1, 1
  %14 = insertvalue %Range %13, i64 0, 2
  %15 = extractvalue %Range %14, 0
  %16 = extractvalue %Range %14, 1
  %17 = extractvalue %Range %14, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %18 = icmp sgt i64 %16, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idx__ = phi i64 [ %15, %preheader__1 ], [ %32, %exiting__1 ]
  %19 = icmp sle i64 %__qsVar0__idx__, %17
  %20 = icmp sge i64 %__qsVar0__idx__, %17
  %21 = select i1 %18, i1 %19, i1 %20
  br i1 %21, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %22)
  call void @__quantum__rt__callable_make_controlled(%Callable* %22)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { i64, double, %Array* }*
  %25 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %24, i32 0, i32 1
  %27 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %24, i32 0, i32 2
  store i64 %__qsVar0__idx__, i64* %25, align 4
  store double %stepSize, double* %26, align 8
  store %Array* %target, %Array** %27, align 8
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { %Array*, { i64, double, %Array* }* }*
  %30 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %29, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %30, align 8
  store { i64, double, %Array* }* %24, { i64, double, %Array* }** %31, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %28, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %32 = add i64 %__qsVar0__idx__, %16
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____adj({ i64, i64, %Callable* }* %unitaryGenerator, %Array* %auxiliary, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGenerator, i32 0, i32 2
  %__qsVar4__unitaryFunction__ = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  %1 = bitcast { i64, i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = trunc i64 %__qsVar0__nIndex__ to i32
  %6 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %5)
  %__qsVar1__nStates__ = fptosi double %6 to i64
  %7 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %7, align 4
  %8 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %__qsVar3__unitaryOffset__ = load i64, i64* %8, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  %9 = sdiv i64 %__qsVar1__nStates__, 2
  %__qsVar5__nUnitariesLeft__ = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %__qsVar2__nUnitaries__, i64 %9)
  %__qsVar6__nUnitariesRight__ = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %__qsVar2__nUnitaries__, i64 %__qsVar1__nStates__)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, %Callable* }* getelementptr ({ i64, i64, %Callable* }, { i64, i64, %Callable* }* null, i32 1) to i64))
  %__qsVar7__leftUnitaries__ = bitcast %Tuple* %10 to { i64, i64, %Callable* }*
  %11 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar7__leftUnitaries__, i32 0, i32 0
  %12 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar7__leftUnitaries__, i32 0, i32 1
  %13 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar7__leftUnitaries__, i32 0, i32 2
  store i64 %__qsVar5__nUnitariesLeft__, i64* %11, align 4
  store i64 %__qsVar3__unitaryOffset__, i64* %12, align 4
  store %Callable* %__qsVar4__unitaryFunction__, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %14 = sub i64 %__qsVar6__nUnitariesRight__, %__qsVar5__nUnitariesLeft__
  %15 = add i64 %__qsVar3__unitaryOffset__, %__qsVar5__nUnitariesLeft__
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, %Callable* }* getelementptr ({ i64, i64, %Callable* }, { i64, i64, %Callable* }* null, i32 1) to i64))
  %__qsVar8__rightUnitaries__ = bitcast %Tuple* %16 to { i64, i64, %Callable* }*
  %17 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar8__rightUnitaries__, i32 0, i32 0
  %18 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar8__rightUnitaries__, i32 0, i32 1
  %19 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %__qsVar8__rightUnitaries__, i32 0, i32 2
  store i64 %14, i64* %17, align 4
  store i64 %15, i64* %18, align 4
  store %Callable* %__qsVar4__unitaryFunction__, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %20 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %3)
  %__qsVar9__newControls__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %20)
  %21 = getelementptr inbounds { %Array* }, { %Array* }* %__qsVar9__newControls__, i32 0, i32 0
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 1)
  %23 = bitcast { %Array* }* %__qsVar9__newControls__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 1)
  %24 = icmp sgt i64 %__qsVar2__nUnitaries__, 0
  br i1 %24, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %auxiliary)
  %26 = icmp eq i64 %25, 1
  br i1 %26, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %then0__1
  %27 = icmp eq i64 %__qsVar0__nIndex__, 0
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %then0__1
  %28 = phi i1 [ %27, %condTrue__1 ], [ %26, %then0__1 ]
  br i1 %28, label %then0__2, label %test1__1

then0__2:                                         ; preds = %condContinue__1
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64 }*
  %31 = getelementptr inbounds { i64 }, { i64 }* %30, i32 0, i32 0
  store i64 %__qsVar3__unitaryOffset__, i64* %31, align 4
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar4__unitaryFunction__, %Tuple* %29, %Tuple* %32)
  %33 = bitcast %Tuple* %32 to { %Callable* }*
  %34 = getelementptr inbounds { %Callable* }, { %Callable* }* %33, i32 0, i32 0
  %35 = load %Callable*, %Callable** %34, align 8
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { %Array*, %Array* }*
  %39 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 1
  store %Array* %auxiliary, %Array** %39, align 8
  store %Array* %target, %Array** %40, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  br label %continue__2

test1__1:                                         ; preds = %condContinue__1
  %41 = call i64 @__quantum__rt__array_get_size_1d(%Array* %auxiliary)
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %test1__1
  %43 = icmp sge i64 %__qsVar0__nIndex__, 1
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %test1__1
  %44 = phi i1 [ %43, %condTrue__2 ], [ %42, %test1__1 ]
  br i1 %44, label %then1__1, label %else__1

then1__1:                                         ; preds = %condContinue__2
  %__qsVar10__newauxiliary__ = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %3)
  call void @__quantum__qis__x__body(%Qubit* %__qsVar10__newauxiliary__)
  %45 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 0)
  %47 = bitcast i8* %46 to %Qubit**
  store %Qubit* %__qsVar10__newauxiliary__, %Qubit** %47, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____adj({ i64, i64, %Callable* }* %__qsVar7__leftUnitaries__, %Array* %45, { %Array* }* %__qsVar9__newControls__, %Array* %target)
  call void @__quantum__qis__x__body(%Qubit* %__qsVar10__newauxiliary__)
  %48 = icmp sgt i64 %__qsVar6__nUnitariesRight__, 0
  br i1 %48, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then1__1
  %49 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 0)
  %51 = bitcast i8* %50 to %Qubit**
  store %Qubit* %__qsVar10__newauxiliary__, %Qubit** %51, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____adj({ i64, i64, %Callable* }* %__qsVar8__rightUnitaries__, %Array* %49, { %Array* }* %__qsVar9__newControls__, %Array* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then1__1
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %condContinue__2
  %52 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %3)
  %53 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 0)
  %55 = bitcast i8* %54 to %Qubit**
  store %Qubit* %52, %Qubit** %55, align 8
  %__qsVar11__controls__ = call %Array* @__quantum__rt__array_concatenate(%Array* %53, %Array* %auxiliary)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__controls__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__controls__, i32 1)
  %__qsVar12__newauxiliary__ = call %Qubit* @__quantum__rt__qubit_allocate()
  %56 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar11__controls__)
  %57 = sub i64 %56, 2
  %58 = call i64 @Microsoft__Quantum__Math__MaxI__body(i64 0, i64 %57)
  %__qsVar13__andauxiliary__ = call %Array* @__quantum__rt__qubit_allocate_array(i64 %58)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar13__andauxiliary__, i32 1)
  call void @Microsoft__Quantum__Canon____QsRef3__ApplyAndChain____body(%Array* %__qsVar13__andauxiliary__, %Array* %__qsVar11__controls__, %Qubit* %__qsVar12__newauxiliary__)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %auxiliary, %Qubit* %__qsVar12__newauxiliary__)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  %59 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 0)
  %61 = bitcast i8* %60 to %Qubit**
  store %Qubit* %__qsVar12__newauxiliary__, %Qubit** %61, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____adj({ i64, i64, %Callable* }* %__qsVar7__leftUnitaries__, %Array* %59, { %Array* }* %__qsVar9__newControls__, %Array* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %auxiliary, %Qubit* %__qsVar12__newauxiliary__)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  %62 = icmp sgt i64 %__qsVar6__nUnitariesRight__, 0
  br i1 %62, label %then0__4, label %continue__4

then0__4:                                         ; preds = %else__1
  %63 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 0)
  %65 = bitcast i8* %64 to %Qubit**
  store %Qubit* %__qsVar12__newauxiliary__, %Qubit** %65, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____adj({ i64, i64, %Callable* }* %__qsVar8__rightUnitaries__, %Array* %63, { %Array* }* %__qsVar9__newControls__, %Array* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %63, i32 -1)
  br label %continue__4

continue__4:                                      ; preds = %then0__4, %else__1
  call void @Microsoft__Quantum__Canon____QsRef3__ApplyAndChain____adj(%Array* %__qsVar13__andauxiliary__, %Array* %__qsVar11__controls__, %Qubit* %__qsVar12__newauxiliary__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar13__andauxiliary__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %__qsVar13__andauxiliary__)
  call void @__quantum__rt__qubit_release(%Qubit* %__qsVar12__newauxiliary__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__controls__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__controls__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__controls__, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %continue__4, %continue__3, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %entry
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar4__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____body({ i64, i64, %Callable* }* %unitaryGenerator, %Array* %auxiliary, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGenerator, i32 0, i32 2
  %unitaryFunction = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %1 = bitcast { i64, i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = trunc i64 %nIndex to i32
  %6 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %5)
  %nStates = fptosi double %6 to i64
  %7 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %nUnitaries = load i64, i64* %7, align 4
  %8 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %unitaryOffset = load i64, i64* %8, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %9 = sdiv i64 %nStates, 2
  %nUnitariesLeft = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %nUnitaries, i64 %9)
  %nUnitariesRight = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %nUnitaries, i64 %nStates)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, %Callable* }* getelementptr ({ i64, i64, %Callable* }, { i64, i64, %Callable* }* null, i32 1) to i64))
  %leftUnitaries = bitcast %Tuple* %10 to { i64, i64, %Callable* }*
  %11 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %leftUnitaries, i32 0, i32 0
  %12 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %leftUnitaries, i32 0, i32 1
  %13 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %leftUnitaries, i32 0, i32 2
  store i64 %nUnitariesLeft, i64* %11, align 4
  store i64 %unitaryOffset, i64* %12, align 4
  store %Callable* %unitaryFunction, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %14 = sub i64 %nUnitariesRight, %nUnitariesLeft
  %15 = add i64 %unitaryOffset, %nUnitariesLeft
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, %Callable* }* getelementptr ({ i64, i64, %Callable* }, { i64, i64, %Callable* }* null, i32 1) to i64))
  %rightUnitaries = bitcast %Tuple* %16 to { i64, i64, %Callable* }*
  %17 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %rightUnitaries, i32 0, i32 0
  %18 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %rightUnitaries, i32 0, i32 1
  %19 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %rightUnitaries, i32 0, i32 2
  store i64 %14, i64* %17, align 4
  store i64 %15, i64* %18, align 4
  store %Callable* %unitaryFunction, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %20 = call %Array* @Microsoft__Quantum__Arrays___11e60deb067d435786055b3275e916c8_Most__body(%Array* %3)
  %newControls = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %20)
  %21 = getelementptr inbounds { %Array* }, { %Array* }* %newControls, i32 0, i32 0
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 1)
  %23 = bitcast { %Array* }* %newControls to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 1)
  %24 = icmp sgt i64 %nUnitaries, 0
  br i1 %24, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %auxiliary)
  %26 = icmp eq i64 %25, 1
  br i1 %26, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %then0__1
  %27 = icmp eq i64 %nIndex, 0
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %then0__1
  %28 = phi i1 [ %27, %condTrue__1 ], [ %26, %then0__1 ]
  br i1 %28, label %then0__2, label %test1__1

then0__2:                                         ; preds = %condContinue__1
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64 }*
  %31 = getelementptr inbounds { i64 }, { i64 }* %30, i32 0, i32 0
  store i64 %unitaryOffset, i64* %31, align 4
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %29, %Tuple* %32)
  %33 = bitcast %Tuple* %32 to { %Callable* }*
  %34 = getelementptr inbounds { %Callable* }, { %Callable* }* %33, i32 0, i32 0
  %35 = load %Callable*, %Callable** %34, align 8
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { %Array*, %Array* }*
  %39 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 1
  store %Array* %auxiliary, %Array** %39, align 8
  store %Array* %target, %Array** %40, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  br label %continue__2

test1__1:                                         ; preds = %condContinue__1
  %41 = call i64 @__quantum__rt__array_get_size_1d(%Array* %auxiliary)
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %test1__1
  %43 = icmp sge i64 %nIndex, 1
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %test1__1
  %44 = phi i1 [ %43, %condTrue__2 ], [ %42, %test1__1 ]
  br i1 %44, label %then1__1, label %else__1

then1__1:                                         ; preds = %condContinue__2
  %newauxiliary = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %3)
  %45 = icmp sgt i64 %nUnitariesRight, 0
  br i1 %45, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then1__1
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to %Qubit**
  store %Qubit* %newauxiliary, %Qubit** %48, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____body({ i64, i64, %Callable* }* %rightUnitaries, %Array* %46, { %Array* }* %newControls, %Array* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then1__1
  call void @__quantum__qis__x__body(%Qubit* %newauxiliary)
  %49 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 0)
  %51 = bitcast i8* %50 to %Qubit**
  store %Qubit* %newauxiliary, %Qubit** %51, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____body({ i64, i64, %Callable* }* %leftUnitaries, %Array* %49, { %Array* }* %newControls, %Array* %target)
  call void @__quantum__qis__x__body(%Qubit* %newauxiliary)
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %condContinue__2
  %52 = call %Qubit* @Microsoft__Quantum__Arrays___9d7834b9a7ce4d8cb1a6bd58bdfd2736_Tail__body(%Array* %3)
  %53 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 0)
  %55 = bitcast i8* %54 to %Qubit**
  store %Qubit* %52, %Qubit** %55, align 8
  %controls = call %Array* @__quantum__rt__array_concatenate(%Array* %53, %Array* %auxiliary)
  call void @__quantum__rt__array_update_reference_count(%Array* %controls, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %newauxiliary__1 = call %Qubit* @__quantum__rt__qubit_allocate()
  %56 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %57 = sub i64 %56, 2
  %58 = call i64 @Microsoft__Quantum__Math__MaxI__body(i64 0, i64 %57)
  %andauxiliary = call %Array* @__quantum__rt__qubit_allocate_array(i64 %58)
  call void @__quantum__rt__array_update_alias_count(%Array* %andauxiliary, i32 1)
  call void @Microsoft__Quantum__Canon____QsRef3__ApplyAndChain____body(%Array* %andauxiliary, %Array* %controls, %Qubit* %newauxiliary__1)
  %59 = icmp sgt i64 %nUnitariesRight, 0
  br i1 %59, label %then0__4, label %continue__4

then0__4:                                         ; preds = %else__1
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to %Qubit**
  store %Qubit* %newauxiliary__1, %Qubit** %62, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____body({ i64, i64, %Callable* }* %rightUnitaries, %Array* %60, { %Array* }* %newControls, %Array* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  br label %continue__4

continue__4:                                      ; preds = %then0__4, %else__1
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %auxiliary, %Qubit* %newauxiliary__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  %63 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 0)
  %65 = bitcast i8* %64 to %Qubit**
  store %Qubit* %newauxiliary__1, %Qubit** %65, align 8
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____body({ i64, i64, %Callable* }* %leftUnitaries, %Array* %63, { %Array* }* %newControls, %Array* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %auxiliary, %Qubit* %newauxiliary__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @Microsoft__Quantum__Canon____QsRef3__ApplyAndChain____adj(%Array* %andauxiliary, %Array* %controls, %Qubit* %newauxiliary__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %andauxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %63, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %andauxiliary)
  call void @__quantum__rt__qubit_release(%Qubit* %newauxiliary__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controls, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controls, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %continue__4, %continue__3, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %entry
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____ctladj(%Array* %controlRegister, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %unitaryGenerator = load { i64, i64, %Callable* }*, { i64, i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGenerator, i32 0, i32 2
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { i64, i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %auxiliary = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  %6 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %index = load { %Array* }*, { %Array* }** %6, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0, i32 0, i32 3
  %target = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %11 = call %Array* @__quantum__rt__array_concatenate(%Array* %auxiliary, %Array* %controlRegister)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 1)
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____adj({ i64, i64, %Callable* }* %unitaryGenerator, %Array* %11, { %Array* }* %index, %Array* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____ctl(%Array* %controlRegister, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %unitaryGenerator = load { i64, i64, %Callable* }*, { i64, i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, i64, %Callable* }, { i64, i64, %Callable* }* %unitaryGenerator, i32 0, i32 2
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { i64, i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %auxiliary = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  %6 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %index = load { %Array* }*, { %Array* }** %6, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }, { { i64, i64, %Callable* }*, %Array*, { %Array* }*, %Array* }* %0, i32 0, i32 3
  %target = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %11 = call %Array* @__quantum__rt__array_concatenate(%Array* %auxiliary, %Array* %controlRegister)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 1)
  call void @Microsoft__Quantum__Canon___c676ff1e4c9940fe9ce03435c793589a___QsRef3__MultiplexOperationsFromGeneratorImpl____body({ i64, i64, %Callable* }* %unitaryGenerator, %Array* %11, { %Array* }* %index, %Array* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__40__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 1
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 3
  store i64 %2, i64* %12, align 4
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__40__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 1
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 3
  store i64 %2, i64* %12, align 4
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__40__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 3
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Qubit* %13, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* getelementptr ({ %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { i64, %Callable*, %Array*, %Qubit* }* %15, { i64, %Callable*, %Array*, %Qubit* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__40__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 3
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Qubit* %13, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* getelementptr ({ %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { i64, %Callable*, %Array*, %Qubit* }* %15, { i64, %Callable*, %Array*, %Qubit* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__body(i64 %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__adj(i64 %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Callable*, %Array*, %Qubit* }*, { i64, %Callable*, %Array*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__ctl(%Array* %3, { i64, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Callable*, %Array*, %Qubit* }*, { i64, %Callable*, %Array*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__ctladj(%Array* %3, { i64, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__17__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__17__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__body(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___2ded2a97dfe54a5aa67d18473d4668cb_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array*, %Qubit* }*
  %4 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %3, i32 0, i32 1
  store %Array* %controlRegister, %Array** %4, align 8
  store %Qubit* %targetRegister, %Qubit** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__adj(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___2ded2a97dfe54a5aa67d18473d4668cb_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %2 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %2)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, %Qubit* }*
  %5 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  store %Array* %controlRegister, %Array** %5, align 8
  store %Qubit* %targetRegister, %Qubit** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__ctl(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %numberState = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___2ded2a97dfe54a5aa67d18473d4668cb_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Qubit* }*
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 1
  store %Array* %controlRegister, %Array** %10, align 8
  store %Qubit* %targetRegister, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %14, align 8
  store { %Array*, %Qubit* }* %9, { %Array*, %Qubit* }** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6234a07443684162b5952eda90654bb6_ApplyControlledOnInt__ctladj(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %numberState = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___2ded2a97dfe54a5aa67d18473d4668cb_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Qubit* }*
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 1
  store %Array* %controlRegister, %Array** %10, align 8
  store %Qubit* %targetRegister, %Qubit** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %13, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %14, align 8
  store { %Array*, %Qubit* }* %9, { %Array*, %Qubit* }** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___91404c39c82d4109956a843f5ebe997e_ControlledOnInt__body(i64 %numberState, %Callable* %oracle) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, i64, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %2, i32 0, i32 2
  store %Callable* %0, %Callable** %3, align 8
  store i64 %numberState, i64* %4, align 4
  store %Callable* %oracle, %Callable** %5, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__41__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__18__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  ret %Callable* %6
}

define internal void @Lifted__PartialApplication__41__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Array* }*
  %12 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 3
  store i64 %2, i64* %12, align 4
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__41__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Array* }*
  %12 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 3
  store i64 %2, i64* %12, align 4
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__41__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Array* }*
  %16 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 3
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { i64, %Callable*, %Array*, %Array* }* %15, { i64, %Callable*, %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__41__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Array* }*
  %16 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 3
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { i64, %Callable*, %Array*, %Array* }* %15, { i64, %Callable*, %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__body(i64 %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__adj(i64 %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Callable*, %Array*, %Array* }*, { i64, %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__ctl(%Array* %3, { i64, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Callable*, %Array*, %Array* }*, { i64, %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__ctladj(%Array* %3, { i64, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__18__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__18__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__body(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___c51e836cb2f9442f98db95ade07495ac_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array*, %Array* }*
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  store %Array* %controlRegister, %Array** %4, align 8
  store %Array* %targetRegister, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__adj(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___c51e836cb2f9442f98db95ade07495ac_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %2 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %2)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, %Array* }*
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  store %Array* %controlRegister, %Array** %5, align 8
  store %Array* %targetRegister, %Array** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__ctl(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %numberState = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %targetRegister = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___c51e836cb2f9442f98db95ade07495ac_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %controlRegister, %Array** %10, align 8
  store %Array* %targetRegister, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f7b44f7729b14fef9eb4e6dc89a14654_ApplyControlledOnInt__ctladj(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %numberState = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %targetRegister = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___c51e836cb2f9442f98db95ade07495ac_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %controlRegister, %Array** %10, align 8
  store %Array* %targetRegister, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____body(%Array* %operations, %Array* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %8 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %9 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %9)
  %12 = bitcast i8* %11 to %Callable**
  %op = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr inbounds { %Array* }, { %Array* }* %14, i32 0, i32 0
  store %Array* %target, %Array** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %9, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %17 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %18 = phi i64 [ 0, %exit__2 ], [ %23, %exiting__3 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %18)
  %21 = bitcast i8* %20 to %Callable**
  %22 = load %Callable*, %Callable** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %22, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %23 = add i64 %18, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____adj(%Array* %operations, %Array* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %8 = sub i64 %0, 1
  %9 = insertvalue %Range zeroinitializer, i64 %8, 0
  %10 = insertvalue %Range %9, i64 -1, 1
  %11 = insertvalue %Range %10, i64 0, 2
  %12 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %11, i1 true)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %12)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %23, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %15)
  %18 = bitcast i8* %17 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %18, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array* }*
  %22 = getelementptr inbounds { %Array* }, { %Array* }* %21, i32 0, i32 0
  store %Array* %target, %Array** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %23 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %24 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %25 = phi i64 [ 0, %exit__2 ], [ %30, %exiting__3 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %25)
  %28 = bitcast i8* %27 to %Callable**
  %29 = load %Callable*, %Callable** %28, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %29, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %25, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %operations = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %11 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %12)
  %15 = bitcast i8* %14 to %Callable**
  %op = load %Callable*, %Callable** %15, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %16 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %16)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, %Array* }*
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %18, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %19, align 8
  store %Array* %target, %Array** %20, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %16, %Tuple* %17, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %22 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %23)
  %26 = bitcast i8* %25 to %Callable**
  %27 = load %Callable*, %Callable** %26, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %27, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %operations = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %11 = sub i64 %2, 1
  %12 = insertvalue %Range zeroinitializer, i64 %11, 0
  %13 = insertvalue %Range %12, i64 -1, 1
  %14 = insertvalue %Range %13, i64 0, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %14, i1 true)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %15)
  %17 = sub i64 %16, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %18 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %18)
  %21 = bitcast i8* %20 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %22)
  call void @__quantum__rt__callable_make_controlled(%Callable* %22)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, %Array* }*
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %25, align 8
  store %Array* %target, %Array** %26, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %23, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %18, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %34, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %29)
  %32 = bitcast i8* %31 to %Callable**
  %33 = load %Callable*, %Callable** %32, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %33, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %34 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___2ded2a97dfe54a5aa67d18473d4668cb_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Callable* }* getelementptr ({ %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, %Array*, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %2, i32 0, i32 2
  store %Callable* %0, %Callable** %3, align 8
  store %Array* %bits, %Array** %4, align 8
  store %Callable* %oracle, %Callable** %5, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__43__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__20__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  ret %Callable* %6
}

define internal %Callable* @Microsoft__Quantum__Canon___c51e836cb2f9442f98db95ade07495ac_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Callable* }* getelementptr ({ %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, %Array*, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %2, i32 0, i32 2
  store %Callable* %0, %Callable** %3, align 8
  store %Array* %bits, %Array** %4, align 8
  store %Callable* %oracle, %Callable** %5, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__44__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__21__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  ret %Callable* %6
}

define internal %Callable* @Microsoft__Quantum__Canon___6a714b914d4d48de8a4ad7810cc0d5d1_CurriedOpCA__body(%Callable* %op) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___6d6f9db43d6b47c4a0fad10624f517d9___QsRef3__WithFirstInputAppliedCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %2, i32 0, i32 1
  store %Callable* %0, %Callable** %3, align 8
  store %Callable* %op, %Callable** %4, align 8
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__42__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__19__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret %Callable* %5
}

define internal void @Lifted__PartialApplication__42__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, %Array* }*
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %7, i32 0, i32 1
  store %Callable* %2, %Callable** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___6d6f9db43d6b47c4a0fad10624f517d9___QsRef3__WithFirstInputAppliedCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Callable* @Microsoft__Quantum__Canon___6d6f9db43d6b47c4a0fad10624f517d9___QsRef3__WithFirstInputAppliedCA____body(%Callable* %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  store %Callable* %5, %Callable** %7, align 8
  ret void
}

define internal void @MemoryManagement__19__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__19__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___6d6f9db43d6b47c4a0fad10624f517d9___QsRef3__WithFirstInputAppliedCA____body(%Callable* %op, %Array* %arg1) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %arg1, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %arg1, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array* }*
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i32 0, i32 1
  store %Callable* %op, %Callable** %2, align 8
  store %Array* %arg1, %Array** %3, align 8
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__45__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__22__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %arg1, i32 -1)
  ret %Callable* %4
}

define internal void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____body({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, double, %Array* }*
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %7, i32 0, i32 1
  %10 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %7, i32 0, i32 2
  store i64 %idx, i64* %8, align 4
  store double %5, double* %9, align 8
  store %Array* %target, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %6, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %12 = sub i64 %nSteps, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idx__1 = phi i64 [ %12, %preheader__1 ], [ %22, %exiting__2 ]
  %13 = icmp sle i64 %idx__1, 0
  %14 = icmp sge i64 %idx__1, 0
  %15 = select i1 false, i1 %13, i1 %14
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { i64, double, %Array* }*
  %19 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %18, i32 0, i32 1
  %21 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %18, i32 0, i32 2
  store i64 %idx__1, i64* %19, align 4
  store double %16, double* %20, align 8
  store %Array* %target, %Array** %21, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %17, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %idx__1, -1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____adj({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = sub i64 %nSteps, 1
  %4 = sub i64 0, %3
  %5 = sdiv i64 %4, -1
  %6 = mul i64 -1, %5
  %7 = add i64 %3, %6
  %8 = insertvalue %Range zeroinitializer, i64 %7, 0
  %9 = insertvalue %Range %8, i64 1, 1
  %10 = insertvalue %Range %9, i64 %3, 2
  %11 = extractvalue %Range %10, 0
  %12 = extractvalue %Range %10, 1
  %13 = extractvalue %Range %10, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %14 = icmp sgt i64 %12, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idx__ = phi i64 [ %11, %preheader__1 ], [ %25, %exiting__1 ]
  %15 = icmp sle i64 %__qsVar1__idx__, %13
  %16 = icmp sge i64 %__qsVar1__idx__, %13
  %17 = select i1 %14, i1 %15, i1 %16
  br i1 %17, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  %19 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, double, %Array* }*
  %22 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 2
  store i64 %__qsVar1__idx__, i64* %22, align 4
  store double %19, double* %23, align 8
  store %Array* %target, %Array** %24, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %25 = add i64 %__qsVar1__idx__, %12
  br label %header__1

exit__1:                                          ; preds = %header__1
  %26 = sub i64 %nSteps, 1
  %27 = sub i64 %26, 0
  %28 = sdiv i64 %27, 1
  %29 = mul i64 1, %28
  %30 = add i64 0, %29
  %31 = insertvalue %Range zeroinitializer, i64 %30, 0
  %32 = insertvalue %Range %31, i64 -1, 1
  %33 = insertvalue %Range %32, i64 0, 2
  %34 = extractvalue %Range %33, 0
  %35 = extractvalue %Range %33, 1
  %36 = extractvalue %Range %33, 2
  br label %preheader__2

preheader__2:                                     ; preds = %exit__1
  %37 = icmp sgt i64 %35, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__2
  %__qsVar0__idx__ = phi i64 [ %34, %preheader__2 ], [ %48, %exiting__2 ]
  %38 = icmp sle i64 %__qsVar0__idx__, %36
  %39 = icmp sge i64 %__qsVar0__idx__, %36
  %40 = select i1 %37, i1 %38, i1 %39
  br i1 %40, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %41 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %41, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %41)
  %42 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %43 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %44 = bitcast %Tuple* %43 to { i64, double, %Array* }*
  %45 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %44, i32 0, i32 0
  %46 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %44, i32 0, i32 1
  %47 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %44, i32 0, i32 2
  store i64 %__qsVar0__idx__, i64* %45, align 4
  store double %42, double* %46, align 8
  store %Array* %target, %Array** %47, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %41, %Tuple* %43, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %48 = add i64 %__qsVar0__idx__, %35
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %3, align 8
  %4 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 0
  %nSteps = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 1
  %op = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %7 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %8 = icmp sle i64 %idx, %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %9)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %10 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i64, double, %Array* }*
  %13 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %12, i32 0, i32 2
  store i64 %idx, i64* %13, align 4
  store double %10, double* %14, align 8
  store %Array* %target, %Array** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { i64, double, %Array* }* }*
  %18 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %17, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { i64, double, %Array* }* %12, { i64, double, %Array* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %21 = sub i64 %nSteps, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idx__1 = phi i64 [ %21, %preheader__1 ], [ %36, %exiting__2 ]
  %22 = icmp sle i64 %idx__1, 0
  %23 = icmp sge i64 %idx__1, 0
  %24 = select i1 false, i1 %22, i1 %23
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %25)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %26 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { i64, double, %Array* }*
  %29 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %28, i32 0, i32 1
  %31 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %28, i32 0, i32 2
  store i64 %idx__1, i64* %29, align 4
  store double %26, double* %30, align 8
  store %Array* %target, %Array** %31, align 8
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { %Array*, { i64, double, %Array* }* }*
  %34 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %33, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %34, align 8
  store { i64, double, %Array* }* %28, { i64, double, %Array* }** %35, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %25, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %idx__1, -1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %3, align 8
  %4 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 0
  %nSteps = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 1
  %op = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %7 = sub i64 %nSteps, 1
  %8 = sub i64 0, %7
  %9 = sdiv i64 %8, -1
  %10 = mul i64 -1, %9
  %11 = add i64 %7, %10
  %12 = insertvalue %Range zeroinitializer, i64 %11, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 %7, 2
  %15 = extractvalue %Range %14, 0
  %16 = extractvalue %Range %14, 1
  %17 = extractvalue %Range %14, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %18 = icmp sgt i64 %16, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idx__ = phi i64 [ %15, %preheader__1 ], [ %33, %exiting__1 ]
  %19 = icmp sle i64 %__qsVar1__idx__, %17
  %20 = icmp sge i64 %__qsVar1__idx__, %17
  %21 = select i1 %18, i1 %19, i1 %20
  br i1 %21, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %22)
  call void @__quantum__rt__callable_make_controlled(%Callable* %22)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %23 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, double, %Array* }*
  %26 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %25, i32 0, i32 2
  store i64 %__qsVar1__idx__, i64* %26, align 4
  store double %23, double* %27, align 8
  store %Array* %target, %Array** %28, align 8
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { %Array*, { i64, double, %Array* }* }*
  %31 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %30, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %31, align 8
  store { i64, double, %Array* }* %25, { i64, double, %Array* }** %32, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %29, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %33 = add i64 %__qsVar1__idx__, %16
  br label %header__1

exit__1:                                          ; preds = %header__1
  %34 = sub i64 %nSteps, 1
  %35 = sub i64 %34, 0
  %36 = sdiv i64 %35, 1
  %37 = mul i64 1, %36
  %38 = add i64 0, %37
  %39 = insertvalue %Range zeroinitializer, i64 %38, 0
  %40 = insertvalue %Range %39, i64 -1, 1
  %41 = insertvalue %Range %40, i64 0, 2
  %42 = extractvalue %Range %41, 0
  %43 = extractvalue %Range %41, 1
  %44 = extractvalue %Range %41, 2
  br label %preheader__2

preheader__2:                                     ; preds = %exit__1
  %45 = icmp sgt i64 %43, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__2
  %__qsVar0__idx__ = phi i64 [ %42, %preheader__2 ], [ %60, %exiting__2 ]
  %46 = icmp sle i64 %__qsVar0__idx__, %44
  %47 = icmp sge i64 %__qsVar0__idx__, %44
  %48 = select i1 %45, i1 %46, i1 %47
  br i1 %48, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %49 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %49, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %49)
  call void @__quantum__rt__callable_make_controlled(%Callable* %49)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %50 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %52 = bitcast %Tuple* %51 to { i64, double, %Array* }*
  %53 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %52, i32 0, i32 0
  %54 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %52, i32 0, i32 1
  %55 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %52, i32 0, i32 2
  store i64 %__qsVar0__idx__, i64* %53, align 4
  store double %50, double* %54, align 8
  store %Array* %target, %Array** %55, align 8
  %56 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %57 = bitcast %Tuple* %56 to { %Array*, { i64, double, %Array* }* }*
  %58 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %57, i32 0, i32 0
  %59 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %57, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %58, align 8
  store { i64, double, %Array* }* %52, { i64, double, %Array* }** %59, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %49, %Tuple* %56, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %49, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %49, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %60 = add i64 %__qsVar0__idx__, %43
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal %Range @Microsoft__Quantum__Arrays___be8c93aed1174ddf9a1dc1ba0169742c_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { %Qubit*, %Qubit*, %Qubit* }**
  %6 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %5, align 8
  %7 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = sub i64 %0, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %11 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %12)
  %15 = bitcast i8* %14 to { %Qubit*, %Qubit*, %Qubit* }**
  %16 = load { %Qubit*, %Qubit*, %Qubit* }*, { %Qubit*, %Qubit*, %Qubit* }** %15, align 8
  %17 = bitcast { %Qubit*, %Qubit*, %Qubit* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %10
}

define internal %Range @Microsoft__Quantum__Arrays___a8e1efd738ea4e35a379366d158d6002_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %2
}

define internal %Range @Microsoft__Quantum__Arrays___efb0462d99e445f898c5269230c6127d_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i2, %Qubit* }**
  %6 = load { i2, %Qubit* }*, { i2, %Qubit* }** %5, align 8
  %7 = bitcast { i2, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = sub i64 %0, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %11 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %12)
  %15 = bitcast i8* %14 to { i2, %Qubit* }**
  %16 = load { i2, %Qubit* }*, { i2, %Qubit* }** %15, align 8
  %17 = bitcast { i2, %Qubit* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %10
}

define internal void @Lifted__PartialApplication__43__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 1
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Qubit* }* getelementptr ({ %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 3
  store %Array* %2, %Array** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__43__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 1
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Qubit* }* getelementptr ({ %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 3
  store %Array* %2, %Array** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__43__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Qubit* }* getelementptr ({ %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 3
  store %Array* %7, %Array** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Qubit* %13, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Array*, %Callable*, %Array*, %Qubit* }* %15, { %Array*, %Callable*, %Array*, %Qubit* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__43__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Qubit* }* getelementptr ({ %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 3
  store %Array* %7, %Array** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Qubit* %13, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Array*, %Callable*, %Array*, %Qubit* }* %15, { %Array*, %Callable*, %Array*, %Qubit* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %5 = load %Array*, %Array** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__body(%Array* %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %5 = load %Array*, %Array** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__adj(%Array* %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Callable*, %Array*, %Qubit* }*, { %Array*, %Callable*, %Array*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__ctl(%Array* %3, { %Array*, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Callable*, %Array*, %Qubit* }*, { %Array*, %Callable*, %Array*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__ctladj(%Array* %3, { %Array*, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__20__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__20__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__body(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %4, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %5, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 1, i1 false, %Array* %bits, %Array* %controlSubregister)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Qubit* }*
  %9 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %8, i32 0, i32 1
  store %Array* %controlSubregister, %Array** %9, align 8
  store %Qubit* %targetRegister, %Qubit** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 1, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__adj(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %4, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %5, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 1, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Qubit* }*
  %9 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %8, i32 0, i32 1
  store %Array* %__qsVar0__controlSubregister__, %Array** %9, align 8
  store %Qubit* %targetRegister, %Qubit** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 1, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__ctl(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %bits = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %10, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 1, i1 false, %Array* %bits, %Array* %controlSubregister)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 1
  store %Array* %controlSubregister, %Array** %14, align 8
  store %Qubit* %targetRegister, %Qubit** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %16, %Tuple* null)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 1, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___bb0a812d2b574442bf8d9673cc2bf3be_ApplyControlledOnBitString__ctladj(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %bits = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %10, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 1, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %11)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 1
  store %Array* %__qsVar0__controlSubregister__, %Array** %14, align 8
  store %Qubit* %targetRegister, %Qubit** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %16, %Tuple* null)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 1, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__44__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Array* }* getelementptr ({ %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Array* }*
  %12 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 3
  store %Array* %2, %Array** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__44__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Array* }* getelementptr ({ %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Array* }*
  %12 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 3
  store %Array* %2, %Array** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__44__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Array* }* getelementptr ({ %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Array* }*
  %16 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 3
  store %Array* %7, %Array** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Array*, %Callable*, %Array*, %Array* }* %15, { %Array*, %Callable*, %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__44__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Array* }* getelementptr ({ %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Array* }*
  %16 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 3
  store %Array* %7, %Array** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Array*, %Callable*, %Array*, %Array* }* %15, { %Array*, %Callable*, %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %5 = load %Array*, %Array** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__body(%Array* %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %5 = load %Array*, %Array** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__adj(%Array* %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Callable*, %Array*, %Array* }*, { %Array*, %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__ctl(%Array* %3, { %Array*, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Callable*, %Array*, %Array* }*, { %Array*, %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__ctladj(%Array* %3, { %Array*, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__21__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__21__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__body(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %4, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %5, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 1, i1 false, %Array* %bits, %Array* %controlSubregister)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %controlSubregister, %Array** %9, align 8
  store %Array* %targetRegister, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 1, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__adj(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %4, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %5, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 1, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %__qsVar0__controlSubregister__, %Array** %9, align 8
  store %Array* %targetRegister, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 1, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__ctl(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %bits = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %targetRegister = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %10, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 1, i1 false, %Array* %bits, %Array* %controlSubregister)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  store %Array* %controlSubregister, %Array** %14, align 8
  store %Array* %targetRegister, %Array** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Array* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %16, %Tuple* null)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 1, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___868340d48aba4d3d9872cb8fd11efca4_ApplyControlledOnBitString__ctladj(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %bits = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %targetRegister = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %10, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 1, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %11)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  store %Array* %__qsVar0__controlSubregister__, %Array** %14, align 8
  store %Array* %targetRegister, %Array** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Array* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %16, %Tuple* null)
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 1, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__45__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, { %Array* }* }*
  %5 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 1
  store %Array* %2, %Array** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__45__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, { %Array* }* }*
  %5 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 1
  store %Array* %2, %Array** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__45__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__45__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @MemoryManagement__22__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__22__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____body(%Callable* %op, i64 %power, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %0 = sub i64 %power, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxApplication = phi i64 [ 0, %entry ], [ %5, %exiting__1 ]
  %1 = icmp sle i64 %idxApplication, %0
  br i1 %1, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  store %Array* %target, %Array** %4, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %5 = add i64 %idxApplication, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____adj(%Callable* %op, i64 %power, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %0 = sub i64 %power, 1
  %1 = sub i64 %0, 0
  %2 = sdiv i64 %1, 1
  %3 = mul i64 1, %2
  %4 = add i64 0, %3
  %5 = insertvalue %Range zeroinitializer, i64 %4, 0
  %6 = insertvalue %Range %5, i64 -1, 1
  %7 = insertvalue %Range %6, i64 0, 2
  %8 = extractvalue %Range %7, 0
  %9 = extractvalue %Range %7, 1
  %10 = extractvalue %Range %7, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %11 = icmp sgt i64 %9, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxApplication__ = phi i64 [ %8, %preheader__1 ], [ %19, %exiting__1 ]
  %12 = icmp sle i64 %__qsVar0__idxApplication__, %10
  %13 = icmp sge i64 %__qsVar0__idxApplication__, %10
  %14 = select i1 %11, i1 %12, i1 %13
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array* }*
  %18 = getelementptr inbounds { %Array* }, { %Array* }* %17, i32 0, i32 0
  store %Array* %target, %Array** %18, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %__qsVar0__idxApplication__, %9
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____ctl(%Array* %__controlQubits__, { %Callable*, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %op = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %power = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %4 = sub i64 %power, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxApplication = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %5 = icmp sle i64 %idxApplication, %4
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %9, align 8
  store %Array* %target, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %idxApplication, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____ctladj(%Array* %__controlQubits__, { %Callable*, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %op = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %power = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %4 = sub i64 %power, 1
  %5 = sub i64 %4, 0
  %6 = sdiv i64 %5, 1
  %7 = mul i64 1, %6
  %8 = add i64 0, %7
  %9 = insertvalue %Range zeroinitializer, i64 %8, 0
  %10 = insertvalue %Range %9, i64 -1, 1
  %11 = insertvalue %Range %10, i64 0, 2
  %12 = extractvalue %Range %11, 0
  %13 = extractvalue %Range %11, 1
  %14 = extractvalue %Range %11, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %15 = icmp sgt i64 %13, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxApplication__ = phi i64 [ %12, %preheader__1 ], [ %24, %exiting__1 ]
  %16 = icmp sle i64 %__qsVar0__idxApplication__, %14
  %17 = icmp sge i64 %__qsVar0__idxApplication__, %14
  %18 = select i1 %15, i1 %16, i1 %17
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  call void @__quantum__rt__callable_make_controlled(%Callable* %19)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %22, align 8
  store %Array* %target, %Array** %23, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %24 = add i64 %__qsVar0__idxApplication__, %13
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___5516aa15311e4ec2bc23553ec55e6745_BoundCA__body(%Array* %operations) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %10)
  %13 = bitcast i8* %12 to %Callable**
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %operations, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, %Array* }*
  %18 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %17, i32 0, i32 1
  store %Callable* %8, %Callable** %18, align 8
  store %Array* %operations, %Array** %19, align 8
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__46__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__23__FunctionTable, %Tuple* %16)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %22)
  %25 = bitcast i8* %24 to %Callable**
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  ret %Callable* %20
}

define internal void @Lifted__PartialApplication__46__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__46__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__46__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__46__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____body(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____adj(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___8ecd591e14354dd1acb17a9a79b0fc4a___QsRef3__ApplyBoundCA____ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__23__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__23__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___4535c5767a504f01baac901c4cee390f_DecomposedIntoTimeStepsCA__body({ i64, %Callable* }* %0, i64 %trotterOrder) {
entry:
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = icmp eq i64 %trotterOrder, 1
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, i64, %Callable* }*
  %7 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %6, i32 0, i32 2
  store %Callable* %4, %Callable** %7, align 8
  store i64 %nSteps, i64* %8, align 4
  store %Callable* %op, %Callable** %9, align 8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__47__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__24__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret %Callable* %10

test1__1:                                         ; preds = %entry
  %11 = icmp eq i64 %trotterOrder, 2
  br i1 %11, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Callable*, i64, %Callable* }*
  %15 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %14, i32 0, i32 1
  %17 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %14, i32 0, i32 2
  store %Callable* %12, %Callable** %15, align 8
  store i64 %nSteps, i64* %16, align 4
  store %Callable* %op, %Callable** %17, align 8
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__48__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__24__FunctionTable, %Tuple* %13)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret %Callable* %18

test2__1:                                         ; preds = %test1__1
  %19 = srem i64 %trotterOrder, 2
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %21 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, i64, %Callable* }* getelementptr ({ %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { %Callable*, i64, i64, %Callable* }*
  %24 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %23, i32 0, i32 2
  %27 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %23, i32 0, i32 3
  store %Callable* %21, %Callable** %24, align 8
  store i64 %trotterOrder, i64* %25, align 4
  store i64 %nSteps, i64* %26, align 4
  store %Callable* %op, %Callable** %27, align 8
  %28 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__49__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__25__FunctionTable, %Tuple* %22)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret %Callable* %28

else__1:                                          ; preds = %test2__1
  %29 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @24, i32 0, i32 0))
  %30 = call %String* @__quantum__rt__int_to_string(i64 %trotterOrder)
  %31 = call %String* @__quantum__rt__string_concatenate(%String* %29, %String* %30)
  call void @__quantum__rt__string_update_reference_count(%String* %29, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %30, i32 -1)
  %32 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @25, i32 0, i32 0))
  %33 = call %String* @__quantum__rt__string_concatenate(%String* %31, %String* %32)
  call void @__quantum__rt__string_update_reference_count(%String* %31, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %32, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__fail(%String* %33)
  unreachable

continue__1:                                      ; No predecessors!
  unreachable
}

define internal void @Lifted__PartialApplication__47__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Callable* %4, %Callable** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16, align 8
  store double %11, double* %17, align 8
  store %Array* %13, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__47__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Callable* %4, %Callable** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16, align 8
  store double %11, double* %17, align 8
  store %Array* %13, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__47__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  store i64 %7, i64* %12, align 4
  store %Callable* %9, %Callable** %13, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20, align 8
  store double %15, double* %21, align 8
  store %Array* %17, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__47__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  store i64 %7, i64* %12, align 4
  store %Callable* %9, %Callable** %13, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20, align 8
  store double %15, double* %21, align 8
  store %Array* %17, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____body({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____adj({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctl(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctladj(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__24__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__24__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__48__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Callable* %4, %Callable** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16, align 8
  store double %11, double* %17, align 8
  store %Array* %13, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__48__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Callable* %4, %Callable** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16, align 8
  store double %11, double* %17, align 8
  store %Array* %13, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__48__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  store i64 %7, i64* %12, align 4
  store %Callable* %9, %Callable** %13, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20, align 8
  store double %15, double* %21, align 8
  store %Array* %17, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__48__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  store i64 %7, i64* %12, align 4
  store %Callable* %9, %Callable** %13, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20, align 8
  store double %15, double* %21, align 8
  store %Array* %17, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____body({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____adj({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctl(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctladj(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @Lifted__PartialApplication__49__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 3
  %6 = load %Callable*, %Callable** %5, align 8
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, %Callable* }*
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %8, i32 0, i32 1
  store i64 %4, i64* %9, align 4
  store %Callable* %6, %Callable** %10, align 8
  %11 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %11, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %11, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, { i64, %Callable* }*, double, %Array* }*
  %18 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 3
  store i64 %2, i64* %18, align 4
  store { i64, %Callable* }* %8, { i64, %Callable* }** %19, align 8
  store double %13, double* %20, align 8
  store %Array* %15, %Array** %21, align 8
  %22 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %16, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__49__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 3
  %6 = load %Callable*, %Callable** %5, align 8
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, %Callable* }*
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %8, i32 0, i32 1
  store i64 %4, i64* %9, align 4
  store %Callable* %6, %Callable** %10, align 8
  %11 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %11, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %11, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, { i64, %Callable* }*, double, %Array* }*
  %18 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 3
  store i64 %2, i64* %18, align 4
  store { i64, %Callable* }* %8, { i64, %Callable* }** %19, align 8
  store double %13, double* %20, align 8
  store %Array* %15, %Array** %21, align 8
  %22 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %16, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__49__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 3
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  store i64 %9, i64* %14, align 4
  store %Callable* %11, %Callable** %15, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, { i64, %Callable* }*, double, %Array* }*
  %22 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 3
  store i64 %7, i64* %22, align 4
  store { i64, %Callable* }* %13, { i64, %Callable* }** %23, align 8
  store double %17, double* %24, align 8
  store %Array* %19, %Array** %25, align 8
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %28 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i32 0, i32 1
  store %Array* %3, %Array** %28, align 8
  store { i64, { i64, %Callable* }*, double, %Array* }* %21, { i64, { i64, %Callable* }*, double, %Array* }** %29, align 8
  %30 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 0
  %31 = load %Callable*, %Callable** %30, align 8
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %31, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %32)
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %26, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__49__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 3
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  store i64 %9, i64* %14, align 4
  store %Callable* %11, %Callable** %15, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, { i64, %Callable* }*, double, %Array* }*
  %22 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 3
  store i64 %7, i64* %22, align 4
  store { i64, %Callable* }* %13, { i64, %Callable* }** %23, align 8
  store double %17, double* %24, align 8
  store %Array* %19, %Array** %25, align 8
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %28 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i32 0, i32 1
  store %Array* %3, %Array** %28, align 8
  store { i64, { i64, %Callable* }*, double, %Array* }* %21, { i64, { i64, %Callable* }*, double, %Array* }** %29, align 8
  %30 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 0
  %31 = load %Callable*, %Callable** %30, align 8
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %31, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %32)
  call void @__quantum__rt__callable_make_controlled(%Callable* %32)
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %26, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %7 = load double, double* %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body(i64 %5, { i64, %Callable* }* %6, double %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %7 = load double, double* %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj(i64 %5, { i64, %Callable* }* %6, double %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, { i64, %Callable* }*, double, %Array* }*, { i64, { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl(%Array* %3, { i64, { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, { i64, %Callable* }*, double, %Array* }*, { i64, { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj(%Array* %3, { i64, { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__25__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 3
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__25__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 3
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body(i64 %order, { i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = icmp sgt i64 %order, 2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %stepSizeOuter = call double @Microsoft__Quantum__Canon____QsRef3__TrotterStepSize____body(i64 %order)
  %4 = fmul double 4.000000e+00, %stepSizeOuter
  %stepSizeInner = fsub double 1.000000e+00, %4
  %5 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Callable* }*
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %7, i32 0, i32 1
  store i64 %nSteps, i64* %8, align 4
  store %Callable* %op, %Callable** %9, align 8
  %10 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body(i64 %5, { i64, %Callable* }* %7, double %10, %Array* %target)
  %11 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  store i64 %nSteps, i64* %14, align 4
  store %Callable* %op, %Callable** %15, align 8
  %16 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body(i64 %11, { i64, %Callable* }* %13, double %16, %Array* %target)
  %17 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { i64, %Callable* }*
  %20 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %19, i32 0, i32 1
  store i64 %nSteps, i64* %20, align 4
  store %Callable* %op, %Callable** %21, align 8
  %22 = fmul double %stepSizeInner, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body(i64 %17, { i64, %Callable* }* %19, double %22, %Array* %target)
  %23 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, %Callable* }*
  %26 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %25, i32 0, i32 1
  store i64 %nSteps, i64* %26, align 4
  store %Callable* %op, %Callable** %27, align 8
  %28 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body(i64 %23, { i64, %Callable* }* %25, double %28, %Array* %target)
  %29 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, %Callable* }*
  %32 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %31, i32 0, i32 1
  store i64 %nSteps, i64* %32, align 4
  store %Callable* %op, %Callable** %33, align 8
  %34 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____body(i64 %29, { i64, %Callable* }* %31, double %34, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %35 = icmp eq i64 %order, 2
  br i1 %35, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { i64, %Callable* }*
  %38 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %37, i32 0, i32 1
  store i64 %nSteps, i64* %38, align 4
  store %Callable* %op, %Callable** %39, align 8
  call void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____body({ i64, %Callable* }* %37, double %stepSize, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, %Callable* }*
  %42 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 1
  store i64 %nSteps, i64* %42, align 4
  store %Callable* %op, %Callable** %43, align 8
  call void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____body({ i64, %Callable* }* %41, double %stepSize, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj(i64 %order, { i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = icmp sgt i64 %order, 2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %__qsVar0__stepSizeOuter__ = call double @Microsoft__Quantum__Canon____QsRef3__TrotterStepSize____body(i64 %order)
  %4 = fmul double 4.000000e+00, %__qsVar0__stepSizeOuter__
  %__qsVar1__stepSizeInner__ = fsub double 1.000000e+00, %4
  %5 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Callable* }*
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %7, i32 0, i32 1
  store i64 %nSteps, i64* %8, align 4
  store %Callable* %op, %Callable** %9, align 8
  %10 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj(i64 %5, { i64, %Callable* }* %7, double %10, %Array* %target)
  %11 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  store i64 %nSteps, i64* %14, align 4
  store %Callable* %op, %Callable** %15, align 8
  %16 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj(i64 %11, { i64, %Callable* }* %13, double %16, %Array* %target)
  %17 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { i64, %Callable* }*
  %20 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %19, i32 0, i32 1
  store i64 %nSteps, i64* %20, align 4
  store %Callable* %op, %Callable** %21, align 8
  %22 = fmul double %__qsVar1__stepSizeInner__, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj(i64 %17, { i64, %Callable* }* %19, double %22, %Array* %target)
  %23 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, %Callable* }*
  %26 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %25, i32 0, i32 1
  store i64 %nSteps, i64* %26, align 4
  store %Callable* %op, %Callable** %27, align 8
  %28 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj(i64 %23, { i64, %Callable* }* %25, double %28, %Array* %target)
  %29 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, %Callable* }*
  %32 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %31, i32 0, i32 1
  store i64 %nSteps, i64* %32, align 4
  store %Callable* %op, %Callable** %33, align 8
  %34 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____adj(i64 %29, { i64, %Callable* }* %31, double %34, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %35 = icmp eq i64 %order, 2
  br i1 %35, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { i64, %Callable* }*
  %38 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %37, i32 0, i32 1
  store i64 %nSteps, i64* %38, align 4
  store %Callable* %op, %Callable** %39, align 8
  call void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____adj({ i64, %Callable* }* %37, double %stepSize, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, %Callable* }*
  %42 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 1
  store i64 %nSteps, i64* %42, align 4
  store %Callable* %op, %Callable** %43, align 8
  call void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____adj({ i64, %Callable* }* %41, double %stepSize, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %order = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %4 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %stepSize = load double, double* %4, align 8
  %5 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 3
  %target = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %3, i32 0, i32 0
  %nSteps = load i64, i64* %6, align 4
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %3, i32 0, i32 1
  %op = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %8 = icmp sgt i64 %order, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %stepSizeOuter = call double @Microsoft__Quantum__Canon____QsRef3__TrotterStepSize____body(i64 %order)
  %9 = fmul double 4.000000e+00, %stepSizeOuter
  %stepSizeInner = fsub double 1.000000e+00, %9
  %10 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i64, %Callable* }*
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 1
  store i64 %nSteps, i64* %13, align 4
  store %Callable* %op, %Callable** %14, align 8
  %15 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, { i64, %Callable* }*, double, %Array* }*
  %18 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 3
  store i64 %10, i64* %18, align 4
  store { i64, %Callable* }* %12, { i64, %Callable* }** %19, align 8
  store double %15, double* %20, align 8
  store %Array* %target, %Array** %21, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %17)
  %22 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { i64, %Callable* }*
  %25 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %24, i32 0, i32 1
  store i64 %nSteps, i64* %25, align 4
  store %Callable* %op, %Callable** %26, align 8
  %27 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64, { i64, %Callable* }*, double, %Array* }*
  %30 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %29, i32 0, i32 1
  %32 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %29, i32 0, i32 2
  %33 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %29, i32 0, i32 3
  store i64 %22, i64* %30, align 4
  store { i64, %Callable* }* %24, { i64, %Callable* }** %31, align 8
  store double %27, double* %32, align 8
  store %Array* %target, %Array** %33, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %29)
  %34 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %35 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %36 = bitcast %Tuple* %35 to { i64, %Callable* }*
  %37 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %36, i32 0, i32 0
  %38 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %36, i32 0, i32 1
  store i64 %nSteps, i64* %37, align 4
  store %Callable* %op, %Callable** %38, align 8
  %39 = fmul double %stepSizeInner, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, { i64, %Callable* }*, double, %Array* }*
  %42 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %41, i32 0, i32 1
  %44 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %41, i32 0, i32 2
  %45 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %41, i32 0, i32 3
  store i64 %34, i64* %42, align 4
  store { i64, %Callable* }* %36, { i64, %Callable* }** %43, align 8
  store double %39, double* %44, align 8
  store %Array* %target, %Array** %45, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %41)
  %46 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { i64, %Callable* }*
  %49 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %48, i32 0, i32 1
  store i64 %nSteps, i64* %49, align 4
  store %Callable* %op, %Callable** %50, align 8
  %51 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %53 = bitcast %Tuple* %52 to { i64, { i64, %Callable* }*, double, %Array* }*
  %54 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %53, i32 0, i32 0
  %55 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %53, i32 0, i32 1
  %56 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %53, i32 0, i32 2
  %57 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %53, i32 0, i32 3
  store i64 %46, i64* %54, align 4
  store { i64, %Callable* }* %48, { i64, %Callable* }** %55, align 8
  store double %51, double* %56, align 8
  store %Array* %target, %Array** %57, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %53)
  %58 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %59 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %60 = bitcast %Tuple* %59 to { i64, %Callable* }*
  %61 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %60, i32 0, i32 0
  %62 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %60, i32 0, i32 1
  store i64 %nSteps, i64* %61, align 4
  store %Callable* %op, %Callable** %62, align 8
  %63 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %64 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %65 = bitcast %Tuple* %64 to { i64, { i64, %Callable* }*, double, %Array* }*
  %66 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %65, i32 0, i32 0
  %67 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %65, i32 0, i32 1
  %68 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %65, i32 0, i32 2
  %69 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %65, i32 0, i32 3
  store i64 %58, i64* %66, align 4
  store { i64, %Callable* }* %60, { i64, %Callable* }** %67, align 8
  store double %63, double* %68, align 8
  store %Array* %target, %Array** %69, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %65)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %64, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %70 = icmp eq i64 %order, 2
  br i1 %70, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { i64, %Callable* }*
  %73 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %72, i32 0, i32 0
  %74 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %72, i32 0, i32 1
  store i64 %nSteps, i64* %73, align 4
  store %Callable* %op, %Callable** %74, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %75 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %76 = bitcast %Tuple* %75 to { { i64, %Callable* }*, double, %Array* }*
  %77 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %76, i32 0, i32 0
  %78 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %76, i32 0, i32 1
  %79 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %76, i32 0, i32 2
  store { i64, %Callable* }* %72, { i64, %Callable* }** %77, align 8
  store double %stepSize, double* %78, align 8
  store %Array* %target, %Array** %79, align 8
  call void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %76)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %75, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { i64, %Callable* }*
  %82 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %81, i32 0, i32 0
  %83 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %81, i32 0, i32 1
  store i64 %nSteps, i64* %82, align 4
  store %Callable* %op, %Callable** %83, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %84 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %85 = bitcast %Tuple* %84 to { { i64, %Callable* }*, double, %Array* }*
  %86 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %85, i32 0, i32 0
  %87 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %85, i32 0, i32 1
  %88 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %85, i32 0, i32 2
  store { i64, %Callable* }* %81, { i64, %Callable* }** %86, align 8
  store double %stepSize, double* %87, align 8
  store %Array* %target, %Array** %88, align 8
  call void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %85)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %84, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %order = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %4 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %stepSize = load double, double* %4, align 8
  %5 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 3
  %target = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %3, i32 0, i32 0
  %nSteps = load i64, i64* %6, align 4
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %3, i32 0, i32 1
  %op = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %8 = icmp sgt i64 %order, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %__qsVar0__stepSizeOuter__ = call double @Microsoft__Quantum__Canon____QsRef3__TrotterStepSize____body(i64 %order)
  %9 = fmul double 4.000000e+00, %__qsVar0__stepSizeOuter__
  %__qsVar1__stepSizeInner__ = fsub double 1.000000e+00, %9
  %10 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i64, %Callable* }*
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 1
  store i64 %nSteps, i64* %13, align 4
  store %Callable* %op, %Callable** %14, align 8
  %15 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, { i64, %Callable* }*, double, %Array* }*
  %18 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 3
  store i64 %10, i64* %18, align 4
  store { i64, %Callable* }* %12, { i64, %Callable* }** %19, align 8
  store double %15, double* %20, align 8
  store %Array* %target, %Array** %21, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %17)
  %22 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { i64, %Callable* }*
  %25 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %24, i32 0, i32 1
  store i64 %nSteps, i64* %25, align 4
  store %Callable* %op, %Callable** %26, align 8
  %27 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64, { i64, %Callable* }*, double, %Array* }*
  %30 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %29, i32 0, i32 1
  %32 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %29, i32 0, i32 2
  %33 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %29, i32 0, i32 3
  store i64 %22, i64* %30, align 4
  store { i64, %Callable* }* %24, { i64, %Callable* }** %31, align 8
  store double %27, double* %32, align 8
  store %Array* %target, %Array** %33, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %29)
  %34 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %35 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %36 = bitcast %Tuple* %35 to { i64, %Callable* }*
  %37 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %36, i32 0, i32 0
  %38 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %36, i32 0, i32 1
  store i64 %nSteps, i64* %37, align 4
  store %Callable* %op, %Callable** %38, align 8
  %39 = fmul double %__qsVar1__stepSizeInner__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, { i64, %Callable* }*, double, %Array* }*
  %42 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %41, i32 0, i32 1
  %44 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %41, i32 0, i32 2
  %45 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %41, i32 0, i32 3
  store i64 %34, i64* %42, align 4
  store { i64, %Callable* }* %36, { i64, %Callable* }** %43, align 8
  store double %39, double* %44, align 8
  store %Array* %target, %Array** %45, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %41)
  %46 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { i64, %Callable* }*
  %49 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %48, i32 0, i32 1
  store i64 %nSteps, i64* %49, align 4
  store %Callable* %op, %Callable** %50, align 8
  %51 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %53 = bitcast %Tuple* %52 to { i64, { i64, %Callable* }*, double, %Array* }*
  %54 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %53, i32 0, i32 0
  %55 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %53, i32 0, i32 1
  %56 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %53, i32 0, i32 2
  %57 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %53, i32 0, i32 3
  store i64 %46, i64* %54, align 4
  store { i64, %Callable* }* %48, { i64, %Callable* }** %55, align 8
  store double %51, double* %56, align 8
  store %Array* %target, %Array** %57, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %53)
  %58 = sub i64 %order, 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %59 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %60 = bitcast %Tuple* %59 to { i64, %Callable* }*
  %61 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %60, i32 0, i32 0
  %62 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %60, i32 0, i32 1
  store i64 %nSteps, i64* %61, align 4
  store %Callable* %op, %Callable** %62, align 8
  %63 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %64 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %65 = bitcast %Tuple* %64 to { i64, { i64, %Callable* }*, double, %Array* }*
  %66 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %65, i32 0, i32 0
  %67 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %65, i32 0, i32 1
  %68 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %65, i32 0, i32 2
  %69 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %65, i32 0, i32 3
  store i64 %58, i64* %66, align 4
  store { i64, %Callable* }* %60, { i64, %Callable* }** %67, align 8
  store double %63, double* %68, align 8
  store %Array* %target, %Array** %69, align 8
  call void @Microsoft__Quantum__Canon___61f43532250345dc97f6e281c5067865___QsRef3__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %65)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %64, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %70 = icmp eq i64 %order, 2
  br i1 %70, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { i64, %Callable* }*
  %73 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %72, i32 0, i32 0
  %74 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %72, i32 0, i32 1
  store i64 %nSteps, i64* %73, align 4
  store %Callable* %op, %Callable** %74, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %75 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %76 = bitcast %Tuple* %75 to { { i64, %Callable* }*, double, %Array* }*
  %77 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %76, i32 0, i32 0
  %78 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %76, i32 0, i32 1
  %79 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %76, i32 0, i32 2
  store { i64, %Callable* }* %72, { i64, %Callable* }** %77, align 8
  store double %stepSize, double* %78, align 8
  store %Array* %target, %Array** %79, align 8
  call void @Microsoft__Quantum__Canon___312118ce527e450dad7256d305dcd726___QsRef3__Trotter2ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %76)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %75, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { i64, %Callable* }*
  %82 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %81, i32 0, i32 0
  %83 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %81, i32 0, i32 1
  store i64 %nSteps, i64* %82, align 4
  store %Callable* %op, %Callable** %83, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %84 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %85 = bitcast %Tuple* %84 to { { i64, %Callable* }*, double, %Array* }*
  %86 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %85, i32 0, i32 0
  %87 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %85, i32 0, i32 1
  %88 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %85, i32 0, i32 2
  store { i64, %Callable* }* %81, { i64, %Callable* }** %86, align 8
  store double %stepSize, double* %87, align 8
  store %Array* %target, %Array** %88, align 8
  call void @Microsoft__Quantum__Canon___f3d95047788745f3a01c09cc21f0c3ec___QsRef3__Trotter1ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %85)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %84, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal { double, double }* @Microsoft__Quantum__Canon___92b2fc57a79541c8b9df7a25eea41fad___QsRef3__ComposedOutput____body(%Callable* %outer, %Callable* %inner, double %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double }*
  %2 = getelementptr inbounds { double }, { double }* %1, i32 0, i32 0
  store double %target, double* %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %inner, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { double }*
  %5 = getelementptr inbounds { double }, { double }* %4, i32 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { double }*
  %9 = getelementptr inbounds { double }, { double }* %8, i32 0, i32 0
  store double %6, double* %9, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }* }* getelementptr ({ { double, double }* }, { { double, double }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %outer, %Tuple* %7, %Tuple* %10)
  %11 = bitcast %Tuple* %10 to { { double, double }* }*
  %12 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret { double, double }* %13
}

define internal %Callable* @Microsoft__Quantum__Canon___f695a1c4a84a4c22814bb23e1fd09776_Compose__body(%Callable* %outer, %Callable* %inner) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___92b2fc57a79541c8b9df7a25eea41fad___QsRef3__ComposedOutput____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %inner, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, %Callable*, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 2
  store %Callable* %0, %Callable** %3, align 8
  store %Callable* %outer, %Callable** %4, align 8
  store %Callable* %inner, %Callable** %5, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__50__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__26__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 -1)
  ret %Callable* %6
}

define internal void @Lifted__PartialApplication__50__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { double }*
  %6 = getelementptr inbounds { double }, { double }* %5, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, double }* getelementptr ({ %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Callable*, double }*
  %10 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store %Callable* %4, %Callable** %11, align 8
  store double %7, double* %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___92b2fc57a79541c8b9df7a25eea41fad___QsRef3__ComposedOutput____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load %Callable*, %Callable** %2, align 8
  %6 = load double, double* %3, align 8
  %7 = call { double, double }* @Microsoft__Quantum__Canon___92b2fc57a79541c8b9df7a25eea41fad___QsRef3__ComposedOutput____body(%Callable* %4, %Callable* %5, double %6)
  %8 = bitcast %Tuple* %result-tuple to { { double, double }* }*
  %9 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %8, i32 0, i32 0
  store { double, double }* %7, { double, double }** %9, align 8
  ret void
}

define internal void @MemoryManagement__26__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__26__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___0f498e1ece294d4db89965060edcd2ac_ApplyWithCA__body(%Callable* %outerOperation, %Callable* %innerOperation, { %Array* }* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %target, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %target to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__callable_invoke(%Callable* %innerOperation, %Tuple* %2, %Tuple* null)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___0f498e1ece294d4db89965060edcd2ac_ApplyWithCA__adj(%Callable* %outerOperation, %Callable* %innerOperation, { %Array* }* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %target, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %target to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %2, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %2, %Tuple* null)
  %5 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %5)
  call void @__quantum__rt__callable_invoke(%Callable* %5, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___0f498e1ece294d4db89965060edcd2ac_ApplyWithCA__ctl(%Array* %controlRegister, { %Callable*, %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %0, i32 0, i32 2
  %target = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %target, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %target to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %6, %Tuple* null)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %controlRegister, %Array** %10, align 8
  store { %Array* }* %target, { %Array* }** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___0f498e1ece294d4db89965060edcd2ac_ApplyWithCA__ctladj(%Array* %controlRegister, { %Callable*, %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %0, i32 0, i32 2
  %target = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %target, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %target to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %6, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array*, { %Array* }* }*
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %10, i32 0, i32 1
  store %Array* %controlRegister, %Array** %11, align 8
  store { %Array* }* %target, { %Array* }** %12, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %6, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertQubit__body(%Result* %expected, %Qubit* %q) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to i2*
  store i2 -2, i2* %2, align 1
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* %q, %Qubit** %5, align 8
  %6 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @26, i32 0, i32 0))
  %7 = call %String* @__quantum__rt__result_to_string(%Result* %expected)
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %6, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %6, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__AssertMeasurement__body(%Array* %0, %Array* %3, %Result* %expected, %String* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  ret void
}

declare %Result* @__quantum__rt__result_get_zero()

define internal void @Microsoft__Quantum__Diagnostics__AssertAllZero__adj(%Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @Microsoft__Quantum__Diagnostics__AssertAllZero__body(%Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertAllZero__ctl(%Array* %ctrls, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctrls, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @Microsoft__Quantum__Diagnostics__AssertAllZero__body(%Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %ctrls, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertAllZero__ctladj(%Array* %__controlQubits__, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @Microsoft__Quantum__Diagnostics__AssertAllZero__ctl(%Array* %__controlQubits__, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertMeasurement__body(%Array* %bases, %Array* %qubits, %Result* %result, %String* %msg) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__assertmeasurementprobability__body(%Array* %bases, %Array* %qubits, %Result* %result, double 1.000000e+00, %String* %msg, double 1.000000e-10)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertMeasurement__adj(%Array* %bases, %Array* %qubits, %Result* %result, %String* %msg) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @Microsoft__Quantum__Diagnostics__AssertMeasurement__body(%Array* %bases, %Array* %qubits, %Result* %result, %String* %msg)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertMeasurement__ctl(%Array* %controllingQubits, { %Array*, %Array*, %Result*, %String* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controllingQubits, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %0, i32 0, i32 0
  %bases = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %0, i32 0, i32 2
  %result = load %Result*, %Result** %3, align 8
  %4 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %0, i32 0, i32 3
  %msg = load %String*, %String** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controllingQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertMeasurement__ctladj(%Array* %__controlQubits__, { %Array*, %Array*, %Result*, %String* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %0, i32 0, i32 0
  %bases = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %0, i32 0, i32 2
  %result = load %Result*, %Result** %3, align 8
  %4 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %0, i32 0, i32 3
  %msg = load %String*, %String** %4, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 1)
  call void @__quantum__rt__string_update_reference_count(%String* %msg, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Result*, %String* }* getelementptr ({ %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Array*, %Array*, %Result*, %String* }*
  %7 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %6, i32 0, i32 2
  %10 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %6, i32 0, i32 3
  store %Array* %bases, %Array** %7, align 8
  store %Array* %qubits, %Array** %8, align 8
  store %Result* %result, %Result** %9, align 8
  store %String* %msg, %String** %10, align 8
  call void @Microsoft__Quantum__Diagnostics__AssertMeasurement__ctl(%Array* %__controlQubits__, { %Array*, %Array*, %Result*, %String* }* %6)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %msg, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertMeasurementProbability__body(%Array* %bases, %Array* %qubits, %Result* %result, double %prob, %String* %msg, double %tolerance) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__assertmeasurementprobability__body(%Array* %bases, %Array* %qubits, %Result* %result, double %prob, %String* %msg, double %tolerance)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertMeasurementProbability__adj(%Array* %bases, %Array* %qubits, %Result* %result, double %prob, %String* %msg, double %tolerance) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__assertmeasurementprobability__body(%Array* %bases, %Array* %qubits, %Result* %result, double %prob, %String* %msg, double %tolerance)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertMeasurementProbability__ctl(%Array* %__controlQubits__, { %Array*, %Array*, %Result*, double, %String*, double }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 0
  %bases = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 2
  %result = load %Result*, %Result** %3, align 8
  %4 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 3
  %prob = load double, double* %4, align 8
  %5 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 4
  %msg = load %String*, %String** %5, align 8
  %6 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 5
  %tolerance = load double, double* %6, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 1)
  call void @__quantum__rt__string_update_reference_count(%String* %msg, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Result*, double, %String*, double }* getelementptr ({ %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array*, %Result*, double, %String*, double }*
  %9 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 1
  %11 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 2
  %12 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 3
  %13 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 4
  %14 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 5
  store %Array* %bases, %Array** %9, align 8
  store %Array* %qubits, %Array** %10, align 8
  store %Result* %result, %Result** %11, align 8
  store double %prob, double* %12, align 8
  store %String* %msg, %String** %13, align 8
  store double %tolerance, double* %14, align 8
  call void @__quantum__qis__assertmeasurementprobability__ctl(%Array* %__controlQubits__, { %Array*, %Array*, %Result*, double, %String*, double }* %8)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %msg, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

declare void @__quantum__qis__assertmeasurementprobability__ctl(%Array*, { %Array*, %Array*, %Result*, double, %String*, double }*)

define internal void @Microsoft__Quantum__Diagnostics__AssertMeasurementProbability__ctladj(%Array* %__controlQubits__, { %Array*, %Array*, %Result*, double, %String*, double }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 0
  %bases = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 2
  %result = load %Result*, %Result** %3, align 8
  %4 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 3
  %prob = load double, double* %4, align 8
  %5 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 4
  %msg = load %String*, %String** %5, align 8
  %6 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %0, i32 0, i32 5
  %tolerance = load double, double* %6, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 1)
  call void @__quantum__rt__string_update_reference_count(%String* %msg, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Result*, double, %String*, double }* getelementptr ({ %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array*, %Result*, double, %String*, double }*
  %9 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 1
  %11 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 2
  %12 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 3
  %13 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 4
  %14 = getelementptr inbounds { %Array*, %Array*, %Result*, double, %String*, double }, { %Array*, %Array*, %Result*, double, %String*, double }* %8, i32 0, i32 5
  store %Array* %bases, %Array** %9, align 8
  store %Array* %qubits, %Array** %10, align 8
  store %Result* %result, %Result** %11, align 8
  store double %prob, double* %12, align 8
  store %String* %msg, %String** %13, align 8
  store double %tolerance, double* %14, align 8
  call void @__quantum__qis__assertmeasurementprobability__ctl(%Array* %__controlQubits__, { %Array*, %Array*, %Result*, double, %String*, double }* %8)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %msg, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

declare %String* @__quantum__rt__result_to_string(%Result*)

define internal void @Microsoft__Quantum__Diagnostics__AssertQubit__adj(%Result* %expected, %Qubit* %q) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to i2*
  store i2 -2, i2* %2, align 1
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* %q, %Qubit** %5, align 8
  %6 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @26, i32 0, i32 0))
  %7 = call %String* @__quantum__rt__result_to_string(%Result* %expected)
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %6, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %6, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__AssertMeasurement__adj(%Array* %0, %Array* %3, %Result* %expected, %String* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertQubit__ctl(%Array* %__controlQubits__, { %Result*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Result*, %Qubit* }, { %Result*, %Qubit* }* %0, i32 0, i32 0
  %expected = load %Result*, %Result** %1, align 8
  %2 = getelementptr inbounds { %Result*, %Qubit* }, { %Result*, %Qubit* }* %0, i32 0, i32 1
  %q = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to i2*
  store i2 -2, i2* %5, align 1
  %6 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  store %Qubit* %q, %Qubit** %8, align 8
  call void @__quantum__rt__result_update_reference_count(%Result* %expected, i32 1)
  %9 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @26, i32 0, i32 0))
  %10 = call %String* @__quantum__rt__result_to_string(%Result* %expected)
  %11 = call %String* @__quantum__rt__string_concatenate(%String* %9, %String* %10)
  call void @__quantum__rt__string_update_reference_count(%String* %9, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Result*, %String* }* getelementptr ({ %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array*, %Result*, %String* }*
  %14 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %13, i32 0, i32 3
  store %Array* %3, %Array** %14, align 8
  store %Array* %6, %Array** %15, align 8
  store %Result* %expected, %Result** %16, align 8
  store %String* %11, %String** %17, align 8
  call void @Microsoft__Quantum__Diagnostics__AssertMeasurement__ctl(%Array* %__controlQubits__, { %Array*, %Array*, %Result*, %String* }* %13)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %expected, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__AssertQubit__ctladj(%Array* %__controlQubits__, { %Result*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Result*, %Qubit* }, { %Result*, %Qubit* }* %0, i32 0, i32 0
  %expected = load %Result*, %Result** %1, align 8
  %2 = getelementptr inbounds { %Result*, %Qubit* }, { %Result*, %Qubit* }* %0, i32 0, i32 1
  %q = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to i2*
  store i2 -2, i2* %5, align 1
  %6 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  store %Qubit* %q, %Qubit** %8, align 8
  call void @__quantum__rt__result_update_reference_count(%Result* %expected, i32 1)
  %9 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @26, i32 0, i32 0))
  %10 = call %String* @__quantum__rt__result_to_string(%Result* %expected)
  %11 = call %String* @__quantum__rt__string_concatenate(%String* %9, %String* %10)
  call void @__quantum__rt__string_update_reference_count(%String* %9, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Result*, %String* }* getelementptr ({ %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array*, %Result*, %String* }*
  %14 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { %Array*, %Array*, %Result*, %String* }, { %Array*, %Array*, %Result*, %String* }* %13, i32 0, i32 3
  store %Array* %3, %Array** %14, align 8
  store %Array* %6, %Array** %15, align 8
  store %Result* %expected, %Result** %16, align 8
  store %String* %11, %String** %17, align 8
  call void @Microsoft__Quantum__Diagnostics__AssertMeasurement__ctladj(%Array* %__controlQubits__, { %Array*, %Array*, %Result*, %String* }* %13)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %expected, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %actual, i1 %expected, %String* %message) {
entry:
  %0 = icmp ne i1 %actual, %expected
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Diagnostics___93054858c55a4d069c8a89cbd644c719___QsRef3__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics___93054858c55a4d069c8a89cbd644c719___QsRef3__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message) {
entry:
  %0 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @27, i32 0, i32 0))
  %1 = call %String* @__quantum__rt__string_concatenate(%String* %0, %String* %message)
  %2 = call %String* @__quantum__rt__string_concatenate(%String* %1, %String* %0)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %0, i32 -1)
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @28, i32 0, i32 0))
  %4 = call %String* @__quantum__rt__string_concatenate(%String* %2, %String* %3)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  br i1 %expected, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %5 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %6 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @30, i32 0, i32 0))
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %7 = phi %String* [ %5, %condTrue__1 ], [ %6, %condFalse__1 ]
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %4, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  %9 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @31, i32 0, i32 0))
  %10 = call %String* @__quantum__rt__string_concatenate(%String* %8, %String* %9)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %9, i32 -1)
  br i1 %actual, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condContinue__1
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condContinue__1
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @30, i32 0, i32 0))
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condTrue__2
  %13 = phi %String* [ %11, %condTrue__2 ], [ %12, %condFalse__2 ]
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %10, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i32 -1)
  call void @__quantum__rt__fail(%String* %14)
  unreachable
}

define internal void @Microsoft__Quantum__Diagnostics___1cff4dbf452349c0aab5551517df2535___QsRef3__FormattedFailure____body(i64 %actual, i64 %expected, %String* %message) {
entry:
  %0 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @27, i32 0, i32 0))
  %1 = call %String* @__quantum__rt__string_concatenate(%String* %0, %String* %message)
  %2 = call %String* @__quantum__rt__string_concatenate(%String* %1, %String* %0)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %0, i32 -1)
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @28, i32 0, i32 0))
  %4 = call %String* @__quantum__rt__string_concatenate(%String* %2, %String* %3)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  %5 = call %String* @__quantum__rt__int_to_string(i64 %expected)
  %6 = call %String* @__quantum__rt__string_concatenate(%String* %4, %String* %5)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %5, i32 -1)
  %7 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @31, i32 0, i32 0))
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %6, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %6, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  %9 = call %String* @__quantum__rt__int_to_string(i64 %actual)
  %10 = call %String* @__quantum__rt__string_concatenate(%String* %8, %String* %9)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %9, i32 -1)
  call void @__quantum__rt__fail(%String* %10)
  unreachable
}

define internal %Array* @Microsoft__Quantum__Arrays__SequenceI__body(i64 %from, i64 %to) {
entry:
  %array = alloca %Array*, align 8
  %0 = icmp sge i64 %to, %from
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @32, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %0, %String* %1)
  %2 = sub i64 %to, %from
  %n = add i64 %2, 1
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %n)
  %4 = sub i64 %n, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %5)
  %8 = bitcast i8* %7 to i64*
  store i64 0, i64* %8, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %3, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %10 = sub i64 %n, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %i = phi i64 [ 0, %exit__1 ], [ %17, %exiting__2 ]
  %11 = icmp sle i64 %i, %10
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = load %Array*, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 -1)
  %13 = call %Array* @__quantum__rt__array_copy(%Array* %12, i1 false)
  %14 = add i64 %from, %i
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %i)
  %16 = bitcast i8* %15 to i64*
  store i64 %14, i64* %16, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  store %Array* %13, %Array** %array, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %17 = add i64 %i, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %18 = load %Array*, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  ret %Array* %18
}

define internal %Array* @Microsoft__Quantum__Arrays___214772ffffeb49a1900df09d24a690d9_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = icmp eq i64 %length, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %3 = bitcast i8* %2 to double*
  %4 = load double, double* %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { double }*
  %7 = getelementptr inbounds { double }, { double }* %6, i32 0, i32 0
  store double %4, double* %7, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }* }* getelementptr ({ { double, double }* }, { { double, double }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %5, %Tuple* %8)
  %9 = bitcast %Tuple* %8 to { { double, double }* }*
  %10 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %9, i32 0, i32 0
  %first = load { double, double }*, { double, double }** %10, align 8
  %11 = bitcast { double, double }* %first to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %13 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %14 = phi i64 [ 0, %continue__1 ], [ %18, %exiting__1 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %14)
  %17 = bitcast i8* %16 to { double, double }**
  store { double, double }* %first, { double, double }** %17, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %14, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %12, %Array** %retval, align 8
  %19 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %27 = sub i64 %length, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idx = phi i64 [ 1, %exit__2 ], [ %46, %exiting__3 ]
  %28 = icmp sle i64 %idx, %27
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  %30 = call %Array* @__quantum__rt__array_copy(%Array* %29, i1 false)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %32 = bitcast i8* %31 to double*
  %33 = load double, double* %32, align 8
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { double }*
  %36 = getelementptr inbounds { double }, { double }* %35, i32 0, i32 0
  store double %33, double* %36, align 8
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }* }* getelementptr ({ { double, double }* }, { { double, double }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %34, %Tuple* %37)
  %38 = bitcast %Tuple* %37 to { { double, double }* }*
  %39 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %38, i32 0, i32 0
  %40 = load { double, double }*, { double, double }** %39, align 8
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 %idx)
  %42 = bitcast i8* %41 to { double, double }**
  %43 = bitcast { double, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i32 1)
  %44 = load { double, double }*, { double, double }** %42, align 8
  %45 = bitcast { double, double }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  store { double, double }* %40, { double, double }** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 1)
  store %Array* %30, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %46 = add i64 %idx, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %47 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %56, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { double, double }**
  %54 = load { double, double }*, { double, double }** %53, align 8
  %55 = bitcast { double, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %55, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %56 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret %Array* %47
}

define internal %Array* @Microsoft__Quantum__Arrays___20d53ea8250b40bc86f0a0047df3f3c9_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = icmp eq i64 %length, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %3 = bitcast i8* %2 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64 }*
  %7 = getelementptr inbounds { i64 }, { i64 }* %6, i32 0, i32 0
  store i64 %4, i64* %7, align 4
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %5, %Tuple* %8)
  %9 = bitcast %Tuple* %8 to { double }*
  %10 = getelementptr inbounds { double }, { double }* %9, i32 0, i32 0
  %first = load double, double* %10, align 8
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %12 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %13 = phi i64 [ 0, %continue__1 ], [ %17, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %13)
  %16 = bitcast i8* %15 to double*
  store double %first, double* %16, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %11, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %18 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 1, %exit__1 ], [ %34, %exiting__2 ]
  %19 = icmp sle i64 %idx, %18
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  %21 = call %Array* @__quantum__rt__array_copy(%Array* %20, i1 false)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 4
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { i64 }*
  %27 = getelementptr inbounds { i64 }, { i64 }* %26, i32 0, i32 0
  store i64 %24, i64* %27, align 4
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %25, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { double }*
  %30 = getelementptr inbounds { double }, { double }* %29, i32 0, i32 0
  %31 = load double, double* %30, align 8
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %idx)
  %33 = bitcast i8* %32 to double*
  store double %31, double* %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  store %Array* %21, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %34 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %35 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret %Array* %35
}

define internal %Range @Microsoft__Quantum__Arrays___94a71e0233254bc7929a7d7210bcd75d_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i1, i64 }**
  %6 = load { i1, i64 }*, { i1, i64 }** %5, align 8
  %7 = bitcast { i1, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = sub i64 %0, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %11 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %12)
  %15 = bitcast i8* %14 to { i1, i64 }**
  %16 = load { i1, i64 }*, { i1, i64 }** %15, align 8
  %17 = bitcast { i1, i64 }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %10
}

define internal %Array* @Microsoft__Quantum__Arrays___350337fdf0114f61a4061047b90dbf85_Subarray__body(%Array* %indices, %Array* %array) {
entry:
  %sliced = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i1, i64 }**
  %6 = load { i1, i64 }*, { i1, i64 }** %5, align 8
  %7 = bitcast { i1, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %9 = icmp eq i64 %nSliced, 0
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  %11 = sub i64 %0, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %16 = bitcast i8* %15 to { i1, i64 }**
  %17 = load { i1, i64 }*, { i1, i64 }** %16, align 8
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %19 = sub i64 %nSliced, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %11
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { i1, i64 }**
  %24 = load { i1, i64 }*, { i1, i64 }** %23, align 8
  %25 = bitcast { i1, i64 }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %10

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %32, %exiting__3 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %27)
  %30 = bitcast i8* %29 to { i1, i64 }**
  store { i1, i64 }* %17, { i1, i64 }** %30, align 8
  %31 = bitcast { i1, i64 }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %32 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %sliced, align 8
  %33 = sub i64 %nSliced, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %34 = phi i64 [ 0, %exit__3 ], [ %40, %exiting__4 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %34)
  %37 = bitcast i8* %36 to { i1, i64 }**
  %38 = load { i1, i64 }*, { i1, i64 }** %37, align 8
  %39 = bitcast { i1, i64 }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %40 = add i64 %34, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %41 = sub i64 %nSliced, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %56, %exiting__5 ]
  %42 = icmp sle i64 %idx, %41
  br i1 %42, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %43 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 -1)
  %44 = call %Array* @__quantum__rt__array_copy(%Array* %43, i1 false)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %47)
  %49 = bitcast i8* %48 to { i1, i64 }**
  %50 = load { i1, i64 }*, { i1, i64 }** %49, align 8
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %idx)
  %52 = bitcast i8* %51 to { i1, i64 }**
  %53 = bitcast { i1, i64 }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 1)
  %54 = load { i1, i64 }*, { i1, i64 }** %52, align 8
  %55 = bitcast { i1, i64 }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %55, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %55, i32 -1)
  store { i1, i64 }* %50, { i1, i64 }** %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 1)
  store %Array* %44, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %43, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %56 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %57 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  %58 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %59 = phi i64 [ 0, %exit__5 ], [ %65, %exiting__6 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %59)
  %62 = bitcast i8* %61 to { i1, i64 }**
  %63 = load { i1, i64 }*, { i1, i64 }** %62, align 8
  %64 = bitcast { i1, i64 }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %64, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %65 = add i64 %59, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %67 = sub i64 %66, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %68 = phi i64 [ 0, %exit__6 ], [ %74, %exiting__7 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %68)
  %71 = bitcast i8* %70 to { i1, i64 }**
  %72 = load { i1, i64 }*, { i1, i64 }** %71, align 8
  %73 = bitcast { i1, i64 }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %74 = add i64 %68, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 -1)
  ret %Array* %57
}

define internal %Callable* @Microsoft__Quantum__Arrays___7d83b54afca94675b63617b69b56aa7a_ElementAt__body(i64 %index, %Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp sge i64 %index, 0
  br i1 %8, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %exit__1
  %9 = icmp slt i64 %index, %0
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %exit__1
  %10 = phi i1 [ %9, %condTrue__1 ], [ %8, %exit__1 ]
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @34, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %10, %String* %11)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %13 = bitcast i8* %12 to %Callable**
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 1)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %16 = phi i64 [ 0, %condContinue__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to %Callable**
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i32 -1)
  ret %Callable* %14
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Arrays___b20df4913ab0459888bcf1448be084b3_ElementAt__body(i64 %index, %Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { %Array*, %Array* }*, %Array* }**
  %6 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 0
  %8 = load { %Array*, %Array* }*, { %Array*, %Array* }** %7, align 8
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %16 = bitcast { { %Array*, %Array* }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %18 = icmp sge i64 %index, 0
  br i1 %18, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %exit__1
  %19 = icmp slt i64 %index, %0
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %exit__1
  %20 = phi i1 [ %19, %condTrue__1 ], [ %18, %exit__1 ]
  %21 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @34, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %20, %String* %21)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %23 = bitcast i8* %22 to { { %Array*, %Array* }*, %Array* }**
  %24 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %24, i32 0, i32 0
  %26 = load { %Array*, %Array* }*, { %Array*, %Array* }** %25, align 8
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %26, i32 0, i32 0
  %28 = load %Array*, %Array** %27, align 8
  %29 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %26, i32 0, i32 1
  %30 = load %Array*, %Array** %29, align 8
  %31 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %24, i32 0, i32 1
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 1)
  %33 = bitcast { %Array*, %Array* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 1)
  %34 = bitcast { { %Array*, %Array* }*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 1)
  %35 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %36 = phi i64 [ 0, %condContinue__1 ], [ %51, %exiting__2 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %36)
  %39 = bitcast i8* %38 to { { %Array*, %Array* }*, %Array* }**
  %40 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %39, align 8
  %41 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %40, i32 0, i32 0
  %42 = load { %Array*, %Array* }*, { %Array*, %Array* }** %41, align 8
  %43 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %42, i32 0, i32 0
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 -1)
  %45 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %42, i32 0, i32 1
  %46 = load %Array*, %Array** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %46, i32 -1)
  %47 = bitcast { %Array*, %Array* }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  %48 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %40, i32 0, i32 1
  %49 = load %Array*, %Array** %48, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  %50 = bitcast { { %Array*, %Array* }*, %Array* }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %51 = add i64 %36, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %24
}

define internal %Array* @Microsoft__Quantum__Arrays___aadf45b9686643c385c8db16f19e226a_ConstantArray__body(i64 %length, double %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to double*
  store double %value, double* %5, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret %Array* %0
}

define internal %Array* @Microsoft__Quantum__Arrays___905ac1230d4942abb41de7c18651b8a2_ConstantArray__body(i64 %length, { double, double }* %value) {
entry:
  %0 = bitcast { double, double }* %value to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %2 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  store { double, double }* %value, { double, double }** %6, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret %Array* %1
}

define internal void @Lifted__PartialApplication__51__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___7d83b54afca94675b63617b69b56aa7a_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Callable* @Microsoft__Quantum__Arrays___7d83b54afca94675b63617b69b56aa7a_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  store %Callable* %5, %Callable** %7, align 8
  ret void
}

define internal void @MemoryManagement__27__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__27__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__52__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___b20df4913ab0459888bcf1448be084b3_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Arrays___b20df4913ab0459888bcf1448be084b3_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %7 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %6, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %5, { { %Array*, %Array* }*, %Array* }** %7, align 8
  ret void
}

define internal void @MemoryManagement__28__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %22, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { %Array*, %Array* }*, %Array* }**
  %11 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %11, i32 0, i32 0
  %13 = load { %Array*, %Array* }*, { %Array*, %Array* }** %12, align 8
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 %count-change)
  %16 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 %count-change)
  %18 = bitcast { %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 %count-change)
  %19 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %11, i32 0, i32 1
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 %count-change)
  %21 = bitcast { { %Array*, %Array* }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %22 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__28__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %22, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { %Array*, %Array* }*, %Array* }**
  %11 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %11, i32 0, i32 0
  %13 = load { %Array*, %Array* }*, { %Array*, %Array* }** %12, align 8
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 %count-change)
  %16 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 %count-change)
  %18 = bitcast { %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 %count-change)
  %19 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %11, i32 0, i32 1
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 %count-change)
  %21 = bitcast { { %Array*, %Array* }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %22 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Range @Microsoft__Quantum__Arrays___7f13ac56d0e24dbf8910091cb8e6667a_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i64, %Callable* }**
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %11 = sub i64 %0, 1
  %12 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %11, 2
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to { i64, %Callable* }**
  %18 = load { i64, %Callable* }*, { i64, %Callable* }** %17, align 8
  %19 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %18, i32 0, i32 1
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i32 -1)
  %21 = bitcast { i64, %Callable* }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %12
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Arrays___a0f596cedd8444258509c1c2bf5316bc_Fold__body(%Callable* %folder, { i64, %Callable* }* %state, %Array* %array) {
entry:
  %current = alloca { i64, %Callable* }*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 1)
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %state, i32 0, i32 1
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { i64, %Callable* }* %state to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %5)
  %8 = bitcast i8* %7 to { i64, %Callable* }**
  %9 = load { i64, %Callable* }*, { i64, %Callable* }** %8, align 8
  %10 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %9, i32 0, i32 1
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i32 1)
  %12 = bitcast { i64, %Callable* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  store { i64, %Callable* }* %state, { i64, %Callable* }** %current, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %14 = call %Range @Microsoft__Quantum__Arrays___7f13ac56d0e24dbf8910091cb8e6667a_IndexRange__body(%Array* %array)
  %15 = extractvalue %Range %14, 0
  %16 = extractvalue %Range %14, 1
  %17 = extractvalue %Range %14, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %18 = icmp sgt i64 %16, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxElement = phi i64 [ %15, %preheader__1 ], [ %43, %exiting__2 ]
  %19 = icmp sle i64 %idxElement, %17
  %20 = icmp sge i64 %idxElement, %17
  %21 = select i1 %18, i1 %19, i1 %20
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = load { i64, %Callable* }*, { i64, %Callable* }** %current, align 8
  %23 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %22, i32 0, i32 1
  %24 = load %Callable*, %Callable** %23, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 1)
  %25 = bitcast { i64, %Callable* }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 1)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %27 = bitcast i8* %26 to { i64, %Callable* }**
  %28 = load { i64, %Callable* }*, { i64, %Callable* }** %27, align 8
  %29 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %28, i32 0, i32 1
  %30 = load %Callable*, %Callable** %29, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 1)
  %31 = bitcast { i64, %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { i64, %Callable* }* }* getelementptr ({ { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { { i64, %Callable* }*, { i64, %Callable* }* }*
  %34 = getelementptr inbounds { { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* %33, i32 0, i32 1
  store { i64, %Callable* }* %22, { i64, %Callable* }** %34, align 8
  store { i64, %Callable* }* %28, { i64, %Callable* }** %35, align 8
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }* }* getelementptr ({ { i64, %Callable* }* }, { { i64, %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %folder, %Tuple* %32, %Tuple* %36)
  %37 = bitcast %Tuple* %36 to { { i64, %Callable* }* }*
  %38 = getelementptr inbounds { { i64, %Callable* }* }, { { i64, %Callable* }* }* %37, i32 0, i32 0
  %39 = load { i64, %Callable* }*, { i64, %Callable* }** %38, align 8
  %40 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %39, i32 0, i32 1
  %41 = load %Callable*, %Callable** %40, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %41, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %41, i32 1)
  %42 = bitcast { i64, %Callable* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %41, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %41, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  store { i64, %Callable* }* %39, { i64, %Callable* }** %current, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %43 = add i64 %idxElement, %16
  br label %header__2

exit__2:                                          ; preds = %header__2
  %44 = load { i64, %Callable* }*, { i64, %Callable* }** %current, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  %45 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %46 = phi i64 [ 0, %exit__2 ], [ %54, %exiting__3 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %46)
  %49 = bitcast i8* %48 to { i64, %Callable* }**
  %50 = load { i64, %Callable* }*, { i64, %Callable* }** %49, align 8
  %51 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %50, i32 0, i32 1
  %52 = load %Callable*, %Callable** %51, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %52, i32 -1)
  %53 = bitcast { i64, %Callable* }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %54 = add i64 %46, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %55 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %44, i32 0, i32 1
  %56 = load %Callable*, %Callable** %55, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %56, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %56, i32 -1)
  %57 = bitcast { i64, %Callable* }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  ret { i64, %Callable* }* %44
}

define internal %Array* @Microsoft__Quantum__Arrays___4adfaffa1d224736a6c92f5abc9f739b_Padded__body(i64 %nElementsTotal, { double, double }* %defaultElement, %Array* %inputArray) {
entry:
  %0 = bitcast { double, double }* %defaultElement to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %1 = sub i64 %nElementsInitial, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 1)
  %nAbsElementsTotal = call i64 @Microsoft__Quantum__Math__AbsI__body(i64 %nElementsTotal)
  %9 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %10 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @35, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %9, i1 true, %String* %10)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___905ac1230d4942abb41de7c18651b8a2_ConstantArray__body(i64 %nElementsPad, { double, double }* %defaultElement)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %padArray)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 1)
  %20 = icmp sge i64 %nElementsTotal, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  %21 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %21)
  %23 = sub i64 %22, 1
  br label %header__3

condFalse__1:                                     ; preds = %exit__2
  %24 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %24)
  %26 = sub i64 %25, 1
  br label %header__4

condContinue__1:                                  ; preds = %exit__4, %exit__3
  %27 = phi %Array* [ %21, %exit__3 ], [ %24, %exit__4 ]
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  %28 = sub i64 %nElementsInitial, 1
  br label %header__5

header__3:                                        ; preds = %exiting__3, %condTrue__1
  %29 = phi i64 [ 0, %condTrue__1 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %23
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  br label %condContinue__1

header__4:                                        ; preds = %exiting__4, %condFalse__1
  %36 = phi i64 [ 0, %condFalse__1 ], [ %42, %exiting__4 ]
  %37 = icmp sle i64 %36, %26
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 %36)
  %39 = bitcast i8* %38 to { double, double }**
  %40 = load { double, double }*, { double, double }** %39, align 8
  %41 = bitcast { double, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %42 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  br label %condContinue__1

header__5:                                        ; preds = %exiting__5, %condContinue__1
  %43 = phi i64 [ 0, %condContinue__1 ], [ %49, %exiting__5 ]
  %44 = icmp sle i64 %43, %28
  br i1 %44, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %43)
  %46 = bitcast i8* %45 to { double, double }**
  %47 = load { double, double }*, { double, double }** %46, align 8
  %48 = bitcast { double, double }* %47 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %49 = add i64 %43, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 -1)
  %50 = sub i64 %11, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %51 = phi i64 [ 0, %exit__5 ], [ %57, %exiting__6 ]
  %52 = icmp sle i64 %51, %50
  br i1 %52, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %51)
  %54 = bitcast i8* %53 to { double, double }**
  %55 = load { double, double }*, { double, double }** %54, align 8
  %56 = bitcast { double, double }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %57 = add i64 %51, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  %58 = sub i64 %11, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %59 = phi i64 [ 0, %exit__6 ], [ %65, %exiting__7 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %59)
  %62 = bitcast i8* %61 to { double, double }**
  %63 = load { double, double }*, { double, double }** %62, align 8
  %64 = bitcast { double, double }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %64, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %65 = add i64 %59, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %padArray, i32 -1)
  ret %Array* %27
}

define internal void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__body({ %Callable* }* %oracle, i64 %power, double %theta, %Array* %targetState, %Qubit* %controlQubit) {
entry:
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %3 = fneg double %theta
  %4 = sitofp i64 %power to double
  %inversionAngle = fmul double %3, %4
  call void @__quantum__qis__h__body(%Qubit* %controlQubit)
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %inversionAngle, %Qubit* %controlQubit)
  %5 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %5)
  %6 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  store %Qubit* %controlQubit, %Qubit** %8, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64, %Array* }*
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  store i64 %power, i64* %11, align 4
  store %Array* %targetState, %Array** %12, align 8
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Array* }* }* getelementptr ({ %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array*, { i64, %Array* }* }*
  %15 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %14, i32 0, i32 1
  store %Array* %6, %Array** %15, align 8
  store { i64, %Array* }* %10, { i64, %Array* }** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %5, %Tuple* %13, %Tuple* null)
  call void @__quantum__qis__h__body(%Qubit* %controlQubit)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__adj({ %Callable* }* %oracle, i64 %power, double %theta, %Array* %targetState, %Qubit* %controlQubit) {
entry:
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %3 = fneg double %theta
  %4 = sitofp i64 %power to double
  %__qsVar0__inversionAngle__ = fmul double %3, %4
  call void @__quantum__qis__h__body(%Qubit* %controlQubit)
  %5 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %5)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %5)
  %6 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  store %Qubit* %controlQubit, %Qubit** %8, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64, %Array* }*
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  store i64 %power, i64* %11, align 4
  store %Array* %targetState, %Array** %12, align 8
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Array* }* }* getelementptr ({ %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array*, { i64, %Array* }* }*
  %15 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %14, i32 0, i32 1
  store %Array* %6, %Array** %15, align 8
  store { i64, %Array* }* %10, { i64, %Array* }** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %5, %Tuple* %13, %Tuple* null)
  call void @Microsoft__Quantum__Intrinsic__Rz__adj(double %__qsVar0__inversionAngle__, %Qubit* %controlQubit)
  call void @__quantum__qis__h__body(%Qubit* %controlQubit)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__ctl(%Array* %__controlQubits__, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 0
  %oracle = load { %Callable* }*, { %Callable* }** %1, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 1
  %power = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 2
  %theta = load double, double* %6, align 8
  %7 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetState = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %8 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 4
  %controlQubit = load %Qubit*, %Qubit** %8, align 8
  %9 = fneg double %theta
  %10 = sitofp i64 %power to double
  %inversionAngle = fmul double %9, %10
  call void @__quantum__qis__h__body(%Qubit* %controlQubit)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { double, %Qubit* }*
  %13 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %12, i32 0, i32 1
  store double %inversionAngle, double* %13, align 8
  store %Qubit* %controlQubit, %Qubit** %14, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %12)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %3, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to %Qubit**
  store %Qubit* %controlQubit, %Qubit** %18, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 1)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { i64, %Array* }*
  %21 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %20, i32 0, i32 1
  store i64 %power, i64* %21, align 4
  store %Array* %targetState, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Array* }* }* getelementptr ({ %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { i64, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %24, i32 0, i32 1
  store %Array* %16, %Array** %25, align 8
  store { i64, %Array* }* %20, { i64, %Array* }** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { i64, %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { %Array*, { i64, %Array* }* }* }*
  %29 = getelementptr inbounds { %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* %28, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %29, align 8
  store { %Array*, { i64, %Array* }* }* %24, { %Array*, { i64, %Array* }* }** %30, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %27, %Tuple* null)
  call void @__quantum__qis__h__body(%Qubit* %controlQubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__ctladj(%Array* %__controlQubits__, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 0
  %oracle = load { %Callable* }*, { %Callable* }** %1, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 1
  %power = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 2
  %theta = load double, double* %6, align 8
  %7 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetState = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %8 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 4
  %controlQubit = load %Qubit*, %Qubit** %8, align 8
  %9 = fneg double %theta
  %10 = sitofp i64 %power to double
  %__qsVar0__inversionAngle__ = fmul double %9, %10
  call void @__quantum__qis__h__body(%Qubit* %controlQubit)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %3, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %11)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 0)
  %14 = bitcast i8* %13 to %Qubit**
  store %Qubit* %controlQubit, %Qubit** %14, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { i64, %Array* }*
  %17 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %16, i32 0, i32 1
  store i64 %power, i64* %17, align 4
  store %Array* %targetState, %Array** %18, align 8
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Array* }* }* getelementptr ({ %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, { i64, %Array* }* }*
  %21 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %20, i32 0, i32 1
  store %Array* %12, %Array** %21, align 8
  store { i64, %Array* }* %16, { i64, %Array* }** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { i64, %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { %Array*, { i64, %Array* }* }* }*
  %25 = getelementptr inbounds { %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* %24, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %25, align 8
  store { %Array*, { i64, %Array* }* }* %20, { %Array*, { i64, %Array* }* }** %26, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %23, %Tuple* null)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { double, %Qubit* }*
  %29 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %28, i32 0, i32 1
  store double %__qsVar0__inversionAngle__, double* %29, align 8
  store %Qubit* %controlQubit, %Qubit** %30, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %28)
  call void @__quantum__qis__h__body(%Qubit* %controlQubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  ret void
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation____QsRef3___AddGeneratorSystems____body(i64 %idxTerm, i64 %nTermsA, i64 %nTermsB, %Callable* %generatorIndexFunctionA, %Callable* %generatorIndexFunctionB) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 1)
  %0 = icmp slt i64 %idxTerm, %nTermsA
  br i1 %0, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { i64 }*
  %3 = getelementptr inbounds { i64 }, { i64 }* %2, i32 0, i32 0
  store i64 %idxTerm, i64* %3, align 4
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorIndexFunctionA, %Tuple* %1, %Tuple* %4)
  %5 = bitcast %Tuple* %4 to { { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %7

else__1:                                          ; preds = %entry
  %8 = sub i64 %idxTerm, %nTermsA
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64 }*
  %11 = getelementptr inbounds { i64 }, { i64 }* %10, i32 0, i32 0
  store i64 %8, i64* %11, align 4
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorIndexFunctionB, %Tuple* %9, %Tuple* %12)
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %15

continue__1:                                      ; No predecessors!
  unreachable
}

define internal { double, { { %Callable* }* }* }* @Microsoft__Quantum__Simulation____QsRef3___PauliBlockEncoding____body({ i64, %Callable* }* %generatorSystem, %Callable* %statePrepUnitary, %Callable* %multiplexer) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %intToGenIdx = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %intToGenIdx, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %intToGenIdx, i32 1)
  %1 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %multiplexer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i32 1)
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %2, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %intToGenIdx, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %intToGenIdx, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3__IdxToCoeff____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %intToGenIdx, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %intToGenIdx, i32 1)
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__PauliCoefficientFromGenIdx__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, %Callable*, %Callable* }*
  %7 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %6, i32 0, i32 2
  store %Callable* %3, %Callable** %7, align 8
  store %Callable* %intToGenIdx, %Callable** %8, align 8
  store %Callable* %4, %Callable** %9, align 8
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__53__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__29__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %10 = sub i64 %nTerms, 1
  %11 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %10, 2
  %12 = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %11)
  %coefficients = call %Array* @Microsoft__Quantum__Arrays___20d53ea8250b40bc86f0a0047df3f3c9_Mapped__body(%Callable* %op, %Array* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %13 = call double @Microsoft__Quantum__Math__PNorm__body(double 2.000000e+00, %Array* %coefficients)
  %oneNorm = call double @Microsoft__Quantum__Math__PowD__body(double %13, double 2.000000e+00)
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3__IdxToUnitary____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %intToGenIdx, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %intToGenIdx, i32 1)
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3__PauliLCUUnitary____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, %Callable*, %Callable* }*
  %18 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %17, i32 0, i32 2
  store %Callable* %14, %Callable** %18, align 8
  store %Callable* %intToGenIdx, %Callable** %19, align 8
  store %Callable* %15, %Callable** %20, align 8
  %21 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__54__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__30__FunctionTable, %Tuple* %16)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %unitaryGenerator = bitcast %Tuple* %22 to { i64, %Callable* }*
  %23 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %24 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  store i64 %nTerms, i64* %23, align 4
  store %Callable* %21, %Callable** %24, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Array* }*
  %27 = getelementptr inbounds { %Array* }, { %Array* }* %26, i32 0, i32 0
  store %Array* %coefficients, %Array** %27, align 8
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %statePrepUnitary, %Tuple* %25, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { %Callable* }*
  %30 = getelementptr inbounds { %Callable* }, { %Callable* }* %29, i32 0, i32 0
  %statePreparation = load %Callable*, %Callable** %30, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 1)
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %multiplexer, %Tuple* %22, %Tuple* %31)
  %32 = bitcast %Tuple* %31 to { %Callable* }*
  %33 = getelementptr inbounds { %Callable* }, { %Callable* }* %32, i32 0, i32 0
  %selector = load %Callable*, %Callable** %33, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 1)
  %34 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %35 = call %Callable* @Microsoft__Quantum__Simulation___5250fdacb0b447b694e488df5bd25347_BlockEncodingByLCU__body(%Callable* %statePreparation, %Callable* %selector)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Callable*, %Callable* }*
  %38 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %37, i32 0, i32 1
  store %Callable* %34, %Callable** %38, align 8
  store %Callable* %35, %Callable** %39, align 8
  %40 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__55__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__31__FunctionTable, %Tuple* %36)
  %41 = call { %Callable* }* @Microsoft__Quantum__Simulation__BlockEncoding__body(%Callable* %40)
  %blockEncoding = call { { %Callable* }* }* @Microsoft__Quantum__Simulation__BlockEncodingReflection__body({ %Callable* }* %41)
  %42 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %blockEncoding, i32 0, i32 0
  %43 = load { %Callable* }*, { %Callable* }** %42, align 8
  %44 = getelementptr inbounds { %Callable* }, { %Callable* }* %43, i32 0, i32 0
  %45 = load %Callable*, %Callable** %44, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %45, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %45, i32 1)
  %46 = bitcast { %Callable* }* %43 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %46, i32 1)
  %47 = bitcast { { %Callable* }* }* %blockEncoding to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %45, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %45, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 1)
  %48 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }* }* }* getelementptr ({ double, { { %Callable* }* }* }, { double, { { %Callable* }* }* }* null, i32 1) to i64))
  %49 = bitcast %Tuple* %48 to { double, { { %Callable* }* }* }*
  %50 = getelementptr inbounds { double, { { %Callable* }* }* }, { double, { { %Callable* }* }* }* %49, i32 0, i32 0
  %51 = getelementptr inbounds { double, { { %Callable* }* }* }, { double, { { %Callable* }* }* }* %49, i32 0, i32 1
  store double %oneNorm, double* %50, align 8
  store { { %Callable* }* }* %blockEncoding, { { %Callable* }* }** %51, align 8
  %52 = getelementptr inbounds { %Callable* }, { %Callable* }* %41, i32 0, i32 0
  %53 = load %Callable*, %Callable** %52, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %intToGenIdx, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %intToGenIdx, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %intToGenIdx, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %intToGenIdx, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %45, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %45, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %46, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %40, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %40, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %53, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %53, i32 -1)
  %54 = bitcast { %Callable* }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %54, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %45, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  ret { double, { { %Callable* }* }* }* %49
}

define internal void @Lifted__PartialApplication__53__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %4 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %3, i32 0, i32 1
  %5 = load %Callable*, %Callable** %4, align 8
  %6 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %3, i32 0, i32 2
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Callable* }* getelementptr ({ i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i64, %Callable*, %Callable* }*
  %10 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %9, i32 0, i32 2
  store i64 %2, i64* %10, align 4
  store %Callable* %5, %Callable** %11, align 8
  store %Callable* %7, %Callable** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %3, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__IdxToCoeff____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load i64, i64* %1, align 4
  %5 = load %Callable*, %Callable** %2, align 8
  %6 = load %Callable*, %Callable** %3, align 8
  %7 = call double @Microsoft__Quantum__Simulation____QsRef3__IdxToCoeff____body(i64 %4, %Callable* %5, %Callable* %6)
  %8 = bitcast %Tuple* %result-tuple to { double }*
  %9 = getelementptr inbounds { double }, { double }* %8, i32 0, i32 0
  store double %7, double* %9, align 8
  ret void
}

define internal void @Microsoft__Quantum__Simulation__PauliCoefficientFromGenIdx__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, %Array* }*, %Array* }*
  %1 = call double @Microsoft__Quantum__Simulation__PauliCoefficientFromGenIdx__body({ { %Array*, %Array* }*, %Array* }* %0)
  %2 = bitcast %Tuple* %result-tuple to { double }*
  %3 = getelementptr inbounds { double }, { double }* %2, i32 0, i32 0
  store double %1, double* %3, align 8
  ret void
}

define internal void @MemoryManagement__29__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__29__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__54__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %4 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %3, i32 0, i32 1
  %5 = load %Callable*, %Callable** %4, align 8
  %6 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %3, i32 0, i32 2
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Callable* }* getelementptr ({ i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i64, %Callable*, %Callable* }*
  %10 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %9, i32 0, i32 2
  store i64 %2, i64* %10, align 4
  store %Callable* %5, %Callable** %11, align 8
  store %Callable* %7, %Callable** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %3, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__IdxToUnitary____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Callable* }, { i64, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load i64, i64* %1, align 4
  %5 = load %Callable*, %Callable** %2, align 8
  %6 = load %Callable*, %Callable** %3, align 8
  %7 = call %Callable* @Microsoft__Quantum__Simulation____QsRef3__IdxToUnitary____body(i64 %4, %Callable* %5, %Callable* %6)
  %8 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %9 = getelementptr inbounds { %Callable* }, { %Callable* }* %8, i32 0, i32 0
  store %Callable* %7, %Callable** %9, align 8
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__PauliLCUUnitary____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, %Array* }*, %Array* }*
  %1 = call %Callable* @Microsoft__Quantum__Simulation____QsRef3__PauliLCUUnitary____body({ { %Array*, %Array* }*, %Array* }* %0)
  %2 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %3 = getelementptr inbounds { %Callable* }, { %Callable* }* %2, i32 0, i32 0
  store %Callable* %1, %Callable** %3, align 8
  ret void
}

define internal void @MemoryManagement__30__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__30__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { { %Callable* }* }* @Microsoft__Quantum__Simulation__BlockEncodingReflection__body({ %Callable* }* %__Item1__) {
entry:
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %__Item1__, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Callable* }* }*
  %5 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %4, i32 0, i32 0
  store { %Callable* }* %__Item1__, { %Callable* }** %5, align 8
  %6 = getelementptr inbounds { %Callable* }, { %Callable* }* %__Item1__, i32 0, i32 0
  %7 = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 1)
  %8 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret { { %Callable* }* }* %4
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__BlockEncoding__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Lifted__PartialApplication__55__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Array* }* getelementptr ({ %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store %Array* %5, %Array** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__55__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Array* }* getelementptr ({ %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store %Array* %5, %Array** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__55__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Array* }* getelementptr ({ %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, %Array*, %Array* }*
  %14 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %13, i32 0, i32 2
  store %Callable* %7, %Callable** %14, align 8
  store %Array* %9, %Array** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { %Callable*, %Array*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { %Callable*, %Array*, %Array* }* %13, { %Callable*, %Array*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__55__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Array* }* getelementptr ({ %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, %Array*, %Array* }*
  %14 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %13, i32 0, i32 2
  store %Callable* %7, %Callable** %14, align 8
  store %Array* %9, %Array** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { %Callable*, %Array*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { %Callable*, %Array*, %Array* }* %13, { %Callable*, %Array*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____body(%Callable* %4, %Array* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____adj(%Callable* %4, %Array* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, %Array*, %Array* }*, { %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____ctl(%Array* %3, { %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, %Array*, %Array* }* }, { %Array*, { %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, %Array*, %Array* }*, { %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____ctladj(%Array* %3, { %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Simulation___5250fdacb0b447b694e488df5bd25347_BlockEncodingByLCU__body(%Callable* %statePreparation, %Callable* %selector) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %selector, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, %Callable*, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 2
  store %Callable* %0, %Callable** %3, align 8
  store %Callable* %statePreparation, %Callable** %4, align 8
  store %Callable* %selector, %Callable** %5, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__66__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__38__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 -1)
  ret %Callable* %6
}

define internal void @MemoryManagement__31__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__31__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Simulation____QsRef3__IdxToCoeff____body(i64 %idx, %Callable* %genFun, %Callable* %genIdxToCoeff) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genFun, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genFun, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genIdxToCoeff, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genIdxToCoeff, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64 }*
  %2 = getelementptr inbounds { i64 }, { i64 }* %1, i32 0, i32 0
  store i64 %idx, i64* %2, align 4
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %genFun, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { { { %Array*, %Array* }*, %Array* }* }*
  %5 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %4, i32 0, i32 0
  %6 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %5, align 8
  %7 = bitcast { { %Array*, %Array* }*, %Array* }* %6 to %Tuple*
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %genIdxToCoeff, %Tuple* %7, %Tuple* %8)
  %9 = bitcast %Tuple* %8 to { double }*
  %10 = getelementptr inbounds { double }, { double }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %d = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %12 = call double @__quantum__qis__sqrt__body(double %d)
  %13 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 0
  %14 = load { %Array*, %Array* }*, { %Array*, %Array* }** %13, align 8
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %14, i32 0, i32 0
  %16 = load %Array*, %Array** %15, align 8
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %14, i32 0, i32 1
  %18 = load %Array*, %Array** %17, align 8
  %19 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 1
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  %21 = bitcast { %Array*, %Array* }* %14 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genFun, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genFun, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genIdxToCoeff, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genIdxToCoeff, i32 -1)
  ret double %12
}

define internal double @Microsoft__Quantum__Simulation__PauliCoefficientFromGenIdx__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxPaulis = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxQubits = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 -1)
  ret double %9
}

define internal %Callable* @Microsoft__Quantum__Simulation____QsRef3__IdxToUnitary____body(i64 %idx, %Callable* %genFun, %Callable* %genIdxToUnitary) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genFun, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genFun, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genIdxToUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genIdxToUnitary, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64 }*
  %2 = getelementptr inbounds { i64 }, { i64 }* %1, i32 0, i32 0
  store i64 %idx, i64* %2, align 4
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %genFun, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { { { %Array*, %Array* }*, %Array* }* }*
  %5 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %4, i32 0, i32 0
  %6 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %5, align 8
  %7 = bitcast { { %Array*, %Array* }*, %Array* }* %6 to %Tuple*
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %genIdxToUnitary, %Tuple* %7, %Tuple* %8)
  %9 = bitcast %Tuple* %8 to { %Callable* }*
  %10 = getelementptr inbounds { %Callable* }, { %Callable* }* %9, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 0
  %13 = load { %Array*, %Array* }*, { %Array*, %Array* }** %12, align 8
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %15 = load %Array*, %Array** %14, align 8
  %16 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %6, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genFun, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genFun, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %genIdxToUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %genIdxToUnitary, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  %20 = bitcast { %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret %Callable* %11
}

define internal %Callable* @Microsoft__Quantum__Simulation____QsRef3__PauliLCUUnitary____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %12, i32 0, i32 1
  store %Callable* %10, %Callable** %13, align 8
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %14, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__56__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__32__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  ret %Callable* %15
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____body(%Callable* %op, %Array* %auxiliary, %Array* %system) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  %0 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxiliary)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { { %Array* }*, %Array* }*
  %3 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %2, i32 0, i32 1
  store { %Array* }* %0, { %Array* }** %3, align 8
  store %Array* %system, %Array** %4, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %1, %Tuple* null)
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %0, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  %7 = bitcast { %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____adj(%Callable* %op, %Array* %auxiliary, %Array* %system) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxiliary)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { { %Array* }*, %Array* }*
  %4 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 1
  store { %Array* }* %1, { %Array* }** %4, align 8
  store %Array* %system, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %2, %Tuple* null)
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %1, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  %8 = bitcast { %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____ctl(%Array* %__controlQubits__, { %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %op = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %auxiliary = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %system = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %5 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxiliary)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Array* }*, %Array* }*
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %7, i32 0, i32 1
  store { %Array* }* %5, { %Array* }** %8, align 8
  store %Array* %system, %Array** %9, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, { { %Array* }*, %Array* }* }*
  %12 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %11, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %12, align 8
  store { { %Array* }*, %Array* }* %7, { { %Array* }*, %Array* }** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %10, %Tuple* null)
  %14 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  %16 = bitcast { %Array* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyBlockEncodingFromBEandQubit____ctladj(%Array* %__controlQubits__, { %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %op = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %auxiliary = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %system = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_controlled(%Callable* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %5 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxiliary)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Array* }*, %Array* }*
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %7, i32 0, i32 1
  store { %Array* }* %5, { %Array* }** %8, align 8
  store %Array* %system, %Array** %9, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, { { %Array* }*, %Array* }* }*
  %12 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %11, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %12, align 8
  store { { %Array* }*, %Array* }* %7, { { %Array* }*, %Array* }** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %10, %Tuple* null)
  %14 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  %16 = bitcast { %Array* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxPaulis = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxQubits = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 1)
  %pauliString = call %Array* @Microsoft__Quantum__Simulation__IntsToPaulis__body(%Array* %idxPaulis)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %pauliQubits = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %idxQubits, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliQubits, i32 1)
  call void @Microsoft__Quantum__Canon__ApplyPauli__body(%Array* %pauliString, %Array* %pauliQubits)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fcmp olt double %9, 0.000000e+00
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %12 = bitcast i8* %11 to i2*
  store i2 0, i2* %12, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %theta = call double @Microsoft__Quantum__Math__PI__body()
  %13 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %pauliQubits)
  %qubits__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 0)
  %15 = bitcast i8* %14 to %Qubit**
  store %Qubit* %13, %Qubit** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliQubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliQubits, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Simulation__IntsToPaulis__body(%Array* %ints) {
entry:
  %paulis = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %ints, i32 1)
  %nInts = call i64 @__quantum__rt__array_get_size_1d(%Array* %ints)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nInts)
  %1 = sub i64 %nInts, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to i2*
  store i2 0, i2* %5, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %0, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  %7 = sub i64 %nInts, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxInt = phi i64 [ 0, %exit__1 ], [ %17, %exiting__2 ]
  %8 = icmp sle i64 %idxInt, %7
  br i1 %8, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %9 = load %Array*, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 -1)
  %10 = call %Array* @__quantum__rt__array_copy(%Array* %9, i1 false)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ints, i64 %idxInt)
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = call i2 @Microsoft__Quantum__Simulation__IntToPauli__body(i64 %13)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %idxInt)
  %16 = bitcast i8* %15 to i2*
  store i2 %14, i2* %16, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  store %Array* %10, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %17 = add i64 %idxInt, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %18 = load %Array*, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %ints, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  ret %Array* %18
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxPaulis__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxPaulis__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxQubits__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxQubits__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxPaulis__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxQubits__, i32 1)
  %__qsVar3__pauliString__ = call %Array* @Microsoft__Quantum__Simulation__IntsToPaulis__body(%Array* %__qsVar0__idxPaulis__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar3__pauliString__, i32 1)
  %__qsVar4__pauliQubits__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %__qsVar2__idxQubits__, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__pauliQubits__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fcmp olt double %9, 0.000000e+00
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %12 = bitcast i8* %11 to i2*
  store i2 0, i2* %12, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %theta = call double @Microsoft__Quantum__Math__PI__body()
  %13 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %__qsVar4__pauliQubits__)
  %qubits__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 0)
  %15 = bitcast i8* %14 to %Qubit**
  store %Qubit* %13, %Qubit** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @Microsoft__Quantum__Canon__ApplyPauli__adj(%Array* %__qsVar3__pauliString__, %Array* %__qsVar4__pauliQubits__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxPaulis__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxPaulis__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar3__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__pauliQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar3__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__pauliQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxPaulis = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxQubits = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 1)
  %pauliString = call %Array* @Microsoft__Quantum__Simulation__IntsToPaulis__body(%Array* %idxPaulis)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %pauliQubits = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %idxQubits, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliQubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliQubits, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Array* }*
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 1
  store %Array* %pauliString, %Array** %12, align 8
  store %Array* %pauliQubits, %Array** %13, align 8
  call void @Microsoft__Quantum__Canon__ApplyPauli__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %11)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %15 = bitcast i8* %14 to double*
  %16 = load double, double* %15, align 8
  %17 = fcmp olt double %16, 0.000000e+00
  br i1 %17, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %19 = bitcast i8* %18 to i2*
  store i2 0, i2* %19, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %theta = call double @Microsoft__Quantum__Math__PI__body()
  %20 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %pauliQubits)
  %qubits__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 0)
  %22 = bitcast i8* %21 to %Qubit**
  store %Qubit* %20, %Qubit** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, double, %Array* }*
  %25 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %24, i32 0, i32 1
  %27 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %24, i32 0, i32 2
  store %Array* %paulis, %Array** %25, align 8
  store double %theta, double* %26, align 8
  store %Array* %qubits__1, %Array** %27, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %24)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliQubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliQubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliQubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxPaulis__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxPaulis__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxQubits__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxQubits__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxPaulis__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxQubits__, i32 1)
  %__qsVar3__pauliString__ = call %Array* @Microsoft__Quantum__Simulation__IntsToPaulis__body(%Array* %__qsVar0__idxPaulis__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar3__pauliString__, i32 1)
  %__qsVar4__pauliQubits__ = call %Array* @Microsoft__Quantum__Arrays___781377a2a9174592812ecb8986ab6ed4_Subarray__body(%Array* %__qsVar2__idxQubits__, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__pauliQubits__, i32 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %11 = bitcast i8* %10 to double*
  %12 = load double, double* %11, align 8
  %13 = fcmp olt double %12, 0.000000e+00
  br i1 %13, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %15 = bitcast i8* %14 to i2*
  store i2 0, i2* %15, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %theta = call double @Microsoft__Quantum__Math__PI__body()
  %16 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %__qsVar4__pauliQubits__)
  %qubits__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 0)
  %18 = bitcast i8* %17 to %Qubit**
  store %Qubit* %16, %Qubit** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, double, %Array* }*
  %21 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %20, i32 0, i32 1
  %23 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %20, i32 0, i32 2
  store %Array* %paulis, %Array** %21, align 8
  store double %theta, double* %22, align 8
  store %Array* %qubits__1, %Array** %23, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %20)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar3__pauliString__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__pauliQubits__, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, %Array* }*
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 1
  store %Array* %__qsVar3__pauliString__, %Array** %26, align 8
  store %Array* %__qsVar4__pauliQubits__, %Array** %27, align 8
  call void @Microsoft__Quantum__Canon__ApplyPauli__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %25)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxPaulis__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxPaulis__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar3__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__pauliQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar3__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__pauliQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar3__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__pauliQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____body({ { %Callable* }* }* %blockEncoding, %Array* %auxiliary, %Array* %system) {
entry:
  %0 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %blockEncoding, i32 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = bitcast { { %Callable* }* }* %blockEncoding to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %7 = bitcast i8* %6 to i2*
  store i2 0, i2* %7, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %8 = call double @Microsoft__Quantum__Math__PI__body()
  %theta = fmul double -5.000000e-01, %8
  %9 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %system)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %11 = bitcast i8* %10 to %Qubit**
  store %Qubit* %9, %Qubit** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  %12 = call double @Microsoft__Quantum__Math__PI__body()
  call void @Microsoft__Quantum__Canon__RAll0__body(double %12, %Array* %auxiliary)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array*, %Array* }*
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %14, i32 0, i32 1
  store %Array* %auxiliary, %Array** %15, align 8
  store %Array* %system, %Array** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____adj({ { %Callable* }* }* %blockEncoding, %Array* %auxiliary, %Array* %system) {
entry:
  %0 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %blockEncoding, i32 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = bitcast { { %Callable* }* }* %blockEncoding to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %3, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %auxiliary, %Array** %9, align 8
  store %Array* %system, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  %11 = call double @Microsoft__Quantum__Math__PI__body()
  call void @Microsoft__Quantum__Canon__RAll0__adj(double %11, %Array* %auxiliary)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %13 = bitcast i8* %12 to i2*
  store i2 0, i2* %13, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %14 = call double @Microsoft__Quantum__Math__PI__body()
  %theta = fmul double -5.000000e-01, %14
  %15 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %system)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %17 = bitcast i8* %16 to %Qubit**
  store %Qubit* %15, %Qubit** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____ctl(%Array* %__controlQubits__, { { { %Callable* }* }*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 0
  %blockEncoding = load { { %Callable* }* }*, { { %Callable* }* }** %1, align 8
  %2 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %blockEncoding, i32 0, i32 0
  %3 = load { %Callable* }*, { %Callable* }** %2, align 8
  %4 = getelementptr inbounds { %Callable* }, { %Callable* }* %3, i32 0, i32 0
  %5 = load %Callable*, %Callable** %4, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %5, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %5, i32 1)
  %6 = bitcast { %Callable* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = bitcast { { %Callable* }* }* %blockEncoding to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 1
  %auxiliary = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  %9 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 2
  %system = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %11 = bitcast i8* %10 to i2*
  store i2 0, i2* %11, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %12 = call double @Microsoft__Quantum__Math__PI__body()
  %theta = fmul double -5.000000e-01, %12
  %13 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %system)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %15 = bitcast i8* %14 to %Qubit**
  store %Qubit* %13, %Qubit** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, double, %Array* }*
  %18 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %17, i32 0, i32 2
  store %Array* %paulis, %Array** %18, align 8
  store double %theta, double* %19, align 8
  store %Array* %qubits, %Array** %20, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %17)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  %21 = call double @Microsoft__Quantum__Math__PI__body()
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { double, %Array* }*
  %24 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %23, i32 0, i32 1
  store double %21, double* %24, align 8
  store %Array* %auxiliary, %Array** %25, align 8
  call void @Microsoft__Quantum__Canon__RAll0__ctl(%Array* %__controlQubits__, { double, %Array* }* %23)
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %5, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, %Array* }*
  %29 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %28, i32 0, i32 1
  store %Array* %auxiliary, %Array** %29, align 8
  store %Array* %system, %Array** %30, align 8
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { %Array*, { %Array*, %Array* }* }*
  %33 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %32, i32 0, i32 0
  %34 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %32, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %33, align 8
  store { %Array*, %Array* }* %28, { %Array*, %Array* }** %34, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %31, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____ctladj(%Array* %__controlQubits__, { { { %Callable* }* }*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 0
  %blockEncoding = load { { %Callable* }* }*, { { %Callable* }* }** %1, align 8
  %2 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %blockEncoding, i32 0, i32 0
  %3 = load { %Callable* }*, { %Callable* }** %2, align 8
  %4 = getelementptr inbounds { %Callable* }, { %Callable* }* %3, i32 0, i32 0
  %5 = load %Callable*, %Callable** %4, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %5, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %5, i32 1)
  %6 = bitcast { %Callable* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = bitcast { { %Callable* }* }* %blockEncoding to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 1
  %auxiliary = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 1)
  %9 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 2
  %system = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %5, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 1
  store %Array* %auxiliary, %Array** %13, align 8
  store %Array* %system, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { %Array*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %17, align 8
  store { %Array*, %Array* }* %12, { %Array*, %Array* }** %18, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %15, %Tuple* null)
  %19 = call double @Microsoft__Quantum__Math__PI__body()
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array* }*
  %22 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %21, i32 0, i32 1
  store double %19, double* %22, align 8
  store %Array* %auxiliary, %Array** %23, align 8
  call void @Microsoft__Quantum__Canon__RAll0__ctladj(%Array* %__controlQubits__, { double, %Array* }* %21)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %25 = bitcast i8* %24 to i2*
  store i2 0, i2* %25, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %26 = call double @Microsoft__Quantum__Math__PI__body()
  %theta = fmul double -5.000000e-01, %26
  %27 = call %Qubit* @Microsoft__Quantum__Arrays___af5d1f5b3fc545fd94571101b9dee3d5_Head__body(%Array* %system)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %29 = bitcast i8* %28 to %Qubit**
  store %Qubit* %27, %Qubit** %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Array*, double, %Array* }*
  %32 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 1
  %34 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %31, i32 0, i32 2
  store %Array* %paulis, %Array** %32, align 8
  store double %theta, double* %33, align 8
  store %Array* %qubits, %Array** %34, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %31)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxiliary, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__56__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { { %Array*, %Array* }*, %Array* }*, %Array* }*
  %8 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %7, i32 0, i32 1
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__56__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { { %Array*, %Array* }*, %Array* }*, %Array* }*
  %8 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %7, i32 0, i32 1
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__56__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %9, i32 0, i32 1
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { { %Array*, %Array* }*, %Array* }*, %Array* }* %9, { { { %Array*, %Array* }*, %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__56__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %9, i32 0, i32 1
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { { %Array*, %Array* }*, %Array* }*, %Array* }* %9, { { { %Array*, %Array* }*, %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____body({ { %Array*, %Array* }*, %Array* }* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____adj({ { %Array*, %Array* }*, %Array* }* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____ctl(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyPauliLCUUnitary____ctladj(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__32__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %3, align 8
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 %count-change)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 %count-change)
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 %count-change)
  %14 = bitcast { { %Array*, %Array* }*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__32__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %3, align 8
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 %count-change)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 %count-change)
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 %count-change)
  %14 = bitcast { { %Array*, %Array* }*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____body(double %trotterStepSize, i64 %trotterOrder, double %maxTime, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %11 = fdiv double %maxTime, %trotterStepSize
  %nTimeSlices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %11)
  %12 = sitofp i64 %nTimeSlices to double
  %resizedTrotterStepSize = fdiv double %maxTime, %12
  %13 = sub i64 %nTimeSlices, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxTimeSlice = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %idxTimeSlice, %13
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %resizedTrotterStepSize)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array* }*
  %18 = getelementptr inbounds { %Array* }, { %Array* }* %17, i32 0, i32 0
  store %Array* %qubits, %Array** %18, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idxTimeSlice, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %trotterStepSize) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %0, align 8
  %1 = getelementptr inbounds { %Callable* }, { %Callable* }* %evolutionSet, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  %3 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %4, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %6 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %8, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* getelementptr ({ %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %12 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %11, i32 0, i32 1
  store %Callable* %9, %Callable** %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__60__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__36__FunctionTable, %Tuple* %10)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %trotterForm = bitcast %Tuple* %15 to { i64, %Callable* }*
  %16 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %trotterForm, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %trotterForm, i32 0, i32 1
  store i64 %nTerms, i64* %16, align 4
  store %Callable* %14, %Callable** %17, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %14, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %18 = call %Callable* @Microsoft__Quantum__Canon___4535c5767a504f01baac901c4cee390f_DecomposedIntoTimeStepsCA__body({ i64, %Callable* }* %trotterForm, i64 %trotterOrder)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Callable*, double }*
  %21 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %20, i32 0, i32 1
  store %Callable* %18, %Callable** %21, align 8
  store double %trotterStepSize, double* %22, align 8
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__61__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %19)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret %Callable* %23
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____adj(double %trotterStepSize, i64 %trotterOrder, double %maxTime, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %11 = fdiv double %maxTime, %trotterStepSize
  %__qsVar0__nTimeSlices__ = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %11)
  %12 = sitofp i64 %__qsVar0__nTimeSlices__ to double
  %__qsVar1__resizedTrotterStepSize__ = fdiv double %maxTime, %12
  %13 = sub i64 %__qsVar0__nTimeSlices__, 1
  %14 = sub i64 %13, 0
  %15 = sdiv i64 %14, 1
  %16 = mul i64 1, %15
  %17 = add i64 0, %16
  %18 = insertvalue %Range zeroinitializer, i64 %17, 0
  %19 = insertvalue %Range %18, i64 -1, 1
  %20 = insertvalue %Range %19, i64 0, 2
  %21 = extractvalue %Range %20, 0
  %22 = extractvalue %Range %20, 1
  %23 = extractvalue %Range %20, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %24 = icmp sgt i64 %22, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar2__idxTimeSlice__ = phi i64 [ %21, %preheader__1 ], [ %33, %exiting__1 ]
  %25 = icmp sle i64 %__qsVar2__idxTimeSlice__, %23
  %26 = icmp sge i64 %__qsVar2__idxTimeSlice__, %23
  %27 = select i1 %24, i1 %25, i1 %26
  br i1 %27, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %28 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %__qsVar1__resizedTrotterStepSize__)
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Array* }*
  %32 = getelementptr inbounds { %Array* }, { %Array* }* %31, i32 0, i32 0
  store %Array* %qubits, %Array** %32, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %30, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %33 = add i64 %__qsVar2__idxTimeSlice__, %22
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____ctl(%Array* %__controlQubits__, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 0
  %trotterStepSize = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 1
  %trotterOrder = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 2
  %maxTime = load double, double* %3, align 8
  %4 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 3
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 1)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 4
  %qubits = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %17 = fdiv double %maxTime, %trotterStepSize
  %nTimeSlices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %17)
  %18 = sitofp i64 %nTimeSlices to double
  %resizedTrotterStepSize = fdiv double %maxTime, %18
  %19 = sub i64 %nTimeSlices, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxTimeSlice = phi i64 [ 0, %entry ], [ %27, %exiting__1 ]
  %20 = icmp sle i64 %idxTimeSlice, %19
  br i1 %20, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %21 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %resizedTrotterStepSize)
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %21, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %22)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, %Array* }*
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %25, align 8
  store %Array* %qubits, %Array** %26, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %23, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %27 = add i64 %idxTimeSlice, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____ctladj(%Array* %__controlQubits__, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 0
  %trotterStepSize = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 1
  %trotterOrder = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 2
  %maxTime = load double, double* %3, align 8
  %4 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 3
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 1)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 4
  %qubits = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %17 = fdiv double %maxTime, %trotterStepSize
  %__qsVar0__nTimeSlices__ = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %17)
  %18 = sitofp i64 %__qsVar0__nTimeSlices__ to double
  %__qsVar1__resizedTrotterStepSize__ = fdiv double %maxTime, %18
  %19 = sub i64 %__qsVar0__nTimeSlices__, 1
  %20 = sub i64 %19, 0
  %21 = sdiv i64 %20, 1
  %22 = mul i64 1, %21
  %23 = add i64 0, %22
  %24 = insertvalue %Range zeroinitializer, i64 %23, 0
  %25 = insertvalue %Range %24, i64 -1, 1
  %26 = insertvalue %Range %25, i64 0, 2
  %27 = extractvalue %Range %26, 0
  %28 = extractvalue %Range %26, 1
  %29 = extractvalue %Range %26, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %30 = icmp sgt i64 %28, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar2__idxTimeSlice__ = phi i64 [ %27, %preheader__1 ], [ %40, %exiting__1 ]
  %31 = icmp sle i64 %__qsVar2__idxTimeSlice__, %29
  %32 = icmp sge i64 %__qsVar2__idxTimeSlice__, %29
  %33 = select i1 %30, i1 %31, i1 %32
  br i1 %33, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %34 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %__qsVar1__resizedTrotterStepSize__)
  %35 = call %Callable* @__quantum__rt__callable_copy(%Callable* %34, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %35)
  call void @__quantum__rt__callable_make_controlled(%Callable* %35)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array*, %Array* }*
  %38 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %37, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %38, align 8
  store %Array* %qubits, %Array** %39, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %35, %Tuple* %36, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %40 = add i64 %__qsVar2__idxTimeSlice__, %28
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %idx, double %stepsize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %0, align 8
  %1 = getelementptr inbounds { %Callable* }, { %Callable* }* %evolutionSet, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  %3 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %4, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %6 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %8, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64 }*
  %11 = getelementptr inbounds { i64 }, { i64 }* %10, i32 0, i32 0
  store i64 %idx, i64* %11, align 4
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorSystemFunction, %Tuple* %9, %Tuple* %12)
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %14, align 8
  %15 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15, align 8
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 1)
  %21 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 1)
  %22 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %24, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Callable* }* }*
  %27 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %26, i32 0, i32 0
  %28 = load { %Callable* }*, { %Callable* }** %27, align 8
  %29 = getelementptr inbounds { %Callable* }, { %Callable* }* %28, i32 0, i32 0
  %30 = load %Callable*, %Callable** %29, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { double, %Array* }*
  %33 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %32, i32 0, i32 0
  %34 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %32, i32 0, i32 1
  store double %stepsize, double* %33, align 8
  store %Array* %qubits, %Array** %34, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %30, %Tuple* %31, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 -1)
  %35 = bitcast { %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____adj({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %idx, double %stepsize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %__qsVar0__evolutionSet__ = load { %Callable* }*, { %Callable* }** %0, align 8
  %1 = getelementptr inbounds { %Callable* }, { %Callable* }* %__qsVar0__evolutionSet__, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  %3 = bitcast { %Callable* }* %__qsVar0__evolutionSet__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %__qsVar1__generatorSystem__ = load { i64, %Callable* }*, { i64, %Callable* }** %4, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i32 0, i32 1
  %__qsVar3__generatorSystemFunction__ = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  %6 = bitcast { i64, %Callable* }* %__qsVar1__generatorSystem__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i32 0, i32 0
  %__qsVar2__nTerms__ = load i64, i64* %8, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64 }*
  %11 = getelementptr inbounds { i64 }, { i64 }* %10, i32 0, i32 0
  store i64 %idx, i64* %11, align 4
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__generatorSystemFunction__, %Tuple* %9, %Tuple* %12)
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %__qsVar4__generatorIndex__ = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %14, align 8
  %15 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i32 0, i32 0
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15, align 8
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 1)
  %21 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 1)
  %22 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i32 0, i32 1
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %24, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Callable* }* }*
  %27 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %26, i32 0, i32 0
  %28 = load { %Callable* }*, { %Callable* }** %27, align 8
  %29 = getelementptr inbounds { %Callable* }, { %Callable* }* %28, i32 0, i32 0
  %30 = load %Callable*, %Callable** %29, align 8
  %31 = call %Callable* @__quantum__rt__callable_copy(%Callable* %30, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %31)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { double, %Array* }*
  %34 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %33, i32 0, i32 1
  store double %stepsize, double* %34, align 8
  store %Array* %qubits, %Array** %35, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %31, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 -1)
  %36 = bitcast { %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____ctl(%Array* %__controlQubits__, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 0
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %2 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %2, align 8
  %3 = getelementptr inbounds { %Callable* }, { %Callable* }* %evolutionSet, i32 0, i32 0
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  %5 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %8 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 1
  %idx = load i64, i64* %10, align 4
  %11 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 2
  %stepsize = load double, double* %11, align 8
  %12 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %13, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64 }*
  %16 = getelementptr inbounds { i64 }, { i64 }* %15, i32 0, i32 0
  store i64 %idx, i64* %16, align 4
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorSystemFunction, %Tuple* %14, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { { { %Array*, %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %19, align 8
  %20 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  %27 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %29, %Tuple* %30)
  %31 = bitcast %Tuple* %30 to { { %Callable* }* }*
  %32 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %31, i32 0, i32 0
  %33 = load { %Callable* }*, { %Callable* }** %32, align 8
  %34 = getelementptr inbounds { %Callable* }, { %Callable* }* %33, i32 0, i32 0
  %35 = load %Callable*, %Callable** %34, align 8
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { double, %Array* }*
  %39 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %38, i32 0, i32 1
  store double %stepsize, double* %39, align 8
  store %Array* %qubits, %Array** %40, align 8
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { %Array*, { double, %Array* }* }*
  %43 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %42, i32 0, i32 0
  %44 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %42, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %43, align 8
  store { double, %Array* }* %38, { double, %Array* }** %44, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %41, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  %45 = bitcast { %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____ctladj(%Array* %__controlQubits__, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 0
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %2 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %__qsVar0__evolutionSet__ = load { %Callable* }*, { %Callable* }** %2, align 8
  %3 = getelementptr inbounds { %Callable* }, { %Callable* }* %__qsVar0__evolutionSet__, i32 0, i32 0
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  %5 = bitcast { %Callable* }* %__qsVar0__evolutionSet__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %__qsVar1__generatorSystem__ = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i32 0, i32 1
  %__qsVar3__generatorSystemFunction__ = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  %8 = bitcast { i64, %Callable* }* %__qsVar1__generatorSystem__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 1
  %idx = load i64, i64* %10, align 4
  %11 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 2
  %stepsize = load double, double* %11, align 8
  %12 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i32 0, i32 0
  %__qsVar2__nTerms__ = load i64, i64* %13, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64 }*
  %16 = getelementptr inbounds { i64 }, { i64 }* %15, i32 0, i32 0
  store i64 %idx, i64* %16, align 4
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__generatorSystemFunction__, %Tuple* %14, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { { { %Array*, %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %__qsVar4__generatorIndex__ = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %19, align 8
  %20 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i32 0, i32 0
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  %27 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %29, %Tuple* %30)
  %31 = bitcast %Tuple* %30 to { { %Callable* }* }*
  %32 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %31, i32 0, i32 0
  %33 = load { %Callable* }*, { %Callable* }** %32, align 8
  %34 = getelementptr inbounds { %Callable* }, { %Callable* }* %33, i32 0, i32 0
  %35 = load %Callable*, %Callable** %34, align 8
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { double, %Array* }*
  %39 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %38, i32 0, i32 1
  store double %stepsize, double* %39, align 8
  store %Array* %qubits, %Array** %40, align 8
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { %Array*, { double, %Array* }* }*
  %43 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %42, i32 0, i32 0
  %44 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %42, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %43, align 8
  store { double, %Array* }* %38, { double, %Array* }** %44, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %41, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  %45 = bitcast { %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  ret void
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Simulation__AddGeneratorSystems__body({ i64, %Callable* }* %generatorSystemA, { i64, %Callable* }* %generatorSystemB) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystemA, i32 0, i32 1
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { i64, %Callable* }* %generatorSystemA to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystemB, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  %5 = bitcast { i64, %Callable* }* %generatorSystemB to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %nTermsA = call i64 @Microsoft__Quantum__Simulation__GetGeneratorSystemNTerms__body({ i64, %Callable* }* %generatorSystemA)
  %nTermsB = call i64 @Microsoft__Quantum__Simulation__GetGeneratorSystemNTerms__body({ i64, %Callable* }* %generatorSystemB)
  %generatorIndexFunctionA = call %Callable* @Microsoft__Quantum__Simulation__GetGeneratorSystemFunction__body({ i64, %Callable* }* %generatorSystemA)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 1)
  %generatorIndexFunctionB = call %Callable* @Microsoft__Quantum__Simulation__GetGeneratorSystemFunction__body({ i64, %Callable* }* %generatorSystemB)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef3___AddGeneratorSystems____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunctionB, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunctionB, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, i64, %Callable*, %Callable* }* getelementptr ({ %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, i64, i64, %Callable*, %Callable* }*
  %9 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %8, i32 0, i32 1
  %11 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %8, i32 0, i32 2
  %12 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %8, i32 0, i32 3
  %13 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %8, i32 0, i32 4
  store %Callable* %6, %Callable** %9, align 8
  store i64 %nTermsA, i64* %10, align 4
  store i64 %nTermsB, i64* %11, align 4
  store %Callable* %generatorIndexFunctionA, %Callable** %12, align 8
  store %Callable* %generatorIndexFunctionB, %Callable** %13, align 8
  %generatorIndexFunction = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__57__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__33__FunctionTable, %Tuple* %7)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  %14 = add i64 %nTermsA, %nTermsB
  %15 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %14, %Callable* %generatorIndexFunction)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunction, i32 -1)
  ret { i64, %Callable* }* %15
}

define internal i64 @Microsoft__Quantum__Simulation__GetGeneratorSystemNTerms__body({ i64, %Callable* }* %generatorSystem) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorIndexFunction = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  %1 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %2, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  ret i64 %nTerms
}

define internal %Callable* @Microsoft__Quantum__Simulation__GetGeneratorSystemFunction__body({ i64, %Callable* }* %generatorSystem) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorIndexFunction = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  %1 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %2, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  ret %Callable* %generatorIndexFunction
}

define internal void @Lifted__PartialApplication__57__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable*, %Callable* }*
  %4 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 1
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 2
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 3
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 4
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, i64, %Callable*, %Callable* }* getelementptr ({ i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, i64, i64, %Callable*, %Callable* }*
  %14 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 4
  store i64 %2, i64* %14, align 4
  store i64 %5, i64* %15, align 4
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Callable* %11, %Callable** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3___AddGeneratorSystems____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, i64, i64, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 4
  %6 = load i64, i64* %1, align 4
  %7 = load i64, i64* %2, align 4
  %8 = load i64, i64* %3, align 4
  %9 = load %Callable*, %Callable** %4, align 8
  %10 = load %Callable*, %Callable** %5, align 8
  %11 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation____QsRef3___AddGeneratorSystems____body(i64 %6, i64 %7, i64 %8, %Callable* %9, %Callable* %10)
  %12 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %13 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %12, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %11, { { %Array*, %Array* }*, %Array* }** %13, align 8
  ret void
}

define internal void @MemoryManagement__33__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 3
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 4
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__33__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 3
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 4
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Simulation__AdiabaticStateEnergyUnitary__body(%Callable* %statePrepUnitary, %Callable* %adiabaticUnitary, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm, %Array* %qubits) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %adiabaticUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %adiabaticUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %1, i32 0, i32 0
  store %Array* %qubits, %Array** %2, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %statePrepUnitary, %Tuple* %0, %Tuple* null)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  store %Array* %qubits, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %adiabaticUnitary, %Tuple* %3, %Tuple* null)
  %6 = call { %Callable* }* @Microsoft__Quantum__Oracles__OracleToDiscrete__body(%Callable* %qpeUnitary)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }*, %Array* }* getelementptr ({ { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { { %Callable* }*, %Array* }*
  %9 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %8, i32 0, i32 1
  store { %Callable* }* %6, { %Callable* }** %9, align 8
  store %Array* %qubits, %Array** %10, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %phaseEstAlgorithm, %Tuple* %7, %Tuple* %11)
  %12 = bitcast %Tuple* %11 to { double }*
  %13 = getelementptr inbounds { double }, { double }* %12, i32 0, i32 0
  %phaseEst = load double, double* %13, align 8
  %14 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %15 = load %Callable*, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %adiabaticUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %adiabaticUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  %16 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret double %phaseEst
}

define internal { %Callable* }* @Microsoft__Quantum__Oracles__OracleToDiscrete__body(%Callable* %blackBoxOracle) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %blackBoxOracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %blackBoxOracle, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %blackBoxOracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %blackBoxOracle, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %2, i32 0, i32 1
  store %Callable* %0, %Callable** %3, align 8
  store %Callable* %blackBoxOracle, %Callable** %4, align 8
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__75__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__43__FunctionTable, %Tuple* %1)
  %6 = call { %Callable* }* @Microsoft__Quantum__Oracles__DiscreteOracle__body(%Callable* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %blackBoxOracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %blackBoxOracle, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  ret { %Callable* }* %6
}

define internal double @Microsoft__Quantum__Simulation__EstimateEnergyWithAdiabaticEvolution__body(i64 %nQubits, %Callable* %statePrepUnitary, %Callable* %adiabaticUnitary, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %adiabaticUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %adiabaticUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  %qubits = call %Array* @__quantum__rt__qubit_allocate_array(i64 %nQubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %phaseEst = call double @Microsoft__Quantum__Simulation__AdiabaticStateEnergyUnitary__body(%Callable* %statePrepUnitary, %Callable* %adiabaticUnitary, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm, %Array* %qubits)
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %adiabaticUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %adiabaticUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %qubits)
  ret double %phaseEst
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__body(i64 %idxTerm) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to i64*
  store i64 0, i64* %2, align 4
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to double*
  store double 0.000000e+00, double* %5, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %0, %Array** %8, align 8
  store %Array* %3, %Array** %9, align 8
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 0)
  %12 = bitcast i8* %11 to i64*
  store i64 0, i64* %12, align 4
  %13 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %7, %Array* %10)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %13
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Simulation__IdentityGeneratorSystem__body() {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 0, %Callable* %0)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret { i64, %Callable* }* %1
}

define internal void @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__body(i64 %2)
  %4 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %5 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %4, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %3, { { %Array*, %Array* }*, %Array* }** %5, align 8
  ret void
}

define internal i2 @Microsoft__Quantum__Simulation__IntToPauli__body(i64 %idx) {
entry:
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %1 = bitcast i8* %0 to i2*
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 1)
  %3 = bitcast i8* %2 to i2*
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 2)
  %5 = bitcast i8* %4 to i2*
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 3)
  %7 = bitcast i8* %6 to i2*
  store i2 0, i2* %1, align 1
  store i2 1, i2* %3, align 1
  store i2 -1, i2* %5, align 1
  store i2 -2, i2* %7, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 %idx)
  %9 = bitcast i8* %8 to i2*
  %10 = load i2, i2* %9, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  ret i2 %10
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body(%Array* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__MultiplexerFromGenerator__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable* }*
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Callable*, %Callable** %2, align 8
  %5 = call %Callable* @Microsoft__Quantum__Canon__MultiplexerFromGenerator__body(i64 %3, %Callable* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  store %Callable* %5, %Callable** %7, align 8
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__body(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %coefficients = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array*, { %Array* }* }*
  %8 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 1
  %10 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 2
  store double 0.000000e+00, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %qubits, { %Array* }** %10, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %7)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %coefficients = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array*, { %Array* }* }*
  %8 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 1
  %10 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 2
  store double 0.000000e+00, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %qubits, { %Array* }** %10, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %7)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__58__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load { { %Callable* }* }*, { { %Callable* }* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }* }*, %Array*, %Array* }* getelementptr ({ { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Callable* }* }*, %Array*, %Array* }*
  %10 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %9, i32 0, i32 2
  store { { %Callable* }* }* %2, { { %Callable* }* }** %10, align 8
  store %Array* %5, %Array** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__58__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load { { %Callable* }* }*, { { %Callable* }* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }* }*, %Array*, %Array* }* getelementptr ({ { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Callable* }* }*, %Array*, %Array* }*
  %10 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %9, i32 0, i32 2
  store { { %Callable* }* }* %2, { { %Callable* }* }** %10, align 8
  store %Array* %5, %Array** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__58__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load { { %Callable* }* }*, { { %Callable* }* }** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }* }*, %Array*, %Array* }* getelementptr ({ { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Callable* }* }*, %Array*, %Array* }*
  %14 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %13, i32 0, i32 2
  store { { %Callable* }* }* %7, { { %Callable* }* }** %14, align 8
  store %Array* %9, %Array** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* getelementptr ({ %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Callable* }* }*, %Array*, %Array* }* %13, { { { %Callable* }* }*, %Array*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__58__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load { { %Callable* }* }*, { { %Callable* }* }** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }* }*, %Array*, %Array* }* getelementptr ({ { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Callable* }* }*, %Array*, %Array* }*
  %14 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %13, i32 0, i32 2
  store { { %Callable* }* }* %7, { { %Callable* }* }** %14, align 8
  store %Array* %9, %Array** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* getelementptr ({ %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Callable* }* }*, %Array*, %Array* }* %13, { { { %Callable* }* }*, %Array*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }* }*, %Array*, %Array* }*
  %1 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }* }*, { { %Callable* }* }** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____body({ { %Callable* }* }* %4, %Array* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }* }*, %Array*, %Array* }*
  %1 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Callable* }* }*, %Array*, %Array* }, { { { %Callable* }* }*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }* }*, { { %Callable* }* }** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____adj({ { %Callable* }* }* %4, %Array* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Callable* }* }*, %Array*, %Array* }*, { { { %Callable* }* }*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____ctl(%Array* %3, { { { %Callable* }* }*, %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }, { %Array*, { { { %Callable* }* }*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Callable* }* }*, %Array*, %Array* }*, { { { %Callable* }* }*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__ApplyQuantumWalkByQubitization____ctladj(%Array* %3, { { { %Callable* }* }*, %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__34__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %0, i32 0, i32 1
  %4 = load { { %Callable* }* }*, { { %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  %10 = bitcast { { %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__34__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Callable* }* }* }, { %Callable*, { { %Callable* }* }* }* %0, i32 0, i32 1
  %4 = load { { %Callable* }* }*, { { %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  %10 = bitcast { { %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__SimulationAlgorithm__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Microsoft__Quantum__Simulation__AddGeneratorSystems__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %5 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__AddGeneratorSystems__body({ i64, %Callable* }* %3, { i64, %Callable* }* %4)
  %6 = bitcast %Tuple* %result-tuple to { { i64, %Callable* }* }*
  %7 = getelementptr inbounds { { i64, %Callable* }* }, { { i64, %Callable* }* }* %6, i32 0, i32 0
  store { i64, %Callable* }* %5, { i64, %Callable* }** %7, align 8
  ret void
}

define internal void @Lifted__PartialApplication__59__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %6 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 1
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 2
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %14 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store i64 %4, i64* %15, align 4
  store double %7, double* %16, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %17, align 8
  store %Array* %11, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__59__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %6 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 1
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 2
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %14 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store i64 %4, i64* %15, align 4
  store double %7, double* %16, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %17, align 8
  store %Array* %11, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__59__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 1
  %13 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %12, align 8
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 2
  %15 = load %Array*, %Array** %14, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %18 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 3
  %22 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 4
  store double %7, double* %18, align 8
  store i64 %9, i64* %19, align 4
  store double %11, double* %20, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %13, { { %Callable* }*, { i64, %Callable* }* }** %21, align 8
  store %Array* %15, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__59__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 1
  %13 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %12, align 8
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 2
  %15 = load %Array*, %Array** %14, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %18 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 3
  %22 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 4
  store double %7, double* %18, align 8
  store i64 %9, i64* %19, align 4
  store double %11, double* %20, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %13, { { %Callable* }*, { i64, %Callable* }* }** %21, align 8
  store %Array* %15, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %1 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load i64, i64* %2, align 4
  %8 = load double, double* %3, align 8
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____body(double %6, i64 %7, double %8, { { %Callable* }*, { i64, %Callable* }* }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %1 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load i64, i64* %2, align 4
  %8 = load double, double* %3, align 8
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____adj(double %6, i64 %7, double %8, { { %Callable* }*, { i64, %Callable* }* }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____ctl(%Array* %3, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__TrotterSimulationAlgorithmImpl____ctladj(%Array* %3, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__35__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__35__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__60__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64, double, %Array* }*
  %4 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %12 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %2, { { %Callable* }*, { i64, %Callable* }* }** %12, align 8
  store i64 %5, i64* %13, align 4
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__60__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64, double, %Array* }*
  %4 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %12 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %2, { { %Callable* }*, { i64, %Callable* }* }** %12, align 8
  store i64 %5, i64* %13, align 4
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__60__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, double, %Array* }*, { i64, double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %6, align 8
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 2
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %16 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %7, { { %Callable* }*, { i64, %Callable* }* }** %16, align 8
  store i64 %9, i64* %17, align 4
  store double %11, double* %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* getelementptr ({ %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__60__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, double, %Array* }*, { i64, double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %6, align 8
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 2
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %16 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %7, { { %Callable* }*, { i64, %Callable* }* }** %16, align 8
  store i64 %9, i64* %17, align 4
  store double %11, double* %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* getelementptr ({ %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %1 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 3
  %5 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %6 = load i64, i64* %2, align 4
  %7 = load double, double* %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____body({ { %Callable* }*, { i64, %Callable* }* }* %5, i64 %6, double %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %1 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 3
  %5 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %6 = load i64, i64* %2, align 4
  %7 = load double, double* %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____adj({ { %Callable* }*, { i64, %Callable* }* }* %5, i64 %6, double %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____ctl(%Array* %3, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef3__TrotterStepImpl____ctladj(%Array* %3, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__36__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__36__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__61__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__61__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__61__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__61__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____body(%Callable* %statePreparation, %Callable* %selector, { %Array* }* %auxiliary, %Array* %system) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %auxiliary, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %auxiliary to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, %Array* }*
  %5 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i32 0, i32 1
  store %Callable* %selector, %Callable** %5, align 8
  store %Array* %system, %Array** %6, align 8
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__62__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__37__FunctionTable, %Tuple* %3)
  call void @Microsoft__Quantum__Canon___0f498e1ece294d4db89965060edcd2ac_ApplyWithCA__body(%Callable* %statePreparation, %Callable* %7, { %Array* }* %auxiliary)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__62__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Array* }*, %Array* }*
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %5, align 8
  store %Array* %2, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__62__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Array* }*, %Array* }*
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %5, align 8
  store %Array* %2, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__62__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 1
  store { %Array* }* %4, { %Array* }** %10, align 8
  store %Array* %7, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array* }*, %Array* }* %9, { { %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__62__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 1
  store { %Array* }* %4, { %Array* }** %10, align 8
  store %Array* %7, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array* }*, %Array* }* %9, { { %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @MemoryManagement__37__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__37__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____adj(%Callable* %statePreparation, %Callable* %selector, { %Array* }* %auxiliary, %Array* %system) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %auxiliary, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %auxiliary to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, %Array* }*
  %5 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i32 0, i32 1
  store %Callable* %selector, %Callable** %5, align 8
  store %Array* %system, %Array** %6, align 8
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__63__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__37__FunctionTable, %Tuple* %3)
  call void @Microsoft__Quantum__Canon___0f498e1ece294d4db89965060edcd2ac_ApplyWithCA__adj(%Callable* %statePreparation, %Callable* %7, { %Array* }* %auxiliary)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__63__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Array* }*, %Array* }*
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %5, align 8
  store %Array* %2, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__63__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Array* }*, %Array* }*
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %5, align 8
  store %Array* %2, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__63__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 1
  store { %Array* }* %4, { %Array* }** %10, align 8
  store %Array* %7, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array* }*, %Array* }* %9, { { %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__63__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 1
  store { %Array* }* %4, { %Array* }** %10, align 8
  store %Array* %7, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array* }*, %Array* }* %9, { { %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %statePreparation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %selector = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %auxiliary = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %auxiliary, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %auxiliary to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 3
  %system = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %selector, %Callable** %10, align 8
  store %Array* %system, %Array** %11, align 8
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__64__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__37__FunctionTable, %Tuple* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, { %Array* }* }* getelementptr ({ %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Callable*, %Callable*, { %Array* }* }*
  %15 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %14, i32 0, i32 1
  %17 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %14, i32 0, i32 2
  store %Callable* %statePreparation, %Callable** %15, align 8
  store %Callable* %12, %Callable** %16, align 8
  store { %Array* }* %auxiliary, { %Array* }** %17, align 8
  call void @Microsoft__Quantum__Canon___0f498e1ece294d4db89965060edcd2ac_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, { %Array* }* }* %14)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__64__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Array* }*, %Array* }*
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %5, align 8
  store %Array* %2, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__64__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Array* }*, %Array* }*
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %5, align 8
  store %Array* %2, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__64__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 1
  store { %Array* }* %4, { %Array* }** %10, align 8
  store %Array* %7, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array* }*, %Array* }* %9, { { %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__64__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 1
  store { %Array* }* %4, { %Array* }** %10, align 8
  store %Array* %7, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array* }*, %Array* }* %9, { { %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %statePreparation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %selector = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %auxiliary = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %auxiliary, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %auxiliary to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 3
  %system = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePreparation, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %selector, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %system, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  store %Callable* %selector, %Callable** %10, align 8
  store %Array* %system, %Array** %11, align 8
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__65__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__37__FunctionTable, %Tuple* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, { %Array* }* }* getelementptr ({ %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Callable*, %Callable*, { %Array* }* }*
  %15 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %14, i32 0, i32 1
  %17 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }* }, { %Callable*, %Callable*, { %Array* }* }* %14, i32 0, i32 2
  store %Callable* %statePreparation, %Callable** %15, align 8
  store %Callable* %12, %Callable** %16, align 8
  store { %Array* }* %auxiliary, { %Array* }** %17, align 8
  call void @Microsoft__Quantum__Canon___0f498e1ece294d4db89965060edcd2ac_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, { %Array* }* }* %14)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %selector, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %system, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePreparation, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__65__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Array* }*, %Array* }*
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %5, align 8
  store %Array* %2, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__65__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { { %Array* }*, %Array* }*
  %5 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %5, align 8
  store %Array* %2, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__65__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 1
  store { %Array* }* %4, { %Array* }** %10, align 8
  store %Array* %7, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array* }*, %Array* }* %9, { { %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__65__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %9, i32 0, i32 1
  store { %Array* }* %4, { %Array* }** %10, align 8
  store %Array* %7, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array* }*, %Array* }* %9, { { %Array* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__66__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %5, i32 0, i32 0
  %7 = load { %Array* }*, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, { %Array* }*, %Array* }* getelementptr ({ %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Callable*, %Callable*, { %Array* }*, %Array* }*
  %12 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %11, i32 0, i32 3
  store %Callable* %2, %Callable** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store { %Array* }* %7, { %Array* }** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__66__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %5, i32 0, i32 0
  %7 = load { %Array* }*, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, { %Array* }*, %Array* }* getelementptr ({ %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Callable*, %Callable*, { %Array* }*, %Array* }*
  %12 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %11, i32 0, i32 3
  store %Callable* %2, %Callable** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store { %Array* }* %7, { %Array* }** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__66__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, { %Array* }*, %Array* }* getelementptr ({ %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Callable*, %Callable*, { %Array* }*, %Array* }*
  %16 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, i32 0, i32 3
  store %Callable* %7, %Callable** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store { %Array* }* %11, { %Array* }** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, { %Callable*, %Callable*, { %Array* }*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__66__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, { %Array* }*, %Array* }* getelementptr ({ %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Callable*, %Callable*, { %Array* }*, %Array* }*
  %16 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, i32 0, i32 3
  store %Callable* %7, %Callable** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store { %Array* }* %11, { %Array* }** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Callable*, %Callable*, { %Array* }*, %Array* }* %15, { %Callable*, %Callable*, { %Array* }*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Callable*, { %Array* }*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 3
  %5 = load %Callable*, %Callable** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load { %Array* }*, { %Array* }** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____body(%Callable* %5, %Callable* %6, { %Array* }* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Callable*, { %Array* }*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Callable*, %Callable*, { %Array* }*, %Array* }, { %Callable*, %Callable*, { %Array* }*, %Array* }* %0, i32 0, i32 3
  %5 = load %Callable*, %Callable** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load { %Array* }*, { %Array* }** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____adj(%Callable* %5, %Callable* %6, { %Array* }* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, %Callable*, { %Array* }*, %Array* }*, { %Callable*, %Callable*, { %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____ctl(%Array* %3, { %Callable*, %Callable*, { %Array* }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }, { %Array*, { %Callable*, %Callable*, { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, %Callable*, { %Array* }*, %Array* }*, { %Callable*, %Callable*, { %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation___cf163a106d11461497cf5b799872fa06___QsRef3__ApplyBlockEncodingByLCU____ctladj(%Array* %3, { %Callable*, %Callable*, { %Array* }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__38__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__38__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____body(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %1 = bitcast i8* %0 to i2*
  store i2 0, i2* %1, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %3 = bitcast i8* %2 to %Qubit**
  %4 = load %Qubit*, %Qubit** %3, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  store %Qubit* %4, %Qubit** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %angle, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____adj(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %1 = bitcast i8* %0 to i2*
  store i2 0, i2* %1, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %3 = bitcast i8* %2 to %Qubit**
  %4 = load %Qubit*, %Qubit** %3, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  store %Qubit* %4, %Qubit** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %angle, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____ctl(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %angle = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %register = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %5 = bitcast i8* %4 to i2*
  store i2 0, i2* %5, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %7 = bitcast i8* %6 to %Qubit**
  %8 = load %Qubit*, %Qubit** %7, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %10 = bitcast i8* %9 to %Qubit**
  store %Qubit* %8, %Qubit** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, double, %Array* }*
  %13 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 2
  store %Array* %paulis, %Array** %13, align 8
  store double %angle, double* %14, align 8
  store %Array* %qubits, %Array** %15, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____ctladj(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %angle = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %register = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %5 = bitcast i8* %4 to i2*
  store i2 0, i2* %5, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %7 = bitcast i8* %6 to %Qubit**
  %8 = load %Qubit*, %Qubit** %7, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %10 = bitcast i8* %9 to %Qubit**
  store %Qubit* %8, %Qubit** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, double, %Array* }*
  %13 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 2
  store %Array* %paulis, %Array** %13, align 8
  store double %angle, double* %14, align 8
  store %Array* %qubits, %Array** %15, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____body(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %1 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %1, align 4
  %2 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = extractvalue %Range %rngControl, 0
  %4 = extractvalue %Range %rngControl, 1
  %5 = extractvalue %Range %rngControl, 2
  %6 = insertvalue %Range zeroinitializer, i64 %3, 0
  %7 = insertvalue %Range %6, i64 %4, 1
  %8 = insertvalue %Range %7, i64 %5, 2
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %8, i1 true)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %actualControl, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %14 = bitcast i8* %13 to %Qubit**
  %15 = load %Qubit*, %Qubit** %14, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %actualControl, %Qubit* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %1 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %1, align 4
  %2 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = extractvalue %Range %rngControl, 0
  %4 = extractvalue %Range %rngControl, 1
  %5 = extractvalue %Range %rngControl, 2
  %6 = insertvalue %Range zeroinitializer, i64 %3, 0
  %7 = insertvalue %Range %6, i64 %4, 1
  %8 = insertvalue %Range %7, i64 %5, 2
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %8, i1 true)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %__qsVar0__actualControl__, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %14 = bitcast i8* %13 to %Qubit**
  %15 = load %Qubit*, %Qubit** %14, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %__qsVar0__actualControl__, %Qubit* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %disentangling = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %axis = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %6 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %register = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %7 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 0
  %rngControl = load %Range, %Range* %7, align 4
  %8 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 1
  %idxTarget = load i64, i64* %8, align 4
  %9 = extractvalue %Range %rngControl, 0
  %10 = extractvalue %Range %rngControl, 1
  %11 = extractvalue %Range %rngControl, 2
  %12 = insertvalue %Range zeroinitializer, i64 %9, 0
  %13 = insertvalue %Range %12, i64 %10, 1
  %14 = insertvalue %Range %13, i64 %11, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %14, i1 true)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %15)
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %actualControl, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 1)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %20 = bitcast i8* %19 to %Qubit**
  %21 = load %Qubit*, %Qubit** %20, align 8
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %24 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 2
  %27 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 3
  %28 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 4
  store double %tolerance, double* %24, align 8
  store %Array* %disentangling, %Array** %25, align 8
  store i2 %axis, i2* %26, align 1
  store { %Array* }* %actualControl, { %Array* }** %27, align 8
  store %Qubit* %21, %Qubit** %28, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %disentangling = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %axis = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %6 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %register = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %7 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 0
  %rngControl = load %Range, %Range* %7, align 4
  %8 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 1
  %idxTarget = load i64, i64* %8, align 4
  %9 = extractvalue %Range %rngControl, 0
  %10 = extractvalue %Range %rngControl, 1
  %11 = extractvalue %Range %rngControl, 2
  %12 = insertvalue %Range zeroinitializer, i64 %9, 0
  %13 = insertvalue %Range %12, i64 %10, 1
  %14 = insertvalue %Range %13, i64 %11, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %14, i1 true)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %15)
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %__qsVar0__actualControl__, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 1)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %20 = bitcast i8* %19 to %Qubit**
  %21 = load %Qubit*, %Qubit** %20, align 8
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %24 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 2
  %27 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 3
  %28 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 4
  store double %tolerance, double* %24, align 8
  store %Array* %disentangling, %Array** %25, align 8
  store i2 %axis, i2* %26, align 1
  store { %Array* }* %__qsVar0__actualControl__, { %Array* }** %27, align 8
  store %Qubit* %21, %Qubit** %28, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____body(%Callable* %bareOp, { %Array* }* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  store %Array* %1, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %bareOp, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____adj(%Callable* %bareOp, { %Array* }* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  store %Array* %1, %Array** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %4, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____ctl(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %bareOp = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %9, align 8
  store %Array* %4, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____ctladj(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %bareOp = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %9, align 8
  store %Array* %4, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Preparation____QsRef3__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficients, { %Range, i64 }* %0) {
entry:
  %plan = alloca %Array*, align 8
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  %7 = load { double, double }*, { double, double }** %6, align 8
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %10 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %10, align 4
  %11 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %11, align 4
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  store %Array* %12, %Array** %plan, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = call { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef3__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients)
  %14 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 0
  %disentanglingY = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingY, i32 1)
  %15 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 1
  %disentanglingZ = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingZ, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 2
  %newCoefficients = load %Array*, %Array** %16, align 8
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %newCoefficients)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %19)
  %22 = bitcast i8* %21 to { double, double }**
  %23 = load { double, double }*, { double, double }** %22, align 8
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoefficients, i32 1)
  %26 = call i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingZ)
  br i1 %26, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__2
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingZ, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 1
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 2
  %33 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 3
  %34 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 4
  %35 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 5
  store %Callable* %27, %Callable** %30, align 8
  store double %tolerance, double* %31, align 8
  store %Array* %disentanglingZ, %Array** %32, align 8
  store i2 -2, i2* %33, align 1
  store %Range %rngControl, %Range* %34, align 4
  store i64 %idxTarget, i64* %35, align 4
  %36 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__67__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__39__FunctionTable, %Tuple* %28)
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 0)
  %39 = bitcast i8* %38 to %Callable**
  store %Callable* %36, %Callable** %39, align 8
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 0)
  %42 = bitcast i8* %41 to %Callable**
  store %Callable* %36, %Callable** %42, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 1)
  br label %header__3

continue__1:                                      ; preds = %exit__4, %exit__2
  %43 = call i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingY)
  br i1 %43, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %44 = load %Array*, %Array** %plan, align 8
  %45 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingY, i32 1)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %48 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 0
  %49 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 1
  %50 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 2
  %51 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 3
  %52 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 4
  %53 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 5
  store %Callable* %45, %Callable** %48, align 8
  store double %tolerance, double* %49, align 8
  store %Array* %disentanglingY, %Array** %50, align 8
  store i2 -1, i2* %51, align 1
  store %Range %rngControl, %Range* %52, align 4
  store i64 %idxTarget, i64* %53, align 4
  %54 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__68__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__39__FunctionTable, %Tuple* %46)
  %55 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 0)
  %57 = bitcast i8* %56 to %Callable**
  store %Callable* %54, %Callable** %57, align 8
  %58 = call %Array* @__quantum__rt__array_concatenate(%Array* %44, %Array* %55)
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %60 = sub i64 %59, 1
  br label %header__5

continue__2:                                      ; preds = %exit__9, %continue__1
  %61 = call i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rngControl)
  br i1 %61, label %then0__3, label %test1__1

then0__3:                                         ; preds = %continue__2
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 0)
  %63 = bitcast i8* %62 to { double, double }**
  %64 = load { double, double }*, { double, double }** %63, align 8
  %65 = getelementptr inbounds { double, double }, { double, double }* %64, i32 0, i32 0
  %abs = load double, double* %65, align 8
  %66 = getelementptr inbounds { double, double }, { double, double }* %64, i32 0, i32 1
  %arg = load double, double* %66, align 8
  %67 = call double @Microsoft__Quantum__Math__AbsD__body(double %arg)
  %68 = fcmp ogt double %67, %tolerance
  br i1 %68, label %then0__4, label %continue__4

then0__4:                                         ; preds = %then0__3
  %69 = load %Array*, %Array** %plan, align 8
  %70 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %71 = fmul double -1.000000e+00, %arg
  %72 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %73 = bitcast %Tuple* %72 to { %Callable*, double, i64 }*
  %74 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %73, i32 0, i32 0
  %75 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %73, i32 0, i32 1
  %76 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %73, i32 0, i32 2
  store %Callable* %70, %Callable** %74, align 8
  store double %71, double* %75, align 8
  store i64 %idxTarget, i64* %76, align 4
  %77 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__69__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__40__FunctionTable, %Tuple* %72)
  %78 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 0)
  %80 = bitcast i8* %79 to %Callable**
  store %Callable* %77, %Callable** %80, align 8
  %81 = call %Array* @__quantum__rt__array_concatenate(%Array* %69, %Array* %78)
  %82 = call i64 @__quantum__rt__array_get_size_1d(%Array* %81)
  %83 = sub i64 %82, 1
  br label %header__10

continue__4:                                      ; preds = %exit__14, %then0__3
  br label %continue__3

test1__1:                                         ; preds = %continue__2
  %84 = call i1 @Microsoft__Quantum__Canon____QsRef3__AnyOutsideToleranceCP____body(double %tolerance, %Array* %newCoefficients)
  br i1 %84, label %then1__1, label %continue__3

then1__1:                                         ; preds = %test1__1
  %85 = extractvalue %Range %rngControl, 0
  %86 = extractvalue %Range %rngControl, 1
  %87 = extractvalue %Range %rngControl, 2
  %88 = add i64 %85, 1
  %89 = extractvalue %Range %rngControl, 0
  %90 = extractvalue %Range %rngControl, 1
  %91 = extractvalue %Range %rngControl, 2
  %92 = extractvalue %Range %rngControl, 0
  %93 = extractvalue %Range %rngControl, 1
  %94 = extractvalue %Range %rngControl, 2
  %95 = insertvalue %Range zeroinitializer, i64 %88, 0
  %96 = insertvalue %Range %95, i64 %90, 1
  %newControl = insertvalue %Range %96, i64 %94, 2
  %newTarget = extractvalue %Range %rngControl, 0
  %97 = extractvalue %Range %rngControl, 1
  %98 = extractvalue %Range %rngControl, 2
  %99 = load %Array*, %Array** %plan, align 8
  %100 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %101 = bitcast %Tuple* %100 to { %Range, i64 }*
  %102 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %101, i32 0, i32 0
  %103 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %101, i32 0, i32 1
  store %Range %newControl, %Range* %102, align 4
  store i64 %newTarget, i64* %103, align 4
  %104 = call %Array* @Microsoft__Quantum__Preparation____QsRef3__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %newCoefficients, { %Range, i64 }* %101)
  %105 = call %Array* @__quantum__rt__array_concatenate(%Array* %99, %Array* %104)
  %106 = call i64 @__quantum__rt__array_get_size_1d(%Array* %105)
  %107 = sub i64 %106, 1
  br label %header__15

continue__3:                                      ; preds = %exit__19, %test1__1, %continue__4
  %108 = load %Array*, %Array** %plan, align 8
  %109 = sub i64 %1, 1
  br label %header__20

header__3:                                        ; preds = %exiting__3, %then0__1
  %110 = phi i64 [ 0, %then0__1 ], [ %115, %exiting__3 ]
  %111 = icmp sle i64 %110, 0
  br i1 %111, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 %110)
  %113 = bitcast i8* %112 to %Callable**
  %114 = load %Callable*, %Callable** %113, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %114, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %114, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %115 = add i64 %110, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  store %Array* %40, %Array** %plan, align 8
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %116 = phi i64 [ 0, %exit__3 ], [ %121, %exiting__4 ]
  %117 = icmp sle i64 %116, 0
  br i1 %117, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 %116)
  %119 = bitcast i8* %118 to %Callable**
  %120 = load %Callable*, %Callable** %119, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %120, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %120, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %121 = add i64 %116, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  br label %continue__1

header__5:                                        ; preds = %exiting__5, %then0__2
  %122 = phi i64 [ 0, %then0__2 ], [ %127, %exiting__5 ]
  %123 = icmp sle i64 %122, %60
  br i1 %123, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %122)
  %125 = bitcast i8* %124 to %Callable**
  %126 = load %Callable*, %Callable** %125, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %126, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %126, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %127 = add i64 %122, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i32 1)
  %128 = sub i64 %59, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %129 = phi i64 [ 0, %exit__5 ], [ %134, %exiting__6 ]
  %130 = icmp sle i64 %129, %128
  br i1 %130, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %129)
  %132 = bitcast i8* %131 to %Callable**
  %133 = load %Callable*, %Callable** %132, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %133, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %133, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %134 = add i64 %129, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  %135 = call i64 @__quantum__rt__array_get_size_1d(%Array* %44)
  %136 = sub i64 %135, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %137 = phi i64 [ 0, %exit__6 ], [ %142, %exiting__7 ]
  %138 = icmp sle i64 %137, %136
  br i1 %138, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %137)
  %140 = bitcast i8* %139 to %Callable**
  %141 = load %Callable*, %Callable** %140, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %141, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %141, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %142 = add i64 %137, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 -1)
  %143 = sub i64 %135, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %144 = phi i64 [ 0, %exit__7 ], [ %149, %exiting__8 ]
  %145 = icmp sle i64 %144, %143
  br i1 %145, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %144)
  %147 = bitcast i8* %146 to %Callable**
  %148 = load %Callable*, %Callable** %147, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %148, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %148, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %149 = add i64 %144, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  store %Array* %58, %Array** %plan, align 8
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %150 = phi i64 [ 0, %exit__8 ], [ %155, %exiting__9 ]
  %151 = icmp sle i64 %150, 0
  br i1 %151, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 %150)
  %153 = bitcast i8* %152 to %Callable**
  %154 = load %Callable*, %Callable** %153, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %154, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %154, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %155 = add i64 %150, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i32 -1)
  br label %continue__2

header__10:                                       ; preds = %exiting__10, %then0__4
  %156 = phi i64 [ 0, %then0__4 ], [ %161, %exiting__10 ]
  %157 = icmp sle i64 %156, %83
  br i1 %157, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %158 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 %156)
  %159 = bitcast i8* %158 to %Callable**
  %160 = load %Callable*, %Callable** %159, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %160, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %160, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %161 = add i64 %156, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 1)
  %162 = sub i64 %82, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %163 = phi i64 [ 0, %exit__10 ], [ %168, %exiting__11 ]
  %164 = icmp sle i64 %163, %162
  br i1 %164, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %165 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 %163)
  %166 = bitcast i8* %165 to %Callable**
  %167 = load %Callable*, %Callable** %166, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %167, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %167, i32 1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %168 = add i64 %163, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 1)
  %169 = call i64 @__quantum__rt__array_get_size_1d(%Array* %69)
  %170 = sub i64 %169, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %171 = phi i64 [ 0, %exit__11 ], [ %176, %exiting__12 ]
  %172 = icmp sle i64 %171, %170
  br i1 %172, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %171)
  %174 = bitcast i8* %173 to %Callable**
  %175 = load %Callable*, %Callable** %174, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %175, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %175, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %176 = add i64 %171, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 -1)
  %177 = sub i64 %169, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %178 = phi i64 [ 0, %exit__12 ], [ %183, %exiting__13 ]
  %179 = icmp sle i64 %178, %177
  br i1 %179, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %178)
  %181 = bitcast i8* %180 to %Callable**
  %182 = load %Callable*, %Callable** %181, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %182, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %182, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %183 = add i64 %178, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  store %Array* %81, %Array** %plan, align 8
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %184 = phi i64 [ 0, %exit__13 ], [ %189, %exiting__14 ]
  %185 = icmp sle i64 %184, 0
  br i1 %185, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 %184)
  %187 = bitcast i8* %186 to %Callable**
  %188 = load %Callable*, %Callable** %187, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %188, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %188, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %189 = add i64 %184, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  br label %continue__4

header__15:                                       ; preds = %exiting__15, %then1__1
  %190 = phi i64 [ 0, %then1__1 ], [ %195, %exiting__15 ]
  %191 = icmp sle i64 %190, %107
  br i1 %191, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 %190)
  %193 = bitcast i8* %192 to %Callable**
  %194 = load %Callable*, %Callable** %193, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %194, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %194, i32 1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %195 = add i64 %190, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 1)
  %196 = sub i64 %106, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %197 = phi i64 [ 0, %exit__15 ], [ %202, %exiting__16 ]
  %198 = icmp sle i64 %197, %196
  br i1 %198, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %199 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 %197)
  %200 = bitcast i8* %199 to %Callable**
  %201 = load %Callable*, %Callable** %200, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %201, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %201, i32 1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %202 = add i64 %197, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %105, i32 1)
  %203 = call i64 @__quantum__rt__array_get_size_1d(%Array* %99)
  %204 = sub i64 %203, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %205 = phi i64 [ 0, %exit__16 ], [ %210, %exiting__17 ]
  %206 = icmp sle i64 %205, %204
  br i1 %206, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %207 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 %205)
  %208 = bitcast i8* %207 to %Callable**
  %209 = load %Callable*, %Callable** %208, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %209, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %209, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %210 = add i64 %205, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %99, i32 -1)
  %211 = sub i64 %203, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %212 = phi i64 [ 0, %exit__17 ], [ %217, %exiting__18 ]
  %213 = icmp sle i64 %212, %211
  br i1 %213, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %214 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 %212)
  %215 = bitcast i8* %214 to %Callable**
  %216 = load %Callable*, %Callable** %215, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %216, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %216, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %217 = add i64 %212, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 -1)
  store %Array* %105, %Array** %plan, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %100, i32 -1)
  %218 = call i64 @__quantum__rt__array_get_size_1d(%Array* %104)
  %219 = sub i64 %218, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %220 = phi i64 [ 0, %exit__18 ], [ %225, %exiting__19 ]
  %221 = icmp sle i64 %220, %219
  br i1 %221, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %222 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 %220)
  %223 = bitcast i8* %222 to %Callable**
  %224 = load %Callable*, %Callable** %223, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %224, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %224, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %225 = add i64 %220, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_reference_count(%Array* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 -1)
  br label %continue__3

header__20:                                       ; preds = %exiting__20, %continue__3
  %226 = phi i64 [ 0, %continue__3 ], [ %232, %exiting__20 ]
  %227 = icmp sle i64 %226, %109
  br i1 %227, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %228 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %226)
  %229 = bitcast i8* %228 to { double, double }**
  %230 = load { double, double }*, { double, double }** %229, align 8
  %231 = bitcast { double, double }* %230 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %231, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %232 = add i64 %226, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %233 = call i64 @__quantum__rt__array_get_size_1d(%Array* %108)
  %234 = sub i64 %233, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %235 = phi i64 [ 0, %exit__20 ], [ %240, %exiting__21 ]
  %236 = icmp sle i64 %235, %234
  br i1 %236, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %237 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 %235)
  %238 = bitcast i8* %237 to %Callable**
  %239 = load %Callable*, %Callable** %238, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %239, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %239, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %240 = add i64 %235, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %108, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingY, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingZ, i32 -1)
  %241 = sub i64 %17, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %242 = phi i64 [ 0, %exit__21 ], [ %248, %exiting__22 ]
  %243 = icmp sle i64 %242, %241
  br i1 %243, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %244 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %242)
  %245 = bitcast i8* %244 to { double, double }**
  %246 = load { double, double }*, { double, double }** %245, align 8
  %247 = bitcast { double, double }* %246 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %247, i32 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %248 = add i64 %242, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingY, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingZ, i32 -1)
  %249 = sub i64 %17, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %250 = phi i64 [ 0, %exit__22 ], [ %256, %exiting__23 ]
  %251 = icmp sle i64 %250, %249
  br i1 %251, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %252 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %250)
  %253 = bitcast i8* %252 to { double, double }**
  %254 = load { double, double }*, { double, double }** %253, align 8
  %255 = bitcast { double, double }* %254 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %255, i32 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %256 = add i64 %250, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoefficients, i32 -1)
  %257 = bitcast { %Array*, %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %257, i32 -1)
  ret %Array* %108
}

define internal { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef3__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients) {
entry:
  %newCoefficients = alloca %Array*, align 8
  %disentanglingY = alloca %Array*, align 8
  %disentanglingZ = alloca %Array*, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = sdiv i64 %0, 2
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %9)
  %11 = sub i64 %9, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %12)
  %15 = bitcast i8* %14 to double*
  store double 0.000000e+00, double* %15, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  store %Array* %10, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %17 = sdiv i64 %0, 2
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %17)
  %19 = sub i64 %17, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %20 = phi i64 [ 0, %exit__2 ], [ %24, %exiting__3 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %20)
  %23 = bitcast i8* %22 to double*
  store double 0.000000e+00, double* %23, align 8
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %24 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %25 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %26 = sdiv i64 %0, 2
  %27 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %26)
  %28 = sub i64 %26, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %29 = phi i64 [ 0, %exit__3 ], [ %34, %exiting__4 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  store { double, double }* %25, { double, double }** %32, align 8
  %33 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %34 = add i64 %29, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  store %Array* %27, %Array** %newCoefficients, align 8
  %35 = sub i64 %26, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %36 = phi i64 [ 0, %exit__4 ], [ %42, %exiting__5 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %36)
  %39 = bitcast i8* %38 to { double, double }**
  %40 = load { double, double }*, { double, double }** %39, align 8
  %41 = bitcast { double, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %41, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %42 = add i64 %36, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %43 = sub i64 %0, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__5
  br label %header__6

header__6:                                        ; preds = %exiting__6, %preheader__1
  %idxCoeff = phi i64 [ 0, %preheader__1 ], [ %80, %exiting__6 ]
  %44 = icmp sle i64 %idxCoeff, %43
  %45 = icmp sge i64 %idxCoeff, %43
  %46 = select i1 true, i1 %44, i1 %45
  br i1 %46, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %48 = bitcast i8* %47 to { double, double }**
  %49 = load { double, double }*, { double, double }** %48, align 8
  %50 = add i64 %idxCoeff, 1
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %50)
  %52 = bitcast i8* %51 to { double, double }**
  %53 = load { double, double }*, { double, double }** %52, align 8
  %54 = call { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %49, { double, double }* %53)
  %55 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 0
  %rt = load { double, double }*, { double, double }** %55, align 8
  %56 = bitcast { double, double }* %rt to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  %57 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 1
  %phi = load double, double* %57, align 8
  %58 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 2
  %theta = load double, double* %58, align 8
  %59 = load %Array*, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 -1)
  %60 = call %Array* @__quantum__rt__array_copy(%Array* %59, i1 false)
  %61 = fmul double 5.000000e-01, %phi
  %62 = sdiv i64 %idxCoeff, 2
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %62)
  %64 = bitcast i8* %63 to double*
  store double %61, double* %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 1)
  store %Array* %60, %Array** %disentanglingZ, align 8
  %65 = load %Array*, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  %66 = call %Array* @__quantum__rt__array_copy(%Array* %65, i1 false)
  %67 = fmul double 5.000000e-01, %theta
  %68 = sdiv i64 %idxCoeff, 2
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 %68)
  %70 = bitcast i8* %69 to double*
  %71 = load double, double* %70, align 8
  store double %67, double* %70, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  store %Array* %66, %Array** %disentanglingY, align 8
  %72 = load %Array*, %Array** %newCoefficients, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  %73 = call %Array* @__quantum__rt__array_copy(%Array* %72, i1 false)
  %74 = sdiv i64 %idxCoeff, 2
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 %74)
  %76 = bitcast i8* %75 to { double, double }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 1)
  %77 = load { double, double }*, { double, double }** %76, align 8
  %78 = bitcast { double, double }* %77 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %78, i32 -1)
  store { double, double }* %rt, { double, double }** %76, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %73, i32 1)
  store %Array* %73, %Array** %newCoefficients, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  %79 = bitcast { { double, double }*, double, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %80 = add i64 %idxCoeff, 2
  br label %header__6

exit__6:                                          ; preds = %header__6
  %81 = load %Array*, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 1)
  %82 = load %Array*, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 1)
  %83 = load %Array*, %Array** %newCoefficients, align 8
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %83)
  %85 = sub i64 %84, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %86 = phi i64 [ 0, %exit__6 ], [ %92, %exiting__7 ]
  %87 = icmp sle i64 %86, %85
  br i1 %87, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %86)
  %89 = bitcast i8* %88 to { double, double }**
  %90 = load { double, double }*, { double, double }** %89, align 8
  %91 = bitcast { double, double }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %91, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %92 = add i64 %86, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 1)
  %93 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Array* }* getelementptr ({ %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* null, i32 1) to i64))
  %94 = bitcast %Tuple* %93 to { %Array*, %Array*, %Array* }*
  %95 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i32 0, i32 0
  %96 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i32 0, i32 1
  %97 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i32 0, i32 2
  store %Array* %81, %Array** %95, align 8
  store %Array* %82, %Array** %96, align 8
  store %Array* %83, %Array** %97, align 8
  %98 = sub i64 %0, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %99 = phi i64 [ 0, %exit__7 ], [ %105, %exiting__8 ]
  %100 = icmp sle i64 %99, %98
  br i1 %100, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %99)
  %102 = bitcast i8* %101 to { double, double }**
  %103 = load { double, double }*, { double, double }** %102, align 8
  %104 = bitcast { double, double }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %105 = add i64 %99, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %82, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 -1)
  %106 = sub i64 %84, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %107 = phi i64 [ 0, %exit__8 ], [ %113, %exiting__9 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %107)
  %110 = bitcast i8* %109 to { double, double }**
  %111 = load { double, double }*, { double, double }** %110, align 8
  %112 = bitcast { double, double }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %112, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %113 = add i64 %107, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %83, i32 -1)
  %114 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  %115 = sub i64 %84, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %116 = phi i64 [ 0, %exit__9 ], [ %122, %exiting__10 ]
  %117 = icmp sle i64 %116, %115
  br i1 %117, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %116)
  %119 = bitcast i8* %118 to { double, double }**
  %120 = load { double, double }*, { double, double }** %119, align 8
  %121 = bitcast { double, double }* %120 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %121, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %122 = add i64 %116, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  ret { %Array*, %Array*, %Array* }* %94
}

define internal void @Lifted__PartialApplication__67__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__67__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__67__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__67__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____body(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____adj(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____ctl(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyMultiplexStep____ctladj(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__39__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %6 = load %Range, %Range* %5, align 4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__39__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %6 = load %Range, %Range* %5, align 4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__68__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__68__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__68__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__68__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__69__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store i64 %4, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__69__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store i64 %4, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__69__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store i64 %9, i64* %13, align 4
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, %Array* }* }* getelementptr ({ %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__69__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store i64 %9, i64* %13, align 4
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, %Array* }* }* getelementptr ({ %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %4 = load double, double* %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____body(double %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %4 = load double, double* %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____adj(double %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____ctl(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyGlobalRotationStep____ctladj(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__40__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__40__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %a0, { double, double }* %a1) {
entry:
  %0 = bitcast { double, double }* %a0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = bitcast { double, double }* %a1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %abs0 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a0)
  %abs1 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a1)
  %arg0 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a0)
  %arg1 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a1)
  %2 = fmul double %abs0, %abs0
  %3 = fmul double %abs1, %abs1
  %d = fadd double %2, %3
  %r = call double @__quantum__qis__sqrt__body(double %d)
  %4 = fadd double %arg0, %arg1
  %t = fmul double 5.000000e-01, %4
  %phi = fsub double %arg1, %arg0
  %5 = call double @__quantum__qis__arctan2__body(double %abs1, double %abs0)
  %theta = fmul double 2.000000e+00, %5
  %6 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %r, double %t)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, double, double }* getelementptr ({ { double, double }*, double, double }, { { double, double }*, double, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { { double, double }*, double, double }*
  %9 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %8, i32 0, i32 1
  %11 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %8, i32 0, i32 2
  store { double, double }* %6, { double, double }** %9, align 8
  store double %phi, double* %10, align 8
  store double %theta, double* %11, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  ret { { double, double }*, double, double }* %8
}

define internal %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %nQubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = trunc i64 %nQubits to i32
  %10 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %9)
  %11 = fptosi double %10 to i64
  %12 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___4adfaffa1d224736a6c92f5abc9f739b_Padded__body(i64 %11, { double, double }* %12, %Array* %coefficients)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18, align 8
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %22 = icmp sgt i64 %nQubits, 1
  %23 = sub i64 %nQubits, 1
  %24 = insertvalue %Range { i64 1, i64 1, i64 0 }, i64 %23, 2
  %rngControl = select i1 %22, %Range %24, %Range { i64 1, i64 1, i64 0 }
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Range, i64 }*
  %27 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %26, i32 0, i32 0
  %28 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %26, i32 0, i32 1
  store %Range %rngControl, %Range* %27, align 4
  store i64 0, i64* %28, align 4
  %plan = call %Array* @Microsoft__Quantum__Preparation____QsRef3__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficientsPadded, { %Range, i64 }* %26)
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %plan)
  %30 = sub i64 %29, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %36, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %31)
  %34 = bitcast i8* %33 to %Callable**
  %35 = load %Callable*, %Callable** %34, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %35, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %35, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %36 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %plan, i32 1)
  %unprepare = call %Callable* @Microsoft__Quantum__Canon___5516aa15311e4ec2bc23553ec55e6745_BoundCA__body(%Array* %plan)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unprepare, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unprepare, i32 1)
  %37 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %38 = call %Callable* @__quantum__rt__callable_copy(%Callable* %unprepare, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %38, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %38)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Callable*, %Callable* }*
  %41 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %40, i32 0, i32 0
  %42 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %40, i32 0, i32 1
  store %Callable* %37, %Callable** %41, align 8
  store %Callable* %38, %Callable** %42, align 8
  %43 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__70__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__41__FunctionTable, %Tuple* %39)
  %44 = sub i64 %0, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %45)
  %48 = bitcast i8* %47 to { double, double }**
  %49 = load { double, double }*, { double, double }** %48, align 8
  %50 = bitcast { double, double }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %52 = sub i64 %13, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %53 = phi i64 [ 0, %exit__4 ], [ %59, %exiting__5 ]
  %54 = icmp sle i64 %53, %52
  br i1 %54, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %53)
  %56 = bitcast i8* %55 to { double, double }**
  %57 = load { double, double }*, { double, double }** %56, align 8
  %58 = bitcast { double, double }* %57 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %58, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %59 = add i64 %53, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  %60 = sub i64 %29, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %61 = phi i64 [ 0, %exit__5 ], [ %66, %exiting__6 ]
  %62 = icmp sle i64 %61, %60
  br i1 %62, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %61)
  %64 = bitcast i8* %63 to %Callable**
  %65 = load %Callable*, %Callable** %64, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %65, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %65, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %66 = add i64 %61, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %plan, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unprepare, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unprepare, i32 -1)
  %67 = bitcast { double, double }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %67, i32 -1)
  %68 = sub i64 %13, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %69 = phi i64 [ 0, %exit__6 ], [ %75, %exiting__7 ]
  %70 = icmp sle i64 %69, %68
  br i1 %70, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %69)
  %72 = bitcast i8* %71 to { double, double }**
  %73 = load { double, double }*, { double, double }** %72, align 8
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %74, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %75 = add i64 %69, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  %76 = sub i64 %29, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %77 = phi i64 [ 0, %exit__7 ], [ %82, %exiting__8 ]
  %78 = icmp sle i64 %77, %76
  br i1 %78, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %77)
  %80 = bitcast i8* %79 to %Callable**
  %81 = load %Callable*, %Callable** %80, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %81, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %81, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %82 = add i64 %77, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %plan, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unprepare, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unprepare, i32 -1)
  ret %Callable* %43
}

define internal void @Lifted__PartialApplication__70__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, { %Array* }* }*
  %5 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 1
  store %Callable* %2, %Callable** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__70__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, { %Array* }* }*
  %5 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 1
  store %Callable* %2, %Callable** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__70__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array* }* }*
  %10 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, { %Array* }* }* }* getelementptr ({ %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, { %Array* }* }* %9, { %Callable*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__70__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array* }* }*
  %10 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, { %Array* }* }* }* getelementptr ({ %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, { %Array* }* }* %9, { %Callable*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____body(%Callable* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____adj(%Callable* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____ctl(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef3__ApplyToLittleEndian____ctladj(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define internal void @MemoryManagement__41__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__41__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %13 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %12)
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %11, %Tuple* null)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18, align 8
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %13 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %12)
  %14 = call %Callable* @__quantum__rt__callable_copy(%Callable* %13, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %14)
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %11, %Tuple* null)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19, align 8
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8, align 8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %12 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %12, align 8
  %13 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %17 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %16)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, { %Array* }* }*
  %21 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %21, align 8
  store { %Array* }* %qubits, { %Array* }** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %23 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27, align 8
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8, align 8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %12 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %12, align 8
  %13 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %17 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %16)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, { %Array* }* }*
  %21 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %21, align 8
  store { %Array* }* %qubits, { %Array* }** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %23 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27, align 8
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  store %Callable* %3, %Callable** %6, align 8
  store double 0.000000e+00, double* %7, align 8
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__71__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__42__FunctionTable, %Tuple* %4)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %10 = call %Callable* @Microsoft__Quantum__Canon___f695a1c4a84a4c22814bb23e1fd09776_Compose__body(%Callable* %8, %Callable* %9)
  %coefficientsAsComplexPolar = call %Array* @Microsoft__Quantum__Arrays___214772ffffeb49a1900df09d24a690d9_Mapped__body(%Callable* %10, %Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsAsComplexPolar)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %13 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double %tolerance, %Array* %coefficientsAsComplexPolar, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  %20 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24, align 8
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  %28 = sub i64 %11, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__71__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Math__ComplexPolar__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load double, double* %2, align 8
  %5 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { { double, double }* }*
  %7 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %6, i32 0, i32 0
  store { double, double }* %5, { double, double }** %7, align 8
  ret void
}

define internal void @MemoryManagement__42__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__42__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Math__AbsD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = call double @Microsoft__Quantum__Math__AbsD__body(double %2)
  %4 = bitcast %Tuple* %result-tuple to { double }*
  %5 = getelementptr inbounds { double }, { double }* %4, i32 0, i32 0
  store double %3, double* %5, align 8
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  store %Callable* %3, %Callable** %6, align 8
  store double 0.000000e+00, double* %7, align 8
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__72__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__42__FunctionTable, %Tuple* %4)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %10 = call %Callable* @Microsoft__Quantum__Canon___f695a1c4a84a4c22814bb23e1fd09776_Compose__body(%Callable* %8, %Callable* %9)
  %__qsVar0__coefficientsAsComplexPolar__ = call %Array* @Microsoft__Quantum__Arrays___214772ffffeb49a1900df09d24a690d9_Mapped__body(%Callable* %10, %Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %13 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double %tolerance, %Array* %__qsVar0__coefficientsAsComplexPolar__, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  %20 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24, align 8
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  %28 = sub i64 %11, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__72__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, double }*
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store double 0.000000e+00, double* %11, align 8
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__73__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__42__FunctionTable, %Tuple* %8)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %14 = call %Callable* @Microsoft__Quantum__Canon___f695a1c4a84a4c22814bb23e1fd09776_Compose__body(%Callable* %12, %Callable* %13)
  %coefficientsAsComplexPolar = call %Array* @Microsoft__Quantum__Arrays___214772ffffeb49a1900df09d24a690d9_Mapped__body(%Callable* %14, %Array* %coefficients)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsAsComplexPolar)
  %16 = sub i64 %15, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %17 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  %21 = load { double, double }*, { double, double }** %20, align 8
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i32 1)
  %24 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %25 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %25)
  %28 = bitcast i8* %27 to { double, double }**
  %29 = load { double, double }*, { double, double }** %28, align 8
  %30 = bitcast { double, double }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { double, %Array*, { %Array* }* }*
  %34 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %33, i32 0, i32 2
  store double %tolerance, double* %34, align 8
  store %Array* %coefficientsAsComplexPolar, %Array** %35, align 8
  store { %Array* }* %qubits, { %Array* }** %36, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %33)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  %37 = sub i64 %15, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41, align 8
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  %45 = sub i64 %15, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %46)
  %49 = bitcast i8* %48 to { double, double }**
  %50 = load { double, double }*, { double, double }** %49, align 8
  %51 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  %53 = sub i64 %15, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %54 = phi i64 [ 0, %exit__4 ], [ %60, %exiting__5 ]
  %55 = icmp sle i64 %54, %53
  br i1 %55, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %54)
  %57 = bitcast i8* %56 to { double, double }**
  %58 = load { double, double }*, { double, double }** %57, align 8
  %59 = bitcast { double, double }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %60 = add i64 %54, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__73__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, double }*
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store double 0.000000e+00, double* %11, align 8
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__74__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__42__FunctionTable, %Tuple* %8)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %14 = call %Callable* @Microsoft__Quantum__Canon___f695a1c4a84a4c22814bb23e1fd09776_Compose__body(%Callable* %12, %Callable* %13)
  %__qsVar0__coefficientsAsComplexPolar__ = call %Array* @Microsoft__Quantum__Arrays___214772ffffeb49a1900df09d24a690d9_Mapped__body(%Callable* %14, %Array* %coefficients)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %16 = sub i64 %15, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %17 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  %21 = load { double, double }*, { double, double }** %20, align 8
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 1)
  %24 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %25 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %25)
  %28 = bitcast i8* %27 to { double, double }**
  %29 = load { double, double }*, { double, double }** %28, align 8
  %30 = bitcast { double, double }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { double, %Array*, { %Array* }* }*
  %34 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %33, i32 0, i32 2
  store double %tolerance, double* %34, align 8
  store %Array* %__qsVar0__coefficientsAsComplexPolar__, %Array** %35, align 8
  store { %Array* }* %qubits, { %Array* }** %36, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %33)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  %37 = sub i64 %15, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41, align 8
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  %45 = sub i64 %15, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %46)
  %49 = bitcast i8* %48 to { double, double }**
  %50 = load { double, double }*, { double, double }** %49, align 8
  %51 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  %53 = sub i64 %15, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %54 = phi i64 [ 0, %exit__4 ], [ %60, %exiting__5 ]
  %55 = icmp sle i64 %54, %53
  br i1 %55, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %54)
  %57 = bitcast i8* %56 to { double, double }**
  %58 = load { double, double }*, { double, double }** %57, align 8
  %59 = bitcast { double, double }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %60 = add i64 %54, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__74__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %coefficients = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %11, align 8
  %12 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19, align 8
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { double, %Array*, { %Array* }* }*
  %25 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %24, i32 0, i32 1
  %27 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %24, i32 0, i32 2
  store double 0.000000e+00, double* %25, align 8
  store %Array* %coefficients, %Array** %26, align 8
  store { %Array* }* %qubits, { %Array* }** %27, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %24)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  %36 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %37 = phi i64 [ 0, %exit__3 ], [ %43, %exiting__4 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %37)
  %40 = bitcast i8* %39 to { double, double }**
  %41 = load { double, double }*, { double, double }** %40, align 8
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %43 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %coefficients = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %11, align 8
  %12 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19, align 8
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { double, %Array*, { %Array* }* }*
  %25 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %24, i32 0, i32 1
  %27 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %24, i32 0, i32 2
  store double 0.000000e+00, double* %25, align 8
  store %Array* %coefficients, %Array** %26, align 8
  store { %Array* }* %qubits, { %Array* }** %27, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %24)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  %36 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %37 = phi i64 [ 0, %exit__3 ], [ %43, %exiting__4 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %37)
  %40 = bitcast i8* %39 to { double, double }**
  %41 = load { double, double }*, { double, double }** %40, align 8
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %43 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Oracles__DiscreteOracle__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Lifted__PartialApplication__75__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %4 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, i64, %Array* }*
  %10 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store i64 %5, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__75__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %4 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, i64, %Array* }*
  %10 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store i64 %5, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__75__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Array* }*, { i64, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, i64, %Array* }*
  %14 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 2
  store %Callable* %7, %Callable** %14, align 8
  store i64 %9, i64* %15, align 4
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, i64, %Array* }* }* getelementptr ({ %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { %Callable*, i64, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { %Callable*, i64, %Array* }* %13, { %Callable*, i64, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__75__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Array* }*, { i64, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, i64, %Array* }*
  %14 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 2
  store %Callable* %7, %Callable** %14, align 8
  store i64 %9, i64* %15, align 4
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, i64, %Array* }* }* getelementptr ({ %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { %Callable*, i64, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { %Callable*, i64, %Array* }* %13, { %Callable*, i64, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____body(%Callable* %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____adj(%Callable* %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, i64, %Array* }*, { %Callable*, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____ctl(%Array* %3, { %Callable*, i64, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, i64, %Array* }*, { %Callable*, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___ae485b361e91482f9489aa577506f9b4___QsRef3__ApplyOperationRepeatedlyCA____ctladj(%Array* %3, { %Callable*, i64, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__43__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__43__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
