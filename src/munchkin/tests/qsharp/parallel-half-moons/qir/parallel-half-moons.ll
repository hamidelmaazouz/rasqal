
%Tuple = type opaque
%Array = type opaque
%Range = type { i64, i64, i64 }
%Callable = type opaque
%String = type opaque
%Qubit = type opaque
%Result = type opaque

@PartialApplication__1__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Samples__WithProductKernel__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Samples__WithProductKernel__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__1__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__1__RefCount, void (%Tuple*, i32)* @MemoryManagement__1__AliasCount]
@Microsoft__Quantum__MachineLearning__LabeledSample__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning__LabeledSample__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Intrinsic__Message__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Message__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@0 = internal constant [16 x i8] c"Ready to train.\00"
@Microsoft__Quantum__Math__TimesD__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__TimesD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__MachineLearning___Features__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning___Features__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__MachineLearning___Label__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning___Label__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@1 = internal constant [28 x i8] c"    Pre-encoding samples...\00"
@PartialApplication__2__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__MachineLearning____QsRef0__EncodeSample____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__EncodeSample____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__2__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__2__RefCount, void (%Tuple*, i32)* @MemoryManagement__2__AliasCount]
@2 = internal constant [21 x i8] c"    Beginning epoch \00"
@3 = internal constant [2 x i8] c".\00"
@PartialApplication__3__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__MachineLearning____QsRef0__RandomlyRescale____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__RandomlyRescale____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__3__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__3__RefCount, void (%Tuple*, i32)* @MemoryManagement__3__AliasCount]
@Microsoft__Quantum__Logical__NearlyEqualD__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Logical__NearlyEqualD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__4__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__ctladj__wrapper]
@Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____ctladj__wrapper]
@MemoryManagement__4__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__4__RefCount, void (%Tuple*, i32)* @MemoryManagement__4__AliasCount]
@PartialApplication__5__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__ctladj__wrapper]
@Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__ctladj__wrapper]
@MemoryManagement__5__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__5__RefCount, void (%Tuple*, i32)* @MemoryManagement__5__AliasCount]
@PartialApplication__6__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__ctladj__wrapper]
@Microsoft__Quantum__Canon___1f5badf5e91544c8bbff3b59164a3bb0_Fst__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1f5badf5e91544c8bbff3b59164a3bb0_Fst__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___e2a028c390684ab28246f52a0c3fbae9_Snd__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___e2a028c390684ab28246f52a0c3fbae9_Snd__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__7__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___8a3dda3255e547b68a0799da4c61f944_Subarray__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___8a3dda3255e547b68a0799da4c61f944_Subarray__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__6__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__6__RefCount, void (%Tuple*, i32)* @MemoryManagement__6__AliasCount]
@4 = internal constant [29 x i8] c"        Beginning minibatch \00"
@5 = internal constant [5 x i8] c" of \00"
@6 = internal constant [82 x i8] c"            Observed good parameter update... estimating and possibly committing.\00"
@7 = internal constant [37 x i8] c"      Estimating gradient at sample \00"
@8 = internal constant [4 x i8] c"...\00"
@Microsoft__Quantum__Math__PlusD__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__PlusD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__8__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Intrinsic__Measure__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Measure__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__7__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__7__RefCount, void (%Tuple*, i32)* @MemoryManagement__7__AliasCount]
@9 = internal constant [31 x i8] c"Cannot set the phase at index \00"
@10 = internal constant [8 x i8] c", only \00"
@11 = internal constant [29 x i8] c" coefficients were provided.\00"
@PartialApplication__9__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__MachineLearning____QsRef0__MisclassificationRate____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__MisclassificationRate____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___72deeddd84a741deba305c641ccbb494_Fst__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___72deeddd84a741deba305c641ccbb494_Fst__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___ce11ecc402da481dad234c6ec2301ce8_Snd__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ce11ecc402da481dad234c6ec2301ce8_Snd__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__8__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__8__RefCount, void (%Tuple*, i32)* @MemoryManagement__8__AliasCount]
@PartialApplication__10__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__ctladj__wrapper]
@Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____ctladj__wrapper]
@MemoryManagement__9__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__9__RefCount, void (%Tuple*, i32)* @MemoryManagement__9__AliasCount]
@PartialApplication__11__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__ctladj__wrapper]
@Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____ctladj__wrapper]
@MemoryManagement__10__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__10__RefCount, void (%Tuple*, i32)* @MemoryManagement__10__AliasCount]
@Microsoft__Quantum__Canon___9e001bb7f66049e0a843d161f2c1deac_Ignore__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___9e001bb7f66049e0a843d161f2c1deac_Ignore__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__12__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__MachineLearning__EstimateClassificationProbability__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning__EstimateClassificationProbability__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__11__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__11__RefCount, void (%Tuple*, i32)* @MemoryManagement__11__AliasCount]
@PartialApplication__13__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__12__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__12__RefCount, void (%Tuple*, i32)* @MemoryManagement__12__AliasCount]
@PartialApplication__14__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__MachineLearning__InferredLabel__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__MachineLearning__InferredLabel__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__13__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__13__RefCount, void (%Tuple*, i32)* @MemoryManagement__13__AliasCount]
@Microsoft__Quantum__Logical__NotEqualI__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Logical__NotEqualI__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Math__MaxI__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__MaxI__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Intrinsic__S__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__I__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__I__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__I__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__I__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__I__ctladj__wrapper]
@PartialApplication__15__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Intrinsic__Reset__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Reset__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__16__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__14__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__14__RefCount, void (%Tuple*, i32)* @MemoryManagement__14__AliasCount]
@12 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@PartialApplication__17__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__ctladj__wrapper]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper]
@MemoryManagement__15__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__15__RefCount, void (%Tuple*, i32)* @MemoryManagement__15__AliasCount]
@PartialApplication__18__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__ctladj__wrapper]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper]
@MemoryManagement__16__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__16__RefCount, void (%Tuple*, i32)* @MemoryManagement__16__AliasCount]
@Microsoft__Quantum__Intrinsic__H__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper]
@PartialApplication__19__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__ctladj__wrapper]
@13 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@14 = internal constant [7 x i8] c"PauliX\00"
@15 = internal constant [7 x i8] c"PauliY\00"
@16 = internal constant [7 x i8] c"PauliZ\00"
@17 = internal constant [7 x i8] c"PauliI\00"
@PartialApplication__20__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__ctladj__wrapper]
@PartialApplication__21__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__ctladj__wrapper]
@PartialApplication__22__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__ctladj__wrapper]
@PartialApplication__23__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__ctladj__wrapper]
@PartialApplication__24__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__ctladj__wrapper]
@PartialApplication__25__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__ctladj__wrapper]
@PartialApplication__26__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__ctladj__wrapper]
@PartialApplication__27__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__ctladj__wrapper]
@PartialApplication__28__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__ctladj__wrapper]
@PartialApplication__29__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__ctladj__wrapper]
@Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____ctladj__wrapper]
@MemoryManagement__17__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__17__RefCount, void (%Tuple*, i32)* @MemoryManagement__17__AliasCount]
@PartialApplication__30__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__ctladj__wrapper]
@Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____ctladj__wrapper]
@MemoryManagement__18__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__18__RefCount, void (%Tuple*, i32)* @MemoryManagement__18__AliasCount]
@PartialApplication__31__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__ctladj__wrapper]
@Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__ctladj__wrapper]
@MemoryManagement__19__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__19__RefCount, void (%Tuple*, i32)* @MemoryManagement__19__AliasCount]
@18 = internal constant [39 x i8] c"Array must be of the length at least 1\00"
@19 = internal constant [71 x i8] c"Specified output array length must be longer than `inputArray` length.\00"
@Microsoft__Quantum__Arrays___81b2e45870f04b54ac181661cda83d5d___QsRef1__Identity____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___81b2e45870f04b54ac181661cda83d5d___QsRef1__Identity____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___6ed5375d64984881b234f01e25bc55b9___QsRef1__Identity____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___6ed5375d64984881b234f01e25bc55b9___QsRef1__Identity____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___b8c470817e3c4d54a387b72f70fe0572___QsRef1__Identity____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___b8c470817e3c4d54a387b72f70fe0572___QsRef1__Identity____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___9e4eb8c66a5d41c0ab661fccd1f15c41___QsRef1__Identity____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___9e4eb8c66a5d41c0ab661fccd1f15c41___QsRef1__Identity____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___d0d4b543e4084f10a022319d0e6d7887___QsRef1__Identity____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___d0d4b543e4084f10a022319d0e6d7887___QsRef1__Identity____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Logical__And__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Logical__And__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@20 = internal constant [27 x i8] c"nElements must be positive\00"
@Microsoft__Quantum__Canon___facc0657b0284c16ae2c0d999b143be0_Fst__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___facc0657b0284c16ae2c0d999b143be0_Fst__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___bfd0dc2872b54301bd24b64a2c23e89e_Snd__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___bfd0dc2872b54301bd24b64a2c23e89e_Snd__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@21 = internal constant [2 x i8] c"\22\00"
@22 = internal constant [13 x i8] c"\0A\09Expected:\09\00"
@23 = internal constant [5 x i8] c"true\00"
@24 = internal constant [6 x i8] c"false\00"
@25 = internal constant [11 x i8] c"\0A\09Actual:\09\00"
@26 = internal constant [33 x i8] c"`bits` must be between 0 and 63 \00"
@27 = internal constant [34 x i8] c"`number` must be between 0 and 2^\00"
@28 = internal constant [15 x i8] c" - 1, but was \00"
@Microsoft__Quantum__Intrinsic__X__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper]
@Microsoft__Quantum__Logical__Not__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Logical__Not__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__32__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctladj__wrapper]
@MemoryManagement__20__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__20__RefCount, void (%Tuple*, i32)* @MemoryManagement__20__AliasCount]
@PartialApplication__33__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__ctladj__wrapper]
@PartialApplication__34__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctladj__wrapper]
@MemoryManagement__21__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__21__RefCount, void (%Tuple*, i32)* @MemoryManagement__21__AliasCount]
@PartialApplication__35__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctladj__wrapper]
@MemoryManagement__22__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__22__RefCount, void (%Tuple*, i32)* @MemoryManagement__22__AliasCount]

define %Array* @Microsoft__Quantum__Samples__ClassifierStructure__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { i64, %Array* }*
  %3 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %2, i32 0, i32 1
  store i64 0, i64* %3, align 4
  store %Array* %0, %Array** %4, align 8
  %5 = call { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %2, i2 1, i64 4)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  %6 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, %Array* }*
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %8, i32 0, i32 1
  store i64 0, i64* %9, align 4
  store %Array* %6, %Array** %10, align 8
  %11 = call { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %8, i2 -2, i64 5)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { i64, %Array* }*
  %15 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %14, i32 0, i32 1
  store i64 1, i64* %15, align 4
  store %Array* %12, %Array** %16, align 8
  %17 = call { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %14, i2 1, i64 6)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { i64, %Array* }*
  %21 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %20, i32 0, i32 1
  store i64 1, i64* %21, align 4
  store %Array* %18, %Array** %22, align 8
  %23 = call { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %20, i2 -2, i64 7)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  %24 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 0)
  %26 = bitcast i8* %25 to i64*
  store i64 1, i64* %26, align 4
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { i64, %Array* }*
  %29 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %28, i32 0, i32 1
  store i64 0, i64* %29, align 4
  store %Array* %24, %Array** %30, align 8
  %31 = call { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %28, i2 1, i64 0)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 0)
  %34 = bitcast i8* %33 to i64*
  store i64 0, i64* %34, align 4
  %35 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %36 = bitcast %Tuple* %35 to { i64, %Array* }*
  %37 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %36, i32 0, i32 0
  %38 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %36, i32 0, i32 1
  store i64 1, i64* %37, align 4
  store %Array* %32, %Array** %38, align 8
  %39 = call { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %36, i2 1, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { i64, %Array* }*
  %43 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %42, i32 0, i32 0
  %44 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %42, i32 0, i32 1
  store i64 1, i64* %43, align 4
  store %Array* %40, %Array** %44, align 8
  %45 = call { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %42, i2 -2, i64 2)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { i64, %Array* }*
  %49 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %48, i32 0, i32 1
  store i64 1, i64* %49, align 4
  store %Array* %46, %Array** %50, align 8
  %51 = call { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %48, i2 1, i64 3)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  %52 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 0)
  %54 = bitcast i8* %53 to { { i64, %Array* }*, i2, i64 }**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 1)
  %56 = bitcast i8* %55 to { { i64, %Array* }*, i2, i64 }**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 2)
  %58 = bitcast i8* %57 to { { i64, %Array* }*, i2, i64 }**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 3)
  %60 = bitcast i8* %59 to { { i64, %Array* }*, i2, i64 }**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 4)
  %62 = bitcast i8* %61 to { { i64, %Array* }*, i2, i64 }**
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 5)
  %64 = bitcast i8* %63 to { { i64, %Array* }*, i2, i64 }**
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 6)
  %66 = bitcast i8* %65 to { { i64, %Array* }*, i2, i64 }**
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 7)
  %68 = bitcast i8* %67 to { { i64, %Array* }*, i2, i64 }**
  store { { i64, %Array* }*, i2, i64 }* %5, { { i64, %Array* }*, i2, i64 }** %54, align 8
  store { { i64, %Array* }*, i2, i64 }* %11, { { i64, %Array* }*, i2, i64 }** %56, align 8
  store { { i64, %Array* }*, i2, i64 }* %17, { { i64, %Array* }*, i2, i64 }** %58, align 8
  store { { i64, %Array* }*, i2, i64 }* %23, { { i64, %Array* }*, i2, i64 }** %60, align 8
  store { { i64, %Array* }*, i2, i64 }* %31, { { i64, %Array* }*, i2, i64 }** %62, align 8
  store { { i64, %Array* }*, i2, i64 }* %39, { { i64, %Array* }*, i2, i64 }** %64, align 8
  store { { i64, %Array* }*, i2, i64 }* %45, { { i64, %Array* }*, i2, i64 }** %66, align 8
  store { { i64, %Array* }*, i2, i64 }* %51, { { i64, %Array* }*, i2, i64 }** %68, align 8
  ret %Array* %52
}

define internal { { i64, %Array* }*, i2, i64 }* @Microsoft__Quantum__MachineLearning__ControlledRotation__body({ i64, %Array* }* %0, i2 %Axis, i64 %ParameterIndex) {
entry:
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Array* }*, i2, i64 }* getelementptr ({ { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { { i64, %Array* }*, i2, i64 }*
  %3 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %2, i32 0, i32 2
  store { i64, %Array* }* %0, { i64, %Array* }** %3, align 8
  store i2 %Axis, i2* %4, align 1
  store i64 %ParameterIndex, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 1)
  %8 = bitcast { i64, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  ret { { i64, %Array* }*, i2, i64 }* %2
}

declare %Array* @__quantum__rt__array_create_1d(i32, i64)

declare %Tuple* @__quantum__rt__tuple_create(i64)

declare void @__quantum__rt__array_update_reference_count(%Array*, i32)

declare void @__quantum__rt__tuple_update_reference_count(%Tuple*, i32)

declare i8* @__quantum__rt__array_get_element_ptr_1d(%Array*, i64)

define { %Array* }* @Microsoft__Quantum__Samples__DefaultSchedule__body(%Array* %samples) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %8 = sub i64 %0, 1
  %9 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %8, 2
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 ptrtoint (%Range* getelementptr (%Range, %Range* null, i32 1) to i32), i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 0)
  %12 = bitcast i8* %11 to %Range*
  store %Range %9, %Range* %12, align 4
  %13 = call { %Array* }* @Microsoft__Quantum__MachineLearning__SamplingSchedule__body(%Array* %10)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %15)
  %18 = bitcast i8* %17 to %Array**
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %21 = phi i64 [ 0, %exit__2 ], [ %26, %exiting__3 ]
  %22 = icmp sle i64 %21, 0
  br i1 %22, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %21)
  %24 = bitcast i8* %23 to %Range*
  %25 = load %Range, %Range* %24, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %26 = add i64 %21, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  ret { %Array* }* %13
}

declare i64 @__quantum__rt__array_get_size_1d(%Array*)

declare void @__quantum__rt__array_update_alias_count(%Array*, i32)

define internal { %Array* }* @Microsoft__Quantum__MachineLearning__SamplingSchedule__body(%Array* %__Item1__) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item1__)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %2)
  %5 = bitcast i8* %4 to %Range*
  %6 = load %Range, %Range* %5, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array* }*
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %9, i32 0, i32 0
  store %Array* %__Item1__, %Array** %10, align 8
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item1__)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %13)
  %16 = bitcast i8* %15 to %Range*
  %17 = load %Range, %Range* %16, align 4
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i32 1)
  %19 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %20 = phi i64 [ 0, %exit__2 ], [ %25, %exiting__3 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %20)
  %23 = bitcast i8* %22 to %Range*
  %24 = load %Range, %Range* %23, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %25 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 -1)
  ret { %Array* }* %9
}

define %Array* @Microsoft__Quantum__Samples__Preprocessed__body(%Array* %samples) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Samples__WithProductKernel__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Callable*, double }*
  %11 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %10, i32 0, i32 1
  store %Callable* %8, %Callable** %11, align 8
  store double 1.000000e+00, double* %12, align 8
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__1__FunctionTable, %Tuple* %9)
  %14 = call %Array* @Microsoft__Quantum__Arrays___97a84e9393e54d9d8a4592ac93dfb228_Mapped__body(%Callable* %13, %Array* %samples)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %16)
  %19 = bitcast i8* %18 to %Array**
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  ret %Array* %14
}

define internal %Array* @Microsoft__Quantum__Arrays___97a84e9393e54d9d8a4592ac93dfb228_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to %Array**
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %7 = icmp eq i64 %length, 0
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %9 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %11 = bitcast i8* %10 to %Array**
  %12 = load %Array*, %Array** %11, align 8
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr inbounds { %Array* }, { %Array* }* %14, i32 0, i32 0
  store %Array* %12, %Array** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %13, %Tuple* %16)
  %17 = bitcast %Tuple* %16 to { %Array* }*
  %18 = getelementptr inbounds { %Array* }, { %Array* }* %17, i32 0, i32 0
  %first = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 1)
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %20 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %21 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %22 = icmp sle i64 %21, %9
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %21)
  %24 = bitcast i8* %23 to %Array**
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %8

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %20
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %27)
  %30 = bitcast i8* %29 to %Array**
  store %Array* %first, %Array** %30, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %first, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %19, %Array** %retval, align 8
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %33 = phi i64 [ 0, %exit__3 ], [ %38, %exiting__4 ]
  %34 = icmp sle i64 %33, %32
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %33)
  %36 = bitcast i8* %35 to %Array**
  %37 = load %Array*, %Array** %36, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %38 = add i64 %33, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %39 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %56, %exiting__5 ]
  %40 = icmp sle i64 %idx, %39
  br i1 %40, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %41 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  %42 = call %Array* @__quantum__rt__array_copy(%Array* %41, i1 false)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %44 = bitcast i8* %43 to %Array**
  %45 = load %Array*, %Array** %44, align 8
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { %Array* }*
  %48 = getelementptr inbounds { %Array* }, { %Array* }* %47, i32 0, i32 0
  store %Array* %45, %Array** %48, align 8
  %49 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %46, %Tuple* %49)
  %50 = bitcast %Tuple* %49 to { %Array* }*
  %51 = getelementptr inbounds { %Array* }, { %Array* }* %50, i32 0, i32 0
  %52 = load %Array*, %Array** %51, align 8
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 %idx)
  %54 = bitcast i8* %53 to %Array**
  call void @__quantum__rt__array_update_alias_count(%Array* %52, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 1)
  %55 = load %Array*, %Array** %54, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 -1)
  store %Array* %52, %Array** %54, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 1)
  store %Array* %42, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %56 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %57 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %58 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %59 = phi i64 [ 0, %exit__5 ], [ %64, %exiting__6 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %59)
  %62 = bitcast i8* %61 to %Array**
  %63 = load %Array*, %Array** %62, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %63, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %64 = add i64 %59, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 -1)
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %66 = sub i64 %65, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %67 = phi i64 [ 0, %exit__6 ], [ %72, %exiting__7 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %67)
  %70 = bitcast i8* %69 to %Array**
  %71 = load %Array*, %Array** %70, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %71, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %72 = add i64 %67, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %first, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret %Array* %57
}

define internal void @Lifted__PartialApplication__1__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Samples__WithProductKernel__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %1 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Array* @Microsoft__Quantum__Samples__WithProductKernel__body(double %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %5, %Array** %7, align 8
  ret void
}

declare %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]*, [2 x void (%Tuple*, i32)*]*, %Tuple*)

define internal void @MemoryManagement__1__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__1__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

declare void @__quantum__rt__capture_update_reference_count(%Callable*, i32)

declare void @__quantum__rt__callable_update_reference_count(%Callable*, i32)

define %Array* @Microsoft__Quantum__Samples__WithProductKernel__body(double %scale, %Array* %sample) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %sample, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__TimesD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call double @Microsoft__Quantum__Arrays___64d768d0751b4ad8b5cf130c7bf24274_Fold__body(%Callable* %0, double 1.000000e+00, %Array* %sample)
  %2 = fmul double %scale, %1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to double*
  store double %2, double* %5, align 8
  %6 = call %Array* @__quantum__rt__array_concatenate(%Array* %sample, %Array* %3)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sample, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  ret %Array* %6
}

declare void @__quantum__rt__callable_invoke(%Callable*, %Tuple*, %Tuple*)

declare void @__quantum__rt__capture_update_alias_count(%Callable*, i32)

declare void @__quantum__rt__callable_update_alias_count(%Callable*, i32)

declare void @__quantum__rt__tuple_update_alias_count(%Tuple*, i32)

define { %Array*, double, i64 }* @Microsoft__Quantum__Samples__TrainHalfMoonModelAtStartPoint__body(%Array* %trainingVectors, %Array* %trainingLabels, %Array* %startPoint) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %trainingVectors)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %trainingVectors, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %trainingVectors, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %trainingLabels, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %startPoint, i32 1)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning__LabeledSample__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = call %Array* @Microsoft__Quantum__Samples__Preprocessed__body(%Array* %trainingVectors)
  %10 = call %Array* @Microsoft__Quantum__Arrays___23e2330a73974b3abb47f8506d246967_Zipped__body(%Array* %9, %Array* %trainingLabels)
  %samples = call %Array* @Microsoft__Quantum__Arrays___c90f4b37e41846f5a59f0fb238007c41_Mapped__body(%Callable* %8, %Array* %10)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %13)
  %16 = bitcast i8* %15 to { %Array*, i64 }**
  %17 = load { %Array*, i64 }*, { %Array*, i64 }** %16, align 8
  %18 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %17, i32 0, i32 0
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %20 = bitcast { %Array*, i64 }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %22 = call { double, double, i64, i64, i64, i64, double, i64, %Callable* }* @Microsoft__Quantum__MachineLearning__DefaultTrainingOptions__body()
  %23 = bitcast { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %22 to %Tuple*
  %24 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %23, i1 false)
  %25 = bitcast %Tuple* %24 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %26 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %25, i32 0, i32 0
  store double 1.000000e-01, double* %26, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  %27 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %24, i1 false)
  %28 = bitcast %Tuple* %27 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %29 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %28, i32 0, i32 2
  store i64 15, i64* %29, align 4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  %30 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %27, i1 false)
  %31 = bitcast %Tuple* %30 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %32 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %31, i32 0, i32 1
  store double 5.000000e-03, double* %32, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  %33 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %30, i1 false)
  %34 = bitcast %Tuple* %33 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %35 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %34, i32 0, i32 3
  store i64 10000, i64* %35, align 4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  %36 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %33, i1 false)
  %37 = bitcast %Tuple* %36 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %38 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %37, i32 0, i32 4
  store i64 2, i64* %38, align 4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 -1)
  %39 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %36, i1 false)
  %options = bitcast %Tuple* %39 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %40 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 8
  %41 = load %Callable*, %Callable** %40, align 8
  %42 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Message__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %42, %Callable** %40, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %42, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %42, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 1)
  %43 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %43)
  %44 = call %Array* @Microsoft__Quantum__Samples__ClassifierStructure__body()
  %45 = call { %Array*, %Array*, double }* @Microsoft__Quantum__MachineLearning__SequentialModel__body(%Array* %44, %Array* %startPoint, double 0.000000e+00)
  %46 = call { %Array* }* @Microsoft__Quantum__Samples__DefaultSchedule__body(%Array* %trainingVectors)
  %47 = call { %Array* }* @Microsoft__Quantum__Samples__DefaultSchedule__body(%Array* %trainingVectors)
  %48 = call { { %Array*, %Array*, double }*, i64 }* @Microsoft__Quantum__MachineLearning__TrainSequentialClassifierAtModel__body({ %Array*, %Array*, double }* %45, %Array* %samples, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, { %Array* }* %46, { %Array* }* %47)
  %49 = getelementptr inbounds { { %Array*, %Array*, double }*, i64 }, { { %Array*, %Array*, double }*, i64 }* %48, i32 0, i32 0
  %optimizedModel = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %49, align 8
  %50 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %optimizedModel, i32 0, i32 0
  %51 = load %Array*, %Array** %50, align 8
  %52 = call i64 @__quantum__rt__array_get_size_1d(%Array* %51)
  %53 = sub i64 %52, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %54 = phi i64 [ 0, %exit__2 ], [ %65, %exiting__3 ]
  %55 = icmp sle i64 %54, %53
  br i1 %55, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 %54)
  %57 = bitcast i8* %56 to { { i64, %Array* }*, i2, i64 }**
  %58 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %57, align 8
  %59 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %58, i32 0, i32 0
  %60 = load { i64, %Array* }*, { i64, %Array* }** %59, align 8
  %61 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %60, i32 0, i32 1
  %62 = load %Array*, %Array** %61, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %62, i32 1)
  %63 = bitcast { i64, %Array* }* %60 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i32 1)
  %64 = bitcast { { i64, %Array* }*, i2, i64 }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %64, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %65 = add i64 %54, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  %66 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %optimizedModel, i32 0, i32 1
  %67 = load %Array*, %Array** %66, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %67, i32 1)
  %68 = bitcast { %Array*, %Array*, double }* %optimizedModel to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 1)
  %69 = getelementptr inbounds { { %Array*, %Array*, double }*, i64 }, { { %Array*, %Array*, double }*, i64 }* %48, i32 0, i32 1
  %nMisses = load i64, i64* %69, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 1)
  %70 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %optimizedModel, i32 0, i32 2
  %71 = load double, double* %70, align 8
  %72 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, i64 }* getelementptr ({ %Array*, double, i64 }, { %Array*, double, i64 }* null, i32 1) to i64))
  %73 = bitcast %Tuple* %72 to { %Array*, double, i64 }*
  %74 = getelementptr inbounds { %Array*, double, i64 }, { %Array*, double, i64 }* %73, i32 0, i32 0
  %75 = getelementptr inbounds { %Array*, double, i64 }, { %Array*, double, i64 }* %73, i32 0, i32 1
  %76 = getelementptr inbounds { %Array*, double, i64 }, { %Array*, double, i64 }* %73, i32 0, i32 2
  store %Array* %67, %Array** %74, align 8
  store double %71, double* %75, align 8
  store i64 %nMisses, i64* %76, align 4
  %77 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %45, i32 0, i32 0
  %78 = load %Array*, %Array** %77, align 8
  %79 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %45, i32 0, i32 1
  %80 = load %Array*, %Array** %79, align 8
  %81 = getelementptr inbounds { %Array* }, { %Array* }* %46, i32 0, i32 0
  %82 = load %Array*, %Array** %81, align 8
  %83 = getelementptr inbounds { %Array* }, { %Array* }* %47, i32 0, i32 0
  %84 = load %Array*, %Array** %83, align 8
  %85 = sub i64 %0, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %86 = phi i64 [ 0, %exit__3 ], [ %91, %exiting__4 ]
  %87 = icmp sle i64 %86, %85
  br i1 %87, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %trainingVectors, i64 %86)
  %89 = bitcast i8* %88 to %Array**
  %90 = load %Array*, %Array** %89, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %90, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %91 = add i64 %86, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %trainingVectors, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %trainingLabels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %startPoint, i32 -1)
  %92 = sub i64 %11, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %93 = phi i64 [ 0, %exit__4 ], [ %101, %exiting__5 ]
  %94 = icmp sle i64 %93, %92
  br i1 %94, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %93)
  %96 = bitcast i8* %95 to { %Array*, i64 }**
  %97 = load { %Array*, i64 }*, { %Array*, i64 }** %96, align 8
  %98 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %97, i32 0, i32 0
  %99 = load %Array*, %Array** %98, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %99, i32 -1)
  %100 = bitcast { %Array*, i64 }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %100, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %101 = add i64 %93, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %42, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %42, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 -1)
  %102 = sub i64 %52, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %103 = phi i64 [ 0, %exit__5 ], [ %114, %exiting__6 ]
  %104 = icmp sle i64 %103, %102
  br i1 %104, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 %103)
  %106 = bitcast i8* %105 to { { i64, %Array* }*, i2, i64 }**
  %107 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %106, align 8
  %108 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %107, i32 0, i32 0
  %109 = load { i64, %Array* }*, { i64, %Array* }** %108, align 8
  %110 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %109, i32 0, i32 1
  %111 = load %Array*, %Array** %110, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %111, i32 -1)
  %112 = bitcast { i64, %Array* }* %109 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %112, i32 -1)
  %113 = bitcast { { i64, %Array* }*, i2, i64 }* %107 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %113, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %114 = add i64 %103, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %67, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  %115 = call i64 @__quantum__rt__array_get_size_1d(%Array* %9)
  %116 = sub i64 %115, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %117 = phi i64 [ 0, %exit__6 ], [ %122, %exiting__7 ]
  %118 = icmp sle i64 %117, %116
  br i1 %118, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %117)
  %120 = bitcast i8* %119 to %Array**
  %121 = load %Array*, %Array** %120, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %121, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %122 = add i64 %117, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  %123 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %124 = sub i64 %123, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %125 = phi i64 [ 0, %exit__7 ], [ %133, %exiting__8 ]
  %126 = icmp sle i64 %125, %124
  br i1 %126, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %125)
  %128 = bitcast i8* %127 to { %Array*, i64 }**
  %129 = load { %Array*, i64 }*, { %Array*, i64 }** %128, align 8
  %130 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %129, i32 0, i32 0
  %131 = load %Array*, %Array** %130, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %131, i32 -1)
  %132 = bitcast { %Array*, i64 }* %129 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %132, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %133 = add i64 %125, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %134 = sub i64 %11, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %135 = phi i64 [ 0, %exit__8 ], [ %143, %exiting__9 ]
  %136 = icmp sle i64 %135, %134
  br i1 %136, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %135)
  %138 = bitcast i8* %137 to { %Array*, i64 }**
  %139 = load { %Array*, i64 }*, { %Array*, i64 }** %138, align 8
  %140 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %139, i32 0, i32 0
  %141 = load %Array*, %Array** %140, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %141, i32 -1)
  %142 = bitcast { %Array*, i64 }* %139 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %142, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %143 = add i64 %135, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %42, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  %144 = call i64 @__quantum__rt__array_get_size_1d(%Array* %44)
  %145 = sub i64 %144, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %146 = phi i64 [ 0, %exit__9 ], [ %157, %exiting__10 ]
  %147 = icmp sle i64 %146, %145
  br i1 %147, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %146)
  %149 = bitcast i8* %148 to { { i64, %Array* }*, i2, i64 }**
  %150 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %149, align 8
  %151 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %150, i32 0, i32 0
  %152 = load { i64, %Array* }*, { i64, %Array* }** %151, align 8
  %153 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %152, i32 0, i32 1
  %154 = load %Array*, %Array** %153, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %154, i32 -1)
  %155 = bitcast { i64, %Array* }* %152 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %155, i32 -1)
  %156 = bitcast { { i64, %Array* }*, i2, i64 }* %150 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %156, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %157 = add i64 %146, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  %158 = call i64 @__quantum__rt__array_get_size_1d(%Array* %78)
  %159 = sub i64 %158, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %160 = phi i64 [ 0, %exit__10 ], [ %171, %exiting__11 ]
  %161 = icmp sle i64 %160, %159
  br i1 %161, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %162 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 %160)
  %163 = bitcast i8* %162 to { { i64, %Array* }*, i2, i64 }**
  %164 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %163, align 8
  %165 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %164, i32 0, i32 0
  %166 = load { i64, %Array* }*, { i64, %Array* }** %165, align 8
  %167 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %166, i32 0, i32 1
  %168 = load %Array*, %Array** %167, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %168, i32 -1)
  %169 = bitcast { i64, %Array* }* %166 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %169, i32 -1)
  %170 = bitcast { { i64, %Array* }*, i2, i64 }* %164 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %170, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %171 = add i64 %160, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %80, i32 -1)
  %172 = bitcast { %Array*, %Array*, double }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %172, i32 -1)
  %173 = call i64 @__quantum__rt__array_get_size_1d(%Array* %82)
  %174 = sub i64 %173, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %175 = phi i64 [ 0, %exit__11 ], [ %180, %exiting__12 ]
  %176 = icmp sle i64 %175, %174
  br i1 %176, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %177 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 %175)
  %178 = bitcast i8* %177 to %Range*
  %179 = load %Range, %Range* %178, align 4
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %180 = add i64 %175, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  %181 = bitcast { %Array* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %181, i32 -1)
  %182 = call i64 @__quantum__rt__array_get_size_1d(%Array* %84)
  %183 = sub i64 %182, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %184 = phi i64 [ 0, %exit__12 ], [ %189, %exiting__13 ]
  %185 = icmp sle i64 %184, %183
  br i1 %185, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 %184)
  %187 = bitcast i8* %186 to %Range*
  %188 = load %Range, %Range* %187, align 4
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %189 = add i64 %184, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i32 -1)
  %190 = bitcast { %Array* }* %47 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %190, i32 -1)
  %191 = sub i64 %52, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %192 = phi i64 [ 0, %exit__13 ], [ %203, %exiting__14 ]
  %193 = icmp sle i64 %192, %191
  br i1 %193, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %51, i64 %192)
  %195 = bitcast i8* %194 to { { i64, %Array* }*, i2, i64 }**
  %196 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %195, align 8
  %197 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %196, i32 0, i32 0
  %198 = load { i64, %Array* }*, { i64, %Array* }** %197, align 8
  %199 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %198, i32 0, i32 1
  %200 = load %Array*, %Array** %199, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %200, i32 -1)
  %201 = bitcast { i64, %Array* }* %198 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %201, i32 -1)
  %202 = bitcast { { i64, %Array* }*, i2, i64 }* %196 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %202, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %203 = add i64 %192, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %51, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %68, i32 -1)
  %204 = bitcast { { %Array*, %Array*, double }*, i64 }* %48 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %204, i32 -1)
  ret { %Array*, double, i64 }* %73
}

define internal %Array* @Microsoft__Quantum__Arrays___c90f4b37e41846f5a59f0fb238007c41_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { %Array*, i64 }**
  %5 = load { %Array*, i64 }*, { %Array*, i64 }** %4, align 8
  %6 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %7, i32 1)
  %8 = bitcast { %Array*, i64 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %10 = icmp eq i64 %length, 0
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %12 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %14 = bitcast i8* %13 to { %Array*, i64 }**
  %15 = load { %Array*, i64 }*, { %Array*, i64 }** %14, align 8
  %16 = bitcast { %Array*, i64 }* %15 to %Tuple*
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }* }* getelementptr ({ { %Array*, i64 }* }, { { %Array*, i64 }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %16, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { { %Array*, i64 }* }*
  %19 = getelementptr inbounds { { %Array*, i64 }* }, { { %Array*, i64 }* }* %18, i32 0, i32 0
  %first = load { %Array*, i64 }*, { %Array*, i64 }** %19, align 8
  %20 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %first, i32 0, i32 0
  %21 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  %22 = bitcast { %Array*, i64 }* %first to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %24 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %25 = phi i64 [ 0, %then0__1 ], [ %33, %exiting__2 ]
  %26 = icmp sle i64 %25, %12
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %25)
  %28 = bitcast i8* %27 to { %Array*, i64 }**
  %29 = load { %Array*, i64 }*, { %Array*, i64 }** %28, align 8
  %30 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %29, i32 0, i32 0
  %31 = load %Array*, %Array** %30, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 -1)
  %32 = bitcast { %Array*, i64 }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %11

header__3:                                        ; preds = %exiting__3, %continue__1
  %34 = phi i64 [ 0, %continue__1 ], [ %39, %exiting__3 ]
  %35 = icmp sle i64 %34, %24
  br i1 %35, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %34)
  %37 = bitcast i8* %36 to { %Array*, i64 }**
  store { %Array*, i64 }* %first, { %Array*, i64 }** %37, align 8
  %38 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %39 = add i64 %34, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %23, %Array** %retval, align 8
  %40 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %41 = phi i64 [ 0, %exit__3 ], [ %49, %exiting__4 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %41)
  %44 = bitcast i8* %43 to { %Array*, i64 }**
  %45 = load { %Array*, i64 }*, { %Array*, i64 }** %44, align 8
  %46 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %45, i32 0, i32 0
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  %48 = bitcast { %Array*, i64 }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %49 = add i64 %41, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %50 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %71, %exiting__5 ]
  %51 = icmp sle i64 %idx, %50
  br i1 %51, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %52 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %52, i32 -1)
  %53 = call %Array* @__quantum__rt__array_copy(%Array* %52, i1 false)
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %55 = bitcast i8* %54 to { %Array*, i64 }**
  %56 = load { %Array*, i64 }*, { %Array*, i64 }** %55, align 8
  %57 = bitcast { %Array*, i64 }* %56 to %Tuple*
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }* }* getelementptr ({ { %Array*, i64 }* }, { { %Array*, i64 }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %57, %Tuple* %58)
  %59 = bitcast %Tuple* %58 to { { %Array*, i64 }* }*
  %60 = getelementptr inbounds { { %Array*, i64 }* }, { { %Array*, i64 }* }* %59, i32 0, i32 0
  %61 = load { %Array*, i64 }*, { %Array*, i64 }** %60, align 8
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %idx)
  %63 = bitcast i8* %62 to { %Array*, i64 }**
  %64 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %61, i32 0, i32 0
  %65 = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 1)
  %66 = bitcast { %Array*, i64 }* %61 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %66, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 1)
  %67 = load { %Array*, i64 }*, { %Array*, i64 }** %63, align 8
  %68 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %67, i32 0, i32 0
  %69 = load %Array*, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 -1)
  %70 = bitcast { %Array*, i64 }* %67 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %70, i32 -1)
  store { %Array*, i64 }* %61, { %Array*, i64 }** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  store %Array* %53, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %71 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %72 = load %Array*, %Array** %retval, align 8
  %73 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %74 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %75 = phi i64 [ 0, %exit__5 ], [ %83, %exiting__6 ]
  %76 = icmp sle i64 %75, %74
  br i1 %76, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %75)
  %78 = bitcast i8* %77 to { %Array*, i64 }**
  %79 = load { %Array*, i64 }*, { %Array*, i64 }** %78, align 8
  %80 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %79, i32 0, i32 0
  %81 = load %Array*, %Array** %80, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 -1)
  %82 = bitcast { %Array*, i64 }* %79 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %82, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %83 = add i64 %75, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %73, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 -1)
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %72)
  %85 = sub i64 %84, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %86 = phi i64 [ 0, %exit__6 ], [ %94, %exiting__7 ]
  %87 = icmp sle i64 %86, %85
  br i1 %87, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 %86)
  %89 = bitcast i8* %88 to { %Array*, i64 }**
  %90 = load { %Array*, i64 }*, { %Array*, i64 }** %89, align 8
  %91 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %90, i32 0, i32 0
  %92 = load %Array*, %Array** %91, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %92, i32 -1)
  %93 = bitcast { %Array*, i64 }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %93, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %94 = add i64 %86, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %73, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  ret %Array* %72
}

define internal void @Microsoft__Quantum__MachineLearning__LabeledSample__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, i64 }*
  %1 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load i64, i64* %2, align 4
  %5 = call { %Array*, i64 }* @Microsoft__Quantum__MachineLearning__LabeledSample__body(%Array* %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { { %Array*, i64 }* }*
  %7 = getelementptr inbounds { { %Array*, i64 }* }, { { %Array*, i64 }* }* %6, i32 0, i32 0
  store { %Array*, i64 }* %5, { %Array*, i64 }** %7, align 8
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___23e2330a73974b3abb47f8506d246967_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %9 = icmp slt i64 %0, %8
  br i1 %9, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %8, %condFalse__1 ]
  %10 = icmp eq i64 %nElements, 0
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %12 = sub i64 %0, 1
  br label %header__2

continue__1:                                      ; preds = %condContinue__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %14 = bitcast i8* %13 to %Array**
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 4
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, i64 }* getelementptr ({ %Array*, i64 }, { %Array*, i64 }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, i64 }*
  %21 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %20, i32 0, i32 1
  store %Array* %15, %Array** %21, align 8
  store i64 %18, i64* %22, align 4
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %24 = sub i64 %nElements, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %25 = phi i64 [ 0, %then0__1 ], [ %30, %exiting__2 ]
  %26 = icmp sle i64 %25, %12
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %25)
  %28 = bitcast i8* %27 to %Array**
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %11

header__3:                                        ; preds = %exiting__3, %continue__1
  %31 = phi i64 [ 0, %continue__1 ], [ %36, %exiting__3 ]
  %32 = icmp sle i64 %31, %24
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, i64 }**
  store { %Array*, i64 }* %20, { %Array*, i64 }** %34, align 8
  %35 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %36 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %23, %Array** %output, align 8
  %37 = sub i64 %nElements, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %38 = phi i64 [ 0, %exit__3 ], [ %46, %exiting__4 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %38)
  %41 = bitcast i8* %40 to { %Array*, i64 }**
  %42 = load { %Array*, i64 }*, { %Array*, i64 }** %41, align 8
  %43 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %42, i32 0, i32 0
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 1)
  %45 = bitcast { %Array*, i64 }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %38, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %47 = sub i64 %nElements, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idxElement = phi i64 [ 1, %exit__4 ], [ %67, %exiting__5 ]
  %48 = icmp sle i64 %idxElement, %47
  br i1 %48, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  %50 = call %Array* @__quantum__rt__array_copy(%Array* %49, i1 false)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %52 = bitcast i8* %51 to %Array**
  %53 = load %Array*, %Array** %52, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 1)
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %55 = bitcast i8* %54 to i64*
  %56 = load i64, i64* %55, align 4
  %57 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, i64 }* getelementptr ({ %Array*, i64 }, { %Array*, i64 }* null, i32 1) to i64))
  %58 = bitcast %Tuple* %57 to { %Array*, i64 }*
  %59 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %58, i32 0, i32 0
  %60 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %58, i32 0, i32 1
  store %Array* %53, %Array** %59, align 8
  store i64 %56, i64* %60, align 4
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 %idxElement)
  %62 = bitcast i8* %61 to { %Array*, i64 }**
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 1)
  %63 = load { %Array*, i64 }*, { %Array*, i64 }** %62, align 8
  %64 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %63, i32 0, i32 0
  %65 = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  %66 = bitcast { %Array*, i64 }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %66, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 -1)
  store { %Array*, i64 }* %58, { %Array*, i64 }** %62, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  store %Array* %50, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %67 = add i64 %idxElement, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %68 = load %Array*, %Array** %output, align 8
  %69 = load %Array*, %Array** %21, align 8
  %70 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %71 = phi i64 [ 0, %exit__5 ], [ %76, %exiting__6 ]
  %72 = icmp sle i64 %71, %70
  br i1 %72, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %71)
  %74 = bitcast i8* %73 to %Array**
  %75 = load %Array*, %Array** %74, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %75, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %76 = add i64 %71, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %77 = call i64 @__quantum__rt__array_get_size_1d(%Array* %68)
  %78 = sub i64 %77, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %79 = phi i64 [ 0, %exit__6 ], [ %87, %exiting__7 ]
  %80 = icmp sle i64 %79, %78
  br i1 %80, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 %79)
  %82 = bitcast i8* %81 to { %Array*, i64 }**
  %83 = load { %Array*, i64 }*, { %Array*, i64 }** %82, align 8
  %84 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %83, i32 0, i32 0
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %85, i32 -1)
  %86 = bitcast { %Array*, i64 }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %87 = add i64 %79, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %68, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  ret %Array* %68
}

define internal { double, double, i64, i64, i64, i64, double, i64, %Callable* }* @Microsoft__Quantum__MachineLearning__DefaultTrainingOptions__body() {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___9e001bb7f66049e0a843d161f2c1deac_Ignore__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call { double, double, i64, i64, i64, i64, double, i64, %Callable* }* @Microsoft__Quantum__MachineLearning__TrainingOptions__body(double 1.000000e-01, double 5.000000e-03, i64 15, i64 10000, i64 16, i64 8, double 1.000000e-02, i64 1, %Callable* %0)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1
}

declare %Tuple* @__quantum__rt__tuple_copy(%Tuple*, i1)

define internal void @Microsoft__Quantum__Intrinsic__Message__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %String* }*
  %1 = getelementptr inbounds { %String* }, { %String* }* %0, i32 0, i32 0
  %2 = load %String*, %String** %1, align 8
  call void @__quantum__rt__message(%String* %2)
  ret void
}

declare %String* @__quantum__rt__string_create(i8*)

declare void @__quantum__rt__message(%String*)

define internal { { %Array*, %Array*, double }*, i64 }* @Microsoft__Quantum__MachineLearning__TrainSequentialClassifierAtModel__body({ %Array*, %Array*, double }* %model, %Array* %samples, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, { %Array* }* %trainingSchedule, { %Array* }* %validationSchedule) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %20 = sub i64 %19, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %21)
  %24 = bitcast i8* %23 to { %Array*, i64 }**
  %25 = load { %Array*, i64 }*, { %Array*, i64 }** %24, align 8
  %26 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %25, i32 0, i32 0
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = bitcast { %Array*, i64 }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %30 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 8
  %31 = load %Callable*, %Callable** %30, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %31, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %31, i32 1)
  %32 = bitcast { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 1)
  %33 = getelementptr inbounds { %Array* }, { %Array* }* %trainingSchedule, i32 0, i32 0
  %34 = load %Array*, %Array** %33, align 8
  %35 = call i64 @__quantum__rt__array_get_size_1d(%Array* %34)
  %36 = sub i64 %35, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %37 = phi i64 [ 0, %exit__2 ], [ %42, %exiting__3 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %37)
  %40 = bitcast i8* %39 to %Range*
  %41 = load %Range, %Range* %40, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %42 = add i64 %37, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %43 = bitcast { %Array* }* %trainingSchedule to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 1)
  %44 = getelementptr inbounds { %Array* }, { %Array* }* %validationSchedule, i32 0, i32 0
  %45 = load %Array*, %Array** %44, align 8
  %46 = call i64 @__quantum__rt__array_get_size_1d(%Array* %45)
  %47 = sub i64 %46, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %48 = phi i64 [ 0, %exit__3 ], [ %53, %exiting__4 ]
  %49 = icmp sle i64 %48, %47
  br i1 %49, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 %48)
  %51 = bitcast i8* %50 to %Range*
  %52 = load %Range, %Range* %51, align 4
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %53 = add i64 %48, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 1)
  %54 = bitcast { %Array* }* %validationSchedule to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 1)
  %optimizedModel = call { %Array*, %Array*, double }* @Microsoft__Quantum__MachineLearning____QsRef0___TrainSequentialClassifierAtModel____body({ %Array*, %Array*, double }* %model, %Array* %samples, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, { %Array* }* %trainingSchedule)
  %55 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %optimizedModel, i32 0, i32 0
  %56 = load %Array*, %Array** %55, align 8
  %57 = call i64 @__quantum__rt__array_get_size_1d(%Array* %56)
  %58 = sub i64 %57, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %59 = phi i64 [ 0, %exit__4 ], [ %70, %exiting__5 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %59)
  %62 = bitcast i8* %61 to { { i64, %Array* }*, i2, i64 }**
  %63 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %62, align 8
  %64 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %63, i32 0, i32 0
  %65 = load { i64, %Array* }*, { i64, %Array* }** %64, align 8
  %66 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %65, i32 0, i32 1
  %67 = load %Array*, %Array** %66, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %67, i32 1)
  %68 = bitcast { i64, %Array* }* %65 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 1)
  %69 = bitcast { { i64, %Array* }*, i2, i64 }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %69, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %70 = add i64 %59, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  %71 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %optimizedModel, i32 0, i32 1
  %72 = load %Array*, %Array** %71, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 1)
  %73 = bitcast { %Array*, %Array*, double }* %optimizedModel to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 1)
  %74 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning___Label__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %labels = call %Array* @Microsoft__Quantum__Arrays___f34491685bf044f1939458f941be92ef_Mapped__body(%Callable* %74, %Array* %samples)
  call void @__quantum__rt__array_update_alias_count(%Array* %labels, i32 1)
  %75 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning___Features__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %features = call %Array* @Microsoft__Quantum__Arrays___458019d5b77947a88477997a20fc14c5_Mapped__body(%Callable* %75, %Array* %samples)
  %76 = call i64 @__quantum__rt__array_get_size_1d(%Array* %features)
  %77 = sub i64 %76, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %78 = phi i64 [ 0, %exit__5 ], [ %83, %exiting__6 ]
  %79 = icmp sle i64 %78, %77
  br i1 %79, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %78)
  %81 = bitcast i8* %80 to %Array**
  %82 = load %Array*, %Array** %81, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %82, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %83 = add i64 %78, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 1)
  %84 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 1
  %85 = load double, double* %84, align 8
  %86 = call %Array* @Microsoft__Quantum__MachineLearning___6dd27c99de61421cb8da3bf3154034a7_Sampled__body({ %Array* }* %validationSchedule, %Array* %features)
  %87 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 3
  %88 = load i64, i64* %87, align 4
  %probabilities = call %Array* @Microsoft__Quantum__MachineLearning__EstimateClassificationProbabilities__body(double %85, { %Array*, %Array*, double }* %optimizedModel, %Array* %86, i64 %88)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 1)
  %89 = call %Array* @Microsoft__Quantum__MachineLearning___9df2eba66a764c8abe9e53ac519cccaa_Sampled__body({ %Array* }* %validationSchedule, %Array* %labels)
  %90 = call %Array* @Microsoft__Quantum__Arrays___e71c6b9cbb804917a4d7cd04011f2188_Zipped__body(%Array* %probabilities, %Array* %89)
  %localBias = call double @Microsoft__Quantum__MachineLearning____QsRef0__UpdatedBias____body(%Array* %90, double 0.000000e+00, double %85)
  %localPL = call %Array* @Microsoft__Quantum__MachineLearning__InferredLabels__body(double %localBias, %Array* %probabilities)
  call void @__quantum__rt__array_update_alias_count(%Array* %localPL, i32 1)
  %91 = call %Array* @Microsoft__Quantum__MachineLearning___9df2eba66a764c8abe9e53ac519cccaa_Sampled__body({ %Array* }* %validationSchedule, %Array* %labels)
  %localMisses = call i64 @Microsoft__Quantum__MachineLearning__NMisclassifications__body(%Array* %localPL, %Array* %91)
  %92 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %73, i1 false)
  %93 = bitcast %Tuple* %92 to { %Array*, %Array*, double }*
  %94 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %93, i32 0, i32 2
  store double %localBias, double* %94, align 8
  %95 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %93, i32 0, i32 0
  %96 = load %Array*, %Array** %95, align 8
  %97 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %93, i32 0, i32 1
  %98 = load %Array*, %Array** %97, align 8
  %99 = call i64 @__quantum__rt__array_get_size_1d(%Array* %96)
  %100 = sub i64 %99, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %101 = phi i64 [ 0, %exit__6 ], [ %112, %exiting__7 ]
  %102 = icmp sle i64 %101, %100
  br i1 %102, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 %101)
  %104 = bitcast i8* %103 to { { i64, %Array* }*, i2, i64 }**
  %105 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %104, align 8
  %106 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %105, i32 0, i32 0
  %107 = load { i64, %Array* }*, { i64, %Array* }** %106, align 8
  %108 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %107, i32 0, i32 1
  %109 = load %Array*, %Array** %108, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %109, i32 1)
  %110 = bitcast { i64, %Array* }* %107 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %110, i32 1)
  %111 = bitcast { { i64, %Array* }*, i2, i64 }* %105 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %111, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %112 = add i64 %101, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %96, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %98, i32 1)
  %113 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, i64 }* getelementptr ({ { %Array*, %Array*, double }*, i64 }, { { %Array*, %Array*, double }*, i64 }* null, i32 1) to i64))
  %114 = bitcast %Tuple* %113 to { { %Array*, %Array*, double }*, i64 }*
  %115 = getelementptr inbounds { { %Array*, %Array*, double }*, i64 }, { { %Array*, %Array*, double }*, i64 }* %114, i32 0, i32 0
  %116 = getelementptr inbounds { { %Array*, %Array*, double }*, i64 }, { { %Array*, %Array*, double }*, i64 }* %114, i32 0, i32 1
  store { %Array*, %Array*, double }* %93, { %Array*, %Array*, double }** %115, align 8
  store i64 %localMisses, i64* %116, align 4
  %117 = sub i64 %2, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %118 = phi i64 [ 0, %exit__7 ], [ %129, %exiting__8 ]
  %119 = icmp sle i64 %118, %117
  br i1 %119, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %118)
  %121 = bitcast i8* %120 to { { i64, %Array* }*, i2, i64 }**
  %122 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %121, align 8
  %123 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %122, i32 0, i32 0
  %124 = load { i64, %Array* }*, { i64, %Array* }** %123, align 8
  %125 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %124, i32 0, i32 1
  %126 = load %Array*, %Array** %125, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %126, i32 -1)
  %127 = bitcast { i64, %Array* }* %124 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %127, i32 -1)
  %128 = bitcast { { i64, %Array* }*, i2, i64 }* %122 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %129 = add i64 %118, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  %130 = sub i64 %19, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %131 = phi i64 [ 0, %exit__8 ], [ %139, %exiting__9 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %131)
  %134 = bitcast i8* %133 to { %Array*, i64 }**
  %135 = load { %Array*, i64 }*, { %Array*, i64 }** %134, align 8
  %136 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %135, i32 0, i32 0
  %137 = load %Array*, %Array** %136, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %137, i32 -1)
  %138 = bitcast { %Array*, i64 }* %135 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %138, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %139 = add i64 %131, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  %140 = sub i64 %35, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %141 = phi i64 [ 0, %exit__9 ], [ %146, %exiting__10 ]
  %142 = icmp sle i64 %141, %140
  br i1 %142, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %143 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %141)
  %144 = bitcast i8* %143 to %Range*
  %145 = load %Range, %Range* %144, align 4
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %146 = add i64 %141, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  %147 = sub i64 %46, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %148 = phi i64 [ 0, %exit__10 ], [ %153, %exiting__11 ]
  %149 = icmp sle i64 %148, %147
  br i1 %149, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %150 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 %148)
  %151 = bitcast i8* %150 to %Range*
  %152 = load %Range, %Range* %151, align 4
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %153 = add i64 %148, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 -1)
  %154 = sub i64 %57, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %155 = phi i64 [ 0, %exit__11 ], [ %166, %exiting__12 ]
  %156 = icmp sle i64 %155, %154
  br i1 %156, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %155)
  %158 = bitcast i8* %157 to { { i64, %Array* }*, i2, i64 }**
  %159 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %158, align 8
  %160 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %159, i32 0, i32 0
  %161 = load { i64, %Array* }*, { i64, %Array* }** %160, align 8
  %162 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %161, i32 0, i32 1
  %163 = load %Array*, %Array** %162, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %163, i32 -1)
  %164 = bitcast { i64, %Array* }* %161 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %164, i32 -1)
  %165 = bitcast { { i64, %Array* }*, i2, i64 }* %159 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %165, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %166 = add i64 %155, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %labels, i32 -1)
  %167 = sub i64 %76, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %168 = phi i64 [ 0, %exit__12 ], [ %173, %exiting__13 ]
  %169 = icmp sle i64 %168, %167
  br i1 %169, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %168)
  %171 = bitcast i8* %170 to %Array**
  %172 = load %Array*, %Array** %171, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %172, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %173 = add i64 %168, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %localPL, i32 -1)
  %174 = sub i64 %57, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %175 = phi i64 [ 0, %exit__13 ], [ %186, %exiting__14 ]
  %176 = icmp sle i64 %175, %174
  br i1 %176, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %177 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %175)
  %178 = bitcast i8* %177 to { { i64, %Array* }*, i2, i64 }**
  %179 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %178, align 8
  %180 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %179, i32 0, i32 0
  %181 = load { i64, %Array* }*, { i64, %Array* }** %180, align 8
  %182 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %181, i32 0, i32 1
  %183 = load %Array*, %Array** %182, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %183, i32 -1)
  %184 = bitcast { i64, %Array* }* %181 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %184, i32 -1)
  %185 = bitcast { { i64, %Array* }*, i2, i64 }* %179 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %185, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %186 = add i64 %175, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %73, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %74, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %labels, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %75, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %75, i32 -1)
  %187 = sub i64 %76, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %188 = phi i64 [ 0, %exit__14 ], [ %193, %exiting__15 ]
  %189 = icmp sle i64 %188, %187
  br i1 %189, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %190 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %188)
  %191 = bitcast i8* %190 to %Array**
  %192 = load %Array*, %Array** %191, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %192, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %193 = add i64 %188, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_reference_count(%Array* %features, i32 -1)
  %194 = call i64 @__quantum__rt__array_get_size_1d(%Array* %86)
  %195 = sub i64 %194, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %196 = phi i64 [ 0, %exit__15 ], [ %201, %exiting__16 ]
  %197 = icmp sle i64 %196, %195
  br i1 %197, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 %196)
  %199 = bitcast i8* %198 to %Array**
  %200 = load %Array*, %Array** %199, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %200, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %201 = add i64 %196, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_reference_count(%Array* %86, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %probabilities, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %89, i32 -1)
  %202 = call i64 @__quantum__rt__array_get_size_1d(%Array* %90)
  %203 = sub i64 %202, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %204 = phi i64 [ 0, %exit__16 ], [ %210, %exiting__17 ]
  %205 = icmp sle i64 %204, %203
  br i1 %205, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %206 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 %204)
  %207 = bitcast i8* %206 to { double, i64 }**
  %208 = load { double, i64 }*, { double, i64 }** %207, align 8
  %209 = bitcast { double, i64 }* %208 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %209, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %210 = add i64 %204, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_reference_count(%Array* %90, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %localPL, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i32 -1)
  ret { { %Array*, %Array*, double }*, i64 }* %114
}

define internal { %Array*, %Array*, double }* @Microsoft__Quantum__MachineLearning__SequentialModel__body(%Array* %Structure, %Array* %Parameters, double %Bias) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %Structure)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %Structure, i64 %2)
  %5 = bitcast i8* %4 to { { i64, %Array* }*, i2, i64 }**
  %6 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %5, align 8
  %7 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %6, i32 0, i32 0
  %8 = load { i64, %Array* }*, { i64, %Array* }** %7, align 8
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %8, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { i64, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = bitcast { { i64, %Array* }*, i2, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %Structure, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %Parameters, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Array*, double }*
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %15, i32 0, i32 2
  store %Array* %Structure, %Array** %16, align 8
  store %Array* %Parameters, %Array** %17, align 8
  store double %Bias, double* %18, align 8
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %Structure)
  %20 = sub i64 %19, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %32, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %Structure, i64 %21)
  %24 = bitcast i8* %23 to { { i64, %Array* }*, i2, i64 }**
  %25 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %24, align 8
  %26 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %25, i32 0, i32 0
  %27 = load { i64, %Array* }*, { i64, %Array* }** %26, align 8
  %28 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %27, i32 0, i32 1
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 1)
  %30 = bitcast { i64, %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 1)
  %31 = bitcast { { i64, %Array* }*, i2, i64 }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %32 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %Structure, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %Parameters, i32 1)
  %33 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %34 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %Structure, i64 %34)
  %37 = bitcast i8* %36 to { { i64, %Array* }*, i2, i64 }**
  %38 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %37, align 8
  %39 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %38, i32 0, i32 0
  %40 = load { i64, %Array* }*, { i64, %Array* }** %39, align 8
  %41 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %40, i32 0, i32 1
  %42 = load %Array*, %Array** %41, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 -1)
  %43 = bitcast { i64, %Array* }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  %44 = bitcast { { i64, %Array* }*, i2, i64 }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %34, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %Structure, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %Parameters, i32 -1)
  ret { %Array*, %Array*, double }* %15
}

declare void @__quantum__rt__string_update_reference_count(%String*, i32)

define internal { %Array*, i64 }* @Microsoft__Quantum__MachineLearning__LabeledSample__body(%Array* %Features, i64 %Label) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %Features, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, i64 }* getelementptr ({ %Array*, i64 }, { %Array*, i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array*, i64 }*
  %2 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %1, i32 0, i32 1
  store %Array* %Features, %Array** %2, align 8
  store i64 %Label, i64* %3, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %Features, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %Features, i32 -1)
  ret { %Array*, i64 }* %1
}

define double @Microsoft__Quantum__Samples__ValidateHalfMoonModel__body(%Array* %validationVectors, %Array* %validationLabels, %Array* %parameters, double %bias) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %validationVectors)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %validationVectors, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %validationVectors, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %validationLabels, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %parameters, i32 1)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning__LabeledSample__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = call %Array* @Microsoft__Quantum__Samples__Preprocessed__body(%Array* %validationVectors)
  %10 = call %Array* @Microsoft__Quantum__Arrays___23e2330a73974b3abb47f8506d246967_Zipped__body(%Array* %9, %Array* %validationLabels)
  %samples = call %Array* @Microsoft__Quantum__Arrays___c90f4b37e41846f5a59f0fb238007c41_Mapped__body(%Callable* %8, %Array* %10)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %13)
  %16 = bitcast i8* %15 to { %Array*, i64 }**
  %17 = load { %Array*, i64 }*, { %Array*, i64 }** %16, align 8
  %18 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %17, i32 0, i32 0
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %20 = bitcast { %Array*, i64 }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %22 = call %Array* @Microsoft__Quantum__Samples__ClassifierStructure__body()
  %23 = call { %Array*, %Array*, double }* @Microsoft__Quantum__MachineLearning__SequentialModel__body(%Array* %22, %Array* %parameters, double %bias)
  %24 = call { %Array* }* @Microsoft__Quantum__Samples__DefaultSchedule__body(%Array* %validationVectors)
  %results = call { i64, i64 }* @Microsoft__Quantum__MachineLearning__ValidateSequentialClassifier__body({ %Array*, %Array*, double }* %23, %Array* %samples, double 5.000000e-03, i64 10000, { %Array* }* %24)
  %25 = bitcast { i64, i64 }* %results to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 1)
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %results, i32 0, i32 0
  %27 = load i64, i64* %26, align 4
  %28 = sitofp i64 %27 to double
  %29 = sitofp i64 %11 to double
  %30 = fdiv double %28, %29
  %31 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %23, i32 0, i32 0
  %32 = load %Array*, %Array** %31, align 8
  %33 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %23, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  %35 = getelementptr inbounds { %Array* }, { %Array* }* %24, i32 0, i32 0
  %36 = load %Array*, %Array** %35, align 8
  %37 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %43, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %validationVectors, i64 %38)
  %41 = bitcast i8* %40 to %Array**
  %42 = load %Array*, %Array** %41, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %43 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %validationVectors, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %validationLabels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %parameters, i32 -1)
  %44 = sub i64 %11, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %53, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %45)
  %48 = bitcast i8* %47 to { %Array*, i64 }**
  %49 = load { %Array*, i64 }*, { %Array*, i64 }** %48, align 8
  %50 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %49, i32 0, i32 0
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 -1)
  %52 = bitcast { %Array*, i64 }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %53 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  %54 = call i64 @__quantum__rt__array_get_size_1d(%Array* %9)
  %55 = sub i64 %54, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %56 = phi i64 [ 0, %exit__4 ], [ %61, %exiting__5 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %56)
  %59 = bitcast i8* %58 to %Array**
  %60 = load %Array*, %Array** %59, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %61 = add i64 %56, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  %62 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %63 = sub i64 %62, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %64 = phi i64 [ 0, %exit__5 ], [ %72, %exiting__6 ]
  %65 = icmp sle i64 %64, %63
  br i1 %65, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %64)
  %67 = bitcast i8* %66 to { %Array*, i64 }**
  %68 = load { %Array*, i64 }*, { %Array*, i64 }** %67, align 8
  %69 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %68, i32 0, i32 0
  %70 = load %Array*, %Array** %69, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i32 -1)
  %71 = bitcast { %Array*, i64 }* %68 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %72 = add i64 %64, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %73 = sub i64 %11, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %74 = phi i64 [ 0, %exit__6 ], [ %82, %exiting__7 ]
  %75 = icmp sle i64 %74, %73
  br i1 %75, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %74)
  %77 = bitcast i8* %76 to { %Array*, i64 }**
  %78 = load { %Array*, i64 }*, { %Array*, i64 }** %77, align 8
  %79 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %78, i32 0, i32 0
  %80 = load %Array*, %Array** %79, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %80, i32 -1)
  %81 = bitcast { %Array*, i64 }* %78 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %81, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %82 = add i64 %74, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %samples, i32 -1)
  %83 = call i64 @__quantum__rt__array_get_size_1d(%Array* %22)
  %84 = sub i64 %83, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %85 = phi i64 [ 0, %exit__7 ], [ %96, %exiting__8 ]
  %86 = icmp sle i64 %85, %84
  br i1 %86, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %22, i64 %85)
  %88 = bitcast i8* %87 to { { i64, %Array* }*, i2, i64 }**
  %89 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %88, align 8
  %90 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %89, i32 0, i32 0
  %91 = load { i64, %Array* }*, { i64, %Array* }** %90, align 8
  %92 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %91, i32 0, i32 1
  %93 = load %Array*, %Array** %92, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %93, i32 -1)
  %94 = bitcast { i64, %Array* }* %91 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %94, i32 -1)
  %95 = bitcast { { i64, %Array* }*, i2, i64 }* %89 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %96 = add i64 %85, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  %97 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %98 = sub i64 %97, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %99 = phi i64 [ 0, %exit__8 ], [ %110, %exiting__9 ]
  %100 = icmp sle i64 %99, %98
  br i1 %100, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %99)
  %102 = bitcast i8* %101 to { { i64, %Array* }*, i2, i64 }**
  %103 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %102, align 8
  %104 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %103, i32 0, i32 0
  %105 = load { i64, %Array* }*, { i64, %Array* }** %104, align 8
  %106 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %105, i32 0, i32 1
  %107 = load %Array*, %Array** %106, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %107, i32 -1)
  %108 = bitcast { i64, %Array* }* %105 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %108, i32 -1)
  %109 = bitcast { { i64, %Array* }*, i2, i64 }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %109, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %110 = add i64 %99, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  %111 = bitcast { %Array*, %Array*, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %111, i32 -1)
  %112 = call i64 @__quantum__rt__array_get_size_1d(%Array* %36)
  %113 = sub i64 %112, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %114 = phi i64 [ 0, %exit__9 ], [ %119, %exiting__10 ]
  %115 = icmp sle i64 %114, %113
  br i1 %115, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 %114)
  %117 = bitcast i8* %116 to %Range*
  %118 = load %Range, %Range* %117, align 4
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %119 = add i64 %114, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i32 -1)
  %120 = bitcast { %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  ret double %30
}

define internal { i64, i64 }* @Microsoft__Quantum__MachineLearning__ValidateSequentialClassifier__body({ %Array*, %Array*, double }* %model, %Array* %samples, double %tolerance, i64 %nMeasurements, { %Array* }* %validationSchedule) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %20 = sub i64 %19, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %21)
  %24 = bitcast i8* %23 to { %Array*, i64 }**
  %25 = load { %Array*, i64 }*, { %Array*, i64 }** %24, align 8
  %26 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %25, i32 0, i32 0
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = bitcast { %Array*, i64 }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %30 = getelementptr inbounds { %Array* }, { %Array* }* %validationSchedule, i32 0, i32 0
  %31 = load %Array*, %Array** %30, align 8
  %32 = call i64 @__quantum__rt__array_get_size_1d(%Array* %31)
  %33 = sub i64 %32, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %34 = phi i64 [ 0, %exit__2 ], [ %39, %exiting__3 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %34)
  %37 = bitcast i8* %36 to %Range*
  %38 = load %Range, %Range* %37, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %39 = add i64 %34, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  %40 = bitcast { %Array* }* %validationSchedule to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %41 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning___Features__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %features = call %Array* @Microsoft__Quantum__Arrays___458019d5b77947a88477997a20fc14c5_Mapped__body(%Callable* %41, %Array* %samples)
  %42 = call i64 @__quantum__rt__array_get_size_1d(%Array* %features)
  %43 = sub i64 %42, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %44 = phi i64 [ 0, %exit__3 ], [ %49, %exiting__4 ]
  %45 = icmp sle i64 %44, %43
  br i1 %45, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %44)
  %47 = bitcast i8* %46 to %Array**
  %48 = load %Array*, %Array** %47, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %49 = add i64 %44, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 1)
  %50 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning___Label__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %51 = call %Array* @Microsoft__Quantum__Arrays___f34491685bf044f1939458f941be92ef_Mapped__body(%Callable* %50, %Array* %samples)
  %labels = call %Array* @Microsoft__Quantum__MachineLearning___9df2eba66a764c8abe9e53ac519cccaa_Sampled__body({ %Array* }* %validationSchedule, %Array* %51)
  call void @__quantum__rt__array_update_alias_count(%Array* %labels, i32 1)
  %52 = call %Array* @Microsoft__Quantum__MachineLearning___6dd27c99de61421cb8da3bf3154034a7_Sampled__body({ %Array* }* %validationSchedule, %Array* %features)
  %probabilities = call %Array* @Microsoft__Quantum__MachineLearning__EstimateClassificationProbabilities__body(double %tolerance, { %Array*, %Array*, double }* %model, %Array* %52, i64 %nMeasurements)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 1)
  %53 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 2
  %54 = load double, double* %53, align 8
  %localPL = call %Array* @Microsoft__Quantum__MachineLearning__InferredLabels__body(double %54, %Array* %probabilities)
  call void @__quantum__rt__array_update_alias_count(%Array* %localPL, i32 1)
  %nMisclassifications = call i64 @Microsoft__Quantum__MachineLearning__NMisclassifications__body(%Array* %localPL, %Array* %labels)
  %55 = call i64 @__quantum__rt__array_get_size_1d(%Array* %localPL)
  %56 = call { i64, i64 }* @Microsoft__Quantum__MachineLearning__ValidationResults__body(i64 %nMisclassifications, i64 %55)
  %57 = sub i64 %2, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %58 = phi i64 [ 0, %exit__4 ], [ %69, %exiting__5 ]
  %59 = icmp sle i64 %58, %57
  br i1 %59, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %58)
  %61 = bitcast i8* %60 to { { i64, %Array* }*, i2, i64 }**
  %62 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %61, align 8
  %63 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %62, i32 0, i32 0
  %64 = load { i64, %Array* }*, { i64, %Array* }** %63, align 8
  %65 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %64, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 -1)
  %67 = bitcast { i64, %Array* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 -1)
  %68 = bitcast { { i64, %Array* }*, i2, i64 }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %69 = add i64 %58, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  %70 = sub i64 %19, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %71 = phi i64 [ 0, %exit__5 ], [ %79, %exiting__6 ]
  %72 = icmp sle i64 %71, %70
  br i1 %72, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %71)
  %74 = bitcast i8* %73 to { %Array*, i64 }**
  %75 = load { %Array*, i64 }*, { %Array*, i64 }** %74, align 8
  %76 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %75, i32 0, i32 0
  %77 = load %Array*, %Array** %76, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %77, i32 -1)
  %78 = bitcast { %Array*, i64 }* %75 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %79 = add i64 %71, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  %80 = sub i64 %32, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %81 = phi i64 [ 0, %exit__6 ], [ %86, %exiting__7 ]
  %82 = icmp sle i64 %81, %80
  br i1 %82, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %81)
  %84 = bitcast i8* %83 to %Range*
  %85 = load %Range, %Range* %84, align 4
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %86 = add i64 %81, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 -1)
  %87 = sub i64 %42, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %88 = phi i64 [ 0, %exit__7 ], [ %93, %exiting__8 ]
  %89 = icmp sle i64 %88, %87
  br i1 %89, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %88)
  %91 = bitcast i8* %90 to %Array**
  %92 = load %Array*, %Array** %91, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %92, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %93 = add i64 %88, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %labels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %localPL, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %41, i32 -1)
  %94 = sub i64 %42, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %95 = phi i64 [ 0, %exit__8 ], [ %100, %exiting__9 ]
  %96 = icmp sle i64 %95, %94
  br i1 %96, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %95)
  %98 = bitcast i8* %97 to %Array**
  %99 = load %Array*, %Array** %98, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %100 = add i64 %95, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %features, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %50, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %50, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %51, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %labels, i32 -1)
  %101 = call i64 @__quantum__rt__array_get_size_1d(%Array* %52)
  %102 = sub i64 %101, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %103 = phi i64 [ 0, %exit__9 ], [ %108, %exiting__10 ]
  %104 = icmp sle i64 %103, %102
  br i1 %104, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 %103)
  %106 = bitcast i8* %105 to %Array**
  %107 = load %Array*, %Array** %106, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %107, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %108 = add i64 %103, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %probabilities, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %localPL, i32 -1)
  ret { i64, i64 }* %56
}

define internal double @Microsoft__Quantum__Arrays___64d768d0751b4ad8b5cf130c7bf24274_Fold__body(%Callable* %folder, double %state, %Array* %array) {
entry:
  %current = alloca double, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  store double %state, double* %current, align 8
  %0 = call %Range @Microsoft__Quantum__Arrays___ea8dc357841940139fee623fefb8c332_IndexRange__body(%Array* %array)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxElement = phi i64 [ %1, %preheader__1 ], [ %20, %exiting__1 ]
  %5 = icmp sle i64 %idxElement, %3
  %6 = icmp sge i64 %idxElement, %3
  %7 = select i1 %4, i1 %5, i1 %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = load double, double* %current, align 8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, double }*
  %14 = getelementptr inbounds { double, double }, { double, double }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, double }, { double, double }* %13, i32 0, i32 1
  store double %8, double* %14, align 8
  store double %11, double* %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %folder, %Tuple* %12, %Tuple* %16)
  %17 = bitcast %Tuple* %16 to { double }*
  %18 = getelementptr inbounds { double }, { double }* %17, i32 0, i32 0
  %19 = load double, double* %18, align 8
  store double %19, double* %current, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %idxElement, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  %21 = load double, double* %current, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret double %21
}

define internal void @Microsoft__Quantum__Math__TimesD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load double, double* %2, align 8
  %5 = call double @Microsoft__Quantum__Math__TimesD__body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { double }*
  %7 = getelementptr inbounds { double }, { double }* %6, i32 0, i32 0
  store double %5, double* %7, align 8
  ret void
}

declare %Array* @__quantum__rt__array_concatenate(%Array*, %Array*)

define internal double @Microsoft__Quantum__Math__TimesD__body(double %a, double %b) {
entry:
  %0 = fmul double %a, %b
  ret double %0
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____body({ i64, %Callable* }* %inputEncoder, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %inputEncoder, i32 0, i32 1
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { i64, %Callable* }* %inputEncoder to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %3 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %target)
  %4 = bitcast { %Array* }* %3 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %4, %Tuple* null)
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %__Item1__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %1, i32 0, i32 0
  store %Array* %__Item1__, %Array** %2, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 -1)
  ret { %Array* }* %1
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____adj({ i64, %Callable* }* %inputEncoder, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %inputEncoder, i32 0, i32 1
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { i64, %Callable* }* %inputEncoder to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  %4 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %target)
  %5 = bitcast { %Array* }* %4 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %5, %Tuple* null)
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

declare %Callable* @__quantum__rt__callable_copy(%Callable*, i1)

declare void @__quantum__rt__callable_make_adjoint(%Callable*)

define internal void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %0, i32 0, i32 0
  %inputEncoder = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %inputEncoder, i32 0, i32 1
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { i64, %Callable* }* %inputEncoder to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %3, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %7 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %target)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %10, align 8
  store { %Array* }* %7, { %Array* }** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %8, %Tuple* null)
  %12 = getelementptr inbounds { %Array* }, { %Array* }* %7, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  %14 = bitcast { %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

declare void @__quantum__rt__callable_make_controlled(%Callable*)

define internal void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %0, i32 0, i32 0
  %inputEncoder = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %inputEncoder, i32 0, i32 1
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { i64, %Callable* }* %inputEncoder to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %3, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %7 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %target)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %10, align 8
  store { %Array* }* %7, { %Array* }** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %8, %Tuple* null)
  %12 = getelementptr inbounds { %Array* }, { %Array* }* %7, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  %14 = bitcast { %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal { %Array*, %Array*, double }* @Microsoft__Quantum__MachineLearning____QsRef0___TrainSequentialClassifierAtModel____body({ %Array*, %Array*, double }* %model, %Array* %samples, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, { %Array* }* %schedule) {
entry:
  %nStalls = alloca i64, align 8
  %batchSize = alloca i64, align 8
  %lrate = alloca double, align 8
  %current = alloca { %Array*, %Array*, double }*, align 8
  %nBestMisses = alloca i64, align 8
  %bestSoFar = alloca { %Array*, %Array*, double }*, align 8
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  %nSamples = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %19 = sub i64 %nSamples, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, i64 }**
  %24 = load { %Array*, i64 }*, { %Array*, i64 }** %23, align 8
  %25 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = bitcast { %Array*, i64 }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %29 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 8
  %30 = load %Callable*, %Callable** %29, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %30, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %30, i32 1)
  %31 = bitcast { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 1)
  %32 = getelementptr inbounds { %Array* }, { %Array* }* %schedule, i32 0, i32 0
  %33 = load %Array*, %Array** %32, align 8
  %34 = call i64 @__quantum__rt__array_get_size_1d(%Array* %33)
  %35 = sub i64 %34, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %36)
  %39 = bitcast i8* %38 to %Range*
  %40 = load %Range, %Range* %39, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %36, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  %42 = bitcast { %Array* }* %schedule to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 1)
  %43 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning___Features__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %features = call %Array* @Microsoft__Quantum__Arrays___458019d5b77947a88477997a20fc14c5_Mapped__body(%Callable* %43, %Array* %samples)
  %44 = call i64 @__quantum__rt__array_get_size_1d(%Array* %features)
  %45 = sub i64 %44, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 1)
  %52 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning___Label__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %actualLabels = call %Array* @Microsoft__Quantum__Arrays___f34491685bf044f1939458f941be92ef_Mapped__body(%Callable* %52, %Array* %samples)
  call void @__quantum__rt__array_update_alias_count(%Array* %actualLabels, i32 1)
  %53 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 1
  %54 = load double, double* %53, align 8
  %55 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 3
  %56 = load i64, i64* %55, align 4
  %probabilities = call %Array* @Microsoft__Quantum__MachineLearning__EstimateClassificationProbabilities__body(double %54, { %Array*, %Array*, double }* %model, %Array* %features, i64 %56)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 1)
  %57 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %18, i1 false)
  %58 = bitcast %Tuple* %57 to { %Array*, %Array*, double }*
  %59 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %58, i32 0, i32 2
  %60 = call %Array* @Microsoft__Quantum__Arrays___e71c6b9cbb804917a4d7cd04011f2188_Zipped__body(%Array* %probabilities, %Array* %actualLabels)
  %61 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 2
  %62 = load double, double* %61, align 8
  %63 = call double @Microsoft__Quantum__MachineLearning____QsRef0__UpdatedBias____body(%Array* %60, double %62, double %54)
  store double %63, double* %59, align 8
  store { %Array*, %Array*, double }* %58, { %Array*, %Array*, double }** %bestSoFar, align 8
  %64 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %58, i32 0, i32 0
  %65 = load %Array*, %Array** %64, align 8
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %65)
  %67 = sub i64 %66, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %68 = phi i64 [ 0, %exit__4 ], [ %79, %exiting__5 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %68)
  %71 = bitcast i8* %70 to { { i64, %Array* }*, i2, i64 }**
  %72 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %71, align 8
  %73 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %72, i32 0, i32 0
  %74 = load { i64, %Array* }*, { i64, %Array* }** %73, align 8
  %75 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %74, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { i64, %Array* }* %74 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  %78 = bitcast { { i64, %Array* }*, i2, i64 }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %79 = add i64 %68, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 1)
  %80 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %58, i32 0, i32 1
  %81 = load %Array*, %Array** %80, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 1)
  %inferredLabels = call %Array* @Microsoft__Quantum__MachineLearning__InferredLabels__body(double %63, %Array* %probabilities)
  call void @__quantum__rt__array_update_alias_count(%Array* %inferredLabels, i32 1)
  %82 = call %Array* @Microsoft__Quantum__MachineLearning__Misclassifications__body(%Array* %inferredLabels, %Array* %actualLabels)
  %83 = call i64 @__quantum__rt__array_get_size_1d(%Array* %82)
  store i64 %83, i64* %nBestMisses, align 4
  store { %Array*, %Array*, double }* %58, { %Array*, %Array*, double }** %current, align 8
  %84 = sub i64 %66, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %85 = phi i64 [ 0, %exit__5 ], [ %96, %exiting__6 ]
  %86 = icmp sle i64 %85, %84
  br i1 %86, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %85)
  %88 = bitcast i8* %87 to { { i64, %Array* }*, i2, i64 }**
  %89 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %88, align 8
  %90 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %89, i32 0, i32 0
  %91 = load { i64, %Array* }*, { i64, %Array* }** %90, align 8
  %92 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %91, i32 0, i32 1
  %93 = load %Array*, %Array** %92, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %93, i32 1)
  %94 = bitcast { i64, %Array* }* %91 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %94, i32 1)
  %95 = bitcast { { i64, %Array* }*, i2, i64 }* %89 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %95, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %96 = add i64 %85, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 1)
  %97 = sub i64 %66, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %98 = phi i64 [ 0, %exit__6 ], [ %109, %exiting__7 ]
  %99 = icmp sle i64 %98, %97
  br i1 %99, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %98)
  %101 = bitcast i8* %100 to { { i64, %Array* }*, i2, i64 }**
  %102 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %101, align 8
  %103 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %102, i32 0, i32 0
  %104 = load { i64, %Array* }*, { i64, %Array* }** %103, align 8
  %105 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %104, i32 0, i32 1
  %106 = load %Array*, %Array** %105, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 1)
  %107 = bitcast { i64, %Array* }* %104 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %107, i32 1)
  %108 = bitcast { { i64, %Array* }*, i2, i64 }* %102 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %108, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %109 = add i64 %98, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i32 1)
  %110 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @1, i32 0, i32 0))
  %111 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %String* }* getelementptr ({ %String* }, { %String* }* null, i32 1) to i64))
  %112 = bitcast %Tuple* %111 to { %String* }*
  %113 = getelementptr inbounds { %String* }, { %String* }* %112, i32 0, i32 0
  store %String* %110, %String** %113, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %30, %Tuple* %111, %Tuple* null)
  %114 = sitofp i64 %2 to double
  %effectiveTolerance = fdiv double %54, %114
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 0)
  %116 = bitcast i8* %115 to { %Array*, i64 }**
  %117 = load { %Array*, i64 }*, { %Array*, i64 }** %116, align 8
  %118 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %117, i32 0, i32 0
  %119 = load %Array*, %Array** %118, align 8
  %120 = call i64 @Microsoft__Quantum__MachineLearning__FeatureRegisterSize__body(%Array* %119)
  %121 = call i64 @Microsoft__Quantum__MachineLearning__NQubitsRequired__body({ %Array*, %Array*, double }* %model)
  %nQubits = call i64 @Microsoft__Quantum__Math__MaxI__body(i64 %120, i64 %121)
  %122 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning____QsRef0__EncodeSample____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %123 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %124 = bitcast %Tuple* %123 to { %Callable*, double, i64 }*
  %125 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %124, i32 0, i32 0
  %126 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %124, i32 0, i32 1
  %127 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %124, i32 0, i32 2
  store %Callable* %122, %Callable** %125, align 8
  store double %effectiveTolerance, double* %126, align 8
  store i64 %nQubits, i64* %127, align 4
  %128 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__2__FunctionTable, %Tuple* %123)
  %encodedSamples = call %Array* @Microsoft__Quantum__Arrays___babf2e1b7d9541c0a4b642aa9d5d6bbf_Mapped__body(%Callable* %128, %Array* %samples)
  %129 = call i64 @__quantum__rt__array_get_size_1d(%Array* %encodedSamples)
  %130 = sub i64 %129, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %131 = phi i64 [ 0, %exit__7 ], [ %147, %exiting__8 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %131)
  %134 = bitcast i8* %133 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %135 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %134, align 8
  %136 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %135, i32 0, i32 0
  %137 = load { %Array*, i64 }*, { %Array*, i64 }** %136, align 8
  %138 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %137, i32 0, i32 0
  %139 = load %Array*, %Array** %138, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %139, i32 1)
  %140 = bitcast { %Array*, i64 }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %140, i32 1)
  %141 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %135, i32 0, i32 1
  %142 = load { i64, %Callable* }*, { i64, %Callable* }** %141, align 8
  %143 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %142, i32 0, i32 1
  %144 = load %Callable*, %Callable** %143, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %144, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %144, i32 1)
  %145 = bitcast { i64, %Callable* }* %142 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %145, i32 1)
  %146 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %135 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %146, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %147 = add i64 %131, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %encodedSamples, i32 1)
  %148 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 0
  %149 = load double, double* %148, align 8
  store double %149, double* %lrate, align 8
  %150 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 2
  %151 = load i64, i64* %150, align 4
  store i64 %151, i64* %batchSize, align 4
  store i64 0, i64* %nStalls, align 4
  %152 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 4
  %153 = load i64, i64* %152, align 4
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %ep = phi i64 [ 1, %exit__8 ], [ %185, %exiting__9 ]
  %154 = icmp sle i64 %ep, %153
  br i1 %154, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %155 = load %Callable*, %Callable** %29, align 8
  %156 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @2, i32 0, i32 0))
  %157 = call %String* @__quantum__rt__int_to_string(i64 %ep)
  %158 = call %String* @__quantum__rt__string_concatenate(%String* %156, %String* %157)
  call void @__quantum__rt__string_update_reference_count(%String* %156, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %157, i32 -1)
  %159 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %160 = call %String* @__quantum__rt__string_concatenate(%String* %158, %String* %159)
  call void @__quantum__rt__string_update_reference_count(%String* %158, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %159, i32 -1)
  %161 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %String* }* getelementptr ({ %String* }, { %String* }* null, i32 1) to i64))
  %162 = bitcast %Tuple* %161 to { %String* }*
  %163 = getelementptr inbounds { %String* }, { %String* }* %162, i32 0, i32 0
  store %String* %160, %String** %163, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %155, %Tuple* %161, %Tuple* null)
  %164 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 7
  %165 = load i64, i64* %164, align 4
  %166 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %31, i1 false)
  %167 = bitcast %Tuple* %166 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %168 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %167, i32 0, i32 0
  %169 = load double, double* %lrate, align 8
  store double %169, double* %168, align 8
  %170 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %167, i32 0, i32 8
  %171 = load %Callable*, %Callable** %170, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %171, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %171, i32 1)
  %172 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %166, i1 false)
  %173 = bitcast %Tuple* %172 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %174 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %173, i32 0, i32 2
  %175 = load i64, i64* %batchSize, align 4
  store i64 %175, i64* %174, align 4
  %176 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %current, align 8
  %177 = load i64, i64* %nBestMisses, align 4
  %178 = call { i64, { %Array*, %Array*, double }* }* @Microsoft__Quantum__MachineLearning____QsRef0__RunSingleTrainingEpoch____body(%Array* %encodedSamples, { %Array* }* %schedule, i64 %165, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %173, { %Array*, %Array*, double }* %176, i64 %177)
  %179 = getelementptr inbounds { i64, { %Array*, %Array*, double }* }, { i64, { %Array*, %Array*, double }* }* %178, i32 0, i32 0
  %nMisses = load i64, i64* %179, align 4
  %180 = getelementptr inbounds { i64, { %Array*, %Array*, double }* }, { i64, { %Array*, %Array*, double }* }* %178, i32 0, i32 1
  %proposedUpdate = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %180, align 8
  %181 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %proposedUpdate, i32 0, i32 0
  %182 = load %Array*, %Array** %181, align 8
  %183 = call i64 @__quantum__rt__array_get_size_1d(%Array* %182)
  %184 = sub i64 %183, 1
  br label %header__10

exiting__9:                                       ; preds = %exit__51
  %185 = add i64 %ep, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  %186 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %bestSoFar, align 8
  %187 = load %String*, %String** %113, align 8
  %188 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %current, align 8
  %189 = load %Array*, %Array** %64, align 8
  %190 = load %Array*, %Array** %80, align 8
  %191 = call i64 @__quantum__rt__array_get_size_1d(%Array* %189)
  %192 = sub i64 %191, 1
  br label %header__52

header__10:                                       ; preds = %exiting__10, %body__9
  %193 = phi i64 [ 0, %body__9 ], [ %204, %exiting__10 ]
  %194 = icmp sle i64 %193, %184
  br i1 %194, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %195 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %193)
  %196 = bitcast i8* %195 to { { i64, %Array* }*, i2, i64 }**
  %197 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %196, align 8
  %198 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %197, i32 0, i32 0
  %199 = load { i64, %Array* }*, { i64, %Array* }** %198, align 8
  %200 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %199, i32 0, i32 1
  %201 = load %Array*, %Array** %200, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %201, i32 1)
  %202 = bitcast { i64, %Array* }* %199 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %202, i32 1)
  %203 = bitcast { { i64, %Array* }*, i2, i64 }* %197 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %203, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %204 = add i64 %193, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 1)
  %205 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %proposedUpdate, i32 0, i32 1
  %206 = load %Array*, %Array** %205, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 1)
  %207 = bitcast { %Array*, %Array*, double }* %proposedUpdate to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %207, i32 1)
  %208 = icmp slt i64 %nMisses, %177
  br i1 %208, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__10
  store i64 %nMisses, i64* %nBestMisses, align 4
  %209 = sub i64 %183, 1
  br label %header__11

continue__1:                                      ; preds = %continue__2, %exit__10
  %210 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %176, i32 0, i32 2
  %211 = load double, double* %210, align 8
  %212 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %proposedUpdate, i32 0, i32 2
  %213 = load double, double* %212, align 8
  %214 = call i1 @Microsoft__Quantum__Logical__NearlyEqualD__body(double %211, double %213)
  br i1 %214, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %continue__1
  %215 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %176, i32 0, i32 1
  %216 = load %Array*, %Array** %215, align 8
  %217 = call i1 @Microsoft__Quantum__MachineLearning____QsRef0__AllNearlyEqualD____body(%Array* %216, %Array* %206)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %continue__1
  %218 = phi i1 [ %217, %condTrue__1 ], [ %214, %continue__1 ]
  br i1 %218, label %then0__3, label %else__1

then0__3:                                         ; preds = %condContinue__1
  %219 = load i64, i64* %nStalls, align 4
  %220 = add i64 %219, 1
  store i64 %220, i64* %nStalls, align 4
  %221 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 5
  %222 = load i64, i64* %221, align 4
  %223 = icmp sgt i64 %220, %222
  br i1 %223, label %then0__4, label %continue__4

then0__4:                                         ; preds = %then0__3
  %224 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %bestSoFar, align 8
  %225 = load %String*, %String** %113, align 8
  %226 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %173, i32 0, i32 8
  %227 = load %Callable*, %Callable** %226, align 8
  %228 = load %Array*, %Array** %64, align 8
  %229 = load %Array*, %Array** %80, align 8
  %230 = call i64 @__quantum__rt__array_get_size_1d(%Array* %228)
  %231 = sub i64 %230, 1
  br label %header__29

continue__4:                                      ; preds = %then0__3
  store i64 %220, i64* %batchSize, align 4
  %232 = load double, double* %lrate, align 8
  %233 = fmul double %232, 1.250000e+00
  store double %233, double* %lrate, align 8
  %234 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 5
  %235 = load i64, i64* %234, align 4
  %236 = sdiv i64 %235, 2
  %237 = icmp sgt i64 %220, %236
  br i1 %237, label %then0__5, label %continue__5

then0__5:                                         ; preds = %continue__4
  %238 = load %Array*, %Array** %0, align 8
  %239 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning____QsRef0__RandomlyRescale____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %240 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 6
  %241 = load double, double* %240, align 8
  %242 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %243 = bitcast %Tuple* %242 to { %Callable*, double }*
  %244 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %243, i32 0, i32 0
  %245 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %243, i32 0, i32 1
  store %Callable* %239, %Callable** %244, align 8
  store double %241, double* %245, align 8
  %246 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__3__FunctionTable, %Tuple* %242)
  %247 = call %Array* @Microsoft__Quantum__Arrays___6bc4a411bac74d8081320ac7e36319e3_ForEach__body(%Callable* %246, %Array* %206)
  %248 = call double @Microsoft__Quantum__MachineLearning____QsRef0__RandomlyRescale____body(double %241, double %213)
  %249 = call { %Array*, %Array*, double }* @Microsoft__Quantum__MachineLearning__SequentialModel__body(%Array* %238, %Array* %247, double %248)
  %250 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %249, i32 0, i32 0
  %251 = load %Array*, %Array** %250, align 8
  %252 = call i64 @__quantum__rt__array_get_size_1d(%Array* %251)
  %253 = sub i64 %252, 1
  br label %header__43

continue__5:                                      ; preds = %exit__45, %continue__4
  br label %continue__3

else__1:                                          ; preds = %condContinue__1
  store i64 0, i64* %nStalls, align 4
  %254 = load double, double* %148, align 8
  store double %254, double* %lrate, align 8
  %255 = load i64, i64* %150, align 4
  store i64 %255, i64* %batchSize, align 4
  %256 = sub i64 %183, 1
  br label %header__46

continue__3:                                      ; preds = %exit__49, %continue__5
  %257 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %173, i32 0, i32 8
  %258 = load %Callable*, %Callable** %257, align 8
  %259 = sub i64 %183, 1
  br label %header__50

header__11:                                       ; preds = %exiting__11, %then0__1
  %260 = phi i64 [ 0, %then0__1 ], [ %271, %exiting__11 ]
  %261 = icmp sle i64 %260, %209
  br i1 %261, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %262 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %260)
  %263 = bitcast i8* %262 to { { i64, %Array* }*, i2, i64 }**
  %264 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %263, align 8
  %265 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %264, i32 0, i32 0
  %266 = load { i64, %Array* }*, { i64, %Array* }** %265, align 8
  %267 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %266, i32 0, i32 1
  %268 = load %Array*, %Array** %267, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %268, i32 1)
  %269 = bitcast { i64, %Array* }* %266 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %269, i32 1)
  %270 = bitcast { { i64, %Array* }*, i2, i64 }* %264 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %270, i32 1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %271 = add i64 %260, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %207, i32 1)
  %272 = sub i64 %183, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %273 = phi i64 [ 0, %exit__11 ], [ %284, %exiting__12 ]
  %274 = icmp sle i64 %273, %272
  br i1 %274, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %275 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %273)
  %276 = bitcast i8* %275 to { { i64, %Array* }*, i2, i64 }**
  %277 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %276, align 8
  %278 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %277, i32 0, i32 0
  %279 = load { i64, %Array* }*, { i64, %Array* }** %278, align 8
  %280 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %279, i32 0, i32 1
  %281 = load %Array*, %Array** %280, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %281, i32 1)
  %282 = bitcast { i64, %Array* }* %279 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %282, i32 1)
  %283 = bitcast { { i64, %Array* }*, i2, i64 }* %277 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %283, i32 1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %284 = add i64 %273, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %182, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %207, i32 1)
  %285 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %bestSoFar, align 8
  %286 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %285, i32 0, i32 0
  %287 = load %Array*, %Array** %286, align 8
  %288 = call i64 @__quantum__rt__array_get_size_1d(%Array* %287)
  %289 = sub i64 %288, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %290 = phi i64 [ 0, %exit__12 ], [ %301, %exiting__13 ]
  %291 = icmp sle i64 %290, %289
  br i1 %291, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %292 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %287, i64 %290)
  %293 = bitcast i8* %292 to { { i64, %Array* }*, i2, i64 }**
  %294 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %293, align 8
  %295 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %294, i32 0, i32 0
  %296 = load { i64, %Array* }*, { i64, %Array* }** %295, align 8
  %297 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %296, i32 0, i32 1
  %298 = load %Array*, %Array** %297, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %298, i32 -1)
  %299 = bitcast { i64, %Array* }* %296 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %299, i32 -1)
  %300 = bitcast { { i64, %Array* }*, i2, i64 }* %294 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %300, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %301 = add i64 %290, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %287, i32 -1)
  %302 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %285, i32 0, i32 1
  %303 = load %Array*, %Array** %302, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %303, i32 -1)
  %304 = bitcast { %Array*, %Array*, double }* %285 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %304, i32 -1)
  %305 = sub i64 %288, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %306 = phi i64 [ 0, %exit__13 ], [ %317, %exiting__14 ]
  %307 = icmp sle i64 %306, %305
  br i1 %307, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %308 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %287, i64 %306)
  %309 = bitcast i8* %308 to { { i64, %Array* }*, i2, i64 }**
  %310 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %309, align 8
  %311 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %310, i32 0, i32 0
  %312 = load { i64, %Array* }*, { i64, %Array* }** %311, align 8
  %313 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %312, i32 0, i32 1
  %314 = load %Array*, %Array** %313, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %314, i32 -1)
  %315 = bitcast { i64, %Array* }* %312 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %315, i32 -1)
  %316 = bitcast { { i64, %Array* }*, i2, i64 }* %310 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %316, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %317 = add i64 %306, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %287, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %303, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %304, i32 -1)
  store { %Array*, %Array*, double }* %proposedUpdate, { %Array*, %Array*, double }** %bestSoFar, align 8
  %318 = sitofp i64 %nMisses to double
  %319 = sitofp i64 %nSamples to double
  %320 = fdiv double %318, %319
  %321 = load double, double* %53, align 8
  %322 = fcmp olt double %320, %321
  br i1 %322, label %then0__2, label %continue__2

then0__2:                                         ; preds = %exit__14
  %323 = load %String*, %String** %113, align 8
  %324 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %173, i32 0, i32 8
  %325 = load %Callable*, %Callable** %324, align 8
  %326 = load %Array*, %Array** %64, align 8
  %327 = load %Array*, %Array** %80, align 8
  %328 = call i64 @__quantum__rt__array_get_size_1d(%Array* %326)
  %329 = sub i64 %328, 1
  br label %header__15

continue__2:                                      ; preds = %exit__14
  store i64 0, i64* %nStalls, align 4
  %330 = load double, double* %148, align 8
  store double %330, double* %lrate, align 8
  %331 = load i64, i64* %150, align 4
  store i64 %331, i64* %batchSize, align 4
  br label %continue__1

header__15:                                       ; preds = %exiting__15, %then0__2
  %332 = phi i64 [ 0, %then0__2 ], [ %343, %exiting__15 ]
  %333 = icmp sle i64 %332, %329
  br i1 %333, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %334 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %326, i64 %332)
  %335 = bitcast i8* %334 to { { i64, %Array* }*, i2, i64 }**
  %336 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %335, align 8
  %337 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %336, i32 0, i32 0
  %338 = load { i64, %Array* }*, { i64, %Array* }** %337, align 8
  %339 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %338, i32 0, i32 1
  %340 = load %Array*, %Array** %339, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %340, i32 1)
  %341 = bitcast { i64, %Array* }* %338 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %341, i32 1)
  %342 = bitcast { { i64, %Array* }*, i2, i64 }* %336 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %342, i32 1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %343 = add i64 %332, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_reference_count(%Array* %326, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %327, i32 1)
  %344 = sub i64 %183, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %345 = phi i64 [ 0, %exit__15 ], [ %356, %exiting__16 ]
  %346 = icmp sle i64 %345, %344
  br i1 %346, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %347 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %345)
  %348 = bitcast i8* %347 to { { i64, %Array* }*, i2, i64 }**
  %349 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %348, align 8
  %350 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %349, i32 0, i32 0
  %351 = load { i64, %Array* }*, { i64, %Array* }** %350, align 8
  %352 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %351, i32 0, i32 1
  %353 = load %Array*, %Array** %352, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %353, i32 -1)
  %354 = bitcast { i64, %Array* }* %351 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %354, i32 -1)
  %355 = bitcast { { i64, %Array* }*, i2, i64 }* %349 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %355, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %356 = add i64 %345, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %207, i32 -1)
  %357 = load %Array*, %Array** %0, align 8
  %358 = call i64 @__quantum__rt__array_get_size_1d(%Array* %357)
  %359 = sub i64 %358, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %360 = phi i64 [ 0, %exit__16 ], [ %371, %exiting__17 ]
  %361 = icmp sle i64 %360, %359
  br i1 %361, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %362 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %357, i64 %360)
  %363 = bitcast i8* %362 to { { i64, %Array* }*, i2, i64 }**
  %364 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %363, align 8
  %365 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %364, i32 0, i32 0
  %366 = load { i64, %Array* }*, { i64, %Array* }** %365, align 8
  %367 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %366, i32 0, i32 1
  %368 = load %Array*, %Array** %367, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %368, i32 -1)
  %369 = bitcast { i64, %Array* }* %366 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %369, i32 -1)
  %370 = bitcast { { i64, %Array* }*, i2, i64 }* %364 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %370, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %371 = add i64 %360, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %357, i32 -1)
  %372 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %372, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  %373 = sub i64 %nSamples, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %374 = phi i64 [ 0, %exit__17 ], [ %382, %exiting__18 ]
  %375 = icmp sle i64 %374, %373
  br i1 %375, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %376 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %374)
  %377 = bitcast i8* %376 to { %Array*, i64 }**
  %378 = load { %Array*, i64 }*, { %Array*, i64 }** %377, align 8
  %379 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %378, i32 0, i32 0
  %380 = load %Array*, %Array** %379, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %380, i32 -1)
  %381 = bitcast { %Array*, i64 }* %378 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %381, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %382 = add i64 %374, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %155, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %155, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  %383 = load %Array*, %Array** %32, align 8
  %384 = call i64 @__quantum__rt__array_get_size_1d(%Array* %383)
  %385 = sub i64 %384, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %386 = phi i64 [ 0, %exit__18 ], [ %391, %exiting__19 ]
  %387 = icmp sle i64 %386, %385
  br i1 %387, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %388 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %383, i64 %386)
  %389 = bitcast i8* %388 to %Range*
  %390 = load %Range, %Range* %389, align 4
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %391 = add i64 %386, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %383, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  %392 = sub i64 %44, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %393 = phi i64 [ 0, %exit__19 ], [ %398, %exiting__20 ]
  %394 = icmp sle i64 %393, %392
  br i1 %394, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %395 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %393)
  %396 = bitcast i8* %395 to %Array**
  %397 = load %Array*, %Array** %396, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %397, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %398 = add i64 %393, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 -1)
  %399 = sub i64 %183, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %400 = phi i64 [ 0, %exit__20 ], [ %411, %exiting__21 ]
  %401 = icmp sle i64 %400, %399
  br i1 %401, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %402 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %400)
  %403 = bitcast i8* %402 to { { i64, %Array* }*, i2, i64 }**
  %404 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %403, align 8
  %405 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %404, i32 0, i32 0
  %406 = load { i64, %Array* }*, { i64, %Array* }** %405, align 8
  %407 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %406, i32 0, i32 1
  %408 = load %Array*, %Array** %407, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %408, i32 -1)
  %409 = bitcast { i64, %Array* }* %406 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %409, i32 -1)
  %410 = bitcast { { i64, %Array* }*, i2, i64 }* %404 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %410, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %411 = add i64 %400, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %207, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %inferredLabels, i32 -1)
  %412 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %176, i32 0, i32 0
  %413 = load %Array*, %Array** %412, align 8
  %414 = call i64 @__quantum__rt__array_get_size_1d(%Array* %413)
  %415 = sub i64 %414, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %416 = phi i64 [ 0, %exit__21 ], [ %427, %exiting__22 ]
  %417 = icmp sle i64 %416, %415
  br i1 %417, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %418 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %413, i64 %416)
  %419 = bitcast i8* %418 to { { i64, %Array* }*, i2, i64 }**
  %420 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %419, align 8
  %421 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %420, i32 0, i32 0
  %422 = load { i64, %Array* }*, { i64, %Array* }** %421, align 8
  %423 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %422, i32 0, i32 1
  %424 = load %Array*, %Array** %423, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %424, i32 -1)
  %425 = bitcast { i64, %Array* }* %422 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %425, i32 -1)
  %426 = bitcast { { i64, %Array* }*, i2, i64 }* %420 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %426, i32 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %427 = add i64 %416, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_alias_count(%Array* %413, i32 -1)
  %428 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %176, i32 0, i32 1
  %429 = load %Array*, %Array** %428, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %429, i32 -1)
  %430 = bitcast { %Array*, %Array*, double }* %176 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %430, i32 -1)
  %431 = sub i64 %129, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %432 = phi i64 [ 0, %exit__22 ], [ %448, %exiting__23 ]
  %433 = icmp sle i64 %432, %431
  br i1 %433, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %434 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %432)
  %435 = bitcast i8* %434 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %436 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %435, align 8
  %437 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %436, i32 0, i32 0
  %438 = load { %Array*, i64 }*, { %Array*, i64 }** %437, align 8
  %439 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %438, i32 0, i32 0
  %440 = load %Array*, %Array** %439, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %440, i32 -1)
  %441 = bitcast { %Array*, i64 }* %438 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %441, i32 -1)
  %442 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %436, i32 0, i32 1
  %443 = load { i64, %Callable* }*, { i64, %Callable* }** %442, align 8
  %444 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %443, i32 0, i32 1
  %445 = load %Callable*, %Callable** %444, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %445, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %445, i32 -1)
  %446 = bitcast { i64, %Callable* }* %443 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %446, i32 -1)
  %447 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %436 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %447, i32 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %448 = add i64 %432, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_alias_count(%Array* %encodedSamples, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i32 -1)
  %449 = sub i64 %44, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %450 = phi i64 [ 0, %exit__23 ], [ %455, %exiting__24 ]
  %451 = icmp sle i64 %450, %449
  br i1 %451, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %452 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %450)
  %453 = bitcast i8* %452 to %Array**
  %454 = load %Array*, %Array** %453, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %454, i32 -1)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %455 = add i64 %450, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_update_reference_count(%Array* %features, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %probabilities, i32 -1)
  %456 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %457 = sub i64 %456, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %exit__24
  %458 = phi i64 [ 0, %exit__24 ], [ %464, %exiting__25 ]
  %459 = icmp sle i64 %458, %457
  br i1 %459, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %460 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %458)
  %461 = bitcast i8* %460 to { double, i64 }**
  %462 = load { double, i64 }*, { double, i64 }** %461, align 8
  %463 = bitcast { double, i64 }* %462 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %463, i32 -1)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %464 = add i64 %458, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %inferredLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %323, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %111, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %128, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %128, i32 -1)
  %465 = sub i64 %129, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %466 = phi i64 [ 0, %exit__25 ], [ %482, %exiting__26 ]
  %467 = icmp sle i64 %466, %465
  br i1 %467, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %468 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %466)
  %469 = bitcast i8* %468 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %470 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %469, align 8
  %471 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %470, i32 0, i32 0
  %472 = load { %Array*, i64 }*, { %Array*, i64 }** %471, align 8
  %473 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %472, i32 0, i32 0
  %474 = load %Array*, %Array** %473, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %474, i32 -1)
  %475 = bitcast { %Array*, i64 }* %472 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %475, i32 -1)
  %476 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %470, i32 0, i32 1
  %477 = load { i64, %Callable* }*, { i64, %Callable* }** %476, align 8
  %478 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %477, i32 0, i32 1
  %479 = load %Callable*, %Callable** %478, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %479, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %479, i32 -1)
  %480 = bitcast { i64, %Callable* }* %477 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %480, i32 -1)
  %481 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %470 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %481, i32 -1)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %482 = add i64 %466, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_update_reference_count(%Array* %encodedSamples, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %160, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %161, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %166, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %325, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %325, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %172, i32 -1)
  %483 = bitcast { i64, { %Array*, %Array*, double }* }* %178 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %483, i32 -1)
  %484 = sub i64 %183, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %485 = phi i64 [ 0, %exit__26 ], [ %496, %exiting__27 ]
  %486 = icmp sle i64 %485, %484
  br i1 %486, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %487 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %485)
  %488 = bitcast i8* %487 to { { i64, %Array* }*, i2, i64 }**
  %489 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %488, align 8
  %490 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %489, i32 0, i32 0
  %491 = load { i64, %Array* }*, { i64, %Array* }** %490, align 8
  %492 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %491, i32 0, i32 1
  %493 = load %Array*, %Array** %492, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %493, i32 -1)
  %494 = bitcast { i64, %Array* }* %491 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %494, i32 -1)
  %495 = bitcast { { i64, %Array* }*, i2, i64 }* %489 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %495, i32 -1)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %496 = add i64 %485, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_update_reference_count(%Array* %182, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %207, i32 -1)
  %497 = sub i64 %414, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %498 = phi i64 [ 0, %exit__27 ], [ %509, %exiting__28 ]
  %499 = icmp sle i64 %498, %497
  br i1 %499, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %500 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %413, i64 %498)
  %501 = bitcast i8* %500 to { { i64, %Array* }*, i2, i64 }**
  %502 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %501, align 8
  %503 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %502, i32 0, i32 0
  %504 = load { i64, %Array* }*, { i64, %Array* }** %503, align 8
  %505 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %504, i32 0, i32 1
  %506 = load %Array*, %Array** %505, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %506, i32 -1)
  %507 = bitcast { i64, %Array* }* %504 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %507, i32 -1)
  %508 = bitcast { { i64, %Array* }*, i2, i64 }* %502 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %508, i32 -1)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %509 = add i64 %498, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_update_reference_count(%Array* %413, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %429, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %430, i32 -1)
  ret { %Array*, %Array*, double }* %proposedUpdate

header__29:                                       ; preds = %exiting__29, %then0__4
  %510 = phi i64 [ 0, %then0__4 ], [ %521, %exiting__29 ]
  %511 = icmp sle i64 %510, %231
  br i1 %511, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %512 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %228, i64 %510)
  %513 = bitcast i8* %512 to { { i64, %Array* }*, i2, i64 }**
  %514 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %513, align 8
  %515 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %514, i32 0, i32 0
  %516 = load { i64, %Array* }*, { i64, %Array* }** %515, align 8
  %517 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %516, i32 0, i32 1
  %518 = load %Array*, %Array** %517, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %518, i32 1)
  %519 = bitcast { i64, %Array* }* %516 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %519, i32 1)
  %520 = bitcast { { i64, %Array* }*, i2, i64 }* %514 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %520, i32 1)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %521 = add i64 %510, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_update_reference_count(%Array* %228, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %229, i32 1)
  %522 = sub i64 %183, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %523 = phi i64 [ 0, %exit__29 ], [ %534, %exiting__30 ]
  %524 = icmp sle i64 %523, %522
  br i1 %524, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %525 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %523)
  %526 = bitcast i8* %525 to { { i64, %Array* }*, i2, i64 }**
  %527 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %526, align 8
  %528 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %527, i32 0, i32 0
  %529 = load { i64, %Array* }*, { i64, %Array* }** %528, align 8
  %530 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %529, i32 0, i32 1
  %531 = load %Array*, %Array** %530, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %531, i32 -1)
  %532 = bitcast { i64, %Array* }* %529 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %532, i32 -1)
  %533 = bitcast { { i64, %Array* }*, i2, i64 }* %527 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %533, i32 -1)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %534 = add i64 %523, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %207, i32 -1)
  %535 = load %Array*, %Array** %0, align 8
  %536 = call i64 @__quantum__rt__array_get_size_1d(%Array* %535)
  %537 = sub i64 %536, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %538 = phi i64 [ 0, %exit__30 ], [ %549, %exiting__31 ]
  %539 = icmp sle i64 %538, %537
  br i1 %539, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %540 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %535, i64 %538)
  %541 = bitcast i8* %540 to { { i64, %Array* }*, i2, i64 }**
  %542 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %541, align 8
  %543 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %542, i32 0, i32 0
  %544 = load { i64, %Array* }*, { i64, %Array* }** %543, align 8
  %545 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %544, i32 0, i32 1
  %546 = load %Array*, %Array** %545, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %546, i32 -1)
  %547 = bitcast { i64, %Array* }* %544 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %547, i32 -1)
  %548 = bitcast { { i64, %Array* }*, i2, i64 }* %542 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %548, i32 -1)
  br label %exiting__31

exiting__31:                                      ; preds = %body__31
  %549 = add i64 %538, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_update_alias_count(%Array* %535, i32 -1)
  %550 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %550, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  %551 = sub i64 %nSamples, 1
  br label %header__32

header__32:                                       ; preds = %exiting__32, %exit__31
  %552 = phi i64 [ 0, %exit__31 ], [ %560, %exiting__32 ]
  %553 = icmp sle i64 %552, %551
  br i1 %553, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %554 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %552)
  %555 = bitcast i8* %554 to { %Array*, i64 }**
  %556 = load { %Array*, i64 }*, { %Array*, i64 }** %555, align 8
  %557 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %556, i32 0, i32 0
  %558 = load %Array*, %Array** %557, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %558, i32 -1)
  %559 = bitcast { %Array*, i64 }* %556 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %559, i32 -1)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %560 = add i64 %552, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %155, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %155, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  %561 = load %Array*, %Array** %32, align 8
  %562 = call i64 @__quantum__rt__array_get_size_1d(%Array* %561)
  %563 = sub i64 %562, 1
  br label %header__33

header__33:                                       ; preds = %exiting__33, %exit__32
  %564 = phi i64 [ 0, %exit__32 ], [ %569, %exiting__33 ]
  %565 = icmp sle i64 %564, %563
  br i1 %565, label %body__33, label %exit__33

body__33:                                         ; preds = %header__33
  %566 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %561, i64 %564)
  %567 = bitcast i8* %566 to %Range*
  %568 = load %Range, %Range* %567, align 4
  br label %exiting__33

exiting__33:                                      ; preds = %body__33
  %569 = add i64 %564, 1
  br label %header__33

exit__33:                                         ; preds = %header__33
  call void @__quantum__rt__array_update_alias_count(%Array* %561, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  %570 = sub i64 %44, 1
  br label %header__34

header__34:                                       ; preds = %exiting__34, %exit__33
  %571 = phi i64 [ 0, %exit__33 ], [ %576, %exiting__34 ]
  %572 = icmp sle i64 %571, %570
  br i1 %572, label %body__34, label %exit__34

body__34:                                         ; preds = %header__34
  %573 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %571)
  %574 = bitcast i8* %573 to %Array**
  %575 = load %Array*, %Array** %574, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %575, i32 -1)
  br label %exiting__34

exiting__34:                                      ; preds = %body__34
  %576 = add i64 %571, 1
  br label %header__34

exit__34:                                         ; preds = %header__34
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 -1)
  %577 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %224, i32 0, i32 0
  %578 = load %Array*, %Array** %577, align 8
  %579 = call i64 @__quantum__rt__array_get_size_1d(%Array* %578)
  %580 = sub i64 %579, 1
  br label %header__35

header__35:                                       ; preds = %exiting__35, %exit__34
  %581 = phi i64 [ 0, %exit__34 ], [ %592, %exiting__35 ]
  %582 = icmp sle i64 %581, %580
  br i1 %582, label %body__35, label %exit__35

body__35:                                         ; preds = %header__35
  %583 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %578, i64 %581)
  %584 = bitcast i8* %583 to { { i64, %Array* }*, i2, i64 }**
  %585 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %584, align 8
  %586 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %585, i32 0, i32 0
  %587 = load { i64, %Array* }*, { i64, %Array* }** %586, align 8
  %588 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %587, i32 0, i32 1
  %589 = load %Array*, %Array** %588, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %589, i32 -1)
  %590 = bitcast { i64, %Array* }* %587 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %590, i32 -1)
  %591 = bitcast { { i64, %Array* }*, i2, i64 }* %585 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %591, i32 -1)
  br label %exiting__35

exiting__35:                                      ; preds = %body__35
  %592 = add i64 %581, 1
  br label %header__35

exit__35:                                         ; preds = %header__35
  call void @__quantum__rt__array_update_alias_count(%Array* %578, i32 -1)
  %593 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %224, i32 0, i32 1
  %594 = load %Array*, %Array** %593, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %594, i32 -1)
  %595 = bitcast { %Array*, %Array*, double }* %224 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %595, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %inferredLabels, i32 -1)
  %596 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %176, i32 0, i32 0
  %597 = load %Array*, %Array** %596, align 8
  %598 = call i64 @__quantum__rt__array_get_size_1d(%Array* %597)
  %599 = sub i64 %598, 1
  br label %header__36

header__36:                                       ; preds = %exiting__36, %exit__35
  %600 = phi i64 [ 0, %exit__35 ], [ %611, %exiting__36 ]
  %601 = icmp sle i64 %600, %599
  br i1 %601, label %body__36, label %exit__36

body__36:                                         ; preds = %header__36
  %602 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %597, i64 %600)
  %603 = bitcast i8* %602 to { { i64, %Array* }*, i2, i64 }**
  %604 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %603, align 8
  %605 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %604, i32 0, i32 0
  %606 = load { i64, %Array* }*, { i64, %Array* }** %605, align 8
  %607 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %606, i32 0, i32 1
  %608 = load %Array*, %Array** %607, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %608, i32 -1)
  %609 = bitcast { i64, %Array* }* %606 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %609, i32 -1)
  %610 = bitcast { { i64, %Array* }*, i2, i64 }* %604 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %610, i32 -1)
  br label %exiting__36

exiting__36:                                      ; preds = %body__36
  %611 = add i64 %600, 1
  br label %header__36

exit__36:                                         ; preds = %header__36
  call void @__quantum__rt__array_update_alias_count(%Array* %597, i32 -1)
  %612 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %176, i32 0, i32 1
  %613 = load %Array*, %Array** %612, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %613, i32 -1)
  %614 = bitcast { %Array*, %Array*, double }* %176 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %614, i32 -1)
  %615 = sub i64 %129, 1
  br label %header__37

header__37:                                       ; preds = %exiting__37, %exit__36
  %616 = phi i64 [ 0, %exit__36 ], [ %632, %exiting__37 ]
  %617 = icmp sle i64 %616, %615
  br i1 %617, label %body__37, label %exit__37

body__37:                                         ; preds = %header__37
  %618 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %616)
  %619 = bitcast i8* %618 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %620 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %619, align 8
  %621 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %620, i32 0, i32 0
  %622 = load { %Array*, i64 }*, { %Array*, i64 }** %621, align 8
  %623 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %622, i32 0, i32 0
  %624 = load %Array*, %Array** %623, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %624, i32 -1)
  %625 = bitcast { %Array*, i64 }* %622 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %625, i32 -1)
  %626 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %620, i32 0, i32 1
  %627 = load { i64, %Callable* }*, { i64, %Callable* }** %626, align 8
  %628 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %627, i32 0, i32 1
  %629 = load %Callable*, %Callable** %628, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %629, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %629, i32 -1)
  %630 = bitcast { i64, %Callable* }* %627 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %630, i32 -1)
  %631 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %620 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %631, i32 -1)
  br label %exiting__37

exiting__37:                                      ; preds = %body__37
  %632 = add i64 %616, 1
  br label %header__37

exit__37:                                         ; preds = %header__37
  call void @__quantum__rt__array_update_alias_count(%Array* %encodedSamples, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i32 -1)
  %633 = sub i64 %44, 1
  br label %header__38

header__38:                                       ; preds = %exiting__38, %exit__37
  %634 = phi i64 [ 0, %exit__37 ], [ %639, %exiting__38 ]
  %635 = icmp sle i64 %634, %633
  br i1 %635, label %body__38, label %exit__38

body__38:                                         ; preds = %header__38
  %636 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %634)
  %637 = bitcast i8* %636 to %Array**
  %638 = load %Array*, %Array** %637, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %638, i32 -1)
  br label %exiting__38

exiting__38:                                      ; preds = %body__38
  %639 = add i64 %634, 1
  br label %header__38

exit__38:                                         ; preds = %header__38
  call void @__quantum__rt__array_update_reference_count(%Array* %features, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %probabilities, i32 -1)
  %640 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %641 = sub i64 %640, 1
  br label %header__39

header__39:                                       ; preds = %exiting__39, %exit__38
  %642 = phi i64 [ 0, %exit__38 ], [ %648, %exiting__39 ]
  %643 = icmp sle i64 %642, %641
  br i1 %643, label %body__39, label %exit__39

body__39:                                         ; preds = %header__39
  %644 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %642)
  %645 = bitcast i8* %644 to { double, i64 }**
  %646 = load { double, i64 }*, { double, i64 }** %645, align 8
  %647 = bitcast { double, i64 }* %646 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %647, i32 -1)
  br label %exiting__39

exiting__39:                                      ; preds = %body__39
  %648 = add i64 %642, 1
  br label %header__39

exit__39:                                         ; preds = %header__39
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %inferredLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %225, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %111, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %128, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %128, i32 -1)
  %649 = sub i64 %129, 1
  br label %header__40

header__40:                                       ; preds = %exiting__40, %exit__39
  %650 = phi i64 [ 0, %exit__39 ], [ %666, %exiting__40 ]
  %651 = icmp sle i64 %650, %649
  br i1 %651, label %body__40, label %exit__40

body__40:                                         ; preds = %header__40
  %652 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %650)
  %653 = bitcast i8* %652 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %654 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %653, align 8
  %655 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %654, i32 0, i32 0
  %656 = load { %Array*, i64 }*, { %Array*, i64 }** %655, align 8
  %657 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %656, i32 0, i32 0
  %658 = load %Array*, %Array** %657, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %658, i32 -1)
  %659 = bitcast { %Array*, i64 }* %656 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %659, i32 -1)
  %660 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %654, i32 0, i32 1
  %661 = load { i64, %Callable* }*, { i64, %Callable* }** %660, align 8
  %662 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %661, i32 0, i32 1
  %663 = load %Callable*, %Callable** %662, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %663, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %663, i32 -1)
  %664 = bitcast { i64, %Callable* }* %661 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %664, i32 -1)
  %665 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %654 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %665, i32 -1)
  br label %exiting__40

exiting__40:                                      ; preds = %body__40
  %666 = add i64 %650, 1
  br label %header__40

exit__40:                                         ; preds = %header__40
  call void @__quantum__rt__array_update_reference_count(%Array* %encodedSamples, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %160, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %161, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %166, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %227, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %227, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %172, i32 -1)
  %667 = sub i64 %183, 1
  br label %header__41

header__41:                                       ; preds = %exiting__41, %exit__40
  %668 = phi i64 [ 0, %exit__40 ], [ %679, %exiting__41 ]
  %669 = icmp sle i64 %668, %667
  br i1 %669, label %body__41, label %exit__41

body__41:                                         ; preds = %header__41
  %670 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %668)
  %671 = bitcast i8* %670 to { { i64, %Array* }*, i2, i64 }**
  %672 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %671, align 8
  %673 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %672, i32 0, i32 0
  %674 = load { i64, %Array* }*, { i64, %Array* }** %673, align 8
  %675 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %674, i32 0, i32 1
  %676 = load %Array*, %Array** %675, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %676, i32 -1)
  %677 = bitcast { i64, %Array* }* %674 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %677, i32 -1)
  %678 = bitcast { { i64, %Array* }*, i2, i64 }* %672 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %678, i32 -1)
  br label %exiting__41

exiting__41:                                      ; preds = %body__41
  %679 = add i64 %668, 1
  br label %header__41

exit__41:                                         ; preds = %header__41
  call void @__quantum__rt__array_update_reference_count(%Array* %182, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %207, i32 -1)
  %680 = bitcast { i64, { %Array*, %Array*, double }* }* %178 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %680, i32 -1)
  %681 = sub i64 %598, 1
  br label %header__42

header__42:                                       ; preds = %exiting__42, %exit__41
  %682 = phi i64 [ 0, %exit__41 ], [ %693, %exiting__42 ]
  %683 = icmp sle i64 %682, %681
  br i1 %683, label %body__42, label %exit__42

body__42:                                         ; preds = %header__42
  %684 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %597, i64 %682)
  %685 = bitcast i8* %684 to { { i64, %Array* }*, i2, i64 }**
  %686 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %685, align 8
  %687 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %686, i32 0, i32 0
  %688 = load { i64, %Array* }*, { i64, %Array* }** %687, align 8
  %689 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %688, i32 0, i32 1
  %690 = load %Array*, %Array** %689, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %690, i32 -1)
  %691 = bitcast { i64, %Array* }* %688 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %691, i32 -1)
  %692 = bitcast { { i64, %Array* }*, i2, i64 }* %686 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %692, i32 -1)
  br label %exiting__42

exiting__42:                                      ; preds = %body__42
  %693 = add i64 %682, 1
  br label %header__42

exit__42:                                         ; preds = %header__42
  call void @__quantum__rt__array_update_reference_count(%Array* %597, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %613, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %614, i32 -1)
  ret { %Array*, %Array*, double }* %224

header__43:                                       ; preds = %exiting__43, %then0__5
  %694 = phi i64 [ 0, %then0__5 ], [ %705, %exiting__43 ]
  %695 = icmp sle i64 %694, %253
  br i1 %695, label %body__43, label %exit__43

body__43:                                         ; preds = %header__43
  %696 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %251, i64 %694)
  %697 = bitcast i8* %696 to { { i64, %Array* }*, i2, i64 }**
  %698 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %697, align 8
  %699 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %698, i32 0, i32 0
  %700 = load { i64, %Array* }*, { i64, %Array* }** %699, align 8
  %701 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %700, i32 0, i32 1
  %702 = load %Array*, %Array** %701, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %702, i32 1)
  %703 = bitcast { i64, %Array* }* %700 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %703, i32 1)
  %704 = bitcast { { i64, %Array* }*, i2, i64 }* %698 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %704, i32 1)
  br label %exiting__43

exiting__43:                                      ; preds = %body__43
  %705 = add i64 %694, 1
  br label %header__43

exit__43:                                         ; preds = %header__43
  call void @__quantum__rt__array_update_alias_count(%Array* %251, i32 1)
  %706 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %249, i32 0, i32 1
  %707 = load %Array*, %Array** %706, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %707, i32 1)
  %708 = bitcast { %Array*, %Array*, double }* %249 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %708, i32 1)
  %709 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %176, i32 0, i32 0
  %710 = load %Array*, %Array** %709, align 8
  %711 = call i64 @__quantum__rt__array_get_size_1d(%Array* %710)
  %712 = sub i64 %711, 1
  br label %header__44

header__44:                                       ; preds = %exiting__44, %exit__43
  %713 = phi i64 [ 0, %exit__43 ], [ %724, %exiting__44 ]
  %714 = icmp sle i64 %713, %712
  br i1 %714, label %body__44, label %exit__44

body__44:                                         ; preds = %header__44
  %715 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %710, i64 %713)
  %716 = bitcast i8* %715 to { { i64, %Array* }*, i2, i64 }**
  %717 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %716, align 8
  %718 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %717, i32 0, i32 0
  %719 = load { i64, %Array* }*, { i64, %Array* }** %718, align 8
  %720 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %719, i32 0, i32 1
  %721 = load %Array*, %Array** %720, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %721, i32 -1)
  %722 = bitcast { i64, %Array* }* %719 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %722, i32 -1)
  %723 = bitcast { { i64, %Array* }*, i2, i64 }* %717 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %723, i32 -1)
  br label %exiting__44

exiting__44:                                      ; preds = %body__44
  %724 = add i64 %713, 1
  br label %header__44

exit__44:                                         ; preds = %header__44
  call void @__quantum__rt__array_update_alias_count(%Array* %710, i32 -1)
  %725 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %176, i32 0, i32 1
  %726 = load %Array*, %Array** %725, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %726, i32 -1)
  %727 = bitcast { %Array*, %Array*, double }* %176 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %727, i32 -1)
  %728 = sub i64 %711, 1
  br label %header__45

header__45:                                       ; preds = %exiting__45, %exit__44
  %729 = phi i64 [ 0, %exit__44 ], [ %740, %exiting__45 ]
  %730 = icmp sle i64 %729, %728
  br i1 %730, label %body__45, label %exit__45

body__45:                                         ; preds = %header__45
  %731 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %710, i64 %729)
  %732 = bitcast i8* %731 to { { i64, %Array* }*, i2, i64 }**
  %733 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %732, align 8
  %734 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %733, i32 0, i32 0
  %735 = load { i64, %Array* }*, { i64, %Array* }** %734, align 8
  %736 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %735, i32 0, i32 1
  %737 = load %Array*, %Array** %736, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %737, i32 -1)
  %738 = bitcast { i64, %Array* }* %735 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %738, i32 -1)
  %739 = bitcast { { i64, %Array* }*, i2, i64 }* %733 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %739, i32 -1)
  br label %exiting__45

exiting__45:                                      ; preds = %body__45
  %740 = add i64 %729, 1
  br label %header__45

exit__45:                                         ; preds = %header__45
  call void @__quantum__rt__array_update_reference_count(%Array* %710, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %726, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %727, i32 -1)
  store { %Array*, %Array*, double }* %249, { %Array*, %Array*, double }** %current, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %246, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %246, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %247, i32 -1)
  br label %continue__5

header__46:                                       ; preds = %exiting__46, %else__1
  %741 = phi i64 [ 0, %else__1 ], [ %752, %exiting__46 ]
  %742 = icmp sle i64 %741, %256
  br i1 %742, label %body__46, label %exit__46

body__46:                                         ; preds = %header__46
  %743 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %741)
  %744 = bitcast i8* %743 to { { i64, %Array* }*, i2, i64 }**
  %745 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %744, align 8
  %746 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %745, i32 0, i32 0
  %747 = load { i64, %Array* }*, { i64, %Array* }** %746, align 8
  %748 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %747, i32 0, i32 1
  %749 = load %Array*, %Array** %748, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %749, i32 1)
  %750 = bitcast { i64, %Array* }* %747 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %750, i32 1)
  %751 = bitcast { { i64, %Array* }*, i2, i64 }* %745 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %751, i32 1)
  br label %exiting__46

exiting__46:                                      ; preds = %body__46
  %752 = add i64 %741, 1
  br label %header__46

exit__46:                                         ; preds = %header__46
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %207, i32 1)
  %753 = sub i64 %183, 1
  br label %header__47

header__47:                                       ; preds = %exiting__47, %exit__46
  %754 = phi i64 [ 0, %exit__46 ], [ %765, %exiting__47 ]
  %755 = icmp sle i64 %754, %753
  br i1 %755, label %body__47, label %exit__47

body__47:                                         ; preds = %header__47
  %756 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %754)
  %757 = bitcast i8* %756 to { { i64, %Array* }*, i2, i64 }**
  %758 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %757, align 8
  %759 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %758, i32 0, i32 0
  %760 = load { i64, %Array* }*, { i64, %Array* }** %759, align 8
  %761 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %760, i32 0, i32 1
  %762 = load %Array*, %Array** %761, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %762, i32 1)
  %763 = bitcast { i64, %Array* }* %760 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %763, i32 1)
  %764 = bitcast { { i64, %Array* }*, i2, i64 }* %758 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %764, i32 1)
  br label %exiting__47

exiting__47:                                      ; preds = %body__47
  %765 = add i64 %754, 1
  br label %header__47

exit__47:                                         ; preds = %header__47
  call void @__quantum__rt__array_update_reference_count(%Array* %182, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %207, i32 1)
  %766 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %current, align 8
  %767 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %766, i32 0, i32 0
  %768 = load %Array*, %Array** %767, align 8
  %769 = call i64 @__quantum__rt__array_get_size_1d(%Array* %768)
  %770 = sub i64 %769, 1
  br label %header__48

header__48:                                       ; preds = %exiting__48, %exit__47
  %771 = phi i64 [ 0, %exit__47 ], [ %782, %exiting__48 ]
  %772 = icmp sle i64 %771, %770
  br i1 %772, label %body__48, label %exit__48

body__48:                                         ; preds = %header__48
  %773 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %768, i64 %771)
  %774 = bitcast i8* %773 to { { i64, %Array* }*, i2, i64 }**
  %775 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %774, align 8
  %776 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %775, i32 0, i32 0
  %777 = load { i64, %Array* }*, { i64, %Array* }** %776, align 8
  %778 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %777, i32 0, i32 1
  %779 = load %Array*, %Array** %778, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %779, i32 -1)
  %780 = bitcast { i64, %Array* }* %777 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %780, i32 -1)
  %781 = bitcast { { i64, %Array* }*, i2, i64 }* %775 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %781, i32 -1)
  br label %exiting__48

exiting__48:                                      ; preds = %body__48
  %782 = add i64 %771, 1
  br label %header__48

exit__48:                                         ; preds = %header__48
  call void @__quantum__rt__array_update_alias_count(%Array* %768, i32 -1)
  %783 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %766, i32 0, i32 1
  %784 = load %Array*, %Array** %783, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %784, i32 -1)
  %785 = bitcast { %Array*, %Array*, double }* %766 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %785, i32 -1)
  %786 = sub i64 %769, 1
  br label %header__49

header__49:                                       ; preds = %exiting__49, %exit__48
  %787 = phi i64 [ 0, %exit__48 ], [ %798, %exiting__49 ]
  %788 = icmp sle i64 %787, %786
  br i1 %788, label %body__49, label %exit__49

body__49:                                         ; preds = %header__49
  %789 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %768, i64 %787)
  %790 = bitcast i8* %789 to { { i64, %Array* }*, i2, i64 }**
  %791 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %790, align 8
  %792 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %791, i32 0, i32 0
  %793 = load { i64, %Array* }*, { i64, %Array* }** %792, align 8
  %794 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %793, i32 0, i32 1
  %795 = load %Array*, %Array** %794, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %795, i32 -1)
  %796 = bitcast { i64, %Array* }* %793 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %796, i32 -1)
  %797 = bitcast { { i64, %Array* }*, i2, i64 }* %791 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %797, i32 -1)
  br label %exiting__49

exiting__49:                                      ; preds = %body__49
  %798 = add i64 %787, 1
  br label %header__49

exit__49:                                         ; preds = %header__49
  call void @__quantum__rt__array_update_reference_count(%Array* %768, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %784, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %785, i32 -1)
  store { %Array*, %Array*, double }* %proposedUpdate, { %Array*, %Array*, double }** %current, align 8
  br label %continue__3

header__50:                                       ; preds = %exiting__50, %continue__3
  %799 = phi i64 [ 0, %continue__3 ], [ %810, %exiting__50 ]
  %800 = icmp sle i64 %799, %259
  br i1 %800, label %body__50, label %exit__50

body__50:                                         ; preds = %header__50
  %801 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %799)
  %802 = bitcast i8* %801 to { { i64, %Array* }*, i2, i64 }**
  %803 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %802, align 8
  %804 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %803, i32 0, i32 0
  %805 = load { i64, %Array* }*, { i64, %Array* }** %804, align 8
  %806 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %805, i32 0, i32 1
  %807 = load %Array*, %Array** %806, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %807, i32 -1)
  %808 = bitcast { i64, %Array* }* %805 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %808, i32 -1)
  %809 = bitcast { { i64, %Array* }*, i2, i64 }* %803 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %809, i32 -1)
  br label %exiting__50

exiting__50:                                      ; preds = %body__50
  %810 = add i64 %799, 1
  br label %header__50

exit__50:                                         ; preds = %header__50
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %207, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %160, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %161, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %166, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %258, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %258, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %172, i32 -1)
  %811 = sub i64 %183, 1
  br label %header__51

header__51:                                       ; preds = %exiting__51, %exit__50
  %812 = phi i64 [ 0, %exit__50 ], [ %823, %exiting__51 ]
  %813 = icmp sle i64 %812, %811
  br i1 %813, label %body__51, label %exit__51

body__51:                                         ; preds = %header__51
  %814 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %182, i64 %812)
  %815 = bitcast i8* %814 to { { i64, %Array* }*, i2, i64 }**
  %816 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %815, align 8
  %817 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %816, i32 0, i32 0
  %818 = load { i64, %Array* }*, { i64, %Array* }** %817, align 8
  %819 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %818, i32 0, i32 1
  %820 = load %Array*, %Array** %819, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %820, i32 -1)
  %821 = bitcast { i64, %Array* }* %818 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %821, i32 -1)
  %822 = bitcast { { i64, %Array* }*, i2, i64 }* %816 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %822, i32 -1)
  br label %exiting__51

exiting__51:                                      ; preds = %body__51
  %823 = add i64 %812, 1
  br label %header__51

exit__51:                                         ; preds = %header__51
  call void @__quantum__rt__array_update_reference_count(%Array* %182, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %207, i32 -1)
  %824 = bitcast { i64, { %Array*, %Array*, double }* }* %178 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %824, i32 -1)
  br label %exiting__9

header__52:                                       ; preds = %exiting__52, %exit__9
  %825 = phi i64 [ 0, %exit__9 ], [ %836, %exiting__52 ]
  %826 = icmp sle i64 %825, %192
  br i1 %826, label %body__52, label %exit__52

body__52:                                         ; preds = %header__52
  %827 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %189, i64 %825)
  %828 = bitcast i8* %827 to { { i64, %Array* }*, i2, i64 }**
  %829 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %828, align 8
  %830 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %829, i32 0, i32 0
  %831 = load { i64, %Array* }*, { i64, %Array* }** %830, align 8
  %832 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %831, i32 0, i32 1
  %833 = load %Array*, %Array** %832, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %833, i32 1)
  %834 = bitcast { i64, %Array* }* %831 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %834, i32 1)
  %835 = bitcast { { i64, %Array* }*, i2, i64 }* %829 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %835, i32 1)
  br label %exiting__52

exiting__52:                                      ; preds = %body__52
  %836 = add i64 %825, 1
  br label %header__52

exit__52:                                         ; preds = %header__52
  call void @__quantum__rt__array_update_reference_count(%Array* %189, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %190, i32 1)
  %837 = load %Array*, %Array** %0, align 8
  %838 = call i64 @__quantum__rt__array_get_size_1d(%Array* %837)
  %839 = sub i64 %838, 1
  br label %header__53

header__53:                                       ; preds = %exiting__53, %exit__52
  %840 = phi i64 [ 0, %exit__52 ], [ %851, %exiting__53 ]
  %841 = icmp sle i64 %840, %839
  br i1 %841, label %body__53, label %exit__53

body__53:                                         ; preds = %header__53
  %842 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %837, i64 %840)
  %843 = bitcast i8* %842 to { { i64, %Array* }*, i2, i64 }**
  %844 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %843, align 8
  %845 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %844, i32 0, i32 0
  %846 = load { i64, %Array* }*, { i64, %Array* }** %845, align 8
  %847 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %846, i32 0, i32 1
  %848 = load %Array*, %Array** %847, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %848, i32 -1)
  %849 = bitcast { i64, %Array* }* %846 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %849, i32 -1)
  %850 = bitcast { { i64, %Array* }*, i2, i64 }* %844 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %850, i32 -1)
  br label %exiting__53

exiting__53:                                      ; preds = %body__53
  %851 = add i64 %840, 1
  br label %header__53

exit__53:                                         ; preds = %header__53
  call void @__quantum__rt__array_update_alias_count(%Array* %837, i32 -1)
  %852 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %852, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  %853 = sub i64 %nSamples, 1
  br label %header__54

header__54:                                       ; preds = %exiting__54, %exit__53
  %854 = phi i64 [ 0, %exit__53 ], [ %862, %exiting__54 ]
  %855 = icmp sle i64 %854, %853
  br i1 %855, label %body__54, label %exit__54

body__54:                                         ; preds = %header__54
  %856 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %854)
  %857 = bitcast i8* %856 to { %Array*, i64 }**
  %858 = load { %Array*, i64 }*, { %Array*, i64 }** %857, align 8
  %859 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %858, i32 0, i32 0
  %860 = load %Array*, %Array** %859, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %860, i32 -1)
  %861 = bitcast { %Array*, i64 }* %858 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %861, i32 -1)
  br label %exiting__54

exiting__54:                                      ; preds = %body__54
  %862 = add i64 %854, 1
  br label %header__54

exit__54:                                         ; preds = %header__54
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  %863 = load %Callable*, %Callable** %29, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %863, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %863, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  %864 = load %Array*, %Array** %32, align 8
  %865 = call i64 @__quantum__rt__array_get_size_1d(%Array* %864)
  %866 = sub i64 %865, 1
  br label %header__55

header__55:                                       ; preds = %exiting__55, %exit__54
  %867 = phi i64 [ 0, %exit__54 ], [ %872, %exiting__55 ]
  %868 = icmp sle i64 %867, %866
  br i1 %868, label %body__55, label %exit__55

body__55:                                         ; preds = %header__55
  %869 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %864, i64 %867)
  %870 = bitcast i8* %869 to %Range*
  %871 = load %Range, %Range* %870, align 4
  br label %exiting__55

exiting__55:                                      ; preds = %body__55
  %872 = add i64 %867, 1
  br label %header__55

exit__55:                                         ; preds = %header__55
  call void @__quantum__rt__array_update_alias_count(%Array* %864, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  %873 = sub i64 %44, 1
  br label %header__56

header__56:                                       ; preds = %exiting__56, %exit__55
  %874 = phi i64 [ 0, %exit__55 ], [ %879, %exiting__56 ]
  %875 = icmp sle i64 %874, %873
  br i1 %875, label %body__56, label %exit__56

body__56:                                         ; preds = %header__56
  %876 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %874)
  %877 = bitcast i8* %876 to %Array**
  %878 = load %Array*, %Array** %877, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %878, i32 -1)
  br label %exiting__56

exiting__56:                                      ; preds = %body__56
  %879 = add i64 %874, 1
  br label %header__56

exit__56:                                         ; preds = %header__56
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 -1)
  %880 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %186, i32 0, i32 0
  %881 = load %Array*, %Array** %880, align 8
  %882 = call i64 @__quantum__rt__array_get_size_1d(%Array* %881)
  %883 = sub i64 %882, 1
  br label %header__57

header__57:                                       ; preds = %exiting__57, %exit__56
  %884 = phi i64 [ 0, %exit__56 ], [ %895, %exiting__57 ]
  %885 = icmp sle i64 %884, %883
  br i1 %885, label %body__57, label %exit__57

body__57:                                         ; preds = %header__57
  %886 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %881, i64 %884)
  %887 = bitcast i8* %886 to { { i64, %Array* }*, i2, i64 }**
  %888 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %887, align 8
  %889 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %888, i32 0, i32 0
  %890 = load { i64, %Array* }*, { i64, %Array* }** %889, align 8
  %891 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %890, i32 0, i32 1
  %892 = load %Array*, %Array** %891, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %892, i32 -1)
  %893 = bitcast { i64, %Array* }* %890 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %893, i32 -1)
  %894 = bitcast { { i64, %Array* }*, i2, i64 }* %888 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %894, i32 -1)
  br label %exiting__57

exiting__57:                                      ; preds = %body__57
  %895 = add i64 %884, 1
  br label %header__57

exit__57:                                         ; preds = %header__57
  call void @__quantum__rt__array_update_alias_count(%Array* %881, i32 -1)
  %896 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %186, i32 0, i32 1
  %897 = load %Array*, %Array** %896, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %897, i32 -1)
  %898 = bitcast { %Array*, %Array*, double }* %186 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %898, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %inferredLabels, i32 -1)
  %899 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %188, i32 0, i32 0
  %900 = load %Array*, %Array** %899, align 8
  %901 = call i64 @__quantum__rt__array_get_size_1d(%Array* %900)
  %902 = sub i64 %901, 1
  br label %header__58

header__58:                                       ; preds = %exiting__58, %exit__57
  %903 = phi i64 [ 0, %exit__57 ], [ %914, %exiting__58 ]
  %904 = icmp sle i64 %903, %902
  br i1 %904, label %body__58, label %exit__58

body__58:                                         ; preds = %header__58
  %905 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %900, i64 %903)
  %906 = bitcast i8* %905 to { { i64, %Array* }*, i2, i64 }**
  %907 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %906, align 8
  %908 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %907, i32 0, i32 0
  %909 = load { i64, %Array* }*, { i64, %Array* }** %908, align 8
  %910 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %909, i32 0, i32 1
  %911 = load %Array*, %Array** %910, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %911, i32 -1)
  %912 = bitcast { i64, %Array* }* %909 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %912, i32 -1)
  %913 = bitcast { { i64, %Array* }*, i2, i64 }* %907 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %913, i32 -1)
  br label %exiting__58

exiting__58:                                      ; preds = %body__58
  %914 = add i64 %903, 1
  br label %header__58

exit__58:                                         ; preds = %header__58
  call void @__quantum__rt__array_update_alias_count(%Array* %900, i32 -1)
  %915 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %188, i32 0, i32 1
  %916 = load %Array*, %Array** %915, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %916, i32 -1)
  %917 = bitcast { %Array*, %Array*, double }* %188 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %917, i32 -1)
  %918 = sub i64 %129, 1
  br label %header__59

header__59:                                       ; preds = %exiting__59, %exit__58
  %919 = phi i64 [ 0, %exit__58 ], [ %935, %exiting__59 ]
  %920 = icmp sle i64 %919, %918
  br i1 %920, label %body__59, label %exit__59

body__59:                                         ; preds = %header__59
  %921 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %919)
  %922 = bitcast i8* %921 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %923 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %922, align 8
  %924 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %923, i32 0, i32 0
  %925 = load { %Array*, i64 }*, { %Array*, i64 }** %924, align 8
  %926 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %925, i32 0, i32 0
  %927 = load %Array*, %Array** %926, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %927, i32 -1)
  %928 = bitcast { %Array*, i64 }* %925 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %928, i32 -1)
  %929 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %923, i32 0, i32 1
  %930 = load { i64, %Callable* }*, { i64, %Callable* }** %929, align 8
  %931 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %930, i32 0, i32 1
  %932 = load %Callable*, %Callable** %931, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %932, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %932, i32 -1)
  %933 = bitcast { i64, %Callable* }* %930 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %933, i32 -1)
  %934 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %923 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %934, i32 -1)
  br label %exiting__59

exiting__59:                                      ; preds = %body__59
  %935 = add i64 %919, 1
  br label %header__59

exit__59:                                         ; preds = %header__59
  call void @__quantum__rt__array_update_alias_count(%Array* %encodedSamples, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i32 -1)
  %936 = sub i64 %44, 1
  br label %header__60

header__60:                                       ; preds = %exiting__60, %exit__59
  %937 = phi i64 [ 0, %exit__59 ], [ %942, %exiting__60 ]
  %938 = icmp sle i64 %937, %936
  br i1 %938, label %body__60, label %exit__60

body__60:                                         ; preds = %header__60
  %939 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %937)
  %940 = bitcast i8* %939 to %Array**
  %941 = load %Array*, %Array** %940, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %941, i32 -1)
  br label %exiting__60

exiting__60:                                      ; preds = %body__60
  %942 = add i64 %937, 1
  br label %header__60

exit__60:                                         ; preds = %header__60
  call void @__quantum__rt__array_update_reference_count(%Array* %features, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %probabilities, i32 -1)
  %943 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %944 = sub i64 %943, 1
  br label %header__61

header__61:                                       ; preds = %exiting__61, %exit__60
  %945 = phi i64 [ 0, %exit__60 ], [ %951, %exiting__61 ]
  %946 = icmp sle i64 %945, %944
  br i1 %946, label %body__61, label %exit__61

body__61:                                         ; preds = %header__61
  %947 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %945)
  %948 = bitcast i8* %947 to { double, i64 }**
  %949 = load { double, i64 }*, { double, i64 }** %948, align 8
  %950 = bitcast { double, i64 }* %949 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %950, i32 -1)
  br label %exiting__61

exiting__61:                                      ; preds = %body__61
  %951 = add i64 %945, 1
  br label %header__61

exit__61:                                         ; preds = %header__61
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %inferredLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %187, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %111, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %128, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %128, i32 -1)
  %952 = sub i64 %129, 1
  br label %header__62

header__62:                                       ; preds = %exiting__62, %exit__61
  %953 = phi i64 [ 0, %exit__61 ], [ %969, %exiting__62 ]
  %954 = icmp sle i64 %953, %952
  br i1 %954, label %body__62, label %exit__62

body__62:                                         ; preds = %header__62
  %955 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %953)
  %956 = bitcast i8* %955 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %957 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %956, align 8
  %958 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %957, i32 0, i32 0
  %959 = load { %Array*, i64 }*, { %Array*, i64 }** %958, align 8
  %960 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %959, i32 0, i32 0
  %961 = load %Array*, %Array** %960, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %961, i32 -1)
  %962 = bitcast { %Array*, i64 }* %959 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %962, i32 -1)
  %963 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %957, i32 0, i32 1
  %964 = load { i64, %Callable* }*, { i64, %Callable* }** %963, align 8
  %965 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %964, i32 0, i32 1
  %966 = load %Callable*, %Callable** %965, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %966, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %966, i32 -1)
  %967 = bitcast { i64, %Callable* }* %964 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %967, i32 -1)
  %968 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %957 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %968, i32 -1)
  br label %exiting__62

exiting__62:                                      ; preds = %body__62
  %969 = add i64 %953, 1
  br label %header__62

exit__62:                                         ; preds = %header__62
  call void @__quantum__rt__array_update_reference_count(%Array* %encodedSamples, i32 -1)
  %970 = sub i64 %901, 1
  br label %header__63

header__63:                                       ; preds = %exiting__63, %exit__62
  %971 = phi i64 [ 0, %exit__62 ], [ %982, %exiting__63 ]
  %972 = icmp sle i64 %971, %970
  br i1 %972, label %body__63, label %exit__63

body__63:                                         ; preds = %header__63
  %973 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %900, i64 %971)
  %974 = bitcast i8* %973 to { { i64, %Array* }*, i2, i64 }**
  %975 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %974, align 8
  %976 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %975, i32 0, i32 0
  %977 = load { i64, %Array* }*, { i64, %Array* }** %976, align 8
  %978 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %977, i32 0, i32 1
  %979 = load %Array*, %Array** %978, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %979, i32 -1)
  %980 = bitcast { i64, %Array* }* %977 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %980, i32 -1)
  %981 = bitcast { { i64, %Array* }*, i2, i64 }* %975 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %981, i32 -1)
  br label %exiting__63

exiting__63:                                      ; preds = %body__63
  %982 = add i64 %971, 1
  br label %header__63

exit__63:                                         ; preds = %header__63
  call void @__quantum__rt__array_update_reference_count(%Array* %900, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %916, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %917, i32 -1)
  ret { %Array*, %Array*, double }* %186
}

define internal %Array* @Microsoft__Quantum__Arrays___458019d5b77947a88477997a20fc14c5_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { %Array*, i64 }**
  %5 = load { %Array*, i64 }*, { %Array*, i64 }** %4, align 8
  %6 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %7, i32 1)
  %8 = bitcast { %Array*, i64 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %10 = icmp eq i64 %length, 0
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %12 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %14 = bitcast i8* %13 to { %Array*, i64 }**
  %15 = load { %Array*, i64 }*, { %Array*, i64 }** %14, align 8
  %16 = bitcast { %Array*, i64 }* %15 to %Tuple*
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %16, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { %Array* }*
  %19 = getelementptr inbounds { %Array* }, { %Array* }* %18, i32 0, i32 0
  %first = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 1)
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %21 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %22 = phi i64 [ 0, %then0__1 ], [ %30, %exiting__2 ]
  %23 = icmp sle i64 %22, %12
  br i1 %23, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %22)
  %25 = bitcast i8* %24 to { %Array*, i64 }**
  %26 = load { %Array*, i64 }*, { %Array*, i64 }** %25, align 8
  %27 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %26, i32 0, i32 0
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 -1)
  %29 = bitcast { %Array*, i64 }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %22, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %11

header__3:                                        ; preds = %exiting__3, %continue__1
  %31 = phi i64 [ 0, %continue__1 ], [ %35, %exiting__3 ]
  %32 = icmp sle i64 %31, %21
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %31)
  %34 = bitcast i8* %33 to %Array**
  store %Array* %first, %Array** %34, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %first, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %20, %Array** %retval, align 8
  %36 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %37 = phi i64 [ 0, %exit__3 ], [ %42, %exiting__4 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %37)
  %40 = bitcast i8* %39 to %Array**
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %42 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 1)
  %43 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %58, %exiting__5 ]
  %44 = icmp sle i64 %idx, %43
  br i1 %44, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %45 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 -1)
  %46 = call %Array* @__quantum__rt__array_copy(%Array* %45, i1 false)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %48 = bitcast i8* %47 to { %Array*, i64 }**
  %49 = load { %Array*, i64 }*, { %Array*, i64 }** %48, align 8
  %50 = bitcast { %Array*, i64 }* %49 to %Tuple*
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %50, %Tuple* %51)
  %52 = bitcast %Tuple* %51 to { %Array* }*
  %53 = getelementptr inbounds { %Array* }, { %Array* }* %52, i32 0, i32 0
  %54 = load %Array*, %Array** %53, align 8
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 %idx)
  %56 = bitcast i8* %55 to %Array**
  call void @__quantum__rt__array_update_alias_count(%Array* %54, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 1)
  %57 = load %Array*, %Array** %56, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 -1)
  store %Array* %54, %Array** %56, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %46, i32 1)
  store %Array* %46, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %58 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %59 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %60 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %61 = phi i64 [ 0, %exit__5 ], [ %69, %exiting__6 ]
  %62 = icmp sle i64 %61, %60
  br i1 %62, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %61)
  %64 = bitcast i8* %63 to { %Array*, i64 }**
  %65 = load { %Array*, i64 }*, { %Array*, i64 }** %64, align 8
  %66 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %65, i32 0, i32 0
  %67 = load %Array*, %Array** %66, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %67, i32 -1)
  %68 = bitcast { %Array*, i64 }* %65 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %69 = add i64 %61, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 -1)
  %70 = call i64 @__quantum__rt__array_get_size_1d(%Array* %59)
  %71 = sub i64 %70, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %72 = phi i64 [ 0, %exit__6 ], [ %77, %exiting__7 ]
  %73 = icmp sle i64 %72, %71
  br i1 %73, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 %72)
  %75 = bitcast i8* %74 to %Array**
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %77 = add i64 %72, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %first, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  ret %Array* %59
}

define internal void @Microsoft__Quantum__MachineLearning___Features__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, i64 }*
  %1 = call %Array* @Microsoft__Quantum__MachineLearning___Features__body({ %Array*, i64 }* %0)
  %2 = bitcast %Tuple* %result-tuple to { %Array* }*
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %2, i32 0, i32 0
  store %Array* %1, %Array** %3, align 8
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___f34491685bf044f1939458f941be92ef_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { %Array*, i64 }**
  %5 = load { %Array*, i64 }*, { %Array*, i64 }** %4, align 8
  %6 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %7, i32 1)
  %8 = bitcast { %Array*, i64 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %10 = icmp eq i64 %length, 0
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %12 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %14 = bitcast i8* %13 to { %Array*, i64 }**
  %15 = load { %Array*, i64 }*, { %Array*, i64 }** %14, align 8
  %16 = bitcast { %Array*, i64 }* %15 to %Tuple*
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %16, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { i64 }*
  %19 = getelementptr inbounds { i64 }, { i64 }* %18, i32 0, i32 0
  %first = load i64, i64* %19, align 4
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %21 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %22 = phi i64 [ 0, %then0__1 ], [ %30, %exiting__2 ]
  %23 = icmp sle i64 %22, %12
  br i1 %23, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %22)
  %25 = bitcast i8* %24 to { %Array*, i64 }**
  %26 = load { %Array*, i64 }*, { %Array*, i64 }** %25, align 8
  %27 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %26, i32 0, i32 0
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 -1)
  %29 = bitcast { %Array*, i64 }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %22, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %11

header__3:                                        ; preds = %exiting__3, %continue__1
  %31 = phi i64 [ 0, %continue__1 ], [ %35, %exiting__3 ]
  %32 = icmp sle i64 %31, %21
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %31)
  %34 = bitcast i8* %33 to i64*
  store i64 %first, i64* %34, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %20, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 1)
  %36 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 1, %exit__3 ], [ %50, %exiting__4 ]
  %37 = icmp sle i64 %idx, %36
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i32 -1)
  %39 = call %Array* @__quantum__rt__array_copy(%Array* %38, i1 false)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %41 = bitcast i8* %40 to { %Array*, i64 }**
  %42 = load { %Array*, i64 }*, { %Array*, i64 }** %41, align 8
  %43 = bitcast { %Array*, i64 }* %42 to %Tuple*
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %43, %Tuple* %44)
  %45 = bitcast %Tuple* %44 to { i64 }*
  %46 = getelementptr inbounds { i64 }, { i64 }* %45, i32 0, i32 0
  %47 = load i64, i64* %46, align 4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 %idx)
  %49 = bitcast i8* %48 to i64*
  store i64 %47, i64* %49, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 1)
  store %Array* %39, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %44, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %50 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %51 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %52 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %53 = phi i64 [ 0, %exit__4 ], [ %61, %exiting__5 ]
  %54 = icmp sle i64 %53, %52
  br i1 %54, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %53)
  %56 = bitcast i8* %55 to { %Array*, i64 }**
  %57 = load { %Array*, i64 }*, { %Array*, i64 }** %56, align 8
  %58 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %57, i32 0, i32 0
  %59 = load %Array*, %Array** %58, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 -1)
  %60 = bitcast { %Array*, i64 }* %57 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %60, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %61 = add i64 %53, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  ret %Array* %51
}

define internal void @Microsoft__Quantum__MachineLearning___Label__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, i64 }*
  %1 = call i64 @Microsoft__Quantum__MachineLearning___Label__body({ %Array*, i64 }* %0)
  %2 = bitcast %Tuple* %result-tuple to { i64 }*
  %3 = getelementptr inbounds { i64 }, { i64 }* %2, i32 0, i32 0
  store i64 %1, i64* %3, align 4
  ret void
}

define internal %Array* @Microsoft__Quantum__MachineLearning__EstimateClassificationProbabilities__body(double %tolerance, { %Array*, %Array*, double }* %model, %Array* %samples, i64 %nMeasurements) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %20 = sub i64 %19, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %26, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %21)
  %24 = bitcast i8* %23 to %Array**
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %27 = call i1 @Microsoft__Quantum__Arrays___b8502d12d9d54d60a228b6d21de14ed7_IsEmpty__body(%Array* %1)
  br i1 %27, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__2
  %28 = sitofp i64 %2 to double
  %29 = fdiv double %tolerance, %28
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %effectiveTolerance = phi double [ %tolerance, %condTrue__1 ], [ %29, %condFalse__1 ]
  %30 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning__EstimateClassificationProbability__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %31 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %condContinue__1
  %32 = phi i64 [ 0, %condContinue__1 ], [ %43, %exiting__3 ]
  %33 = icmp sle i64 %32, %31
  br i1 %33, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %32)
  %35 = bitcast i8* %34 to { { i64, %Array* }*, i2, i64 }**
  %36 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %35, align 8
  %37 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %36, i32 0, i32 0
  %38 = load { i64, %Array* }*, { i64, %Array* }** %37, align 8
  %39 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %38, i32 0, i32 1
  %40 = load %Array*, %Array** %39, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 1)
  %41 = bitcast { i64, %Array* }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 1)
  %42 = bitcast { { i64, %Array* }*, i2, i64 }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %43 = add i64 %32, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 1)
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, { %Array*, %Array*, double }*, i64 }* getelementptr ({ %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* null, i32 1) to i64))
  %45 = bitcast %Tuple* %44 to { %Callable*, double, { %Array*, %Array*, double }*, i64 }*
  %46 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %45, i32 0, i32 0
  %47 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %45, i32 0, i32 1
  %48 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %45, i32 0, i32 2
  %49 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %45, i32 0, i32 3
  store %Callable* %30, %Callable** %46, align 8
  store double %effectiveTolerance, double* %47, align 8
  store { %Array*, %Array*, double }* %model, { %Array*, %Array*, double }** %48, align 8
  store i64 %nMeasurements, i64* %49, align 4
  %50 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__12__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %44)
  %51 = call %Array* @Microsoft__Quantum__Arrays___db69bea2cd3249c5b832b64e75b5d986_ForEach__body(%Callable* %50, %Array* %samples)
  %52 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %53 = phi i64 [ 0, %exit__3 ], [ %64, %exiting__4 ]
  %54 = icmp sle i64 %53, %52
  br i1 %54, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %53)
  %56 = bitcast i8* %55 to { { i64, %Array* }*, i2, i64 }**
  %57 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %56, align 8
  %58 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %57, i32 0, i32 0
  %59 = load { i64, %Array* }*, { i64, %Array* }** %58, align 8
  %60 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %59, i32 0, i32 1
  %61 = load %Array*, %Array** %60, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 -1)
  %62 = bitcast { i64, %Array* }* %59 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 -1)
  %63 = bitcast { { i64, %Array* }*, i2, i64 }* %57 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %64 = add i64 %53, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  %65 = sub i64 %19, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %66 = phi i64 [ 0, %exit__4 ], [ %71, %exiting__5 ]
  %67 = icmp sle i64 %66, %65
  br i1 %67, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %66)
  %69 = bitcast i8* %68 to %Array**
  %70 = load %Array*, %Array** %69, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %70, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %71 = add i64 %66, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %50, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %50, i32 -1)
  ret %Array* %51
}

define internal double @Microsoft__Quantum__MachineLearning____QsRef0__UpdatedBias____body(%Array* %labeledProbabilities, double %bias, double %tolerance) {
entry:
  %max0 = alloca double, align 8
  %min1 = alloca double, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %labeledProbabilities)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %labeledProbabilities, i64 %2)
  %5 = bitcast i8* %4 to { double, i64 }**
  %6 = load { double, i64 }*, { double, i64 }** %5, align 8
  %7 = bitcast { double, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %labeledProbabilities, i32 1)
  store double 1.000000e+00, double* %min1, align 8
  store double 0.000000e+00, double* %max0, align 8
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %labeledProbabilities, i64 %10)
  %13 = bitcast i8* %12 to { double, i64 }**
  %14 = load { double, i64 }*, { double, i64 }** %13, align 8
  %15 = getelementptr inbounds { double, i64 }, { double, i64 }* %14, i32 0, i32 0
  %probability = load double, double* %15, align 8
  %16 = getelementptr inbounds { double, i64 }, { double, i64 }* %14, i32 0, i32 1
  %label = load i64, i64* %16, align 4
  %17 = icmp eq i64 %label, 1
  br i1 %17, label %then0__1, label %else__1

then0__1:                                         ; preds = %body__2
  %18 = load double, double* %min1, align 8
  %19 = fcmp ogt double %18, %probability
  br i1 %19, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  store double %probability, double* %min1, align 8
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %body__2
  %20 = load double, double* %max0, align 8
  %21 = fcmp olt double %20, %probability
  br i1 %21, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  store double %probability, double* %max0, align 8
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %22 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %23 = load double, double* %max0, align 8
  %24 = load double, double* %min1, align 8
  %25 = fcmp ole double %23, %24
  br i1 %25, label %then0__4, label %continue__4

then0__4:                                         ; preds = %exit__2
  %26 = fsub double 1.000000e+00, %23
  %27 = fsub double %26, %24
  %28 = fmul double 5.000000e-01, %27
  %29 = sub i64 %0, 1
  br label %header__3

continue__4:                                      ; preds = %exit__2
  %30 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning____QsRef0__MisclassificationRate____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %31 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___72deeddd84a741deba305c641ccbb494_Fst__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %32 = call %Array* @Microsoft__Quantum__Arrays___2a89d4e05ab447e5a736535efa7cd8e7_Mapped__body(%Callable* %31, %Array* %labeledProbabilities)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  %33 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___ce11ecc402da481dad234c6ec2301ce8_Snd__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %34 = call %Array* @Microsoft__Quantum__Arrays___1cabe7eb60764be98bab0923a4277ae6_Mapped__body(%Callable* %33, %Array* %labeledProbabilities)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  %35 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Array* }* getelementptr ({ %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %36 = bitcast %Tuple* %35 to { %Callable*, %Array*, %Array* }*
  %37 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %36, i32 0, i32 0
  %38 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %36, i32 0, i32 1
  %39 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %36, i32 0, i32 2
  store %Callable* %30, %Callable** %37, align 8
  store %Array* %32, %Array** %38, align 8
  store %Array* %34, %Array** %39, align 8
  %40 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__9__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__8__FunctionTable, %Tuple* %35)
  %41 = load double, double* %max0, align 8
  %42 = fsub double 5.000000e-01, %41
  %43 = load double, double* %min1, align 8
  %44 = fsub double 5.000000e-01, %43
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { double, double }*
  %47 = getelementptr inbounds { double, double }, { double, double }* %46, i32 0, i32 0
  %48 = getelementptr inbounds { double, double }, { double, double }* %46, i32 0, i32 1
  store double %42, double* %47, align 8
  store double %44, double* %48, align 8
  %optimum = call { double, double, i64 }* @Microsoft__Quantum__Optimization__LocalUnivariateMinimum__body(%Callable* %40, { double, double }* %46, double %tolerance)
  %49 = bitcast { double, double, i64 }* %optimum to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %49, i32 1)
  %50 = getelementptr inbounds { double, double, i64 }, { double, double, i64 }* %optimum, i32 0, i32 0
  %51 = load double, double* %50, align 8
  %52 = sub i64 %0, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %then0__4
  %53 = phi i64 [ 0, %then0__4 ], [ %59, %exiting__3 ]
  %54 = icmp sle i64 %53, %29
  br i1 %54, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %labeledProbabilities, i64 %53)
  %56 = bitcast i8* %55 to { double, i64 }**
  %57 = load { double, i64 }*, { double, i64 }** %56, align 8
  %58 = bitcast { double, i64 }* %57 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %58, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %59 = add i64 %53, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %labeledProbabilities, i32 -1)
  ret double %28

header__4:                                        ; preds = %exiting__4, %continue__4
  %60 = phi i64 [ 0, %continue__4 ], [ %66, %exiting__4 ]
  %61 = icmp sle i64 %60, %52
  br i1 %61, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %labeledProbabilities, i64 %60)
  %63 = bitcast i8* %62 to { double, i64 }**
  %64 = load { double, i64 }*, { double, i64 }** %63, align 8
  %65 = bitcast { double, i64 }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %65, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %66 = add i64 %60, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %labeledProbabilities, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %49, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %40, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %40, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i32 -1)
  ret double %51
}

define internal %Array* @Microsoft__Quantum__Arrays___e71c6b9cbb804917a4d7cd04011f2188_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = icmp eq i64 %nElements, 0
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %4

continue__1:                                      ; preds = %condContinue__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %6 = bitcast i8* %5 to double*
  %7 = load double, double* %6, align 8
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64 }* getelementptr ({ double, i64 }, { double, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { double, i64 }*
  %13 = getelementptr inbounds { double, i64 }, { double, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { double, i64 }, { double, i64 }* %12, i32 0, i32 1
  store double %7, double* %13, align 8
  store i64 %10, i64* %14, align 4
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %16 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %17 = phi i64 [ 0, %continue__1 ], [ %21, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %17)
  %20 = bitcast i8* %19 to { double, i64 }**
  store { double, i64 }* %12, { double, i64 }** %20, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %21 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %15, %Array** %output, align 8
  %22 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %23)
  %26 = bitcast i8* %25 to { double, i64 }**
  %27 = load { double, i64 }*, { double, i64 }** %26, align 8
  %28 = bitcast { double, i64 }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %30 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 1, %exit__2 ], [ %48, %exiting__3 ]
  %31 = icmp sle i64 %idxElement, %30
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %35 = bitcast i8* %34 to double*
  %36 = load double, double* %35, align 8
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64 }* getelementptr ({ double, i64 }, { double, i64 }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { double, i64 }*
  %42 = getelementptr inbounds { double, i64 }, { double, i64 }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { double, i64 }, { double, i64 }* %41, i32 0, i32 1
  store double %36, double* %42, align 8
  store i64 %39, i64* %43, align 4
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxElement)
  %45 = bitcast i8* %44 to { double, i64 }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %46 = load { double, i64 }*, { double, i64 }** %45, align 8
  %47 = bitcast { double, i64 }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  store { double, i64 }* %41, { double, i64 }** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { double, i64 }**
  %56 = load { double, i64 }*, { double, i64 }** %55, align 8
  %57 = bitcast { double, i64 }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret %Array* %49
}

define internal %Array* @Microsoft__Quantum__MachineLearning__InferredLabels__body(double %bias, %Array* %probabilities) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning__InferredLabel__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, double }*
  %3 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %2, i32 0, i32 1
  store %Callable* %0, %Callable** %3, align 8
  store double %bias, double* %4, align 8
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__14__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__13__FunctionTable, %Tuple* %1)
  %6 = call %Array* @Microsoft__Quantum__Arrays___d3aba77e00014a79bc8f48ec51f8fb2a_Mapped__body(%Callable* %5, %Array* %probabilities)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  ret %Array* %6
}

define internal %Array* @Microsoft__Quantum__MachineLearning__Misclassifications__body(%Array* %inferredLabels, %Array* %actualLabels) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %inferredLabels, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %actualLabels, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__NotEqualI__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___4676d5f0d26141cfa6e357563bd65669_Zipped__body(%Array* %inferredLabels, %Array* %actualLabels)
  %2 = call %Array* @Microsoft__Quantum__Arrays___0a5870f6f00b4e91a76081167d0bc275_Where__body(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %inferredLabels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %5)
  %8 = bitcast i8* %7 to { i64, i64 }**
  %9 = load { i64, i64 }*, { i64, i64 }** %8, align 8
  %10 = bitcast { i64, i64 }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret %Array* %2
}

define internal i64 @Microsoft__Quantum__Math__MaxI__body(i64 %a, i64 %b) {
entry:
  %0 = icmp sgt i64 %a, %b
  %1 = select i1 %0, i64 %a, i64 %b
  ret i64 %1
}

define internal i64 @Microsoft__Quantum__MachineLearning__FeatureRegisterSize__body(%Array* %sample) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %sample, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %sample)
  %1 = sitofp i64 %0 to double
  %2 = call double @Microsoft__Quantum__Math__Lg__body(double %1)
  %3 = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %2)
  call void @__quantum__rt__array_update_alias_count(%Array* %sample, i32 -1)
  ret i64 %3
}

define internal i64 @Microsoft__Quantum__MachineLearning__NQubitsRequired__body({ %Array*, %Array*, double }* %model) {
entry:
  %lastQubitIndex = alloca i64, align 8
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  store i64 -1, i64* %lastQubitIndex, align 4
  %19 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %39, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %20)
  %23 = bitcast i8* %22 to { { i64, %Array* }*, i2, i64 }**
  %gate = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %23, align 8
  %24 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 0
  %25 = load { i64, %Array* }*, { i64, %Array* }** %24, align 8
  %26 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %25, i32 0, i32 1
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = bitcast { i64, %Array* }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  %29 = bitcast { { i64, %Array* }*, i2, i64 }* %gate to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  %30 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__MaxI__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %31 = load i64, i64* %lastQubitIndex, align 4
  %32 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %25, i32 0, i32 0
  %33 = load i64, i64* %32, align 4
  %34 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 0)
  %36 = bitcast i8* %35 to i64*
  store i64 %33, i64* %36, align 4
  %37 = call %Array* @__quantum__rt__array_concatenate(%Array* %27, %Array* %34)
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 1)
  %38 = call i64 @Microsoft__Quantum__Arrays___2d4fd0446d3a462ca520e9612ada343e_Fold__body(%Callable* %30, i64 %31, %Array* %37)
  store i64 %38, i64* %lastQubitIndex, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %39 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %40 = load i64, i64* %lastQubitIndex, align 4
  %41 = add i64 %40, 1
  %42 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %43 = phi i64 [ 0, %exit__2 ], [ %54, %exiting__3 ]
  %44 = icmp sle i64 %43, %42
  br i1 %44, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %43)
  %46 = bitcast i8* %45 to { { i64, %Array* }*, i2, i64 }**
  %47 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %46, align 8
  %48 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %47, i32 0, i32 0
  %49 = load { i64, %Array* }*, { i64, %Array* }** %48, align 8
  %50 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %49, i32 0, i32 1
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 -1)
  %52 = bitcast { i64, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i32 -1)
  %53 = bitcast { { i64, %Array* }*, i2, i64 }* %47 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %54 = add i64 %43, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  ret i64 %41
}

define internal %Array* @Microsoft__Quantum__Arrays___babf2e1b7d9541c0a4b642aa9d5d6bbf_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { %Array*, i64 }**
  %5 = load { %Array*, i64 }*, { %Array*, i64 }** %4, align 8
  %6 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %7, i32 1)
  %8 = bitcast { %Array*, i64 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %10 = icmp eq i64 %length, 0
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %12 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %14 = bitcast i8* %13 to { %Array*, i64 }**
  %15 = load { %Array*, i64 }*, { %Array*, i64 }** %14, align 8
  %16 = bitcast { %Array*, i64 }* %15 to %Tuple*
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }*, { i64, %Callable* }* }* getelementptr ({ { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %16, %Tuple* %17)
  %first = bitcast %Tuple* %17 to { { %Array*, i64 }*, { i64, %Callable* }* }*
  %18 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %first, i32 0, i32 0
  %19 = load { %Array*, i64 }*, { %Array*, i64 }** %18, align 8
  %20 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %19, i32 0, i32 0
  %21 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  %22 = bitcast { %Array*, i64 }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  %23 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %first, i32 0, i32 1
  %24 = load { i64, %Callable* }*, { i64, %Callable* }** %23, align 8
  %25 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %24, i32 0, i32 1
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 1)
  %27 = bitcast { i64, %Callable* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 1)
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %29 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %30 = phi i64 [ 0, %then0__1 ], [ %38, %exiting__2 ]
  %31 = icmp sle i64 %30, %12
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %30)
  %33 = bitcast i8* %32 to { %Array*, i64 }**
  %34 = load { %Array*, i64 }*, { %Array*, i64 }** %33, align 8
  %35 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %34, i32 0, i32 0
  %36 = load %Array*, %Array** %35, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %36, i32 -1)
  %37 = bitcast { %Array*, i64 }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %38 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %11

header__3:                                        ; preds = %exiting__3, %continue__1
  %39 = phi i64 [ 0, %continue__1 ], [ %51, %exiting__3 ]
  %40 = icmp sle i64 %39, %29
  br i1 %40, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %39)
  %42 = bitcast i8* %41 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  store { { %Array*, i64 }*, { i64, %Callable* }* }* %first, { { %Array*, i64 }*, { i64, %Callable* }* }** %42, align 8
  %43 = load { %Array*, i64 }*, { %Array*, i64 }** %18, align 8
  %44 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %43, i32 0, i32 0
  %45 = load %Array*, %Array** %44, align 8
  %46 = load { i64, %Callable* }*, { i64, %Callable* }** %23, align 8
  %47 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %46, i32 0, i32 1
  %48 = load %Callable*, %Callable** %47, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 1)
  %49 = bitcast { %Array*, i64 }* %43 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %48, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %48, i32 1)
  %50 = bitcast { i64, %Callable* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %51 = add i64 %39, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %28, %Array** %retval, align 8
  %52 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %53 = phi i64 [ 0, %exit__3 ], [ %69, %exiting__4 ]
  %54 = icmp sle i64 %53, %52
  br i1 %54, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %53)
  %56 = bitcast i8* %55 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %57 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %56, align 8
  %58 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %57, i32 0, i32 0
  %59 = load { %Array*, i64 }*, { %Array*, i64 }** %58, align 8
  %60 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %59, i32 0, i32 0
  %61 = load %Array*, %Array** %60, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 1)
  %62 = bitcast { %Array*, i64 }* %59 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 1)
  %63 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %57, i32 0, i32 1
  %64 = load { i64, %Callable* }*, { i64, %Callable* }** %63, align 8
  %65 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %64, i32 0, i32 1
  %66 = load %Callable*, %Callable** %65, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %66, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %66, i32 1)
  %67 = bitcast { i64, %Callable* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  %68 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %57 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %69 = add i64 %53, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %70 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %104, %exiting__5 ]
  %71 = icmp sle i64 %idx, %70
  br i1 %71, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %72 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  %73 = call %Array* @__quantum__rt__array_copy(%Array* %72, i1 false)
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %75 = bitcast i8* %74 to { %Array*, i64 }**
  %76 = load { %Array*, i64 }*, { %Array*, i64 }** %75, align 8
  %77 = bitcast { %Array*, i64 }* %76 to %Tuple*
  %78 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }*, { i64, %Callable* }* }* getelementptr ({ { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %77, %Tuple* %78)
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 %idx)
  %80 = bitcast i8* %79 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %81 = bitcast %Tuple* %78 to { { %Array*, i64 }*, { i64, %Callable* }* }*
  %82 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %81, i32 0, i32 0
  %83 = load { %Array*, i64 }*, { %Array*, i64 }** %82, align 8
  %84 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %83, i32 0, i32 0
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %85, i32 1)
  %86 = bitcast { %Array*, i64 }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 1)
  %87 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %81, i32 0, i32 1
  %88 = load { i64, %Callable* }*, { i64, %Callable* }** %87, align 8
  %89 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %88, i32 0, i32 1
  %90 = load %Callable*, %Callable** %89, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %90, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %90, i32 1)
  %91 = bitcast { i64, %Callable* }* %88 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %91, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 1)
  %92 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %80, align 8
  %93 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %92, i32 0, i32 0
  %94 = load { %Array*, i64 }*, { %Array*, i64 }** %93, align 8
  %95 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %94, i32 0, i32 0
  %96 = load %Array*, %Array** %95, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %96, i32 -1)
  %97 = bitcast { %Array*, i64 }* %94 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %97, i32 -1)
  %98 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %92, i32 0, i32 1
  %99 = load { i64, %Callable* }*, { i64, %Callable* }** %98, align 8
  %100 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %99, i32 0, i32 1
  %101 = load %Callable*, %Callable** %100, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %101, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %101, i32 -1)
  %102 = bitcast { i64, %Callable* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %102, i32 -1)
  %103 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %92 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %103, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %96, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %97, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %101, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %101, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %102, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i32 -1)
  store { { %Array*, i64 }*, { i64, %Callable* }* }* %81, { { %Array*, i64 }*, { i64, %Callable* }* }** %80, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %73, i32 1)
  store %Array* %73, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %104 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %105 = load %Array*, %Array** %retval, align 8
  %106 = load { %Array*, i64 }*, { %Array*, i64 }** %18, align 8
  %107 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %106, i32 0, i32 0
  %108 = load %Array*, %Array** %107, align 8
  %109 = load { i64, %Callable* }*, { i64, %Callable* }** %23, align 8
  %110 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %109, i32 0, i32 1
  %111 = load %Callable*, %Callable** %110, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %112 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %113 = phi i64 [ 0, %exit__5 ], [ %121, %exiting__6 ]
  %114 = icmp sle i64 %113, %112
  br i1 %114, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %113)
  %116 = bitcast i8* %115 to { %Array*, i64 }**
  %117 = load { %Array*, i64 }*, { %Array*, i64 }** %116, align 8
  %118 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %117, i32 0, i32 0
  %119 = load %Array*, %Array** %118, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 -1)
  %120 = bitcast { %Array*, i64 }* %117 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %121 = add i64 %113, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %108, i32 -1)
  %122 = bitcast { %Array*, i64 }* %106 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %122, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %111, i32 -1)
  %123 = bitcast { i64, %Callable* }* %109 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %123, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 -1)
  %124 = call i64 @__quantum__rt__array_get_size_1d(%Array* %105)
  %125 = sub i64 %124, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %126 = phi i64 [ 0, %exit__6 ], [ %142, %exiting__7 ]
  %127 = icmp sle i64 %126, %125
  br i1 %127, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 %126)
  %129 = bitcast i8* %128 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %130 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %129, align 8
  %131 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %130, i32 0, i32 0
  %132 = load { %Array*, i64 }*, { %Array*, i64 }** %131, align 8
  %133 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %132, i32 0, i32 0
  %134 = load %Array*, %Array** %133, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %134, i32 -1)
  %135 = bitcast { %Array*, i64 }* %132 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %135, i32 -1)
  %136 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %130, i32 0, i32 1
  %137 = load { i64, %Callable* }*, { i64, %Callable* }** %136, align 8
  %138 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %137, i32 0, i32 1
  %139 = load %Callable*, %Callable** %138, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %139, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %139, i32 -1)
  %140 = bitcast { i64, %Callable* }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %140, i32 -1)
  %141 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %130 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %141, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %142 = add i64 %126, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %105, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %108, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %122, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %123, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  ret %Array* %105
}

define internal void @Lifted__PartialApplication__2__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, { %Array*, i64 }* }* getelementptr ({ double, i64, { %Array*, i64 }* }, { double, i64, { %Array*, i64 }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { double, i64, { %Array*, i64 }* }*
  %7 = getelementptr inbounds { double, i64, { %Array*, i64 }* }, { double, i64, { %Array*, i64 }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { double, i64, { %Array*, i64 }* }, { double, i64, { %Array*, i64 }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { double, i64, { %Array*, i64 }* }, { double, i64, { %Array*, i64 }* }* %6, i32 0, i32 2
  store double %2, double* %7, align 8
  store i64 %4, i64* %8, align 4
  %10 = bitcast %Tuple* %arg-tuple to { %Array*, i64 }*
  store { %Array*, i64 }* %10, { %Array*, i64 }** %9, align 8
  %11 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %12 = load %Callable*, %Callable** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %5, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__EncodeSample____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, { %Array*, i64 }* }*
  %1 = getelementptr inbounds { double, i64, { %Array*, i64 }* }, { double, i64, { %Array*, i64 }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, { %Array*, i64 }* }, { double, i64, { %Array*, i64 }* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, { %Array*, i64 }* }, { double, i64, { %Array*, i64 }* }* %0, i32 0, i32 2
  %4 = load double, double* %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load { %Array*, i64 }*, { %Array*, i64 }** %3, align 8
  %7 = call { { %Array*, i64 }*, { i64, %Callable* }* }* @Microsoft__Quantum__MachineLearning____QsRef0__EncodeSample____body(double %4, i64 %5, { %Array*, i64 }* %6)
  %8 = bitcast %Tuple* %result-tuple to { { %Array*, i64 }*, { i64, %Callable* }* }*
  %9 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %8, i32 0, i32 1
  %11 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %7, i32 0, i32 0
  %12 = load { %Array*, i64 }*, { %Array*, i64 }** %11, align 8
  store { %Array*, i64 }* %12, { %Array*, i64 }** %9, align 8
  %13 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %7, i32 0, i32 1
  %14 = load { i64, %Callable* }*, { i64, %Callable* }** %13, align 8
  store { i64, %Callable* }* %14, { i64, %Callable* }** %10, align 8
  %15 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret void
}

define internal void @MemoryManagement__2__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__2__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

declare %String* @__quantum__rt__int_to_string(i64)

declare %String* @__quantum__rt__string_concatenate(%String*, %String*)

define internal { i64, { %Array*, %Array*, double }* }* @Microsoft__Quantum__MachineLearning____QsRef0__RunSingleTrainingEpoch____body(%Array* %encodedSamples, { %Array* }* %schedule, i64 %periodScore, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, { %Array*, %Array*, double }* %model, i64 %nPreviousBestMisses) {
entry:
  %bestSoFar = alloca { %Array*, %Array*, double }*, align 8
  %nBestMisses = alloca i64, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %encodedSamples)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %2)
  %5 = bitcast i8* %4 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %6 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %5, align 8
  %7 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %6, i32 0, i32 0
  %8 = load { %Array*, i64 }*, { %Array*, i64 }** %7, align 8
  %9 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %8, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %6, i32 0, i32 1
  %13 = load { i64, %Callable* }*, { i64, %Callable* }** %12, align 8
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  %15 = load %Callable*, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i32 1)
  %16 = bitcast { i64, %Callable* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %17 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %encodedSamples, i32 1)
  %19 = getelementptr inbounds { %Array* }, { %Array* }* %schedule, i32 0, i32 0
  %20 = load %Array*, %Array** %19, align 8
  %21 = call i64 @__quantum__rt__array_get_size_1d(%Array* %20)
  %22 = sub i64 %21, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %23)
  %26 = bitcast i8* %25 to %Range*
  %27 = load %Range, %Range* %26, align 4
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 1)
  %29 = bitcast { %Array* }* %schedule to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  %30 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 8
  %31 = load %Callable*, %Callable** %30, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %31, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %31, i32 1)
  %32 = bitcast { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 1)
  %33 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %34 = load %Array*, %Array** %33, align 8
  %35 = call i64 @__quantum__rt__array_get_size_1d(%Array* %34)
  %36 = sub i64 %35, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %37 = phi i64 [ 0, %exit__2 ], [ %48, %exiting__3 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %37)
  %40 = bitcast i8* %39 to { { i64, %Array* }*, i2, i64 }**
  %41 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %40, align 8
  %42 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %41, i32 0, i32 0
  %43 = load { i64, %Array* }*, { i64, %Array* }** %42, align 8
  %44 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %43, i32 0, i32 1
  %45 = load %Array*, %Array** %44, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 1)
  %46 = bitcast { i64, %Array* }* %43 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %46, i32 1)
  %47 = bitcast { { i64, %Array* }*, i2, i64 }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %37, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %49 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  %51 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 1)
  store i64 %nPreviousBestMisses, i64* %nBestMisses, align 4
  store { %Array*, %Array*, double }* %model, { %Array*, %Array*, double }** %bestSoFar, align 8
  %52 = sub i64 %35, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %53 = phi i64 [ 0, %exit__3 ], [ %64, %exiting__4 ]
  %54 = icmp sle i64 %53, %52
  br i1 %54, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %53)
  %56 = bitcast i8* %55 to { { i64, %Array* }*, i2, i64 }**
  %57 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %56, align 8
  %58 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %57, i32 0, i32 0
  %59 = load { i64, %Array* }*, { i64, %Array* }** %58, align 8
  %60 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %59, i32 0, i32 1
  %61 = load %Array*, %Array** %60, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 1)
  %62 = bitcast { i64, %Array* }* %59 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 1)
  %63 = bitcast { { i64, %Array* }*, i2, i64 }* %57 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %64 = add i64 %53, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 1)
  %65 = sub i64 %35, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %66 = phi i64 [ 0, %exit__4 ], [ %77, %exiting__5 ]
  %67 = icmp sle i64 %66, %65
  br i1 %67, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %66)
  %69 = bitcast i8* %68 to { { i64, %Array* }*, i2, i64 }**
  %70 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %69, align 8
  %71 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %70, i32 0, i32 0
  %72 = load { i64, %Array* }*, { i64, %Array* }** %71, align 8
  %73 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %72, i32 0, i32 1
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 1)
  %75 = bitcast { i64, %Array* }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %75, i32 1)
  %76 = bitcast { { i64, %Array* }*, i2, i64 }* %70 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %77 = add i64 %66, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 1)
  %78 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___1f5badf5e91544c8bbff3b59164a3bb0_Fst__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %samples = call %Array* @Microsoft__Quantum__Arrays___9021424cc3274213b24cdef7f22a1dcc_Mapped__body(%Callable* %78, %Array* %encodedSamples)
  %79 = call i64 @__quantum__rt__array_get_size_1d(%Array* %samples)
  %80 = sub i64 %79, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %81 = phi i64 [ 0, %exit__5 ], [ %89, %exiting__6 ]
  %82 = icmp sle i64 %81, %80
  br i1 %82, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %81)
  %84 = bitcast i8* %83 to { %Array*, i64 }**
  %85 = load { %Array*, i64 }*, { %Array*, i64 }** %84, align 8
  %86 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %85, i32 0, i32 0
  %87 = load %Array*, %Array** %86, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %87, i32 1)
  %88 = bitcast { %Array*, i64 }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %88, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %89 = add i64 %81, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 1)
  %90 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___e2a028c390684ab28246f52a0c3fbae9_Snd__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %stateGenerators = call %Array* @Microsoft__Quantum__Arrays___01f2a4172bae4fb9a526206ae21b7f8f_Mapped__body(%Callable* %90, %Array* %encodedSamples)
  %91 = call i64 @__quantum__rt__array_get_size_1d(%Array* %stateGenerators)
  %92 = sub i64 %91, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %93 = phi i64 [ 0, %exit__6 ], [ %101, %exiting__7 ]
  %94 = icmp sle i64 %93, %92
  br i1 %94, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateGenerators, i64 %93)
  %96 = bitcast i8* %95 to { i64, %Callable* }**
  %97 = load { i64, %Callable* }*, { i64, %Callable* }** %96, align 8
  %98 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %97, i32 0, i32 1
  %99 = load %Callable*, %Callable** %98, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %99, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %99, i32 1)
  %100 = bitcast { i64, %Callable* }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %100, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %101 = add i64 %93, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %stateGenerators, i32 1)
  %102 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning___Features__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %features = call %Array* @Microsoft__Quantum__Arrays___458019d5b77947a88477997a20fc14c5_Mapped__body(%Callable* %102, %Array* %samples)
  %103 = call i64 @__quantum__rt__array_get_size_1d(%Array* %features)
  %104 = sub i64 %103, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %105 = phi i64 [ 0, %exit__7 ], [ %110, %exiting__8 ]
  %106 = icmp sle i64 %105, %104
  br i1 %106, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %105)
  %108 = bitcast i8* %107 to %Array**
  %109 = load %Array*, %Array** %108, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %109, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %110 = add i64 %105, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 1)
  %111 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning___Label__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %actualLabels = call %Array* @Microsoft__Quantum__Arrays___f34491685bf044f1939458f941be92ef_Mapped__body(%Callable* %111, %Array* %samples)
  call void @__quantum__rt__array_update_alias_count(%Array* %actualLabels, i32 1)
  %112 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 2
  %113 = load double, double* %112, align 8
  %114 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 1
  %115 = load double, double* %114, align 8
  %116 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 3
  %117 = load i64, i64* %116, align 4
  %118 = call %Array* @Microsoft__Quantum__MachineLearning__EstimateClassificationProbabilities__body(double %115, { %Array*, %Array*, double }* %model, %Array* %features, i64 %117)
  %inferredLabels = call %Array* @Microsoft__Quantum__MachineLearning__InferredLabels__body(double %113, %Array* %118)
  call void @__quantum__rt__array_update_alias_count(%Array* %inferredLabels, i32 1)
  %119 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___8a3dda3255e547b68a0799da4c61f944_Subarray__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %120 = sub i64 %0, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %121 = phi i64 [ 0, %exit__8 ], [ %137, %exiting__9 ]
  %122 = icmp sle i64 %121, %120
  br i1 %122, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %121)
  %124 = bitcast i8* %123 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %125 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %124, align 8
  %126 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %125, i32 0, i32 0
  %127 = load { %Array*, i64 }*, { %Array*, i64 }** %126, align 8
  %128 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %127, i32 0, i32 0
  %129 = load %Array*, %Array** %128, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %129, i32 1)
  %130 = bitcast { %Array*, i64 }* %127 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %130, i32 1)
  %131 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %125, i32 0, i32 1
  %132 = load { i64, %Callable* }*, { i64, %Callable* }** %131, align 8
  %133 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %132, i32 0, i32 1
  %134 = load %Callable*, %Callable** %133, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %134, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %134, i32 1)
  %135 = bitcast { i64, %Callable* }* %132 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %135, i32 1)
  %136 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %125 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %136, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %137 = add i64 %121, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %encodedSamples, i32 1)
  %138 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %139 = bitcast %Tuple* %138 to { %Callable*, %Array* }*
  %140 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %139, i32 0, i32 0
  %141 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %139, i32 0, i32 1
  store %Callable* %119, %Callable** %140, align 8
  store %Array* %encodedSamples, %Array** %141, align 8
  %142 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__7__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__6__FunctionTable, %Tuple* %138)
  %143 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 2
  %144 = load i64, i64* %143, align 4
  %145 = call %Array* @Microsoft__Quantum__MachineLearning__Misclassifications__body(%Array* %inferredLabels, %Array* %actualLabels)
  %146 = call %Array* @Microsoft__Quantum__Arrays___924d100a2fcc4f628511e045bf39e089_Chunks__body(i64 %144, %Array* %145)
  %minibatches = call %Array* @Microsoft__Quantum__Arrays___f496bf5745d24576bdaad9599407fb79_Mapped__body(%Callable* %142, %Array* %146)
  %147 = call i64 @__quantum__rt__array_get_size_1d(%Array* %minibatches)
  %148 = sub i64 %147, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %149 = phi i64 [ 0, %exit__9 ], [ %156, %exiting__10 ]
  %150 = icmp sle i64 %149, %148
  br i1 %150, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %minibatches, i64 %149)
  %152 = bitcast i8* %151 to %Array**
  %153 = load %Array*, %Array** %152, align 8
  %154 = call i64 @__quantum__rt__array_get_size_1d(%Array* %153)
  %155 = sub i64 %154, 1
  br label %header__11

exiting__10:                                      ; preds = %exit__11
  %156 = add i64 %149, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %minibatches, i32 1)
  %157 = call %Array* @Microsoft__Quantum__Arrays___bfbc686941de40cda88afed8ead5a62b_Enumerated__body(%Array* %minibatches)
  %158 = call i64 @__quantum__rt__array_get_size_1d(%Array* %157)
  %159 = sub i64 %158, 1
  br label %header__12

header__11:                                       ; preds = %exiting__11, %body__10
  %160 = phi i64 [ 0, %body__10 ], [ %176, %exiting__11 ]
  %161 = icmp sle i64 %160, %155
  br i1 %161, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %162 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %153, i64 %160)
  %163 = bitcast i8* %162 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %164 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %163, align 8
  %165 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %164, i32 0, i32 0
  %166 = load { %Array*, i64 }*, { %Array*, i64 }** %165, align 8
  %167 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %166, i32 0, i32 0
  %168 = load %Array*, %Array** %167, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %168, i32 1)
  %169 = bitcast { %Array*, i64 }* %166 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %169, i32 1)
  %170 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %164, i32 0, i32 1
  %171 = load { i64, %Callable* }*, { i64, %Callable* }** %170, align 8
  %172 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %171, i32 0, i32 1
  %173 = load %Callable*, %Callable** %172, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %173, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %173, i32 1)
  %174 = bitcast { i64, %Callable* }* %171 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %174, i32 1)
  %175 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %164 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %175, i32 1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %176 = add i64 %160, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %153, i32 1)
  br label %exiting__10

header__12:                                       ; preds = %exiting__12, %exit__10
  %177 = phi i64 [ 0, %exit__10 ], [ %186, %exiting__12 ]
  %178 = icmp sle i64 %177, %159
  br i1 %178, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %179 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %157, i64 %177)
  %180 = bitcast i8* %179 to { i64, %Array* }**
  %181 = load { i64, %Array* }*, { i64, %Array* }** %180, align 8
  %182 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %181, i32 0, i32 0
  %idxMinibatch = load i64, i64* %182, align 4
  %183 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %181, i32 0, i32 1
  %minibatch = load %Array*, %Array** %183, align 8
  %184 = call i64 @__quantum__rt__array_get_size_1d(%Array* %minibatch)
  %185 = sub i64 %184, 1
  br label %header__13

exiting__12:                                      ; preds = %exit__22
  %186 = add i64 %177, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  %187 = load i64, i64* %nBestMisses, align 4
  %188 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %bestSoFar, align 8
  %189 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %188, i32 0, i32 0
  %190 = load %Array*, %Array** %189, align 8
  %191 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %188, i32 0, i32 1
  %192 = load %Array*, %Array** %191, align 8
  %193 = call i64 @__quantum__rt__array_get_size_1d(%Array* %190)
  %194 = sub i64 %193, 1
  br label %header__23

header__13:                                       ; preds = %exiting__13, %body__12
  %195 = phi i64 [ 0, %body__12 ], [ %211, %exiting__13 ]
  %196 = icmp sle i64 %195, %185
  br i1 %196, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %197 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %minibatch, i64 %195)
  %198 = bitcast i8* %197 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %199 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %198, align 8
  %200 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %199, i32 0, i32 0
  %201 = load { %Array*, i64 }*, { %Array*, i64 }** %200, align 8
  %202 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %201, i32 0, i32 0
  %203 = load %Array*, %Array** %202, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %203, i32 1)
  %204 = bitcast { %Array*, i64 }* %201 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %204, i32 1)
  %205 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %199, i32 0, i32 1
  %206 = load { i64, %Callable* }*, { i64, %Callable* }** %205, align 8
  %207 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %206, i32 0, i32 1
  %208 = load %Callable*, %Callable** %207, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %208, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %208, i32 1)
  %209 = bitcast { i64, %Callable* }* %206 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %209, i32 1)
  %210 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %199 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %210, i32 1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %211 = add i64 %195, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %minibatch, i32 1)
  %212 = load %Callable*, %Callable** %30, align 8
  %213 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @4, i32 0, i32 0))
  %214 = call %String* @__quantum__rt__int_to_string(i64 %idxMinibatch)
  %215 = call %String* @__quantum__rt__string_concatenate(%String* %213, %String* %214)
  call void @__quantum__rt__string_update_reference_count(%String* %213, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %214, i32 -1)
  %216 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0))
  %217 = call %String* @__quantum__rt__string_concatenate(%String* %215, %String* %216)
  call void @__quantum__rt__string_update_reference_count(%String* %215, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %216, i32 -1)
  %218 = call %String* @__quantum__rt__int_to_string(i64 %147)
  %219 = call %String* @__quantum__rt__string_concatenate(%String* %217, %String* %218)
  call void @__quantum__rt__string_update_reference_count(%String* %217, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %218, i32 -1)
  %220 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %221 = call %String* @__quantum__rt__string_concatenate(%String* %219, %String* %220)
  call void @__quantum__rt__string_update_reference_count(%String* %219, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %220, i32 -1)
  %222 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %String* }* getelementptr ({ %String* }, { %String* }* null, i32 1) to i64))
  %223 = bitcast %Tuple* %222 to { %String* }*
  %224 = getelementptr inbounds { %String* }, { %String* }* %223, i32 0, i32 0
  store %String* %221, %String** %224, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %212, %Tuple* %222, %Tuple* null)
  %225 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %bestSoFar, align 8
  %226 = call { double, { %Array*, %Array*, double }* }* @Microsoft__Quantum__MachineLearning____QsRef0__RunSingleTrainingStep____body(%Array* %minibatch, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, { %Array*, %Array*, double }* %225)
  %227 = getelementptr inbounds { double, { %Array*, %Array*, double }* }, { double, { %Array*, %Array*, double }* }* %226, i32 0, i32 0
  %utility = load double, double* %227, align 8
  %228 = getelementptr inbounds { double, { %Array*, %Array*, double }* }, { double, { %Array*, %Array*, double }* }* %226, i32 0, i32 1
  %updatedModel = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %228, align 8
  %229 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %updatedModel, i32 0, i32 0
  %230 = load %Array*, %Array** %229, align 8
  %231 = call i64 @__quantum__rt__array_get_size_1d(%Array* %230)
  %232 = sub i64 %231, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %233 = phi i64 [ 0, %exit__13 ], [ %244, %exiting__14 ]
  %234 = icmp sle i64 %233, %232
  br i1 %234, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %235 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %230, i64 %233)
  %236 = bitcast i8* %235 to { { i64, %Array* }*, i2, i64 }**
  %237 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %236, align 8
  %238 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %237, i32 0, i32 0
  %239 = load { i64, %Array* }*, { i64, %Array* }** %238, align 8
  %240 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %239, i32 0, i32 1
  %241 = load %Array*, %Array** %240, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %241, i32 1)
  %242 = bitcast { i64, %Array* }* %239 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %242, i32 1)
  %243 = bitcast { { i64, %Array* }*, i2, i64 }* %237 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %243, i32 1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %244 = add i64 %233, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %230, i32 1)
  %245 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %updatedModel, i32 0, i32 1
  %246 = load %Array*, %Array** %245, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %246, i32 1)
  %247 = bitcast { %Array*, %Array*, double }* %updatedModel to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %247, i32 1)
  %248 = fcmp ogt double %utility, 0x3E7AD7F29ABCAF48
  br i1 %248, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__14
  %249 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @6, i32 0, i32 0))
  %250 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %String* }* getelementptr ({ %String* }, { %String* }* null, i32 1) to i64))
  %251 = bitcast %Tuple* %250 to { %String* }*
  %252 = getelementptr inbounds { %String* }, { %String* }* %251, i32 0, i32 0
  store %String* %249, %String** %252, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %212, %Tuple* %250, %Tuple* null)
  %253 = load double, double* %114, align 8
  %254 = load i64, i64* %116, align 4
  %probabilities = call %Array* @Microsoft__Quantum__MachineLearning__EstimateClassificationProbabilities__body(double %253, { %Array*, %Array*, double }* %updatedModel, %Array* %features, i64 %254)
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 1)
  %255 = call %Array* @Microsoft__Quantum__Arrays___e71c6b9cbb804917a4d7cd04011f2188_Zipped__body(%Array* %probabilities, %Array* %actualLabels)
  %256 = load double, double* %112, align 8
  %updatedBias = call double @Microsoft__Quantum__MachineLearning____QsRef0__UpdatedBias____body(%Array* %255, double %256, double %253)
  %updatedLabels = call %Array* @Microsoft__Quantum__MachineLearning__InferredLabels__body(double %updatedBias, %Array* %probabilities)
  call void @__quantum__rt__array_update_alias_count(%Array* %updatedLabels, i32 1)
  %257 = call %Array* @Microsoft__Quantum__MachineLearning__Misclassifications__body(%Array* %updatedLabels, %Array* %actualLabels)
  %nMisses = call i64 @__quantum__rt__array_get_size_1d(%Array* %257)
  %258 = load i64, i64* %nBestMisses, align 4
  %259 = icmp slt i64 %nMisses, %258
  br i1 %259, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  store i64 %nMisses, i64* %nBestMisses, align 4
  %260 = sub i64 %231, 1
  br label %header__15

continue__2:                                      ; preds = %exit__18, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %updatedLabels, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %249, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %250, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %probabilities, i32 -1)
  %261 = call i64 @__quantum__rt__array_get_size_1d(%Array* %255)
  %262 = sub i64 %261, 1
  br label %header__19

continue__1:                                      ; preds = %exit__19, %exit__14
  %263 = sub i64 %184, 1
  br label %header__20

header__15:                                       ; preds = %exiting__15, %then0__2
  %264 = phi i64 [ 0, %then0__2 ], [ %275, %exiting__15 ]
  %265 = icmp sle i64 %264, %260
  br i1 %265, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %266 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %230, i64 %264)
  %267 = bitcast i8* %266 to { { i64, %Array* }*, i2, i64 }**
  %268 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %267, align 8
  %269 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %268, i32 0, i32 0
  %270 = load { i64, %Array* }*, { i64, %Array* }** %269, align 8
  %271 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %270, i32 0, i32 1
  %272 = load %Array*, %Array** %271, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %272, i32 1)
  %273 = bitcast { i64, %Array* }* %270 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %273, i32 1)
  %274 = bitcast { { i64, %Array* }*, i2, i64 }* %268 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %274, i32 1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %275 = add i64 %264, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %230, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %246, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %247, i32 1)
  %276 = sub i64 %231, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %277 = phi i64 [ 0, %exit__15 ], [ %288, %exiting__16 ]
  %278 = icmp sle i64 %277, %276
  br i1 %278, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %279 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %230, i64 %277)
  %280 = bitcast i8* %279 to { { i64, %Array* }*, i2, i64 }**
  %281 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %280, align 8
  %282 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %281, i32 0, i32 0
  %283 = load { i64, %Array* }*, { i64, %Array* }** %282, align 8
  %284 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %283, i32 0, i32 1
  %285 = load %Array*, %Array** %284, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %285, i32 1)
  %286 = bitcast { i64, %Array* }* %283 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %286, i32 1)
  %287 = bitcast { { i64, %Array* }*, i2, i64 }* %281 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %287, i32 1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %288 = add i64 %277, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_reference_count(%Array* %230, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %246, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %247, i32 1)
  %289 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %225, i32 0, i32 0
  %290 = load %Array*, %Array** %289, align 8
  %291 = call i64 @__quantum__rt__array_get_size_1d(%Array* %290)
  %292 = sub i64 %291, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %293 = phi i64 [ 0, %exit__16 ], [ %304, %exiting__17 ]
  %294 = icmp sle i64 %293, %292
  br i1 %294, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %295 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %290, i64 %293)
  %296 = bitcast i8* %295 to { { i64, %Array* }*, i2, i64 }**
  %297 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %296, align 8
  %298 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %297, i32 0, i32 0
  %299 = load { i64, %Array* }*, { i64, %Array* }** %298, align 8
  %300 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %299, i32 0, i32 1
  %301 = load %Array*, %Array** %300, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %301, i32 -1)
  %302 = bitcast { i64, %Array* }* %299 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %302, i32 -1)
  %303 = bitcast { { i64, %Array* }*, i2, i64 }* %297 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %303, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %304 = add i64 %293, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %290, i32 -1)
  %305 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %225, i32 0, i32 1
  %306 = load %Array*, %Array** %305, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %306, i32 -1)
  %307 = bitcast { %Array*, %Array*, double }* %225 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %307, i32 -1)
  %308 = sub i64 %291, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %309 = phi i64 [ 0, %exit__17 ], [ %320, %exiting__18 ]
  %310 = icmp sle i64 %309, %308
  br i1 %310, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %311 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %290, i64 %309)
  %312 = bitcast i8* %311 to { { i64, %Array* }*, i2, i64 }**
  %313 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %312, align 8
  %314 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %313, i32 0, i32 0
  %315 = load { i64, %Array* }*, { i64, %Array* }** %314, align 8
  %316 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %315, i32 0, i32 1
  %317 = load %Array*, %Array** %316, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %317, i32 -1)
  %318 = bitcast { i64, %Array* }* %315 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %318, i32 -1)
  %319 = bitcast { { i64, %Array* }*, i2, i64 }* %313 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %319, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %320 = add i64 %309, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_reference_count(%Array* %290, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %306, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %307, i32 -1)
  store { %Array*, %Array*, double }* %updatedModel, { %Array*, %Array*, double }** %bestSoFar, align 8
  br label %continue__2

header__19:                                       ; preds = %exiting__19, %continue__2
  %321 = phi i64 [ 0, %continue__2 ], [ %327, %exiting__19 ]
  %322 = icmp sle i64 %321, %262
  br i1 %322, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %323 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %255, i64 %321)
  %324 = bitcast i8* %323 to { double, i64 }**
  %325 = load { double, i64 }*, { double, i64 }** %324, align 8
  %326 = bitcast { double, i64 }* %325 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %326, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %327 = add i64 %321, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_reference_count(%Array* %255, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %updatedLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %257, i32 -1)
  br label %continue__1

header__20:                                       ; preds = %exiting__20, %continue__1
  %328 = phi i64 [ 0, %continue__1 ], [ %344, %exiting__20 ]
  %329 = icmp sle i64 %328, %263
  br i1 %329, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %330 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %minibatch, i64 %328)
  %331 = bitcast i8* %330 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %332 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %331, align 8
  %333 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %332, i32 0, i32 0
  %334 = load { %Array*, i64 }*, { %Array*, i64 }** %333, align 8
  %335 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %334, i32 0, i32 0
  %336 = load %Array*, %Array** %335, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %336, i32 -1)
  %337 = bitcast { %Array*, i64 }* %334 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %337, i32 -1)
  %338 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %332, i32 0, i32 1
  %339 = load { i64, %Callable* }*, { i64, %Callable* }** %338, align 8
  %340 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %339, i32 0, i32 1
  %341 = load %Callable*, %Callable** %340, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %341, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %341, i32 -1)
  %342 = bitcast { i64, %Callable* }* %339 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %342, i32 -1)
  %343 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %332 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %343, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %344 = add i64 %328, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %minibatch, i32 -1)
  %345 = sub i64 %231, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %346 = phi i64 [ 0, %exit__20 ], [ %357, %exiting__21 ]
  %347 = icmp sle i64 %346, %345
  br i1 %347, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %348 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %230, i64 %346)
  %349 = bitcast i8* %348 to { { i64, %Array* }*, i2, i64 }**
  %350 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %349, align 8
  %351 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %350, i32 0, i32 0
  %352 = load { i64, %Array* }*, { i64, %Array* }** %351, align 8
  %353 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %352, i32 0, i32 1
  %354 = load %Array*, %Array** %353, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %354, i32 -1)
  %355 = bitcast { i64, %Array* }* %352 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %355, i32 -1)
  %356 = bitcast { { i64, %Array* }*, i2, i64 }* %350 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %356, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %357 = add i64 %346, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %230, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %246, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %247, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %221, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %222, i32 -1)
  %358 = sub i64 %231, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %359 = phi i64 [ 0, %exit__21 ], [ %370, %exiting__22 ]
  %360 = icmp sle i64 %359, %358
  br i1 %360, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %361 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %230, i64 %359)
  %362 = bitcast i8* %361 to { { i64, %Array* }*, i2, i64 }**
  %363 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %362, align 8
  %364 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %363, i32 0, i32 0
  %365 = load { i64, %Array* }*, { i64, %Array* }** %364, align 8
  %366 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %365, i32 0, i32 1
  %367 = load %Array*, %Array** %366, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %367, i32 -1)
  %368 = bitcast { i64, %Array* }* %365 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %368, i32 -1)
  %369 = bitcast { { i64, %Array* }*, i2, i64 }* %363 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %369, i32 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %370 = add i64 %359, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_reference_count(%Array* %230, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %246, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %247, i32 -1)
  %371 = bitcast { double, { %Array*, %Array*, double }* }* %226 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %371, i32 -1)
  br label %exiting__12

header__23:                                       ; preds = %exiting__23, %exit__12
  %372 = phi i64 [ 0, %exit__12 ], [ %383, %exiting__23 ]
  %373 = icmp sle i64 %372, %194
  br i1 %373, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %374 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 %372)
  %375 = bitcast i8* %374 to { { i64, %Array* }*, i2, i64 }**
  %376 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %375, align 8
  %377 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %376, i32 0, i32 0
  %378 = load { i64, %Array* }*, { i64, %Array* }** %377, align 8
  %379 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %378, i32 0, i32 1
  %380 = load %Array*, %Array** %379, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %380, i32 1)
  %381 = bitcast { i64, %Array* }* %378 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %381, i32 1)
  %382 = bitcast { { i64, %Array* }*, i2, i64 }* %376 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %382, i32 1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %383 = add i64 %372, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_reference_count(%Array* %190, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %192, i32 1)
  %384 = bitcast { %Array*, %Array*, double }* %188 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %384, i32 1)
  %385 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Array*, %Array*, double }* }* getelementptr ({ i64, { %Array*, %Array*, double }* }, { i64, { %Array*, %Array*, double }* }* null, i32 1) to i64))
  %386 = bitcast %Tuple* %385 to { i64, { %Array*, %Array*, double }* }*
  %387 = getelementptr inbounds { i64, { %Array*, %Array*, double }* }, { i64, { %Array*, %Array*, double }* }* %386, i32 0, i32 0
  %388 = getelementptr inbounds { i64, { %Array*, %Array*, double }* }, { i64, { %Array*, %Array*, double }* }* %386, i32 0, i32 1
  store i64 %187, i64* %387, align 4
  store { %Array*, %Array*, double }* %188, { %Array*, %Array*, double }** %388, align 8
  %389 = sub i64 %0, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %390 = phi i64 [ 0, %exit__23 ], [ %406, %exiting__24 ]
  %391 = icmp sle i64 %390, %389
  br i1 %391, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %392 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %encodedSamples, i64 %390)
  %393 = bitcast i8* %392 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %394 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %393, align 8
  %395 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %394, i32 0, i32 0
  %396 = load { %Array*, i64 }*, { %Array*, i64 }** %395, align 8
  %397 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %396, i32 0, i32 0
  %398 = load %Array*, %Array** %397, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %398, i32 -1)
  %399 = bitcast { %Array*, i64 }* %396 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %399, i32 -1)
  %400 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %394, i32 0, i32 1
  %401 = load { i64, %Callable* }*, { i64, %Callable* }** %400, align 8
  %402 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %401, i32 0, i32 1
  %403 = load %Callable*, %Callable** %402, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %403, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %403, i32 -1)
  %404 = bitcast { i64, %Callable* }* %401 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %404, i32 -1)
  %405 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %394 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %405, i32 -1)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %406 = add i64 %390, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_update_alias_count(%Array* %encodedSamples, i32 -1)
  %407 = sub i64 %21, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %exit__24
  %408 = phi i64 [ 0, %exit__24 ], [ %413, %exiting__25 ]
  %409 = icmp sle i64 %408, %407
  br i1 %409, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %410 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %408)
  %411 = bitcast i8* %410 to %Range*
  %412 = load %Range, %Range* %411, align 4
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %413 = add i64 %408, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  %414 = load %Callable*, %Callable** %30, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %414, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %414, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  %415 = sub i64 %35, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %416 = phi i64 [ 0, %exit__25 ], [ %427, %exiting__26 ]
  %417 = icmp sle i64 %416, %415
  br i1 %417, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %418 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %416)
  %419 = bitcast i8* %418 to { { i64, %Array* }*, i2, i64 }**
  %420 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %419, align 8
  %421 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %420, i32 0, i32 0
  %422 = load { i64, %Array* }*, { i64, %Array* }** %421, align 8
  %423 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %422, i32 0, i32 1
  %424 = load %Array*, %Array** %423, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %424, i32 -1)
  %425 = bitcast { i64, %Array* }* %422 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %425, i32 -1)
  %426 = bitcast { { i64, %Array* }*, i2, i64 }* %420 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %426, i32 -1)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %427 = add i64 %416, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 -1)
  %428 = sub i64 %193, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %429 = phi i64 [ 0, %exit__26 ], [ %440, %exiting__27 ]
  %430 = icmp sle i64 %429, %428
  br i1 %430, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %431 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 %429)
  %432 = bitcast i8* %431 to { { i64, %Array* }*, i2, i64 }**
  %433 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %432, align 8
  %434 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %433, i32 0, i32 0
  %435 = load { i64, %Array* }*, { i64, %Array* }** %434, align 8
  %436 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %435, i32 0, i32 1
  %437 = load %Array*, %Array** %436, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %437, i32 -1)
  %438 = bitcast { i64, %Array* }* %435 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %438, i32 -1)
  %439 = bitcast { { i64, %Array* }*, i2, i64 }* %433 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %439, i32 -1)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %440 = add i64 %429, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_update_alias_count(%Array* %190, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %192, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %384, i32 -1)
  %441 = sub i64 %79, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %442 = phi i64 [ 0, %exit__27 ], [ %450, %exiting__28 ]
  %443 = icmp sle i64 %442, %441
  br i1 %443, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %444 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %442)
  %445 = bitcast i8* %444 to { %Array*, i64 }**
  %446 = load { %Array*, i64 }*, { %Array*, i64 }** %445, align 8
  %447 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %446, i32 0, i32 0
  %448 = load %Array*, %Array** %447, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %448, i32 -1)
  %449 = bitcast { %Array*, i64 }* %446 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %449, i32 -1)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %450 = add i64 %442, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_update_alias_count(%Array* %samples, i32 -1)
  %451 = sub i64 %91, 1
  br label %header__29

header__29:                                       ; preds = %exiting__29, %exit__28
  %452 = phi i64 [ 0, %exit__28 ], [ %460, %exiting__29 ]
  %453 = icmp sle i64 %452, %451
  br i1 %453, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %454 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateGenerators, i64 %452)
  %455 = bitcast i8* %454 to { i64, %Callable* }**
  %456 = load { i64, %Callable* }*, { i64, %Callable* }** %455, align 8
  %457 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %456, i32 0, i32 1
  %458 = load %Callable*, %Callable** %457, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %458, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %458, i32 -1)
  %459 = bitcast { i64, %Callable* }* %456 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %459, i32 -1)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %460 = add i64 %452, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_update_alias_count(%Array* %stateGenerators, i32 -1)
  %461 = sub i64 %103, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %462 = phi i64 [ 0, %exit__29 ], [ %467, %exiting__30 ]
  %463 = icmp sle i64 %462, %461
  br i1 %463, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %464 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %462)
  %465 = bitcast i8* %464 to %Array**
  %466 = load %Array*, %Array** %465, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %466, i32 -1)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %467 = add i64 %462, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_update_alias_count(%Array* %features, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %inferredLabels, i32 -1)
  %468 = sub i64 %147, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %469 = phi i64 [ 0, %exit__30 ], [ %476, %exiting__31 ]
  %470 = icmp sle i64 %469, %468
  br i1 %470, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %471 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %minibatches, i64 %469)
  %472 = bitcast i8* %471 to %Array**
  %473 = load %Array*, %Array** %472, align 8
  %474 = call i64 @__quantum__rt__array_get_size_1d(%Array* %473)
  %475 = sub i64 %474, 1
  br label %header__32

exiting__31:                                      ; preds = %exit__32
  %476 = add i64 %469, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_update_alias_count(%Array* %minibatches, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %78, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %78, i32 -1)
  %477 = sub i64 %79, 1
  br label %header__33

header__32:                                       ; preds = %exiting__32, %body__31
  %478 = phi i64 [ 0, %body__31 ], [ %494, %exiting__32 ]
  %479 = icmp sle i64 %478, %475
  br i1 %479, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %480 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %473, i64 %478)
  %481 = bitcast i8* %480 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %482 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %481, align 8
  %483 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %482, i32 0, i32 0
  %484 = load { %Array*, i64 }*, { %Array*, i64 }** %483, align 8
  %485 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %484, i32 0, i32 0
  %486 = load %Array*, %Array** %485, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %486, i32 -1)
  %487 = bitcast { %Array*, i64 }* %484 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %487, i32 -1)
  %488 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %482, i32 0, i32 1
  %489 = load { i64, %Callable* }*, { i64, %Callable* }** %488, align 8
  %490 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %489, i32 0, i32 1
  %491 = load %Callable*, %Callable** %490, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %491, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %491, i32 -1)
  %492 = bitcast { i64, %Callable* }* %489 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %492, i32 -1)
  %493 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %482 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %493, i32 -1)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %494 = add i64 %478, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_update_alias_count(%Array* %473, i32 -1)
  br label %exiting__31

header__33:                                       ; preds = %exiting__33, %exit__31
  %495 = phi i64 [ 0, %exit__31 ], [ %503, %exiting__33 ]
  %496 = icmp sle i64 %495, %477
  br i1 %496, label %body__33, label %exit__33

body__33:                                         ; preds = %header__33
  %497 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %samples, i64 %495)
  %498 = bitcast i8* %497 to { %Array*, i64 }**
  %499 = load { %Array*, i64 }*, { %Array*, i64 }** %498, align 8
  %500 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %499, i32 0, i32 0
  %501 = load %Array*, %Array** %500, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %501, i32 -1)
  %502 = bitcast { %Array*, i64 }* %499 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %502, i32 -1)
  br label %exiting__33

exiting__33:                                      ; preds = %body__33
  %503 = add i64 %495, 1
  br label %header__33

exit__33:                                         ; preds = %header__33
  call void @__quantum__rt__array_update_reference_count(%Array* %samples, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %90, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %90, i32 -1)
  %504 = sub i64 %91, 1
  br label %header__34

header__34:                                       ; preds = %exiting__34, %exit__33
  %505 = phi i64 [ 0, %exit__33 ], [ %513, %exiting__34 ]
  %506 = icmp sle i64 %505, %504
  br i1 %506, label %body__34, label %exit__34

body__34:                                         ; preds = %header__34
  %507 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateGenerators, i64 %505)
  %508 = bitcast i8* %507 to { i64, %Callable* }**
  %509 = load { i64, %Callable* }*, { i64, %Callable* }** %508, align 8
  %510 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %509, i32 0, i32 1
  %511 = load %Callable*, %Callable** %510, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %511, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %511, i32 -1)
  %512 = bitcast { i64, %Callable* }* %509 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %512, i32 -1)
  br label %exiting__34

exiting__34:                                      ; preds = %body__34
  %513 = add i64 %505, 1
  br label %header__34

exit__34:                                         ; preds = %header__34
  call void @__quantum__rt__array_update_reference_count(%Array* %stateGenerators, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %102, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %102, i32 -1)
  %514 = sub i64 %103, 1
  br label %header__35

header__35:                                       ; preds = %exiting__35, %exit__34
  %515 = phi i64 [ 0, %exit__34 ], [ %520, %exiting__35 ]
  %516 = icmp sle i64 %515, %514
  br i1 %516, label %body__35, label %exit__35

body__35:                                         ; preds = %header__35
  %517 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %features, i64 %515)
  %518 = bitcast i8* %517 to %Array**
  %519 = load %Array*, %Array** %518, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %519, i32 -1)
  br label %exiting__35

exiting__35:                                      ; preds = %body__35
  %520 = add i64 %515, 1
  br label %header__35

exit__35:                                         ; preds = %header__35
  call void @__quantum__rt__array_update_reference_count(%Array* %features, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %actualLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %118, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %inferredLabels, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %142, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %142, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %145, i32 -1)
  %521 = call i64 @__quantum__rt__array_get_size_1d(%Array* %146)
  %522 = sub i64 %521, 1
  br label %header__36

header__36:                                       ; preds = %exiting__36, %exit__35
  %523 = phi i64 [ 0, %exit__35 ], [ %528, %exiting__36 ]
  %524 = icmp sle i64 %523, %522
  br i1 %524, label %body__36, label %exit__36

body__36:                                         ; preds = %header__36
  %525 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 %523)
  %526 = bitcast i8* %525 to %Array**
  %527 = load %Array*, %Array** %526, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %527, i32 -1)
  br label %exiting__36

exiting__36:                                      ; preds = %body__36
  %528 = add i64 %523, 1
  br label %header__36

exit__36:                                         ; preds = %header__36
  call void @__quantum__rt__array_update_reference_count(%Array* %146, i32 -1)
  %529 = sub i64 %147, 1
  br label %header__37

header__37:                                       ; preds = %exiting__37, %exit__36
  %530 = phi i64 [ 0, %exit__36 ], [ %537, %exiting__37 ]
  %531 = icmp sle i64 %530, %529
  br i1 %531, label %body__37, label %exit__37

body__37:                                         ; preds = %header__37
  %532 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %minibatches, i64 %530)
  %533 = bitcast i8* %532 to %Array**
  %534 = load %Array*, %Array** %533, align 8
  %535 = call i64 @__quantum__rt__array_get_size_1d(%Array* %534)
  %536 = sub i64 %535, 1
  br label %header__38

exiting__37:                                      ; preds = %exit__38
  %537 = add i64 %530, 1
  br label %header__37

exit__37:                                         ; preds = %header__37
  call void @__quantum__rt__array_update_reference_count(%Array* %minibatches, i32 -1)
  %538 = sub i64 %158, 1
  br label %header__39

header__38:                                       ; preds = %exiting__38, %body__37
  %539 = phi i64 [ 0, %body__37 ], [ %555, %exiting__38 ]
  %540 = icmp sle i64 %539, %536
  br i1 %540, label %body__38, label %exit__38

body__38:                                         ; preds = %header__38
  %541 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %534, i64 %539)
  %542 = bitcast i8* %541 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %543 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %542, align 8
  %544 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %543, i32 0, i32 0
  %545 = load { %Array*, i64 }*, { %Array*, i64 }** %544, align 8
  %546 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %545, i32 0, i32 0
  %547 = load %Array*, %Array** %546, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %547, i32 -1)
  %548 = bitcast { %Array*, i64 }* %545 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %548, i32 -1)
  %549 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %543, i32 0, i32 1
  %550 = load { i64, %Callable* }*, { i64, %Callable* }** %549, align 8
  %551 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %550, i32 0, i32 1
  %552 = load %Callable*, %Callable** %551, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %552, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %552, i32 -1)
  %553 = bitcast { i64, %Callable* }* %550 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %553, i32 -1)
  %554 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %543 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %554, i32 -1)
  br label %exiting__38

exiting__38:                                      ; preds = %body__38
  %555 = add i64 %539, 1
  br label %header__38

exit__38:                                         ; preds = %header__38
  call void @__quantum__rt__array_update_reference_count(%Array* %534, i32 -1)
  br label %exiting__37

header__39:                                       ; preds = %exiting__39, %exit__37
  %556 = phi i64 [ 0, %exit__37 ], [ %565, %exiting__39 ]
  %557 = icmp sle i64 %556, %538
  br i1 %557, label %body__39, label %exit__39

body__39:                                         ; preds = %header__39
  %558 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %157, i64 %556)
  %559 = bitcast i8* %558 to { i64, %Array* }**
  %560 = load { i64, %Array* }*, { i64, %Array* }** %559, align 8
  %561 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %560, i32 0, i32 1
  %562 = load %Array*, %Array** %561, align 8
  %563 = call i64 @__quantum__rt__array_get_size_1d(%Array* %562)
  %564 = sub i64 %563, 1
  br label %header__40

exiting__39:                                      ; preds = %exit__40
  %565 = add i64 %556, 1
  br label %header__39

exit__39:                                         ; preds = %header__39
  call void @__quantum__rt__array_update_reference_count(%Array* %157, i32 -1)
  %566 = sub i64 %193, 1
  br label %header__41

header__40:                                       ; preds = %exiting__40, %body__39
  %567 = phi i64 [ 0, %body__39 ], [ %583, %exiting__40 ]
  %568 = icmp sle i64 %567, %564
  br i1 %568, label %body__40, label %exit__40

body__40:                                         ; preds = %header__40
  %569 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %562, i64 %567)
  %570 = bitcast i8* %569 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %571 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %570, align 8
  %572 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %571, i32 0, i32 0
  %573 = load { %Array*, i64 }*, { %Array*, i64 }** %572, align 8
  %574 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %573, i32 0, i32 0
  %575 = load %Array*, %Array** %574, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %575, i32 -1)
  %576 = bitcast { %Array*, i64 }* %573 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %576, i32 -1)
  %577 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %571, i32 0, i32 1
  %578 = load { i64, %Callable* }*, { i64, %Callable* }** %577, align 8
  %579 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %578, i32 0, i32 1
  %580 = load %Callable*, %Callable** %579, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %580, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %580, i32 -1)
  %581 = bitcast { i64, %Callable* }* %578 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %581, i32 -1)
  %582 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %571 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %582, i32 -1)
  br label %exiting__40

exiting__40:                                      ; preds = %body__40
  %583 = add i64 %567, 1
  br label %header__40

exit__40:                                         ; preds = %header__40
  call void @__quantum__rt__array_update_reference_count(%Array* %562, i32 -1)
  %584 = bitcast { i64, %Array* }* %560 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %584, i32 -1)
  br label %exiting__39

header__41:                                       ; preds = %exiting__41, %exit__39
  %585 = phi i64 [ 0, %exit__39 ], [ %596, %exiting__41 ]
  %586 = icmp sle i64 %585, %566
  br i1 %586, label %body__41, label %exit__41

body__41:                                         ; preds = %header__41
  %587 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 %585)
  %588 = bitcast i8* %587 to { { i64, %Array* }*, i2, i64 }**
  %589 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %588, align 8
  %590 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %589, i32 0, i32 0
  %591 = load { i64, %Array* }*, { i64, %Array* }** %590, align 8
  %592 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %591, i32 0, i32 1
  %593 = load %Array*, %Array** %592, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %593, i32 -1)
  %594 = bitcast { i64, %Array* }* %591 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %594, i32 -1)
  %595 = bitcast { { i64, %Array* }*, i2, i64 }* %589 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %595, i32 -1)
  br label %exiting__41

exiting__41:                                      ; preds = %body__41
  %596 = add i64 %585, 1
  br label %header__41

exit__41:                                         ; preds = %header__41
  call void @__quantum__rt__array_update_reference_count(%Array* %190, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %192, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %384, i32 -1)
  ret { i64, { %Array*, %Array*, double }* }* %386
}

define internal i1 @Microsoft__Quantum__Logical__NearlyEqualD__body(double %a, double %b) {
entry:
  %0 = fsub double %a, %b
  %1 = call double @Microsoft__Quantum__Math__AbsD__body(double %0)
  %2 = fcmp olt double %1, 0x3D719799812DEA11
  ret i1 %2
}

define internal i1 @Microsoft__Quantum__MachineLearning____QsRef0__AllNearlyEqualD____body(%Array* %v1, %Array* %v2) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %v1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v2, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %v1)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %v2)
  %2 = icmp eq i64 %0, %1
  br i1 %2, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__NearlyEqualD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Array* @Microsoft__Quantum__Arrays___1ff548eeaa7940ff923499697de8c6a5_Zipped__body(%Array* %v1, %Array* %v2)
  %5 = call i1 @Microsoft__Quantum__Arrays___fb527ee42fef4f1c9ddef4d984062404_All__body(%Callable* %3, %Array* %4)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %7 = sub i64 %6, 1
  br label %header__1

condContinue__1:                                  ; preds = %exit__1, %entry
  %8 = phi i1 [ %5, %exit__1 ], [ %2, %entry ]
  call void @__quantum__rt__array_update_alias_count(%Array* %v1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v2, i32 -1)
  ret i1 %8

header__1:                                        ; preds = %exiting__1, %condTrue__1
  %9 = phi i64 [ 0, %condTrue__1 ], [ %15, %exiting__1 ]
  %10 = icmp sle i64 %9, %7
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %9)
  %12 = bitcast i8* %11 to { double, double }**
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  br label %condContinue__1
}

define internal %Array* @Microsoft__Quantum__Arrays___6bc4a411bac74d8081320ac7e36319e3_ForEach__body(%Callable* %action, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %action, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %action, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = icmp eq i64 %length, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %action, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %action, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %3 = bitcast i8* %2 to double*
  %4 = load double, double* %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { double }*
  %7 = getelementptr inbounds { double }, { double }* %6, i32 0, i32 0
  store double %4, double* %7, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %action, %Tuple* %5, %Tuple* %8)
  %9 = bitcast %Tuple* %8 to { double }*
  %10 = getelementptr inbounds { double }, { double }* %9, i32 0, i32 0
  %first = load double, double* %10, align 8
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %12 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %13 = phi i64 [ 0, %continue__1 ], [ %17, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %13)
  %16 = bitcast i8* %15 to double*
  store double %first, double* %16, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %11, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %18 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 1, %exit__1 ], [ %34, %exiting__2 ]
  %19 = icmp sle i64 %idx, %18
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  %21 = call %Array* @__quantum__rt__array_copy(%Array* %20, i1 false)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %23 = bitcast i8* %22 to double*
  %24 = load double, double* %23, align 8
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { double }*
  %27 = getelementptr inbounds { double }, { double }* %26, i32 0, i32 0
  store double %24, double* %27, align 8
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %action, %Tuple* %25, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { double }*
  %30 = getelementptr inbounds { double }, { double }* %29, i32 0, i32 0
  %31 = load double, double* %30, align 8
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %idx)
  %33 = bitcast i8* %32 to double*
  store double %31, double* %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  store %Array* %21, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %34 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %35 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %action, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %action, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret %Array* %35
}

define internal void @Lifted__PartialApplication__3__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double }*
  %4 = getelementptr inbounds { double }, { double }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__RandomlyRescale____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load double, double* %2, align 8
  %5 = call double @Microsoft__Quantum__MachineLearning____QsRef0__RandomlyRescale____body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { double }*
  %7 = getelementptr inbounds { double }, { double }* %6, i32 0, i32 0
  store double %5, double* %7, align 8
  ret void
}

define internal void @MemoryManagement__3__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__3__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__MachineLearning____QsRef0__RandomlyRescale____body(double %scale, double %value) {
entry:
  %0 = call i1 @Microsoft__Quantum__Random__DrawRandomBool__body(double 5.000000e-01)
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %1 = phi double [ 1.000000e+00, %condTrue__1 ], [ -1.000000e+00, %condFalse__1 ]
  %2 = fmul double %scale, %1
  %3 = fadd double 1.000000e+00, %2
  %4 = fmul double %value, %3
  ret double %4
}

define internal %Array* @Microsoft__Quantum__MachineLearning___Features__body({ %Array*, i64 }* %sample) {
entry:
  %0 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %sample, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array*, i64 }* %sample to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret %Array* %1
}

define internal i64 @Microsoft__Quantum__MachineLearning___Label__body({ %Array*, i64 }* %sample) {
entry:
  %0 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %sample, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array*, i64 }* %sample to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %sample, i32 0, i32 1
  %4 = load i64, i64* %3, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret i64 %4
}

define internal { { %Array*, i64 }*, { i64, %Callable* }* }* @Microsoft__Quantum__MachineLearning____QsRef0__EncodeSample____body(double %effectiveTolerance, i64 %nQubits, { %Array*, i64 }* %sample) {
entry:
  %0 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %sample, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array*, i64 }* %sample to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %3 = call { i64, %Callable* }* @Microsoft__Quantum__MachineLearning__ApproximateInputEncoder__body(double %effectiveTolerance, %Array* %1)
  %4 = bitcast { i64, %Callable* }* %3 to %Tuple*
  %5 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %4, i1 false)
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  store i64 %nQubits, i64* %7, align 4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }*, { i64, %Callable* }* }* getelementptr ({ { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array*, i64 }*, { i64, %Callable* }* }*
  %10 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %9, i32 0, i32 1
  store { %Array*, i64 }* %sample, { %Array*, i64 }** %10, align 8
  store { i64, %Callable* }* %6, { i64, %Callable* }** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret { { %Array*, i64 }*, { i64, %Callable* }* }* %9
}

define internal i1 @Microsoft__Quantum__Arrays___fb527ee42fef4f1c9ddef4d984062404_All__body(%Callable* %predicate, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %predicate, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %predicate, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__And__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %10 = call %Array* @Microsoft__Quantum__Arrays___83850f08600e4e54b1fe3e670f742428_Mapped__body(%Callable* %predicate, %Array* %array)
  %11 = call i1 @Microsoft__Quantum__Arrays___e14e05cbd7674cf99f7174e4f55f22e1_Fold__body(%Callable* %9, i1 true, %Array* %10)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %predicate, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %predicate, i32 -1)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  ret i1 %11
}

define internal void @Microsoft__Quantum__Logical__NearlyEqualD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load double, double* %2, align 8
  %5 = call i1 @Microsoft__Quantum__Logical__NearlyEqualD__body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { i1 }*
  %7 = getelementptr inbounds { i1 }, { i1 }* %6, i32 0, i32 0
  store i1 %5, i1* %7, align 1
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___1ff548eeaa7940ff923499697de8c6a5_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = icmp eq i64 %nElements, 0
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %4

continue__1:                                      ; preds = %condContinue__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %6 = bitcast i8* %5 to double*
  %7 = load double, double* %6, align 8
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %9 = bitcast i8* %8 to double*
  %10 = load double, double* %9, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { double, double }*
  %13 = getelementptr inbounds { double, double }, { double, double }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { double, double }, { double, double }* %12, i32 0, i32 1
  store double %7, double* %13, align 8
  store double %10, double* %14, align 8
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %16 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %17 = phi i64 [ 0, %continue__1 ], [ %21, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  store { double, double }* %12, { double, double }** %20, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %21 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %15, %Array** %output, align 8
  %22 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %23)
  %26 = bitcast i8* %25 to { double, double }**
  %27 = load { double, double }*, { double, double }** %26, align 8
  %28 = bitcast { double, double }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %30 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 1, %exit__2 ], [ %48, %exiting__3 ]
  %31 = icmp sle i64 %idxElement, %30
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %35 = bitcast i8* %34 to double*
  %36 = load double, double* %35, align 8
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %38 = bitcast i8* %37 to double*
  %39 = load double, double* %38, align 8
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { double, double }*
  %42 = getelementptr inbounds { double, double }, { double, double }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { double, double }, { double, double }* %41, i32 0, i32 1
  store double %36, double* %42, align 8
  store double %39, double* %43, align 8
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxElement)
  %45 = bitcast i8* %44 to { double, double }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %46 = load { double, double }*, { double, double }** %45, align 8
  %47 = bitcast { double, double }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  store { double, double }* %41, { double, double }** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { double, double }**
  %56 = load { double, double }*, { double, double }** %55, align 8
  %57 = bitcast { double, double }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret %Array* %49
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____body(%Array* %datum, { %Array* }* %reg) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 1)
  %4 = bitcast i8* %3 to double*
  %5 = load double, double* %4, align 8
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %7 = bitcast i8* %6 to double*
  %8 = load double, double* %7, align 8
  %x = fdiv double %5, %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 2)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %y = fdiv double %11, %14
  %15 = call double @__quantum__qis__arctan__body(double %x)
  %ax = fmul double 2.000000e+00, %15
  %16 = call double @__quantum__qis__arctan__body(double %y)
  %ay = fmul double 2.000000e+00, %16
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 1)
  %18 = bitcast i8* %17 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %18, align 8
  call void @__quantum__qis__r__body(i2 -1, double %ay, %Qubit* %qubit)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 0)
  %20 = bitcast i8* %19 to %Qubit**
  %qubit__1 = load %Qubit*, %Qubit** %20, align 8
  call void @__quantum__qis__r__body(i2 -1, double %ax, %Qubit* %qubit__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

declare double @__quantum__qis__arctan__body(double)

declare void @__quantum__qis__r__body(i2, double, %Qubit*)

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____adj(%Array* %datum, { %Array* }* %reg) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 1)
  %4 = bitcast i8* %3 to double*
  %5 = load double, double* %4, align 8
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %7 = bitcast i8* %6 to double*
  %8 = load double, double* %7, align 8
  %__qsVar0__x__ = fdiv double %5, %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 2)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %__qsVar1__y__ = fdiv double %11, %14
  %15 = call double @__quantum__qis__arctan__body(double %__qsVar0__x__)
  %__qsVar2__ax__ = fmul double 2.000000e+00, %15
  %16 = call double @__quantum__qis__arctan__body(double %__qsVar1__y__)
  %__qsVar3__ay__ = fmul double 2.000000e+00, %16
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 0)
  %18 = bitcast i8* %17 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %18, align 8
  call void @__quantum__qis__r__adj(i2 -1, double %__qsVar2__ax__, %Qubit* %qubit)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 1)
  %20 = bitcast i8* %19 to %Qubit**
  %qubit__1 = load %Qubit*, %Qubit** %20, align 8
  call void @__quantum__qis__r__adj(i2 -1, double %__qsVar3__ay__, %Qubit* %qubit__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

declare void @__quantum__qis__r__adj(i2, double, %Qubit*)

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %datum = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 1)
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %reg = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 1)
  %7 = bitcast i8* %6 to double*
  %8 = load double, double* %7, align 8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %x = fdiv double %8, %11
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 2)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16, align 8
  %y = fdiv double %14, %17
  %18 = call double @__quantum__qis__arctan__body(double %x)
  %ax = fmul double 2.000000e+00, %18
  %19 = call double @__quantum__qis__arctan__body(double %y)
  %ay = fmul double 2.000000e+00, %19
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 1)
  %21 = bitcast i8* %20 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %21, align 8
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i2, double, %Qubit* }*
  %24 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %23, i32 0, i32 2
  store i2 -1, i2* %24, align 1
  store double %ay, double* %25, align 8
  store %Qubit* %qubit, %Qubit** %26, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %23)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %28 = bitcast i8* %27 to %Qubit**
  %qubit__1 = load %Qubit*, %Qubit** %28, align 8
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i2, double, %Qubit* }*
  %31 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %30, i32 0, i32 1
  %33 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %30, i32 0, i32 2
  store i2 -1, i2* %31, align 1
  store double %ax, double* %32, align 8
  store %Qubit* %qubit__1, %Qubit** %33, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %30)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  ret void
}

declare void @__quantum__qis__r__ctl(%Array*, { i2, double, %Qubit* }*)

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %datum = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 1)
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %reg = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 1)
  %7 = bitcast i8* %6 to double*
  %8 = load double, double* %7, align 8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %__qsVar0__x__ = fdiv double %8, %11
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 2)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16, align 8
  %__qsVar1__y__ = fdiv double %14, %17
  %18 = call double @__quantum__qis__arctan__body(double %__qsVar0__x__)
  %__qsVar2__ax__ = fmul double 2.000000e+00, %18
  %19 = call double @__quantum__qis__arctan__body(double %__qsVar1__y__)
  %__qsVar3__ay__ = fmul double 2.000000e+00, %19
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %21 = bitcast i8* %20 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %21, align 8
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i2, double, %Qubit* }*
  %24 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %23, i32 0, i32 2
  store i2 -1, i2* %24, align 1
  store double %__qsVar2__ax__, double* %25, align 8
  store %Qubit* %qubit, %Qubit** %26, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %23)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 1)
  %28 = bitcast i8* %27 to %Qubit**
  %qubit__1 = load %Qubit*, %Qubit** %28, align 8
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i2, double, %Qubit* }*
  %31 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %30, i32 0, i32 1
  %33 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %30, i32 0, i32 2
  store i2 -1, i2* %31, align 1
  store double %__qsVar3__ay__, double* %32, align 8
  store %Qubit* %qubit__1, %Qubit** %33, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %30)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  ret void
}

declare void @__quantum__qis__r__ctladj(%Array*, { i2, double, %Qubit* }*)

define internal i1 @Microsoft__Quantum__MachineLearning____QsRef0__CanApplyTwoQubitCase____body(%Array* %datum) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %datum)
  %1 = icmp eq i64 %0, 4
  br i1 %1, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %3 = bitcast i8* %2 to double*
  %4 = load double, double* %3, align 8
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 3)
  %6 = bitcast i8* %5 to double*
  %7 = load double, double* %6, align 8
  %8 = fmul double %4, %7
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 1)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 2)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %15 = fmul double %11, %14
  %16 = fsub double %8, %15
  %17 = call double @Microsoft__Quantum__Math__AbsD__body(double %16)
  %18 = fcmp olt double %17, 0x3D719799812DEA11
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %19 = phi i1 [ %18, %condTrue__1 ], [ %1, %entry ]
  br i1 %19, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %condContinue__1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %datum, i64 0)
  %21 = bitcast i8* %20 to double*
  %22 = load double, double* %21, align 8
  %23 = call double @Microsoft__Quantum__Math__AbsD__body(double %22)
  %24 = fcmp ogt double %23, 1.000000e-04
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %condContinue__1
  %25 = phi i1 [ %24, %condTrue__2 ], [ %19, %condContinue__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %datum, i32 -1)
  ret i1 %25
}

define internal double @Microsoft__Quantum__Math__AbsD__body(double %a) {
entry:
  %0 = fcmp olt double %a, 0.000000e+00
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = fneg double %a
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi double [ %1, %condTrue__1 ], [ %a, %condFalse__1 ]
  ret double %2
}

define internal { i64, %Callable* }* @Microsoft__Quantum__MachineLearning__ApproximateInputEncoder__body(double %tolerance, %Array* %coefficients) {
entry:
  %ang = alloca double, align 8
  %magnitude = alloca double, align 8
  %cNegative = alloca i64, align 8
  %complexCoefficients = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %nCoefficients = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %0 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nCoefficients)
  %2 = sub i64 %nCoefficients, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  store { double, double }* %0, { double, double }** %6, align 8
  %7 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %1, %Array** %complexCoefficients, align 8
  %9 = sub i64 %nCoefficients, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %10)
  %13 = bitcast i8* %12 to { double, double }**
  %14 = load { double, double }*, { double, double }** %13, align 8
  %15 = bitcast { double, double }* %14 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  store i64 0, i64* %cNegative, align 4
  %17 = call %Array* @Microsoft__Quantum__Arrays___0e6bc4a124064ccaaf317888c577a89b_Enumerated__body(%Array* %coefficients)
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %20 = phi i64 [ 0, %exit__2 ], [ %51, %exiting__3 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { i64, double }**
  %24 = load { i64, double }*, { i64, double }** %23, align 8
  %25 = getelementptr inbounds { i64, double }, { i64, double }* %24, i32 0, i32 0
  %idx = load i64, i64* %25, align 4
  %26 = getelementptr inbounds { i64, double }, { i64, double }* %24, i32 0, i32 1
  %coef = load double, double* %26, align 8
  store double %coef, double* %magnitude, align 8
  %27 = fcmp ogt double %tolerance, 1.000000e-09
  br i1 %27, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__3
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idx)
  %29 = bitcast i8* %28 to double*
  %30 = load double, double* %29, align 8
  %31 = fdiv double %30, %tolerance
  %32 = call i64 @Microsoft__Quantum__Math__Round__body(double %31)
  %33 = sitofp i64 %32 to double
  %34 = fmul double %tolerance, %33
  store double %34, double* %magnitude, align 8
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__3
  store double 0.000000e+00, double* %ang, align 8
  %35 = load double, double* %magnitude, align 8
  %36 = fcmp olt double %35, 0.000000e+00
  br i1 %36, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %37 = load i64, i64* %cNegative, align 4
  %38 = add i64 %37, 1
  store i64 %38, i64* %cNegative, align 4
  %39 = fneg double %35
  store double %39, double* %magnitude, align 8
  %40 = call double @Microsoft__Quantum__Math__PI__body()
  store double %40, double* %ang, align 8
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  %41 = load %Array*, %Array** %complexCoefficients, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  %42 = call %Array* @__quantum__rt__array_copy(%Array* %41, i1 false)
  %43 = load double, double* %magnitude, align 8
  %44 = load double, double* %ang, align 8
  %45 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %43, double %44)
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 %idx)
  %47 = bitcast i8* %46 to { double, double }**
  %48 = bitcast { double, double }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 1)
  %49 = load { double, double }*, { double, double }** %47, align 8
  %50 = bitcast { double, double }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 -1)
  store { double, double }* %45, { double, double }** %47, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 1)
  store %Array* %42, %Array** %complexCoefficients, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %51 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %52 = call i1 @Microsoft__Quantum__MachineLearning____QsRef0__CanApplyTwoQubitCase____body(%Array* %coefficients)
  br i1 %52, label %then0__3, label %continue__3

then0__3:                                         ; preds = %exit__3
  %53 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %54 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %55 = bitcast %Tuple* %54 to { %Callable*, %Array* }*
  %56 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %55, i32 0, i32 0
  %57 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %55, i32 0, i32 1
  store %Callable* %53, %Callable** %56, align 8
  store %Array* %coefficients, %Array** %57, align 8
  %58 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__10__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__9__FunctionTable, %Tuple* %54)
  %59 = call { i64, %Callable* }* @Microsoft__Quantum__MachineLearning__StateGenerator__body(i64 2, %Callable* %58)
  %60 = load %Array*, %Array** %complexCoefficients, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %61 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %62 = sub i64 %61, 1
  br label %header__4

continue__3:                                      ; preds = %exit__3
  %nQubits = call i64 @Microsoft__Quantum__MachineLearning__FeatureRegisterSize__body(%Array* %coefficients)
  %63 = load i64, i64* %cNegative, align 4
  %64 = icmp sgt i64 %63, 0
  br i1 %64, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %continue__3
  %65 = sitofp i64 %63 to double
  %66 = sitofp i64 %nCoefficients to double
  %67 = call double @Microsoft__Quantum__Math__Lg__body(double %66)
  %68 = fadd double %67, 1.000000e+00
  %69 = fcmp olt double %65, %68
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %continue__3
  %70 = phi i1 [ %69, %condTrue__1 ], [ %64, %continue__3 ]
  br i1 %70, label %then0__4, label %continue__4

then0__4:                                         ; preds = %condContinue__1
  %71 = load %Array*, %Array** %complexCoefficients, align 8
  %negLocs = call %Array* @Microsoft__Quantum__MachineLearning____QsRef0__NegativeLocations____body(i64 %63, %Array* %71)
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 1)
  %72 = call %Array* @Microsoft__Quantum__MachineLearning____QsRef0__Unnegate____body(%Array* %negLocs, %Array* %71)
  %73 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %72, i64 %nQubits)
  %74 = call i64 @__quantum__rt__array_get_size_1d(%Array* %72)
  %75 = sub i64 %74, 1
  br label %header__7

continue__4:                                      ; preds = %condContinue__1
  %76 = load %Array*, %Array** %complexCoefficients, align 8
  %77 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %76, i64 %nQubits)
  %78 = call { i64, %Callable* }* @Microsoft__Quantum__MachineLearning__StateGenerator__body(i64 %nQubits, %Callable* %77)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %79 = call i64 @__quantum__rt__array_get_size_1d(%Array* %76)
  %80 = sub i64 %79, 1
  br label %header__13

header__4:                                        ; preds = %exiting__4, %then0__3
  %81 = phi i64 [ 0, %then0__3 ], [ %87, %exiting__4 ]
  %82 = icmp sle i64 %81, %62
  br i1 %82, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %81)
  %84 = bitcast i8* %83 to { double, double }**
  %85 = load { double, double }*, { double, double }** %84, align 8
  %86 = bitcast { double, double }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %87 = add i64 %81, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 -1)
  %88 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %88, i32 -1)
  %89 = sub i64 %18, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %90 = phi i64 [ 0, %exit__4 ], [ %96, %exiting__5 ]
  %91 = icmp sle i64 %90, %89
  br i1 %91, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %90)
  %93 = bitcast i8* %92 to { i64, double }**
  %94 = load { i64, double }*, { i64, double }** %93, align 8
  %95 = bitcast { i64, double }* %94 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %96 = add i64 %90, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %58, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %58, i32 -1)
  %97 = sub i64 %61, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %98 = phi i64 [ 0, %exit__5 ], [ %104, %exiting__6 ]
  %99 = icmp sle i64 %98, %97
  br i1 %99, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %98)
  %101 = bitcast i8* %100 to { double, double }**
  %102 = load { double, double }*, { double, double }** %101, align 8
  %103 = bitcast { double, double }* %102 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %104 = add i64 %98, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  ret { i64, %Callable* }* %59

header__7:                                        ; preds = %exiting__7, %then0__4
  %105 = phi i64 [ 0, %then0__4 ], [ %111, %exiting__7 ]
  %106 = icmp sle i64 %105, %75
  br i1 %106, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 %105)
  %108 = bitcast i8* %107 to { double, double }**
  %109 = load { double, double }*, { double, double }** %108, align 8
  %110 = bitcast { double, double }* %109 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %110, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %111 = add i64 %105, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  %112 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %negLocs, i32 1)
  %113 = call i64 @__quantum__rt__array_get_size_1d(%Array* %71)
  %114 = sub i64 %113, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %115 = phi i64 [ 0, %exit__7 ], [ %121, %exiting__8 ]
  %116 = icmp sle i64 %115, %114
  br i1 %116, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %115)
  %118 = bitcast i8* %117 to { double, double }**
  %119 = load { double, double }*, { double, double }** %118, align 8
  %120 = bitcast { double, double }* %119 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %121 = add i64 %115, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 1)
  %122 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Array* }* getelementptr ({ %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %123 = bitcast %Tuple* %122 to { %Callable*, %Array*, %Array* }*
  %124 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %123, i32 0, i32 0
  %125 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %123, i32 0, i32 1
  %126 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %123, i32 0, i32 2
  store %Callable* %112, %Callable** %124, align 8
  store %Array* %negLocs, %Array** %125, align 8
  store %Array* %71, %Array** %126, align 8
  %127 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__11__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__10__FunctionTable, %Tuple* %122)
  %128 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 0)
  %130 = bitcast i8* %129 to %Callable**
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 1)
  %132 = bitcast i8* %131 to %Callable**
  store %Callable* %73, %Callable** %130, align 8
  store %Callable* %127, %Callable** %132, align 8
  %133 = call %Callable* @Microsoft__Quantum__Canon___1809700b885a46aeb0473713f7c55f2f_BoundCA__body(%Array* %128)
  %134 = call { i64, %Callable* }* @Microsoft__Quantum__MachineLearning__StateGenerator__body(i64 %nQubits, %Callable* %133)
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %135 = sub i64 %113, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %136 = phi i64 [ 0, %exit__8 ], [ %142, %exiting__9 ]
  %137 = icmp sle i64 %136, %135
  br i1 %137, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %136)
  %139 = bitcast i8* %138 to { double, double }**
  %140 = load { double, double }*, { double, double }** %139, align 8
  %141 = bitcast { double, double }* %140 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %141, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %142 = add i64 %136, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %71, i32 -1)
  %143 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %143, i32 -1)
  %144 = sub i64 %18, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %145 = phi i64 [ 0, %exit__9 ], [ %151, %exiting__10 ]
  %146 = icmp sle i64 %145, %144
  br i1 %146, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %147 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %145)
  %148 = bitcast i8* %147 to { i64, double }**
  %149 = load { i64, double }*, { i64, double }** %148, align 8
  %150 = bitcast { i64, double }* %149 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %150, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %151 = add i64 %145, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %negLocs, i32 -1)
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %152 = phi i64 [ 0, %exit__10 ], [ %157, %exiting__11 ]
  %153 = icmp sle i64 %152, 1
  br i1 %153, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %152)
  %155 = bitcast i8* %154 to %Callable**
  %156 = load %Callable*, %Callable** %155, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %156, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %157 = add i64 %152, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_reference_count(%Array* %128, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %133, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %133, i32 -1)
  %158 = sub i64 %113, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %159 = phi i64 [ 0, %exit__11 ], [ %165, %exiting__12 ]
  %160 = icmp sle i64 %159, %158
  br i1 %160, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %161 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %159)
  %162 = bitcast i8* %161 to { double, double }**
  %163 = load { double, double }*, { double, double }** %162, align 8
  %164 = bitcast { double, double }* %163 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %164, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %165 = add i64 %159, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  ret { i64, %Callable* }* %134

header__13:                                       ; preds = %exiting__13, %continue__4
  %166 = phi i64 [ 0, %continue__4 ], [ %172, %exiting__13 ]
  %167 = icmp sle i64 %166, %80
  br i1 %167, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %168 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 %166)
  %169 = bitcast i8* %168 to { double, double }**
  %170 = load { double, double }*, { double, double }** %169, align 8
  %171 = bitcast { double, double }* %170 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %171, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %172 = add i64 %166, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  %173 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %173, i32 -1)
  %174 = sub i64 %18, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %175 = phi i64 [ 0, %exit__13 ], [ %181, %exiting__14 ]
  %176 = icmp sle i64 %175, %174
  br i1 %176, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %177 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %175)
  %178 = bitcast i8* %177 to { i64, double }**
  %179 = load { i64, double }*, { i64, double }** %178, align 8
  %180 = bitcast { i64, double }* %179 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %180, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %181 = add i64 %175, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %77, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %77, i32 -1)
  %182 = sub i64 %79, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %183 = phi i64 [ 0, %exit__14 ], [ %189, %exiting__15 ]
  %184 = icmp sle i64 %183, %182
  br i1 %184, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %185 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 %183)
  %186 = bitcast i8* %185 to { double, double }**
  %187 = load { double, double }*, { double, double }** %186, align 8
  %188 = bitcast { double, double }* %187 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %188, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %189 = add i64 %183, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  ret { i64, %Callable* }* %78
}

define internal double @Microsoft__Quantum__MachineLearning____QsRef0__EstimateDerivativeWithParameterShift____body({ i64, %Callable* }* %inputEncoder, { %Array*, %Array*, double }* %model, { %Array*, %Array* }* %parameters, i64 %nQubits, i64 %nMeasurements) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %inputEncoder, i32 0, i32 1
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { i64, %Callable* }* %inputEncoder to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { i64, %Array* }*, i2, i64 }**
  %11 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %10, align 8
  %12 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %11, i32 0, i32 0
  %13 = load { i64, %Array* }*, { i64, %Array* }** %12, align 8
  %14 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %13, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %16 = bitcast { i64, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %17 = bitcast { { i64, %Array* }*, i2, i64 }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 1)
  %21 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 1)
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %parameters, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %parameters, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, %Array* }* %parameters to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { i64, %Callable* }* }* getelementptr ({ %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { %Callable*, { i64, %Callable* }* }*
  %30 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %29, i32 0, i32 1
  store %Callable* %27, %Callable** %30, align 8
  store { i64, %Callable* }* %inputEncoder, { i64, %Callable* }** %31, align 8
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__4__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %28)
  %33 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %34 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %21, i1 false)
  %35 = bitcast %Tuple* %34 to { %Array*, %Array*, double }*
  %36 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %35, i32 0, i32 1
  %37 = call %Array* @Microsoft__Quantum__Canon___db88ab328d524c76b8a01044e6a98e3d_Fst__body(%Array* %23, %Array* %25)
  store %Array* %37, %Array** %36, align 8
  %38 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %35, i32 0, i32 0
  %39 = load %Array*, %Array** %38, align 8
  %40 = call i64 @__quantum__rt__array_get_size_1d(%Array* %39)
  %41 = sub i64 %40, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %42 = phi i64 [ 0, %exit__1 ], [ %53, %exiting__2 ]
  %43 = icmp sle i64 %42, %41
  br i1 %43, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 %42)
  %45 = bitcast i8* %44 to { { i64, %Array* }*, i2, i64 }**
  %46 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %45, align 8
  %47 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %46, i32 0, i32 0
  %48 = load { i64, %Array* }*, { i64, %Array* }** %47, align 8
  %49 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %48, i32 0, i32 1
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 1)
  %51 = bitcast { i64, %Array* }* %48 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 1)
  %52 = bitcast { { i64, %Array* }*, i2, i64 }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %53 = add i64 %42, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 1)
  %54 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array*, %Array*, double }* }* getelementptr ({ %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* null, i32 1) to i64))
  %55 = bitcast %Tuple* %54 to { %Callable*, { %Array*, %Array*, double }* }*
  %56 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %55, i32 0, i32 0
  %57 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %55, i32 0, i32 1
  store %Callable* %33, %Callable** %56, align 8
  store { %Array*, %Array*, double }* %35, { %Array*, %Array*, double }** %57, align 8
  %58 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__5__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__5__FunctionTable, %Tuple* %54)
  %59 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %60 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %21, i1 false)
  %61 = bitcast %Tuple* %60 to { %Array*, %Array*, double }*
  %62 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %61, i32 0, i32 1
  %63 = call %Array* @Microsoft__Quantum__Canon___002990bbfeef4011a0d3a74007551555_Snd__body(%Array* %23, %Array* %25)
  store %Array* %63, %Array** %62, align 8
  %64 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %61, i32 0, i32 0
  %65 = load %Array*, %Array** %64, align 8
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %65)
  %67 = sub i64 %66, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %68 = phi i64 [ 0, %exit__2 ], [ %79, %exiting__3 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %68)
  %71 = bitcast i8* %70 to { { i64, %Array* }*, i2, i64 }**
  %72 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %71, align 8
  %73 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %72, i32 0, i32 0
  %74 = load { i64, %Array* }*, { i64, %Array* }** %73, align 8
  %75 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %74, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 1)
  %77 = bitcast { i64, %Array* }* %74 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 1)
  %78 = bitcast { { i64, %Array* }*, i2, i64 }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %78, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %79 = add i64 %68, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 1)
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array*, %Array*, double }* }* getelementptr ({ %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { %Callable*, { %Array*, %Array*, double }* }*
  %82 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %81, i32 0, i32 0
  %83 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %81, i32 0, i32 1
  store %Callable* %59, %Callable** %82, align 8
  store { %Array*, %Array*, double }* %61, { %Array*, %Array*, double }** %83, align 8
  %84 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__6__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__5__FunctionTable, %Tuple* %80)
  %85 = call double @Microsoft__Quantum__Characterization__EstimateRealOverlapBetweenStates__body(%Callable* %32, %Callable* %58, %Callable* %84, i64 %nQubits, i64 %nMeasurements)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  %86 = sub i64 %5, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %87 = phi i64 [ 0, %exit__3 ], [ %98, %exiting__4 ]
  %88 = icmp sle i64 %87, %86
  br i1 %88, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %87)
  %90 = bitcast i8* %89 to { { i64, %Array* }*, i2, i64 }**
  %91 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %90, align 8
  %92 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %91, i32 0, i32 0
  %93 = load { i64, %Array* }*, { i64, %Array* }** %92, align 8
  %94 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %93, i32 0, i32 1
  %95 = load %Array*, %Array** %94, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %95, i32 -1)
  %96 = bitcast { i64, %Array* }* %93 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %96, i32 -1)
  %97 = bitcast { { i64, %Array* }*, i2, i64 }* %91 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %97, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %98 = add i64 %87, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %58, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %58, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %84, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %84, i32 -1)
  ret double %85
}

define internal double @Microsoft__Quantum__Characterization__EstimateRealOverlapBetweenStates__body(%Callable* %commonPreparation, %Callable* %preparation1, %Callable* %preparation2, i64 %nQubits, i64 %nMeasurements) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %preparation2, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i1, %Callable*, %Callable*, %Callable* }* getelementptr ({ %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, i1, %Callable*, %Callable*, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 1
  %5 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 2
  %6 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 3
  %7 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %2, i32 0, i32 4
  store %Callable* %0, %Callable** %3, align 8
  store i1 false, i1* %4, align 1
  store %Callable* %commonPreparation, %Callable** %5, align 8
  store %Callable* %preparation1, %Callable** %6, align 8
  store %Callable* %preparation2, %Callable** %7, align 8
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__16__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__14__FunctionTable, %Tuple* %1)
  %9 = add i64 %nQubits, 1
  %10 = call %Callable* @Microsoft__Quantum__Characterization____QsRef1__HeadMeasurement____body(i64 %9)
  %11 = add i64 %nQubits, 1
  %12 = call double @Microsoft__Quantum__Characterization__EstimateFrequencyA__body(%Callable* %8, %Callable* %10, i64 %11, i64 %nMeasurements)
  %13 = fmul double 2.000000e+00, %12
  %14 = fsub double %13, 1.000000e+00
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret double %14
}

define internal void @Lifted__PartialApplication__4__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { i64, %Callable* }*, %Array* }*
  %8 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %7, i32 0, i32 1
  store { i64, %Callable* }* %2, { i64, %Callable* }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__4__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { i64, %Callable* }*, %Array* }*
  %8 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %7, i32 0, i32 1
  store { i64, %Callable* }* %2, { i64, %Callable* }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__4__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, %Array* }*
  %10 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %9, i32 0, i32 1
  store { i64, %Callable* }* %7, { i64, %Callable* }** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { i64, %Callable* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { i64, %Callable* }*, %Array* }* %9, { { i64, %Callable* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__4__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, %Array* }*
  %10 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %9, i32 0, i32 1
  store { i64, %Callable* }* %7, { i64, %Callable* }** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { i64, %Callable* }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { i64, %Callable* }*, %Array* }* %9, { { i64, %Callable* }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %0, i32 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____body({ i64, %Callable* }* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, %Array* }, { { i64, %Callable* }*, %Array* }* %0, i32 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____adj({ i64, %Callable* }* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, %Array* }*, { { i64, %Callable* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____ctl(%Array* %3, { { i64, %Callable* }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, %Array* }*, { { i64, %Callable* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0___1b18656b59d5446c8d4e6d6de10b907b_EstimateDerivativeWithParameterShift____ctladj(%Array* %3, { { i64, %Callable* }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__4__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %4, i32 0, i32 1
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__4__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %4, i32 0, i32 1
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__5__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %2 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, %Array* }* getelementptr ({ { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Array*, %Array*, double }*, %Array* }*
  %8 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %7, i32 0, i32 1
  store { %Array*, %Array*, double }* %2, { %Array*, %Array*, double }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %2 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, %Array* }* getelementptr ({ { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Array*, %Array*, double }*, %Array* }*
  %8 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %7, i32 0, i32 1
  store { %Array*, %Array*, double }* %2, { %Array*, %Array*, double }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %6 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %5, i32 0, i32 1
  %7 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, %Array* }* getelementptr ({ { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array*, %Array*, double }*, %Array* }*
  %10 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 1
  store { %Array*, %Array*, double }* %7, { %Array*, %Array*, double }** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array*, %Array*, double }*, %Array* }* }* getelementptr ({ %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array*, %Array*, double }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array*, %Array*, double }*, %Array* }* %9, { { %Array*, %Array*, double }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %6 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %5, i32 0, i32 1
  %7 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, %Array* }* getelementptr ({ { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array*, %Array*, double }*, %Array* }*
  %10 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 1
  store { %Array*, %Array*, double }* %7, { %Array*, %Array*, double }** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array*, %Array*, double }*, %Array* }* }* getelementptr ({ %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array*, %Array*, double }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array*, %Array*, double }*, %Array* }* %9, { { %Array*, %Array*, double }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, %Array*, double }*, %Array* }*
  %1 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 1
  %3 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__body({ %Array*, %Array*, double }* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, %Array*, double }*, %Array* }*
  %1 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 1
  %3 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__adj({ %Array*, %Array*, double }* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array*, %Array*, double }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array*, %Array*, double }*, %Array* }*, { { %Array*, %Array*, double }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__ctl(%Array* %3, { { %Array*, %Array*, double }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array*, %Array*, double }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array*, %Array*, double }*, %Array* }*, { { %Array*, %Array*, double }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__ctladj(%Array* %3, { { %Array*, %Array*, double }*, %Array* }* %4)
  ret void
}

define internal %Array* @Microsoft__Quantum__Canon___db88ab328d524c76b8a01044e6a98e3d_Fst__body(%Array* %0, %Array* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { %Array*, %Array* }*
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %pair, i32 0, i32 1
  store %Array* %0, %Array** %3, align 8
  store %Array* %1, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret %Array* %0
}

define internal void @MemoryManagement__5__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %4 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %3, align 8
  %5 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %4, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { { i64, %Array* }*, i2, i64 }**
  %13 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %12, align 8
  %14 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %13, i32 0, i32 0
  %15 = load { i64, %Array* }*, { i64, %Array* }** %14, align 8
  %16 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %15, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 %count-change)
  %18 = bitcast { i64, %Array* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 %count-change)
  %19 = bitcast { { i64, %Array* }*, i2, i64 }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 %count-change)
  %21 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %4, i32 0, i32 1
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 %count-change)
  %23 = bitcast { %Array*, %Array*, double }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__5__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %4 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %3, align 8
  %5 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %4, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { { i64, %Array* }*, i2, i64 }**
  %13 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %12, align 8
  %14 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %13, i32 0, i32 0
  %15 = load { i64, %Array* }*, { i64, %Array* }** %14, align 8
  %16 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %15, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 %count-change)
  %18 = bitcast { i64, %Array* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 %count-change)
  %19 = bitcast { { i64, %Array* }*, i2, i64 }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %19, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 %count-change)
  %21 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %4, i32 0, i32 1
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 %count-change)
  %23 = bitcast { %Array*, %Array*, double }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__6__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %2 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, %Array* }* getelementptr ({ { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Array*, %Array*, double }*, %Array* }*
  %8 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %7, i32 0, i32 1
  store { %Array*, %Array*, double }* %2, { %Array*, %Array*, double }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %2 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, %Array* }* getelementptr ({ { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Array*, %Array*, double }*, %Array* }*
  %8 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %7, i32 0, i32 1
  store { %Array*, %Array*, double }* %2, { %Array*, %Array*, double }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %6 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %5, i32 0, i32 1
  %7 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, %Array* }* getelementptr ({ { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array*, %Array*, double }*, %Array* }*
  %10 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 1
  store { %Array*, %Array*, double }* %7, { %Array*, %Array*, double }** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array*, %Array*, double }*, %Array* }* }* getelementptr ({ %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array*, %Array*, double }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array*, %Array*, double }*, %Array* }* %9, { { %Array*, %Array*, double }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { %Array*, %Array*, double }* }*
  %6 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %5, i32 0, i32 1
  %7 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array*, double }*, %Array* }* getelementptr ({ { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { %Array*, %Array*, double }*, %Array* }*
  %10 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 1
  store { %Array*, %Array*, double }* %7, { %Array*, %Array*, double }** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { %Array*, %Array*, double }*, %Array* }* }* getelementptr ({ %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { { %Array*, %Array*, double }*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { { %Array*, %Array*, double }*, %Array* }* }, { %Array*, { { %Array*, %Array*, double }*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { { %Array*, %Array*, double }*, %Array* }* %9, { { %Array*, %Array*, double }*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }* }, { %Callable*, { %Array*, %Array*, double }* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Canon___002990bbfeef4011a0d3a74007551555_Snd__body(%Array* %0, %Array* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { %Array*, %Array* }*
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %pair, i32 0, i32 1
  store %Array* %0, %Array** %3, align 8
  store %Array* %1, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret %Array* %1
}

define internal void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__body({ %Array*, %Array*, double }* %model, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %19 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %52, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %20)
  %23 = bitcast i8* %22 to { { i64, %Array* }*, i2, i64 }**
  %gate = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %23, align 8
  %24 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 0
  %25 = load { i64, %Array* }*, { i64, %Array* }** %24, align 8
  %26 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %25, i32 0, i32 1
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = bitcast { i64, %Array* }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  %29 = bitcast { { i64, %Array* }*, i2, i64 }* %gate to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  %30 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 2
  %31 = load i64, i64* %30, align 4
  %32 = load %Array*, %Array** %16, align 8
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = icmp slt i64 %31, %33
  br i1 %34, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %35 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 1
  %pauli = load i2, i2* %35, align 1
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %31)
  %37 = bitcast i8* %36 to double*
  %theta = load double, double* %37, align 8
  %38 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %25, i32 0, i32 0
  %39 = load i64, i64* %38, align 4
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %39)
  %41 = bitcast i8* %40 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %41, align 8
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %input = bitcast %Tuple* %42 to { i2, double, %Qubit* }*
  %43 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %input, i32 0, i32 0
  %44 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %input, i32 0, i32 1
  %45 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %input, i32 0, i32 2
  store i2 %pauli, i2* %43, align 1
  store double %theta, double* %44, align 8
  store %Qubit* %qubit, %Qubit** %45, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 1)
  %46 = call i1 @Microsoft__Quantum__Arrays___cddb1db8090d4b2580514eb678e65fbd_IsEmpty__body(%Array* %27)
  br i1 %46, label %then0__2, label %else__1

then0__2:                                         ; preds = %then0__1
  call void @__quantum__qis__r__body(i2 %pauli, double %theta, %Qubit* %qubit)
  br label %continue__2

else__1:                                          ; preds = %then0__1
  %__controlQubits__ = call %Array* @Microsoft__Quantum__Arrays___93b43ff3c247411b9de017f51b2344c9_Subarray__body(%Array* %27, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { i2, double, %Qubit* }*
  %49 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %48, i32 0, i32 1
  %51 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %48, i32 0, i32 2
  store i2 %pauli, i2* %49, align 1
  store double %theta, double* %50, align 8
  store %Qubit* %qubit, %Qubit** %51, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %48)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then0__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %body__2
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %52 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %53 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %54 = phi i64 [ 0, %exit__2 ], [ %65, %exiting__3 ]
  %55 = icmp sle i64 %54, %53
  br i1 %55, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %54)
  %57 = bitcast i8* %56 to { { i64, %Array* }*, i2, i64 }**
  %58 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %57, align 8
  %59 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %58, i32 0, i32 0
  %60 = load { i64, %Array* }*, { i64, %Array* }** %59, align 8
  %61 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %60, i32 0, i32 1
  %62 = load %Array*, %Array** %61, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %62, i32 -1)
  %63 = bitcast { i64, %Array* }* %60 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i32 -1)
  %64 = bitcast { { i64, %Array* }*, i2, i64 }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %64, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %65 = add i64 %54, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  %66 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__adj({ %Array*, %Array*, double }* %model, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %19 = sub i64 %2, 1
  %20 = insertvalue %Range zeroinitializer, i64 %19, 0
  %21 = insertvalue %Range %20, i64 -1, 1
  %22 = insertvalue %Range %21, i64 0, 2
  %23 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %22, i1 true)
  %24 = call i64 @__quantum__rt__array_get_size_1d(%Array* %23)
  %25 = sub i64 %24, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %26 = phi i64 [ 0, %exit__1 ], [ %58, %exiting__2 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %26)
  %29 = bitcast i8* %28 to { { i64, %Array* }*, i2, i64 }**
  %__qsVar0__gate__ = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %29, align 8
  %30 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %__qsVar0__gate__, i32 0, i32 0
  %31 = load { i64, %Array* }*, { i64, %Array* }** %30, align 8
  %32 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %31, i32 0, i32 1
  %33 = load %Array*, %Array** %32, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  %34 = bitcast { i64, %Array* }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 1)
  %35 = bitcast { { i64, %Array* }*, i2, i64 }* %__qsVar0__gate__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  %36 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %__qsVar0__gate__, i32 0, i32 2
  %37 = load i64, i64* %36, align 4
  %38 = load %Array*, %Array** %16, align 8
  %39 = call i64 @__quantum__rt__array_get_size_1d(%Array* %38)
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %41 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %__qsVar0__gate__, i32 0, i32 1
  %pauli = load i2, i2* %41, align 1
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 %37)
  %43 = bitcast i8* %42 to double*
  %theta = load double, double* %43, align 8
  %44 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %31, i32 0, i32 0
  %45 = load i64, i64* %44, align 4
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %45)
  %47 = bitcast i8* %46 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %47, align 8
  %48 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %__qsVar1__input__ = bitcast %Tuple* %48 to { i2, double, %Qubit* }*
  %49 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %__qsVar1__input__, i32 0, i32 0
  %50 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %__qsVar1__input__, i32 0, i32 1
  %51 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %__qsVar1__input__, i32 0, i32 2
  store i2 %pauli, i2* %49, align 1
  store double %theta, double* %50, align 8
  store %Qubit* %qubit, %Qubit** %51, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 1)
  %52 = call i1 @Microsoft__Quantum__Arrays___cddb1db8090d4b2580514eb678e65fbd_IsEmpty__body(%Array* %33)
  br i1 %52, label %then0__2, label %else__1

then0__2:                                         ; preds = %then0__1
  call void @__quantum__qis__r__adj(i2 %pauli, double %theta, %Qubit* %qubit)
  br label %continue__2

else__1:                                          ; preds = %then0__1
  %__controlQubits__ = call %Array* @Microsoft__Quantum__Arrays___93b43ff3c247411b9de017f51b2344c9_Subarray__body(%Array* %33, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { i2, double, %Qubit* }*
  %55 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %54, i32 0, i32 0
  %56 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %54, i32 0, i32 1
  %57 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %54, i32 0, i32 2
  store i2 %pauli, i2* %55, align 1
  store double %theta, double* %56, align 8
  store %Qubit* %qubit, %Qubit** %57, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %54)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then0__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %48, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %body__2
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %58 = add i64 %26, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %59 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %60 = phi i64 [ 0, %exit__2 ], [ %71, %exiting__3 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %60)
  %63 = bitcast i8* %62 to { { i64, %Array* }*, i2, i64 }**
  %64 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %63, align 8
  %65 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %64, i32 0, i32 0
  %66 = load { i64, %Array* }*, { i64, %Array* }** %65, align 8
  %67 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %66, i32 0, i32 1
  %68 = load %Array*, %Array** %67, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %68, i32 -1)
  %69 = bitcast { i64, %Array* }* %66 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %69, i32 -1)
  %70 = bitcast { { i64, %Array* }*, i2, i64 }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %71 = add i64 %60, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  %72 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__ctl(%Array* %__controlQubits__, { { %Array*, %Array*, double }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 0
  %model = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %1, align 8
  %2 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = sub i64 %4, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %6 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %6)
  %9 = bitcast i8* %8 to { { i64, %Array* }*, i2, i64 }**
  %10 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %9, align 8
  %11 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %10, i32 0, i32 0
  %12 = load { i64, %Array* }*, { i64, %Array* }** %11, align 8
  %13 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %12, i32 0, i32 1
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { i64, %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = bitcast { { i64, %Array* }*, i2, i64 }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %18 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %20 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  %21 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %22 = sub i64 %4, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %61, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %23)
  %26 = bitcast i8* %25 to { { i64, %Array* }*, i2, i64 }**
  %gate = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %26, align 8
  %27 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 0
  %28 = load { i64, %Array* }*, { i64, %Array* }** %27, align 8
  %29 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %28, i32 0, i32 1
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 1)
  %31 = bitcast { i64, %Array* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 1)
  %32 = bitcast { { i64, %Array* }*, i2, i64 }* %gate to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 1)
  %33 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 2
  %34 = load i64, i64* %33, align 4
  %35 = load %Array*, %Array** %18, align 8
  %36 = call i64 @__quantum__rt__array_get_size_1d(%Array* %35)
  %37 = icmp slt i64 %34, %36
  br i1 %37, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %38 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 1
  %pauli = load i2, i2* %38, align 1
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %34)
  %40 = bitcast i8* %39 to double*
  %theta = load double, double* %40, align 8
  %41 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %28, i32 0, i32 0
  %42 = load i64, i64* %41, align 4
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %42)
  %44 = bitcast i8* %43 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %44, align 8
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %input = bitcast %Tuple* %45 to { i2, double, %Qubit* }*
  %46 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %input, i32 0, i32 0
  %47 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %input, i32 0, i32 1
  %48 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %input, i32 0, i32 2
  store i2 %pauli, i2* %46, align 1
  store double %theta, double* %47, align 8
  store %Qubit* %qubit, %Qubit** %48, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 1)
  %49 = call i1 @Microsoft__Quantum__Arrays___cddb1db8090d4b2580514eb678e65fbd_IsEmpty__body(%Array* %30)
  br i1 %49, label %then0__2, label %else__1

then0__2:                                         ; preds = %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %50 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %51 = bitcast %Tuple* %50 to { i2, double, %Qubit* }*
  %52 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %51, i32 0, i32 0
  %53 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %51, i32 0, i32 1
  %54 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %51, i32 0, i32 2
  store i2 %pauli, i2* %52, align 1
  store double %theta, double* %53, align 8
  store %Qubit* %qubit, %Qubit** %54, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %51)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %then0__1
  %55 = call %Array* @Microsoft__Quantum__Arrays___93b43ff3c247411b9de017f51b2344c9_Subarray__body(%Array* %30, %Array* %qubits)
  %__controlQubits__2 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %55)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__2, i32 1)
  %56 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %57 = bitcast %Tuple* %56 to { i2, double, %Qubit* }*
  %58 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %57, i32 0, i32 0
  %59 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %57, i32 0, i32 1
  %60 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %57, i32 0, i32 2
  store i2 %pauli, i2* %58, align 1
  store double %theta, double* %59, align 8
  store %Qubit* %qubit, %Qubit** %60, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__2, { i2, double, %Qubit* }* %57)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then0__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %body__2
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %61 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %62 = sub i64 %4, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %63 = phi i64 [ 0, %exit__2 ], [ %74, %exiting__3 ]
  %64 = icmp sle i64 %63, %62
  br i1 %64, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %63)
  %66 = bitcast i8* %65 to { { i64, %Array* }*, i2, i64 }**
  %67 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %66, align 8
  %68 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %67, i32 0, i32 0
  %69 = load { i64, %Array* }*, { i64, %Array* }** %68, align 8
  %70 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %69, i32 0, i32 1
  %71 = load %Array*, %Array** %70, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %71, i32 -1)
  %72 = bitcast { i64, %Array* }* %69 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %72, i32 -1)
  %73 = bitcast { { i64, %Array* }*, i2, i64 }* %67 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %74 = add i64 %63, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  %75 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %75, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__ctladj(%Array* %__controlQubits__, { { %Array*, %Array*, double }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 0
  %model = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %1, align 8
  %2 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = sub i64 %4, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %6 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %6)
  %9 = bitcast i8* %8 to { { i64, %Array* }*, i2, i64 }**
  %10 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %9, align 8
  %11 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %10, i32 0, i32 0
  %12 = load { i64, %Array* }*, { i64, %Array* }** %11, align 8
  %13 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %12, i32 0, i32 1
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { i64, %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = bitcast { { i64, %Array* }*, i2, i64 }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %18 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %20 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  %21 = getelementptr inbounds { { %Array*, %Array*, double }*, %Array* }, { { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %22 = sub i64 %4, 1
  %23 = insertvalue %Range zeroinitializer, i64 %22, 0
  %24 = insertvalue %Range %23, i64 -1, 1
  %25 = insertvalue %Range %24, i64 0, 2
  %26 = call %Array* @__quantum__rt__array_slice_1d(%Array* %3, %Range %25, i1 true)
  %27 = call i64 @__quantum__rt__array_get_size_1d(%Array* %26)
  %28 = sub i64 %27, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %29 = phi i64 [ 0, %exit__1 ], [ %67, %exiting__2 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %29)
  %32 = bitcast i8* %31 to { { i64, %Array* }*, i2, i64 }**
  %__qsVar0__gate__ = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %32, align 8
  %33 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %__qsVar0__gate__, i32 0, i32 0
  %34 = load { i64, %Array* }*, { i64, %Array* }** %33, align 8
  %35 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %34, i32 0, i32 1
  %36 = load %Array*, %Array** %35, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %36, i32 1)
  %37 = bitcast { i64, %Array* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i32 1)
  %38 = bitcast { { i64, %Array* }*, i2, i64 }* %__qsVar0__gate__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %38, i32 1)
  %39 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %__qsVar0__gate__, i32 0, i32 2
  %40 = load i64, i64* %39, align 4
  %41 = load %Array*, %Array** %18, align 8
  %42 = call i64 @__quantum__rt__array_get_size_1d(%Array* %41)
  %43 = icmp slt i64 %40, %42
  br i1 %43, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %44 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %__qsVar0__gate__, i32 0, i32 1
  %pauli = load i2, i2* %44, align 1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %40)
  %46 = bitcast i8* %45 to double*
  %theta = load double, double* %46, align 8
  %47 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %34, i32 0, i32 0
  %48 = load i64, i64* %47, align 4
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %48)
  %50 = bitcast i8* %49 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %50, align 8
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %__qsVar1__input__ = bitcast %Tuple* %51 to { i2, double, %Qubit* }*
  %52 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %__qsVar1__input__, i32 0, i32 0
  %53 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %__qsVar1__input__, i32 0, i32 1
  %54 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %__qsVar1__input__, i32 0, i32 2
  store i2 %pauli, i2* %52, align 1
  store double %theta, double* %53, align 8
  store %Qubit* %qubit, %Qubit** %54, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 1)
  %55 = call i1 @Microsoft__Quantum__Arrays___cddb1db8090d4b2580514eb678e65fbd_IsEmpty__body(%Array* %36)
  br i1 %55, label %then0__2, label %else__1

then0__2:                                         ; preds = %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %56 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %57 = bitcast %Tuple* %56 to { i2, double, %Qubit* }*
  %58 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %57, i32 0, i32 0
  %59 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %57, i32 0, i32 1
  %60 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %57, i32 0, i32 2
  store i2 %pauli, i2* %58, align 1
  store double %theta, double* %59, align 8
  store %Qubit* %qubit, %Qubit** %60, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %57)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %then0__1
  %61 = call %Array* @Microsoft__Quantum__Arrays___93b43ff3c247411b9de017f51b2344c9_Subarray__body(%Array* %36, %Array* %qubits)
  %__controlQubits__2 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %61)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__2, i32 1)
  %62 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %63 = bitcast %Tuple* %62 to { i2, double, %Qubit* }*
  %64 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %63, i32 0, i32 0
  %65 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %63, i32 0, i32 1
  %66 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %63, i32 0, i32 2
  store i2 %pauli, i2* %64, align 1
  store double %theta, double* %65, align 8
  store %Qubit* %qubit, %Qubit** %66, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__2, { i2, double, %Qubit* }* %63)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then0__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %body__2
  call void @__quantum__rt__array_update_alias_count(%Array* %36, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %38, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %67 = add i64 %29, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %68 = sub i64 %4, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %69 = phi i64 [ 0, %exit__2 ], [ %80, %exiting__3 ]
  %70 = icmp sle i64 %69, %68
  br i1 %70, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %69)
  %72 = bitcast i8* %71 to { { i64, %Array* }*, i2, i64 }**
  %73 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %72, align 8
  %74 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %73, i32 0, i32 0
  %75 = load { i64, %Array* }*, { i64, %Array* }** %74, align 8
  %76 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %75, i32 0, i32 1
  %77 = load %Array*, %Array** %76, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %77, i32 -1)
  %78 = bitcast { i64, %Array* }* %75 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 -1)
  %79 = bitcast { { i64, %Array* }*, i2, i64 }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %80 = add i64 %69, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  %81 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  ret void
}

define internal double @Microsoft__Quantum__MachineLearning____QsRef0__MisclassificationRate____body(%Array* %probabilities, %Array* %labels, double %bias) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %labels, i32 1)
  %proposedLabels = call %Array* @Microsoft__Quantum__MachineLearning__InferredLabels__body(double %bias, %Array* %probabilities)
  call void @__quantum__rt__array_update_alias_count(%Array* %proposedLabels, i32 1)
  %0 = call i64 @Microsoft__Quantum__MachineLearning__NMisclassifications__body(%Array* %proposedLabels, %Array* %labels)
  %1 = sitofp i64 %0 to double
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %probabilities)
  %3 = sitofp i64 %2 to double
  %4 = fdiv double %1, %3
  call void @__quantum__rt__array_update_alias_count(%Array* %probabilities, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %labels, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %proposedLabels, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %proposedLabels, i32 -1)
  ret double %4
}

define internal i64 @Microsoft__Quantum__MachineLearning__NMisclassifications__body(%Array* %proposed, %Array* %actual) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %proposed, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %actual, i32 1)
  %0 = call %Array* @Microsoft__Quantum__MachineLearning__Misclassifications__body(%Array* %proposed, %Array* %actual)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %proposed, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %actual, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret i64 %1
}

define internal %Array* @Microsoft__Quantum__MachineLearning____QsRef0__NegativeLocations____body(i64 %cNegative, %Array* %coefficients) {
entry:
  %negLocs = alloca %Array*, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  store %Array* %9, %Array** %negLocs, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = call %Array* @Microsoft__Quantum__Arrays___0545950abc7941f6b22adfd20ed15024_Enumerated__body(%Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %32, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %13)
  %16 = bitcast i8* %15 to { i64, { double, double }* }**
  %17 = load { i64, { double, double }* }*, { i64, { double, double }* }** %16, align 8
  %18 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %17, i32 0, i32 0
  %idx = load i64, i64* %18, align 4
  %19 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %17, i32 0, i32 1
  %coefficient = load { double, double }*, { double, double }** %19, align 8
  %20 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  %21 = getelementptr inbounds { double, double }, { double, double }* %coefficient, i32 0, i32 1
  %22 = load double, double* %21, align 8
  %23 = call double @Microsoft__Quantum__Math__PI__body()
  %24 = fsub double %22, %23
  %25 = call double @Microsoft__Quantum__Math__AbsD__body(double %24)
  %26 = fcmp olt double %25, 1.000000e-09
  br i1 %26, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %27 = load %Array*, %Array** %negLocs, align 8
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 0)
  %30 = bitcast i8* %29 to i64*
  store i64 %idx, i64* %30, align 4
  %31 = call %Array* @__quantum__rt__array_concatenate(%Array* %27, %Array* %28)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  store %Array* %31, %Array** %negLocs, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %32 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %33 = load %Array*, %Array** %negLocs, align 8
  %34 = call i64 @__quantum__rt__array_get_size_1d(%Array* %33)
  %35 = icmp sgt i64 %34, %cNegative
  br i1 %35, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  %36 = sub i64 %cNegative, 1
  %37 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %36, 2
  %38 = call %Array* @__quantum__rt__array_slice_1d(%Array* %33, %Range %37, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 -1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__2
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %39 = phi %Array* [ %38, %condTrue__1 ], [ %33, %condFalse__1 ]
  %40 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %condContinue__1
  %41 = phi i64 [ 0, %condContinue__1 ], [ %47, %exiting__3 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %41)
  %44 = bitcast i8* %43 to { double, double }**
  %45 = load { double, double }*, { double, double }** %44, align 8
  %46 = bitcast { double, double }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %46, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %47 = add i64 %41, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  %48 = sub i64 %11, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %49 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %49)
  %52 = bitcast i8* %51 to { i64, { double, double }* }**
  %53 = load { i64, { double, double }* }*, { i64, { double, double }* }** %52, align 8
  %54 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %53, i32 0, i32 1
  %55 = load { double, double }*, { double, double }** %54, align 8
  %56 = bitcast { double, double }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  %57 = bitcast { i64, { double, double }* }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %49, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 -1)
  ret %Array* %39
}

define internal %Array* @Microsoft__Quantum__Arrays___0545950abc7941f6b22adfd20ed15024_Enumerated__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___b8c470817e3c4d54a387b72f70fe0572___QsRef1__Identity____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %10 = call %Array* @Microsoft__Quantum__Arrays___18b22a2872974a209223a31f4af592ba_MappedByIndex__body(%Callable* %9, %Array* %array)
  %11 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %12)
  %15 = bitcast i8* %14 to { double, double }**
  %16 = load { double, double }*, { double, double }** %15, align 8
  %17 = bitcast { double, double }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  ret %Array* %10
}

define internal double @Microsoft__Quantum__Math__PI__body() {
entry:
  ret double 0x400921FB54442D18
}

declare %Array* @__quantum__rt__array_slice_1d(%Array*, %Range, i1)

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____body(%Callable* %encoder, { %Array*, %Array*, double }* %model, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %encoder, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %encoder, i32 1)
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %19 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %target)
  %20 = bitcast { %Array* }* %19 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %encoder, %Tuple* %20, %Tuple* null)
  call void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__body({ %Array*, %Array*, double }* %model, %Array* %target)
  %21 = getelementptr inbounds { %Array* }, { %Array* }* %19, i32 0, i32 0
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %encoder, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %encoder, i32 -1)
  %23 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %35, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %24)
  %27 = bitcast i8* %26 to { { i64, %Array* }*, i2, i64 }**
  %28 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %27, align 8
  %29 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %28, i32 0, i32 0
  %30 = load { i64, %Array* }*, { i64, %Array* }** %29, align 8
  %31 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %30, i32 0, i32 1
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = bitcast { i64, %Array* }* %30 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %33, i32 -1)
  %34 = bitcast { { i64, %Array* }*, i2, i64 }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %35 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____adj(%Callable* %encoder, { %Array*, %Array*, double }* %model, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %encoder, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %encoder, i32 1)
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  call void @Microsoft__Quantum__MachineLearning__ApplySequentialClassifier__adj({ %Array*, %Array*, double }* %model, %Array* %target)
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %encoder, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %target)
  %21 = bitcast { %Array* }* %20 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %21, %Tuple* null)
  %22 = getelementptr inbounds { %Array* }, { %Array* }* %20, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %encoder, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %encoder, i32 -1)
  %24 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %25 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %25)
  %28 = bitcast i8* %27 to { { i64, %Array* }*, i2, i64 }**
  %29 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %28, align 8
  %30 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %29, i32 0, i32 0
  %31 = load { i64, %Array* }*, { i64, %Array* }** %30, align 8
  %32 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %31, i32 0, i32 1
  %33 = load %Array*, %Array** %32, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  %34 = bitcast { i64, %Array* }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 -1)
  %35 = bitcast { { i64, %Array* }*, i2, i64 }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  ret void
}

define internal i1 @Microsoft__Quantum__Random__DrawRandomBool__body(double %successProbability) {
entry:
  %0 = call double @__quantum__qis__drawrandomdouble__body(double 0.000000e+00, double 1.000000e+00)
  %1 = fcmp ole double %0, %successProbability
  ret i1 %1
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____body(%Array* %negLocs, %Array* %coefficients, { %Array* }* %reg) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %negLocs)
  %13 = sub i64 %12, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %negLocs, i64 %14)
  %17 = bitcast i8* %16 to i64*
  %idxNegative = load i64, i64* %17, align 4
  call void @Microsoft__Quantum__Arithmetic__ReflectAboutInteger__body(i64 %idxNegative, { %Array* }* %reg)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 -1)
  %19 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %20 = phi i64 [ 0, %exit__2 ], [ %26, %exiting__3 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %26 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arithmetic__ReflectAboutInteger__body(i64 %index, { %Array* }* %reg) {
entry:
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %3)
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__Not__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %7 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %index, i64 %6)
  %8 = call %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %5, %Array* %7)
  %9 = call %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %8, %Array* %1)
  call void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__body(%Callable* %4, %Array* %9)
  %__controlQubits__ = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %qubit = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %11 = call %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %10)
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__Not__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %13 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %index, i64 %6)
  %14 = call %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %12, %Array* %13)
  %15 = call %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %14, %Array* %1)
  call void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__adj(%Callable* %11, %Array* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %9)
  %17 = sub i64 %16, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %18 = phi i64 [ 0, %entry ], [ %24, %exiting__1 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %18)
  %21 = bitcast i8* %20 to { i1, %Qubit* }**
  %22 = load { i1, %Qubit* }*, { i1, %Qubit* }** %21, align 8
  %23 = bitcast { i1, %Qubit* }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %24 = add i64 %18, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %15)
  %26 = sub i64 %25, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %27 = phi i64 [ 0, %exit__1 ], [ %33, %exiting__2 ]
  %28 = icmp sle i64 %27, %26
  br i1 %28, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %27)
  %30 = bitcast i8* %29 to { i1, %Qubit* }**
  %31 = load { i1, %Qubit* }*, { i1, %Qubit* }** %30, align 8
  %32 = bitcast { i1, %Qubit* }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %27, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____adj(%Array* %negLocs, %Array* %coefficients, { %Array* }* %reg) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %negLocs)
  %13 = sub i64 %12, 1
  %14 = insertvalue %Range zeroinitializer, i64 %13, 0
  %15 = insertvalue %Range %14, i64 -1, 1
  %16 = insertvalue %Range %15, i64 0, 2
  %17 = call %Array* @__quantum__rt__array_slice_1d(%Array* %negLocs, %Range %16, i1 true)
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to i64*
  %__qsVar0__idxNegative__ = load i64, i64* %23, align 4
  call void @Microsoft__Quantum__Arithmetic__ReflectAboutInteger__adj(i64 %__qsVar0__idxNegative__, { %Array* }* %reg)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 -1)
  %25 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %26 = phi i64 [ 0, %exit__2 ], [ %32, %exiting__3 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %26)
  %29 = bitcast i8* %28 to { double, double }**
  %30 = load { double, double }*, { double, double }** %29, align 8
  %31 = bitcast { double, double }* %30 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %32 = add i64 %26, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arithmetic__ReflectAboutInteger__adj(i64 %index, { %Array* }* %reg) {
entry:
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %4 = call %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %3)
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__Not__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %7 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %index, i64 %6)
  %8 = call %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %5, %Array* %7)
  %9 = call %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %8, %Array* %1)
  call void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__body(%Callable* %4, %Array* %9)
  %__controlQubits__ = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %qubit = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %11 = call %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %10)
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__Not__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %13 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %index, i64 %6)
  %14 = call %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %12, %Array* %13)
  %15 = call %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %14, %Array* %1)
  call void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__adj(%Callable* %11, %Array* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %9)
  %17 = sub i64 %16, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %18 = phi i64 [ 0, %entry ], [ %24, %exiting__1 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %18)
  %21 = bitcast i8* %20 to { i1, %Qubit* }**
  %22 = load { i1, %Qubit* }*, { i1, %Qubit* }** %21, align 8
  %23 = bitcast { i1, %Qubit* }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %24 = add i64 %18, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %15)
  %26 = sub i64 %25, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %27 = phi i64 [ 0, %exit__1 ], [ %33, %exiting__2 ]
  %28 = icmp sle i64 %27, %26
  br i1 %28, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %27)
  %30 = bitcast i8* %29 to { i1, %Qubit* }**
  %31 = load { i1, %Qubit* }*, { i1, %Qubit* }** %30, align 8
  %32 = bitcast { i1, %Qubit* }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %27, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____ctl(%Array* %__controlQubits__, { %Array*, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %negLocs = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8, align 8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %12 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %reg = load { %Array* }*, { %Array* }** %12, align 8
  %13 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %negLocs)
  %17 = sub i64 %16, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %18 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %negLocs, i64 %18)
  %21 = bitcast i8* %20 to i64*
  %idxNegative = load i64, i64* %21, align 4
  %22 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Array* }* }* getelementptr ({ i64, { %Array* }* }, { i64, { %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { i64, { %Array* }* }*
  %25 = getelementptr inbounds { i64, { %Array* }* }, { i64, { %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { i64, { %Array* }* }, { i64, { %Array* }* }* %24, i32 0, i32 1
  store i64 %idxNegative, i64* %25, align 4
  store { %Array* }* %reg, { %Array* }** %26, align 8
  call void @Microsoft__Quantum__Arithmetic__ReflectAboutInteger__ctl(%Array* %__controlQubits__, { i64, { %Array* }* }* %24)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %18, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 -1)
  %28 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %36 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %36, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arithmetic__ReflectAboutInteger__ctl(%Array* %__controlQubits__, { i64, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, { %Array* }* }, { i64, { %Array* }* }* %0, i32 0, i32 0
  %index = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, { %Array* }* }, { i64, { %Array* }* }* %0, i32 0, i32 1
  %reg = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %7 = call %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %6)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__Not__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %10 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %index, i64 %9)
  %11 = call %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %8, %Array* %10)
  %12 = call %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %11, %Array* %4)
  call void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__body(%Callable* %7, %Array* %12)
  %13 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %4)
  %__controlQubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %13)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 1)
  %qubit = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %4)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__1, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %15 = call %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %14)
  %16 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__Not__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %17 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %index, i64 %9)
  %18 = call %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %16, %Array* %17)
  %19 = call %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %18, %Array* %4)
  call void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__adj(%Callable* %15, %Array* %19)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  %20 = call i64 @__quantum__rt__array_get_size_1d(%Array* %12)
  %21 = sub i64 %20, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %22 = phi i64 [ 0, %entry ], [ %28, %exiting__1 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %22)
  %25 = bitcast i8* %24 to { i1, %Qubit* }**
  %26 = load { i1, %Qubit* }*, { i1, %Qubit* }** %25, align 8
  %27 = bitcast { i1, %Qubit* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %28 = add i64 %22, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %19)
  %30 = sub i64 %29, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %31 = phi i64 [ 0, %exit__1 ], [ %37, %exiting__2 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %31)
  %34 = bitcast i8* %33 to { i1, %Qubit* }**
  %35 = load { i1, %Qubit* }*, { i1, %Qubit* }** %34, align 8
  %36 = bitcast { i1, %Qubit* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %37 = add i64 %31, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____ctladj(%Array* %__controlQubits__, { %Array*, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %negLocs = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8, align 8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %12 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %reg = load { %Array* }*, { %Array* }** %12, align 8
  %13 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %negLocs)
  %17 = sub i64 %16, 1
  %18 = insertvalue %Range zeroinitializer, i64 %17, 0
  %19 = insertvalue %Range %18, i64 -1, 1
  %20 = insertvalue %Range %19, i64 0, 2
  %21 = call %Array* @__quantum__rt__array_slice_1d(%Array* %negLocs, %Range %20, i1 true)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %21)
  %23 = sub i64 %22, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %33, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %24)
  %27 = bitcast i8* %26 to i64*
  %__qsVar0__idxNegative__ = load i64, i64* %27, align 4
  %28 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Array* }* }* getelementptr ({ i64, { %Array* }* }, { i64, { %Array* }* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64, { %Array* }* }*
  %31 = getelementptr inbounds { i64, { %Array* }* }, { i64, { %Array* }* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { i64, { %Array* }* }, { i64, { %Array* }* }* %30, i32 0, i32 1
  store i64 %__qsVar0__idxNegative__, i64* %31, align 4
  store { %Array* }* %reg, { %Array* }** %32, align 8
  call void @Microsoft__Quantum__Arithmetic__ReflectAboutInteger__ctladj(%Array* %__controlQubits__, { i64, { %Array* }* }* %30)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 -1)
  %34 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %35)
  %38 = bitcast i8* %37 to { double, double }**
  %39 = load { double, double }*, { double, double }** %38, align 8
  %40 = bitcast { double, double }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %42 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arithmetic__ReflectAboutInteger__ctladj(%Array* %__controlQubits__, { i64, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, { %Array* }* }, { i64, { %Array* }* }* %0, i32 0, i32 0
  %index = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, { %Array* }* }, { i64, { %Array* }* }* %0, i32 0, i32 1
  %reg = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %reg, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %reg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %7 = call %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %6)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__Not__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %10 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %index, i64 %9)
  %11 = call %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %8, %Array* %10)
  %12 = call %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %11, %Array* %4)
  call void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__body(%Callable* %7, %Array* %12)
  %13 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %4)
  %__controlQubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %13)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 1)
  %qubit = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %4)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__1, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %15 = call %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %14)
  %16 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Logical__Not__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %17 = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %index, i64 %9)
  %18 = call %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %16, %Array* %17)
  %19 = call %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %18, %Array* %4)
  call void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__adj(%Callable* %15, %Array* %19)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  %20 = call i64 @__quantum__rt__array_get_size_1d(%Array* %12)
  %21 = sub i64 %20, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %22 = phi i64 [ 0, %entry ], [ %28, %exiting__1 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %22)
  %25 = bitcast i8* %24 to { i1, %Qubit* }**
  %26 = load { i1, %Qubit* }*, { i1, %Qubit* }** %25, align 8
  %27 = bitcast { i1, %Qubit* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %28 = add i64 %22, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %19)
  %30 = sub i64 %29, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %31 = phi i64 [ 0, %exit__1 ], [ %37, %exiting__2 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %31)
  %34 = bitcast i8* %33 to { i1, %Qubit* }**
  %35 = load { i1, %Qubit* }*, { i1, %Qubit* }** %34, align 8
  %36 = bitcast { i1, %Qubit* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %37 = add i64 %31, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___9021424cc3274213b24cdef7f22a1dcc_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %5 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %4, align 8
  %6 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %7 = load { %Array*, i64 }*, { %Array*, i64 }** %6, align 8
  %8 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %7, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = bitcast { %Array*, i64 }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %11 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %12 = load { i64, %Callable* }*, { i64, %Callable* }** %11, align 8
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 1
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %14, i32 1)
  %15 = bitcast { i64, %Callable* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %18 = icmp eq i64 %length, 0
  br i1 %18, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %20 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %22 = bitcast i8* %21 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %23 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %22, align 8
  %24 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %23 to %Tuple*
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }* }* getelementptr ({ { %Array*, i64 }* }, { { %Array*, i64 }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %24, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Array*, i64 }* }*
  %27 = getelementptr inbounds { { %Array*, i64 }* }, { { %Array*, i64 }* }* %26, i32 0, i32 0
  %first = load { %Array*, i64 }*, { %Array*, i64 }** %27, align 8
  %28 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %first, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 1)
  %30 = bitcast { %Array*, i64 }* %first to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i32 1)
  %31 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %32 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %33 = phi i64 [ 0, %then0__1 ], [ %49, %exiting__2 ]
  %34 = icmp sle i64 %33, %20
  br i1 %34, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %33)
  %36 = bitcast i8* %35 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %37 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %36, align 8
  %38 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %37, i32 0, i32 0
  %39 = load { %Array*, i64 }*, { %Array*, i64 }** %38, align 8
  %40 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  %42 = bitcast { %Array*, i64 }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  %43 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %37, i32 0, i32 1
  %44 = load { i64, %Callable* }*, { i64, %Callable* }** %43, align 8
  %45 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %44, i32 0, i32 1
  %46 = load %Callable*, %Callable** %45, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %46, i32 -1)
  %47 = bitcast { i64, %Callable* }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  %48 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %37 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %49 = add i64 %33, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %19

header__3:                                        ; preds = %exiting__3, %continue__1
  %50 = phi i64 [ 0, %continue__1 ], [ %55, %exiting__3 ]
  %51 = icmp sle i64 %50, %32
  br i1 %51, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, i64 }**
  store { %Array*, i64 }* %first, { %Array*, i64 }** %53, align 8
  %54 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %55 = add i64 %50, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %31, %Array** %retval, align 8
  %56 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %57 = phi i64 [ 0, %exit__3 ], [ %65, %exiting__4 ]
  %58 = icmp sle i64 %57, %56
  br i1 %58, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %57)
  %60 = bitcast i8* %59 to { %Array*, i64 }**
  %61 = load { %Array*, i64 }*, { %Array*, i64 }** %60, align 8
  %62 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %61, i32 0, i32 0
  %63 = load %Array*, %Array** %62, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %63, i32 1)
  %64 = bitcast { %Array*, i64 }* %61 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %64, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %65 = add i64 %57, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  %66 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %87, %exiting__5 ]
  %67 = icmp sle i64 %idx, %66
  br i1 %67, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %68 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %68, i32 -1)
  %69 = call %Array* @__quantum__rt__array_copy(%Array* %68, i1 false)
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %71 = bitcast i8* %70 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %72 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %71, align 8
  %73 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %72 to %Tuple*
  %74 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }* }* getelementptr ({ { %Array*, i64 }* }, { { %Array*, i64 }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %73, %Tuple* %74)
  %75 = bitcast %Tuple* %74 to { { %Array*, i64 }* }*
  %76 = getelementptr inbounds { { %Array*, i64 }* }, { { %Array*, i64 }* }* %75, i32 0, i32 0
  %77 = load { %Array*, i64 }*, { %Array*, i64 }** %76, align 8
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %idx)
  %79 = bitcast i8* %78 to { %Array*, i64 }**
  %80 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %77, i32 0, i32 0
  %81 = load %Array*, %Array** %80, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 1)
  %82 = bitcast { %Array*, i64 }* %77 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %82, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %82, i32 1)
  %83 = load { %Array*, i64 }*, { %Array*, i64 }** %79, align 8
  %84 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %83, i32 0, i32 0
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %85, i32 -1)
  %86 = bitcast { %Array*, i64 }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %85, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %86, i32 -1)
  store { %Array*, i64 }* %77, { %Array*, i64 }** %79, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 1)
  store %Array* %69, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %82, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %74, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %87 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %88 = load %Array*, %Array** %retval, align 8
  %89 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %90 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %91 = phi i64 [ 0, %exit__5 ], [ %107, %exiting__6 ]
  %92 = icmp sle i64 %91, %90
  br i1 %92, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %91)
  %94 = bitcast i8* %93 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %95 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %94, align 8
  %96 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %95, i32 0, i32 0
  %97 = load { %Array*, i64 }*, { %Array*, i64 }** %96, align 8
  %98 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %97, i32 0, i32 0
  %99 = load %Array*, %Array** %98, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %99, i32 -1)
  %100 = bitcast { %Array*, i64 }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %100, i32 -1)
  %101 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %95, i32 0, i32 1
  %102 = load { i64, %Callable* }*, { i64, %Callable* }** %101, align 8
  %103 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %102, i32 0, i32 1
  %104 = load %Callable*, %Callable** %103, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %104, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %104, i32 -1)
  %105 = bitcast { i64, %Callable* }* %102 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %105, i32 -1)
  %106 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %95 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %106, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %107 = add i64 %91, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %89, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i32 -1)
  %108 = call i64 @__quantum__rt__array_get_size_1d(%Array* %88)
  %109 = sub i64 %108, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %110 = phi i64 [ 0, %exit__6 ], [ %118, %exiting__7 ]
  %111 = icmp sle i64 %110, %109
  br i1 %111, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 %110)
  %113 = bitcast i8* %112 to { %Array*, i64 }**
  %114 = load { %Array*, i64 }*, { %Array*, i64 }** %113, align 8
  %115 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %114, i32 0, i32 0
  %116 = load %Array*, %Array** %115, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 -1)
  %117 = bitcast { %Array*, i64 }* %114 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %118 = add i64 %110, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %89, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  ret %Array* %88
}

define internal void @Microsoft__Quantum__Canon___1f5badf5e91544c8bbff3b59164a3bb0_Fst__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, i64 }*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %3 = load { %Array*, i64 }*, { %Array*, i64 }** %1, align 8
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %5 = call { %Array*, i64 }* @Microsoft__Quantum__Canon___1f5badf5e91544c8bbff3b59164a3bb0_Fst__body({ %Array*, i64 }* %3, { i64, %Callable* }* %4)
  %6 = bitcast %Tuple* %result-tuple to { { %Array*, i64 }* }*
  %7 = getelementptr inbounds { { %Array*, i64 }* }, { { %Array*, i64 }* }* %6, i32 0, i32 0
  store { %Array*, i64 }* %5, { %Array*, i64 }** %7, align 8
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___01f2a4172bae4fb9a526206ae21b7f8f_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %5 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %4, align 8
  %6 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %7 = load { %Array*, i64 }*, { %Array*, i64 }** %6, align 8
  %8 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %7, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = bitcast { %Array*, i64 }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %11 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %12 = load { i64, %Callable* }*, { i64, %Callable* }** %11, align 8
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 1
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %14, i32 1)
  %15 = bitcast { i64, %Callable* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %18 = icmp eq i64 %length, 0
  br i1 %18, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %20 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %22 = bitcast i8* %21 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %23 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %22, align 8
  %24 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %23 to %Tuple*
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }* }* getelementptr ({ { i64, %Callable* }* }, { { i64, %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %24, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { i64, %Callable* }* }*
  %27 = getelementptr inbounds { { i64, %Callable* }* }, { { i64, %Callable* }* }* %26, i32 0, i32 0
  %first = load { i64, %Callable* }*, { i64, %Callable* }** %27, align 8
  %28 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %first, i32 0, i32 1
  %29 = load %Callable*, %Callable** %28, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %29, i32 1)
  %30 = bitcast { i64, %Callable* }* %first to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i32 1)
  %31 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %32 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %33 = phi i64 [ 0, %then0__1 ], [ %49, %exiting__2 ]
  %34 = icmp sle i64 %33, %20
  br i1 %34, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %33)
  %36 = bitcast i8* %35 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %37 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %36, align 8
  %38 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %37, i32 0, i32 0
  %39 = load { %Array*, i64 }*, { %Array*, i64 }** %38, align 8
  %40 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  %42 = bitcast { %Array*, i64 }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  %43 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %37, i32 0, i32 1
  %44 = load { i64, %Callable* }*, { i64, %Callable* }** %43, align 8
  %45 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %44, i32 0, i32 1
  %46 = load %Callable*, %Callable** %45, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %46, i32 -1)
  %47 = bitcast { i64, %Callable* }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  %48 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %37 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %49 = add i64 %33, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %19

header__3:                                        ; preds = %exiting__3, %continue__1
  %50 = phi i64 [ 0, %continue__1 ], [ %55, %exiting__3 ]
  %51 = icmp sle i64 %50, %32
  br i1 %51, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %50)
  %53 = bitcast i8* %52 to { i64, %Callable* }**
  store { i64, %Callable* }* %first, { i64, %Callable* }** %53, align 8
  %54 = load %Callable*, %Callable** %28, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %54, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %54, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %55 = add i64 %50, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %31, %Array** %retval, align 8
  %56 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %57 = phi i64 [ 0, %exit__3 ], [ %65, %exiting__4 ]
  %58 = icmp sle i64 %57, %56
  br i1 %58, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %57)
  %60 = bitcast i8* %59 to { i64, %Callable* }**
  %61 = load { i64, %Callable* }*, { i64, %Callable* }** %60, align 8
  %62 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %61, i32 0, i32 1
  %63 = load %Callable*, %Callable** %62, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %63, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %63, i32 1)
  %64 = bitcast { i64, %Callable* }* %61 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %64, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %65 = add i64 %57, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  %66 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %87, %exiting__5 ]
  %67 = icmp sle i64 %idx, %66
  br i1 %67, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %68 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %68, i32 -1)
  %69 = call %Array* @__quantum__rt__array_copy(%Array* %68, i1 false)
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %71 = bitcast i8* %70 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %72 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %71, align 8
  %73 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %72 to %Tuple*
  %74 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }* }* getelementptr ({ { i64, %Callable* }* }, { { i64, %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %73, %Tuple* %74)
  %75 = bitcast %Tuple* %74 to { { i64, %Callable* }* }*
  %76 = getelementptr inbounds { { i64, %Callable* }* }, { { i64, %Callable* }* }* %75, i32 0, i32 0
  %77 = load { i64, %Callable* }*, { i64, %Callable* }** %76, align 8
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %idx)
  %79 = bitcast i8* %78 to { i64, %Callable* }**
  %80 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %77, i32 0, i32 1
  %81 = load %Callable*, %Callable** %80, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %81, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %81, i32 1)
  %82 = bitcast { i64, %Callable* }* %77 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %82, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %81, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %81, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %82, i32 1)
  %83 = load { i64, %Callable* }*, { i64, %Callable* }** %79, align 8
  %84 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %83, i32 0, i32 1
  %85 = load %Callable*, %Callable** %84, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %85, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %85, i32 -1)
  %86 = bitcast { i64, %Callable* }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %85, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %85, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %86, i32 -1)
  store { i64, %Callable* }* %77, { i64, %Callable* }** %79, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 1)
  store %Array* %69, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %81, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %81, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %82, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %74, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %87 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %88 = load %Array*, %Array** %retval, align 8
  %89 = load %Callable*, %Callable** %28, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %90 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %91 = phi i64 [ 0, %exit__5 ], [ %107, %exiting__6 ]
  %92 = icmp sle i64 %91, %90
  br i1 %92, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %91)
  %94 = bitcast i8* %93 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %95 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %94, align 8
  %96 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %95, i32 0, i32 0
  %97 = load { %Array*, i64 }*, { %Array*, i64 }** %96, align 8
  %98 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %97, i32 0, i32 0
  %99 = load %Array*, %Array** %98, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %99, i32 -1)
  %100 = bitcast { %Array*, i64 }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %100, i32 -1)
  %101 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %95, i32 0, i32 1
  %102 = load { i64, %Callable* }*, { i64, %Callable* }** %101, align 8
  %103 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %102, i32 0, i32 1
  %104 = load %Callable*, %Callable** %103, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %104, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %104, i32 -1)
  %105 = bitcast { i64, %Callable* }* %102 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %105, i32 -1)
  %106 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %95 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %106, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %107 = add i64 %91, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %89, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %89, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i32 -1)
  %108 = call i64 @__quantum__rt__array_get_size_1d(%Array* %88)
  %109 = sub i64 %108, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %110 = phi i64 [ 0, %exit__6 ], [ %118, %exiting__7 ]
  %111 = icmp sle i64 %110, %109
  br i1 %111, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 %110)
  %113 = bitcast i8* %112 to { i64, %Callable* }**
  %114 = load { i64, %Callable* }*, { i64, %Callable* }** %113, align 8
  %115 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %114, i32 0, i32 1
  %116 = load %Callable*, %Callable** %115, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %116, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %116, i32 -1)
  %117 = bitcast { i64, %Callable* }* %114 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %118 = add i64 %110, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %89, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %89, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  ret %Array* %88
}

define internal void @Microsoft__Quantum__Canon___e2a028c390684ab28246f52a0c3fbae9_Snd__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, i64 }*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %3 = load { %Array*, i64 }*, { %Array*, i64 }** %1, align 8
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %5 = call { i64, %Callable* }* @Microsoft__Quantum__Canon___e2a028c390684ab28246f52a0c3fbae9_Snd__body({ %Array*, i64 }* %3, { i64, %Callable* }* %4)
  %6 = bitcast %Tuple* %result-tuple to { { i64, %Callable* }* }*
  %7 = getelementptr inbounds { { i64, %Callable* }* }, { { i64, %Callable* }* }* %6, i32 0, i32 0
  store { i64, %Callable* }* %5, { i64, %Callable* }** %7, align 8
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___f496bf5745d24576bdaad9599407fb79_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to %Array**
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %7 = icmp eq i64 %length, 0
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %9 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %11 = bitcast i8* %10 to %Array**
  %12 = load %Array*, %Array** %11, align 8
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr inbounds { %Array* }, { %Array* }* %14, i32 0, i32 0
  store %Array* %12, %Array** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %13, %Tuple* %16)
  %17 = bitcast %Tuple* %16 to { %Array* }*
  %18 = getelementptr inbounds { %Array* }, { %Array* }* %17, i32 0, i32 0
  %first = load %Array*, %Array** %18, align 8
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %first)
  %20 = sub i64 %19, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %21 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %22 = icmp sle i64 %21, %9
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %21)
  %24 = bitcast i8* %23 to %Array**
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %8

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %43, %exiting__3 ]
  %28 = icmp sle i64 %27, %20
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %first, i64 %27)
  %30 = bitcast i8* %29 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %31 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %30, align 8
  %32 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %31, i32 0, i32 0
  %33 = load { %Array*, i64 }*, { %Array*, i64 }** %32, align 8
  %34 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %33, i32 0, i32 0
  %35 = load %Array*, %Array** %34, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  %36 = bitcast { %Array*, i64 }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 1)
  %37 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %31, i32 0, i32 1
  %38 = load { i64, %Callable* }*, { i64, %Callable* }** %37, align 8
  %39 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %38, i32 0, i32 1
  %40 = load %Callable*, %Callable** %39, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %40, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %40, i32 1)
  %41 = bitcast { i64, %Callable* }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %41, i32 1)
  %42 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %43 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 1)
  %44 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %45 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  store %Array* %first, %Array** %49, align 8
  %50 = sub i64 %19, 1
  br label %header__5

exiting__4:                                       ; preds = %exit__5
  %51 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  store %Array* %44, %Array** %retval, align 8
  %52 = sub i64 %length, 1
  br label %header__6

header__5:                                        ; preds = %exiting__5, %body__4
  %53 = phi i64 [ 0, %body__4 ], [ %69, %exiting__5 ]
  %54 = icmp sle i64 %53, %50
  br i1 %54, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %first, i64 %53)
  %56 = bitcast i8* %55 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %57 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %56, align 8
  %58 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %57, i32 0, i32 0
  %59 = load { %Array*, i64 }*, { %Array*, i64 }** %58, align 8
  %60 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %59, i32 0, i32 0
  %61 = load %Array*, %Array** %60, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 1)
  %62 = bitcast { %Array*, i64 }* %59 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i32 1)
  %63 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %57, i32 0, i32 1
  %64 = load { i64, %Callable* }*, { i64, %Callable* }** %63, align 8
  %65 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %64, i32 0, i32 1
  %66 = load %Callable*, %Callable** %65, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %66, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %66, i32 1)
  %67 = bitcast { i64, %Callable* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %67, i32 1)
  %68 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %57 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %68, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %69 = add i64 %53, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %first, i32 1)
  br label %exiting__4

header__6:                                        ; preds = %exiting__6, %exit__4
  %70 = phi i64 [ 0, %exit__4 ], [ %77, %exiting__6 ]
  %71 = icmp sle i64 %70, %52
  br i1 %71, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %70)
  %73 = bitcast i8* %72 to %Array**
  %74 = load %Array*, %Array** %73, align 8
  %75 = call i64 @__quantum__rt__array_get_size_1d(%Array* %74)
  %76 = sub i64 %75, 1
  br label %header__7

exiting__6:                                       ; preds = %exit__7
  %77 = add i64 %70, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 1)
  %78 = sub i64 %length, 1
  br label %header__8

header__7:                                        ; preds = %exiting__7, %body__6
  %79 = phi i64 [ 0, %body__6 ], [ %95, %exiting__7 ]
  %80 = icmp sle i64 %79, %76
  br i1 %80, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 %79)
  %82 = bitcast i8* %81 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %83 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %82, align 8
  %84 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %83, i32 0, i32 0
  %85 = load { %Array*, i64 }*, { %Array*, i64 }** %84, align 8
  %86 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %85, i32 0, i32 0
  %87 = load %Array*, %Array** %86, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %87, i32 1)
  %88 = bitcast { %Array*, i64 }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %88, i32 1)
  %89 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %83, i32 0, i32 1
  %90 = load { i64, %Callable* }*, { i64, %Callable* }** %89, align 8
  %91 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %90, i32 0, i32 1
  %92 = load %Callable*, %Callable** %91, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %92, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %92, i32 1)
  %93 = bitcast { i64, %Callable* }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %93, i32 1)
  %94 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %94, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %95 = add i64 %79, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 1)
  br label %exiting__6

header__8:                                        ; preds = %exiting__8, %exit__6
  %idx = phi i64 [ 1, %exit__6 ], [ %113, %exiting__8 ]
  %96 = icmp sle i64 %idx, %78
  br i1 %96, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %97 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %97, i32 -1)
  %98 = call %Array* @__quantum__rt__array_copy(%Array* %97, i1 false)
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %100 = bitcast i8* %99 to %Array**
  %101 = load %Array*, %Array** %100, align 8
  %102 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %103 = bitcast %Tuple* %102 to { %Array* }*
  %104 = getelementptr inbounds { %Array* }, { %Array* }* %103, i32 0, i32 0
  store %Array* %101, %Array** %104, align 8
  %105 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %102, %Tuple* %105)
  %106 = bitcast %Tuple* %105 to { %Array* }*
  %107 = getelementptr inbounds { %Array* }, { %Array* }* %106, i32 0, i32 0
  %108 = load %Array*, %Array** %107, align 8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %98, i64 %idx)
  %110 = bitcast i8* %109 to %Array**
  %111 = call i64 @__quantum__rt__array_get_size_1d(%Array* %108)
  %112 = sub i64 %111, 1
  br label %header__9

exiting__8:                                       ; preds = %exit__13
  %113 = add i64 %idx, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  %114 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %115 = sub i64 %length, 1
  br label %header__14

header__9:                                        ; preds = %exiting__9, %body__8
  %116 = phi i64 [ 0, %body__8 ], [ %132, %exiting__9 ]
  %117 = icmp sle i64 %116, %112
  br i1 %117, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 %116)
  %119 = bitcast i8* %118 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %120 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %119, align 8
  %121 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %120, i32 0, i32 0
  %122 = load { %Array*, i64 }*, { %Array*, i64 }** %121, align 8
  %123 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %122, i32 0, i32 0
  %124 = load %Array*, %Array** %123, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %124, i32 1)
  %125 = bitcast { %Array*, i64 }* %122 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %125, i32 1)
  %126 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %120, i32 0, i32 1
  %127 = load { i64, %Callable* }*, { i64, %Callable* }** %126, align 8
  %128 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %127, i32 0, i32 1
  %129 = load %Callable*, %Callable** %128, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %129, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %129, i32 1)
  %130 = bitcast { i64, %Callable* }* %127 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %130, i32 1)
  %131 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %120 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %131, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %132 = add i64 %116, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %108, i32 1)
  %133 = sub i64 %111, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %134 = phi i64 [ 0, %exit__9 ], [ %150, %exiting__10 ]
  %135 = icmp sle i64 %134, %133
  br i1 %135, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 %134)
  %137 = bitcast i8* %136 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %138 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %137, align 8
  %139 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %138, i32 0, i32 0
  %140 = load { %Array*, i64 }*, { %Array*, i64 }** %139, align 8
  %141 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %140, i32 0, i32 0
  %142 = load %Array*, %Array** %141, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %142, i32 1)
  %143 = bitcast { %Array*, i64 }* %140 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %143, i32 1)
  %144 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %138, i32 0, i32 1
  %145 = load { i64, %Callable* }*, { i64, %Callable* }** %144, align 8
  %146 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %145, i32 0, i32 1
  %147 = load %Callable*, %Callable** %146, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %147, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %147, i32 1)
  %148 = bitcast { i64, %Callable* }* %145 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %148, i32 1)
  %149 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %138 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %149, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %150 = add i64 %134, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %108, i32 1)
  %151 = load %Array*, %Array** %110, align 8
  %152 = call i64 @__quantum__rt__array_get_size_1d(%Array* %151)
  %153 = sub i64 %152, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %154 = phi i64 [ 0, %exit__10 ], [ %170, %exiting__11 ]
  %155 = icmp sle i64 %154, %153
  br i1 %155, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %156 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %151, i64 %154)
  %157 = bitcast i8* %156 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %158 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %157, align 8
  %159 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %158, i32 0, i32 0
  %160 = load { %Array*, i64 }*, { %Array*, i64 }** %159, align 8
  %161 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %160, i32 0, i32 0
  %162 = load %Array*, %Array** %161, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %162, i32 -1)
  %163 = bitcast { %Array*, i64 }* %160 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %163, i32 -1)
  %164 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %158, i32 0, i32 1
  %165 = load { i64, %Callable* }*, { i64, %Callable* }** %164, align 8
  %166 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %165, i32 0, i32 1
  %167 = load %Callable*, %Callable** %166, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %167, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %167, i32 -1)
  %168 = bitcast { i64, %Callable* }* %165 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %168, i32 -1)
  %169 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %158 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %169, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %170 = add i64 %154, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %151, i32 -1)
  %171 = sub i64 %152, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %172 = phi i64 [ 0, %exit__11 ], [ %188, %exiting__12 ]
  %173 = icmp sle i64 %172, %171
  br i1 %173, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %174 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %151, i64 %172)
  %175 = bitcast i8* %174 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %176 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %175, align 8
  %177 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %176, i32 0, i32 0
  %178 = load { %Array*, i64 }*, { %Array*, i64 }** %177, align 8
  %179 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %178, i32 0, i32 0
  %180 = load %Array*, %Array** %179, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %180, i32 -1)
  %181 = bitcast { %Array*, i64 }* %178 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %181, i32 -1)
  %182 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %176, i32 0, i32 1
  %183 = load { i64, %Callable* }*, { i64, %Callable* }** %182, align 8
  %184 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %183, i32 0, i32 1
  %185 = load %Callable*, %Callable** %184, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %185, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %185, i32 -1)
  %186 = bitcast { i64, %Callable* }* %183 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %186, i32 -1)
  %187 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %176 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %187, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %188 = add i64 %172, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %151, i32 -1)
  store %Array* %108, %Array** %110, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 1)
  store %Array* %98, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %97, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %102, i32 -1)
  %189 = sub i64 %111, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %190 = phi i64 [ 0, %exit__12 ], [ %206, %exiting__13 ]
  %191 = icmp sle i64 %190, %189
  br i1 %191, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 %190)
  %193 = bitcast i8* %192 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %194 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %193, align 8
  %195 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %194, i32 0, i32 0
  %196 = load { %Array*, i64 }*, { %Array*, i64 }** %195, align 8
  %197 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %196, i32 0, i32 0
  %198 = load %Array*, %Array** %197, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %198, i32 -1)
  %199 = bitcast { %Array*, i64 }* %196 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %199, i32 -1)
  %200 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %194, i32 0, i32 1
  %201 = load { i64, %Callable* }*, { i64, %Callable* }** %200, align 8
  %202 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %201, i32 0, i32 1
  %203 = load %Callable*, %Callable** %202, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %203, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %203, i32 -1)
  %204 = bitcast { i64, %Callable* }* %201 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %204, i32 -1)
  %205 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %194 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %205, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %206 = add i64 %190, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_reference_count(%Array* %108, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %105, i32 -1)
  br label %exiting__8

header__14:                                       ; preds = %exiting__14, %exit__8
  %207 = phi i64 [ 0, %exit__8 ], [ %212, %exiting__14 ]
  %208 = icmp sle i64 %207, %115
  br i1 %208, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %209 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %207)
  %210 = bitcast i8* %209 to %Array**
  %211 = load %Array*, %Array** %210, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %211, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %212 = add i64 %207, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %213 = sub i64 %19, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %214 = phi i64 [ 0, %exit__14 ], [ %230, %exiting__15 ]
  %215 = icmp sle i64 %214, %213
  br i1 %215, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %216 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %first, i64 %214)
  %217 = bitcast i8* %216 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %218 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %217, align 8
  %219 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %218, i32 0, i32 0
  %220 = load { %Array*, i64 }*, { %Array*, i64 }** %219, align 8
  %221 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %220, i32 0, i32 0
  %222 = load %Array*, %Array** %221, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %222, i32 -1)
  %223 = bitcast { %Array*, i64 }* %220 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %223, i32 -1)
  %224 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %218, i32 0, i32 1
  %225 = load { i64, %Callable* }*, { i64, %Callable* }** %224, align 8
  %226 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %225, i32 0, i32 1
  %227 = load %Callable*, %Callable** %226, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %227, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %227, i32 -1)
  %228 = bitcast { i64, %Callable* }* %225 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %228, i32 -1)
  %229 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %218 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %229, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %230 = add i64 %214, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %first, i32 -1)
  %231 = call i64 @__quantum__rt__array_get_size_1d(%Array* %114)
  %232 = sub i64 %231, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %233 = phi i64 [ 0, %exit__15 ], [ %240, %exiting__16 ]
  %234 = icmp sle i64 %233, %232
  br i1 %234, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %235 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 %233)
  %236 = bitcast i8* %235 to %Array**
  %237 = load %Array*, %Array** %236, align 8
  %238 = call i64 @__quantum__rt__array_get_size_1d(%Array* %237)
  %239 = sub i64 %238, 1
  br label %header__17

exiting__16:                                      ; preds = %exit__17
  %240 = add i64 %233, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  %241 = sub i64 %19, 1
  br label %header__18

header__17:                                       ; preds = %exiting__17, %body__16
  %242 = phi i64 [ 0, %body__16 ], [ %258, %exiting__17 ]
  %243 = icmp sle i64 %242, %239
  br i1 %243, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %244 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %237, i64 %242)
  %245 = bitcast i8* %244 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %246 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %245, align 8
  %247 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %246, i32 0, i32 0
  %248 = load { %Array*, i64 }*, { %Array*, i64 }** %247, align 8
  %249 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %248, i32 0, i32 0
  %250 = load %Array*, %Array** %249, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %250, i32 -1)
  %251 = bitcast { %Array*, i64 }* %248 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %251, i32 -1)
  %252 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %246, i32 0, i32 1
  %253 = load { i64, %Callable* }*, { i64, %Callable* }** %252, align 8
  %254 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %253, i32 0, i32 1
  %255 = load %Callable*, %Callable** %254, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %255, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %255, i32 -1)
  %256 = bitcast { i64, %Callable* }* %253 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %256, i32 -1)
  %257 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %246 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %257, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %258 = add i64 %242, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %237, i32 -1)
  br label %exiting__16

header__18:                                       ; preds = %exiting__18, %exit__16
  %259 = phi i64 [ 0, %exit__16 ], [ %275, %exiting__18 ]
  %260 = icmp sle i64 %259, %241
  br i1 %260, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %261 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %first, i64 %259)
  %262 = bitcast i8* %261 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %263 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %262, align 8
  %264 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %263, i32 0, i32 0
  %265 = load { %Array*, i64 }*, { %Array*, i64 }** %264, align 8
  %266 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %265, i32 0, i32 0
  %267 = load %Array*, %Array** %266, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %267, i32 -1)
  %268 = bitcast { %Array*, i64 }* %265 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %268, i32 -1)
  %269 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %263, i32 0, i32 1
  %270 = load { i64, %Callable* }*, { i64, %Callable* }** %269, align 8
  %271 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %270, i32 0, i32 1
  %272 = load %Callable*, %Callable** %271, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %272, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %272, i32 -1)
  %273 = bitcast { i64, %Callable* }* %270 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %273, i32 -1)
  %274 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %263 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %274, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %275 = add i64 %259, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_reference_count(%Array* %first, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret %Array* %114
}

define internal void @Lifted__PartialApplication__7__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr inbounds { %Array* }, { %Array* }* %0, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___8a3dda3255e547b68a0799da4c61f944_Subarray__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Array* @Microsoft__Quantum__Arrays___8a3dda3255e547b68a0799da4c61f944_Subarray__body(%Array* %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %5, %Array** %7, align 8
  ret void
}

define internal void @MemoryManagement__6__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %11 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %10, align 8
  %12 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %11, i32 0, i32 0
  %13 = load { %Array*, i64 }*, { %Array*, i64 }** %12, align 8
  %14 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %13, i32 0, i32 0
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 %count-change)
  %16 = bitcast { %Array*, i64 }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 %count-change)
  %17 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %11, i32 0, i32 1
  %18 = load { i64, %Callable* }*, { i64, %Callable* }** %17, align 8
  %19 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %18, i32 0, i32 1
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %20, i32 %count-change)
  %21 = bitcast { i64, %Callable* }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 %count-change)
  %22 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__6__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %11 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %10, align 8
  %12 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %11, i32 0, i32 0
  %13 = load { %Array*, i64 }*, { %Array*, i64 }** %12, align 8
  %14 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %13, i32 0, i32 0
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 %count-change)
  %16 = bitcast { %Array*, i64 }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 %count-change)
  %17 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %11, i32 0, i32 1
  %18 = load { i64, %Callable* }*, { i64, %Callable* }** %17, align 8
  %19 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %18, i32 0, i32 1
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %20, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i32 %count-change)
  %21 = bitcast { i64, %Callable* }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 %count-change)
  %22 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___924d100a2fcc4f628511e045bf39e089_Chunks__body(i64 %nElements, %Array* %arr) {
entry:
  %remaining = alloca %Array*, align 8
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 1)
  %0 = icmp sgt i64 %nElements, 0
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @20, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %0, %String* %1)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  store %Array* %2, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  store %Array* %arr, %Array** %remaining, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %arr, i32 1)
  br label %while__1

while__1:                                         ; preds = %exit__5, %entry
  %3 = load %Array*, %Array** %remaining, align 8
  %4 = call i1 @Microsoft__Quantum__Arrays___cddb1db8090d4b2580514eb678e65fbd_IsEmpty__body(%Array* %3)
  %5 = xor i1 %4, true
  br i1 %5, label %do__1, label %wend__1

do__1:                                            ; preds = %while__1
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %nElementsToTake = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %6, i64 %nElements)
  %7 = load %Array*, %Array** %output, align 8
  %8 = sub i64 %nElementsToTake, 1
  %9 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %8, 2
  %10 = call %Array* @__quantum__rt__array_slice_1d(%Array* %3, %Range %9, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 0)
  %13 = bitcast i8* %12 to %Array**
  store %Array* %10, %Array** %13, align 8
  %14 = call %Array* @__quantum__rt__array_concatenate(%Array* %7, %Array* %11)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %16 = sub i64 %15, 1
  br label %header__1

wend__1:                                          ; preds = %while__1
  %17 = load %Array*, %Array** %output, align 8
  %18 = load %Array*, %Array** %remaining, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 -1)
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %20 = sub i64 %19, 1
  br label %header__6

header__1:                                        ; preds = %exiting__1, %do__1
  %21 = phi i64 [ 0, %do__1 ], [ %26, %exiting__1 ]
  %22 = icmp sle i64 %21, %16
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %21)
  %24 = bitcast i8* %23 to %Array**
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %26 = add i64 %21, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 1)
  %27 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %28 = phi i64 [ 0, %exit__1 ], [ %33, %exiting__2 ]
  %29 = icmp sle i64 %28, %27
  br i1 %29, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %28)
  %31 = bitcast i8* %30 to %Array**
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %28, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %34 = call i64 @__quantum__rt__array_get_size_1d(%Array* %7)
  %35 = sub i64 %34, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %36)
  %39 = bitcast i8* %38 to %Array**
  %40 = load %Array*, %Array** %39, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %36, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %7, i32 -1)
  %42 = sub i64 %34, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %43 = phi i64 [ 0, %exit__3 ], [ %48, %exiting__4 ]
  %44 = icmp sle i64 %43, %42
  br i1 %44, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %47, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %48 = add i64 %43, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  store %Array* %14, %Array** %output, align 8
  %49 = sub i64 %6, 1
  %50 = insertvalue %Range zeroinitializer, i64 %nElementsToTake, 0
  %51 = insertvalue %Range %50, i64 1, 1
  %52 = insertvalue %Range %51, i64 %49, 2
  %53 = call %Array* @__quantum__rt__array_slice_1d(%Array* %3, %Range %52, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  store %Array* %53, %Array** %remaining, align 8
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %54 = phi i64 [ 0, %exit__4 ], [ %59, %exiting__5 ]
  %55 = icmp sle i64 %54, 0
  br i1 %55, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %54)
  %57 = bitcast i8* %56 to %Array**
  %58 = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %59 = add i64 %54, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  br label %while__1

header__6:                                        ; preds = %exiting__6, %wend__1
  %60 = phi i64 [ 0, %wend__1 ], [ %65, %exiting__6 ]
  %61 = icmp sle i64 %60, %20
  br i1 %61, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %60)
  %63 = bitcast i8* %62 to %Array**
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %65 = add i64 %60, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  ret %Array* %17
}

define internal %Array* @Microsoft__Quantum__Arrays___bfbc686941de40cda88afed8ead5a62b_Enumerated__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__2

exiting__1:                                       ; preds = %exit__2
  %9 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___9e4eb8c66a5d41c0ab661fccd1f15c41___QsRef1__Identity____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %11 = call %Array* @Microsoft__Quantum__Arrays___593f6ec0c6174564a8ee8add732e267d_MappedByIndex__body(%Callable* %10, %Array* %array)
  %12 = sub i64 %0, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %body__1
  %13 = phi i64 [ 0, %body__1 ], [ %29, %exiting__2 ]
  %14 = icmp sle i64 %13, %8
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %13)
  %16 = bitcast i8* %15 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %17 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %16, align 8
  %18 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %17, i32 0, i32 0
  %19 = load { %Array*, i64 }*, { %Array*, i64 }** %18, align 8
  %20 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %19, i32 0, i32 0
  %21 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  %22 = bitcast { %Array*, i64 }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  %23 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %17, i32 0, i32 1
  %24 = load { i64, %Callable* }*, { i64, %Callable* }** %23, align 8
  %25 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %24, i32 0, i32 1
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 1)
  %27 = bitcast { i64, %Callable* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 1)
  %28 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

header__3:                                        ; preds = %exiting__3, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %37, %exiting__3 ]
  %31 = icmp sle i64 %30, %12
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %30)
  %33 = bitcast i8* %32 to %Array**
  %34 = load %Array*, %Array** %33, align 8
  %35 = call i64 @__quantum__rt__array_get_size_1d(%Array* %34)
  %36 = sub i64 %35, 1
  br label %header__4

exiting__3:                                       ; preds = %exit__4
  %37 = add i64 %30, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret %Array* %11

header__4:                                        ; preds = %exiting__4, %body__3
  %38 = phi i64 [ 0, %body__3 ], [ %54, %exiting__4 ]
  %39 = icmp sle i64 %38, %36
  br i1 %39, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %38)
  %41 = bitcast i8* %40 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %42 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %41, align 8
  %43 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %42, i32 0, i32 0
  %44 = load { %Array*, i64 }*, { %Array*, i64 }** %43, align 8
  %45 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %44, i32 0, i32 0
  %46 = load %Array*, %Array** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %46, i32 -1)
  %47 = bitcast { %Array*, i64 }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  %48 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %42, i32 0, i32 1
  %49 = load { i64, %Callable* }*, { i64, %Callable* }** %48, align 8
  %50 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %49, i32 0, i32 1
  %51 = load %Callable*, %Callable** %50, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %51, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %51, i32 -1)
  %52 = bitcast { i64, %Callable* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i32 -1)
  %53 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %54 = add i64 %38, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  br label %exiting__3
}

define internal { double, { %Array*, %Array*, double }* }* @Microsoft__Quantum__MachineLearning____QsRef0__RunSingleTrainingStep____body(%Array* %miniBatch, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, { %Array*, %Array*, double }* %model) {
entry:
  %err = alloca double, align 8
  %batchGradient = alloca %Array*, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %miniBatch)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %miniBatch, i64 %2)
  %5 = bitcast i8* %4 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %6 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %5, align 8
  %7 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %6, i32 0, i32 0
  %8 = load { %Array*, i64 }*, { %Array*, i64 }** %7, align 8
  %9 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %8, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %6, i32 0, i32 1
  %13 = load { i64, %Callable* }*, { i64, %Callable* }** %12, align 8
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  %15 = load %Callable*, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i32 1)
  %16 = bitcast { i64, %Callable* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %17 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %miniBatch, i32 1)
  %19 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 8
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %20, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i32 1)
  %21 = bitcast { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 1)
  %22 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  %24 = call i64 @__quantum__rt__array_get_size_1d(%Array* %23)
  %25 = sub i64 %24, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %26 = phi i64 [ 0, %exit__1 ], [ %37, %exiting__2 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %26)
  %29 = bitcast i8* %28 to { { i64, %Array* }*, i2, i64 }**
  %30 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %29, align 8
  %31 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %30, i32 0, i32 0
  %32 = load { i64, %Array* }*, { i64, %Array* }** %31, align 8
  %33 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %32, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %35 = bitcast { i64, %Array* }* %32 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  %36 = bitcast { { i64, %Array* }*, i2, i64 }* %30 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %37 = add i64 %26, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %38 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %39 = load %Array*, %Array** %38, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 1)
  %40 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %41 = call i64 @__quantum__rt__array_get_size_1d(%Array* %39)
  %42 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %41)
  %43 = sub i64 %41, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %44 = phi i64 [ 0, %exit__2 ], [ %48, %exiting__3 ]
  %45 = icmp sle i64 %44, %43
  br i1 %45, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 %44)
  %47 = bitcast i8* %46 to double*
  store double 0.000000e+00, double* %47, align 8
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %44, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %42, %Array** %batchGradient, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 1)
  %49 = call %Array* @Microsoft__Quantum__Arrays___f9184e7d9d864e538f386e594c17e4c1_Enumerated__body(%Array* %miniBatch)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %86, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }**
  %56 = load { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }** %55, align 8
  %57 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %56, i32 0, i32 0
  %idxSample = load i64, i64* %57, align 4
  %58 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %56, i32 0, i32 1
  %59 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %58, align 8
  %60 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %59, i32 0, i32 0
  %sample = load { %Array*, i64 }*, { %Array*, i64 }** %60, align 8
  %61 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %sample, i32 0, i32 0
  %62 = load %Array*, %Array** %61, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %62, i32 1)
  %63 = bitcast { %Array*, i64 }* %sample to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i32 1)
  %64 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %59, i32 0, i32 1
  %stateGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %64, align 8
  %65 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %stateGenerator, i32 0, i32 1
  %66 = load %Callable*, %Callable** %65, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %66, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %66, i32 1)
  %67 = bitcast { i64, %Callable* }* %stateGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  %68 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %sample, i32 0, i32 1
  %69 = load i64, i64* %68, align 4
  %70 = sitofp i64 %69 to double
  store double %70, double* %err, align 8
  %71 = fcmp olt double %70, 1.000000e+00
  br i1 %71, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__4
  store double -1.000000e+00, double* %err, align 8
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__4
  %72 = load %Callable*, %Callable** %19, align 8
  %73 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @7, i32 0, i32 0))
  %74 = call %String* @__quantum__rt__int_to_string(i64 %idxSample)
  %75 = call %String* @__quantum__rt__string_concatenate(%String* %73, %String* %74)
  call void @__quantum__rt__string_update_reference_count(%String* %73, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %74, i32 -1)
  %76 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @8, i32 0, i32 0))
  %77 = call %String* @__quantum__rt__string_concatenate(%String* %75, %String* %76)
  call void @__quantum__rt__string_update_reference_count(%String* %75, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %76, i32 -1)
  %78 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %String* }* getelementptr ({ %String* }, { %String* }* null, i32 1) to i64))
  %79 = bitcast %Tuple* %78 to { %String* }*
  %80 = getelementptr inbounds { %String* }, { %String* }* %79, i32 0, i32 0
  store %String* %77, %String** %80, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %72, %Tuple* %78, %Tuple* null)
  %81 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 3
  %82 = load i64, i64* %81, align 4
  %grad = call %Array* @Microsoft__Quantum__MachineLearning__EstimateGradient__body({ %Array*, %Array*, double }* %model, { i64, %Callable* }* %stateGenerator, i64 %82)
  call void @__quantum__rt__array_update_alias_count(%Array* %grad, i32 1)
  %83 = load %Array*, %Array** %38, align 8
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %83)
  %85 = sub i64 %84, 1
  br label %header__5

exiting__4:                                       ; preds = %exit__5
  %86 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %87 = load %Array*, %Array** %batchGradient, align 8
  %88 = call double @Microsoft__Quantum__Math__SquaredNorm__body(%Array* %87)
  %89 = call %Tuple* @__quantum__rt__tuple_copy(%Tuple* %40, i1 false)
  %90 = bitcast %Tuple* %89 to { %Array*, %Array*, double }*
  %91 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %90, i32 0, i32 1
  %92 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__PlusD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %93 = load %Array*, %Array** %38, align 8
  %94 = call %Array* @Microsoft__Quantum__Arrays___1ff548eeaa7940ff923499697de8c6a5_Zipped__body(%Array* %93, %Array* %87)
  %95 = call %Array* @Microsoft__Quantum__Arrays___e441983e8fb14fb091112edb0b0083f0_Mapped__body(%Callable* %92, %Array* %94)
  store %Array* %95, %Array** %91, align 8
  %96 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %90, i32 0, i32 0
  %97 = load %Array*, %Array** %96, align 8
  %98 = call i64 @__quantum__rt__array_get_size_1d(%Array* %97)
  %99 = sub i64 %98, 1
  br label %header__6

header__5:                                        ; preds = %exiting__5, %continue__1
  %ip = phi i64 [ 0, %continue__1 ], [ %117, %exiting__5 ]
  %100 = icmp sle i64 %ip, %85
  br i1 %100, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %101 = load %Array*, %Array** %batchGradient, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %101, i32 -1)
  %102 = call %Array* @__quantum__rt__array_copy(%Array* %101, i1 false)
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %101, i64 %ip)
  %104 = bitcast i8* %103 to double*
  %105 = load double, double* %104, align 8
  %106 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %options, i32 0, i32 0
  %107 = load double, double* %106, align 8
  %108 = load double, double* %err, align 8
  %109 = fmul double %107, %108
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %grad, i64 %ip)
  %111 = bitcast i8* %110 to double*
  %112 = load double, double* %111, align 8
  %113 = fmul double %109, %112
  %114 = fadd double %105, %113
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %102, i64 %ip)
  %116 = bitcast i8* %115 to double*
  store double %114, double* %116, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %102, i32 1)
  store %Array* %102, %Array** %batchGradient, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %101, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %117 = add i64 %ip, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %62, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %66, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %66, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %grad, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %77, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %78, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %grad, i32 -1)
  br label %exiting__4

header__6:                                        ; preds = %exiting__6, %exit__4
  %118 = phi i64 [ 0, %exit__4 ], [ %129, %exiting__6 ]
  %119 = icmp sle i64 %118, %99
  br i1 %119, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %97, i64 %118)
  %121 = bitcast i8* %120 to { { i64, %Array* }*, i2, i64 }**
  %122 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %121, align 8
  %123 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %122, i32 0, i32 0
  %124 = load { i64, %Array* }*, { i64, %Array* }** %123, align 8
  %125 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %124, i32 0, i32 1
  %126 = load %Array*, %Array** %125, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %126, i32 1)
  %127 = bitcast { i64, %Array* }* %124 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %127, i32 1)
  %128 = bitcast { { i64, %Array* }*, i2, i64 }* %122 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %129 = add i64 %118, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %97, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %92, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %92, i32 -1)
  %130 = call i64 @__quantum__rt__array_get_size_1d(%Array* %94)
  %131 = sub i64 %130, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %132 = phi i64 [ 0, %exit__6 ], [ %138, %exiting__7 ]
  %133 = icmp sle i64 %132, %131
  br i1 %133, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %134 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 %132)
  %135 = bitcast i8* %134 to { double, double }**
  %136 = load { double, double }*, { double, double }** %135, align 8
  %137 = bitcast { double, double }* %136 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %137, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %138 = add i64 %132, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %94, i32 -1)
  %139 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { %Array*, %Array*, double }* }* getelementptr ({ double, { %Array*, %Array*, double }* }, { double, { %Array*, %Array*, double }* }* null, i32 1) to i64))
  %140 = bitcast %Tuple* %139 to { double, { %Array*, %Array*, double }* }*
  %141 = getelementptr inbounds { double, { %Array*, %Array*, double }* }, { double, { %Array*, %Array*, double }* }* %140, i32 0, i32 0
  %142 = getelementptr inbounds { double, { %Array*, %Array*, double }* }, { double, { %Array*, %Array*, double }* }* %140, i32 0, i32 1
  store double %88, double* %141, align 8
  store { %Array*, %Array*, double }* %90, { %Array*, %Array*, double }** %142, align 8
  %143 = sub i64 %0, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %144 = phi i64 [ 0, %exit__7 ], [ %160, %exiting__8 ]
  %145 = icmp sle i64 %144, %143
  br i1 %145, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %miniBatch, i64 %144)
  %147 = bitcast i8* %146 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %148 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %147, align 8
  %149 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %148, i32 0, i32 0
  %150 = load { %Array*, i64 }*, { %Array*, i64 }** %149, align 8
  %151 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %150, i32 0, i32 0
  %152 = load %Array*, %Array** %151, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %152, i32 -1)
  %153 = bitcast { %Array*, i64 }* %150 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %153, i32 -1)
  %154 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %148, i32 0, i32 1
  %155 = load { i64, %Callable* }*, { i64, %Callable* }** %154, align 8
  %156 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %155, i32 0, i32 1
  %157 = load %Callable*, %Callable** %156, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %157, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %157, i32 -1)
  %158 = bitcast { i64, %Callable* }* %155 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %158, i32 -1)
  %159 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %148 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %159, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %160 = add i64 %144, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %miniBatch, i32 -1)
  %161 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %161, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %161, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  %162 = sub i64 %24, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %163 = phi i64 [ 0, %exit__8 ], [ %174, %exiting__9 ]
  %164 = icmp sle i64 %163, %162
  br i1 %164, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %165 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %163)
  %166 = bitcast i8* %165 to { { i64, %Array* }*, i2, i64 }**
  %167 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %166, align 8
  %168 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %167, i32 0, i32 0
  %169 = load { i64, %Array* }*, { i64, %Array* }** %168, align 8
  %170 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %169, i32 0, i32 1
  %171 = load %Array*, %Array** %170, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %171, i32 -1)
  %172 = bitcast { i64, %Array* }* %169 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %172, i32 -1)
  %173 = bitcast { { i64, %Array* }*, i2, i64 }* %167 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %173, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %174 = add i64 %163, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %93, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %87, i32 -1)
  %175 = sub i64 %50, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %176 = phi i64 [ 0, %exit__9 ], [ %195, %exiting__10 ]
  %177 = icmp sle i64 %176, %175
  br i1 %177, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %176)
  %179 = bitcast i8* %178 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }**
  %180 = load { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }** %179, align 8
  %181 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %180, i32 0, i32 1
  %182 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %181, align 8
  %183 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %182, i32 0, i32 0
  %184 = load { %Array*, i64 }*, { %Array*, i64 }** %183, align 8
  %185 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %184, i32 0, i32 0
  %186 = load %Array*, %Array** %185, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %186, i32 -1)
  %187 = bitcast { %Array*, i64 }* %184 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %187, i32 -1)
  %188 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %182, i32 0, i32 1
  %189 = load { i64, %Callable* }*, { i64, %Callable* }** %188, align 8
  %190 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %189, i32 0, i32 1
  %191 = load %Callable*, %Callable** %190, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %191, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %191, i32 -1)
  %192 = bitcast { i64, %Callable* }* %189 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %192, i32 -1)
  %193 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %182 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %193, i32 -1)
  %194 = bitcast { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %180 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %194, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %195 = add i64 %176, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  ret { double, { %Array*, %Array*, double }* }* %140
}

define internal { %Array*, i64 }* @Microsoft__Quantum__Canon___1f5badf5e91544c8bbff3b59164a3bb0_Fst__body({ %Array*, i64 }* %0, { i64, %Callable* }* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }*, { i64, %Callable* }* }* getelementptr ({ { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { { %Array*, i64 }*, { i64, %Callable* }* }*
  %3 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %pair, i32 0, i32 1
  store { %Array*, i64 }* %0, { %Array*, i64 }** %3, align 8
  store { i64, %Callable* }* %1, { i64, %Callable* }** %4, align 8
  %5 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %0, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array*, i64 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %1, i32 0, i32 1
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %9, i32 1)
  %10 = bitcast { i64, %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %9, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret { %Array*, i64 }* %0
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Canon___e2a028c390684ab28246f52a0c3fbae9_Snd__body({ %Array*, i64 }* %0, { i64, %Callable* }* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, i64 }*, { i64, %Callable* }* }* getelementptr ({ { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { { %Array*, i64 }*, { i64, %Callable* }* }*
  %3 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %pair, i32 0, i32 1
  store { %Array*, i64 }* %0, { %Array*, i64 }** %3, align 8
  store { i64, %Callable* }* %1, { i64, %Callable* }** %4, align 8
  %5 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %0, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array*, i64 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %1, i32 0, i32 1
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %9, i32 1)
  %10 = bitcast { i64, %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %9, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret { i64, %Callable* }* %1
}

define internal %Array* @Microsoft__Quantum__Arrays___8a3dda3255e547b68a0799da4c61f944_Subarray__body(%Array* %indices, %Array* %array) {
entry:
  %sliced = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %6 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %5, align 8
  %7 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %6, i32 0, i32 0
  %8 = load { %Array*, i64 }*, { %Array*, i64 }** %7, align 8
  %9 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %8, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %6, i32 0, i32 1
  %13 = load { i64, %Callable* }*, { i64, %Callable* }** %12, align 8
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  %15 = load %Callable*, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i32 1)
  %16 = bitcast { i64, %Callable* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %17 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %19 = icmp eq i64 %nSliced, 0
  br i1 %19, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  %21 = sub i64 %0, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 4
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %24)
  %26 = bitcast i8* %25 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %27 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %26, align 8
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %29 = sub i64 %nSliced, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %30 = phi i64 [ 0, %then0__1 ], [ %46, %exiting__2 ]
  %31 = icmp sle i64 %30, %21
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %30)
  %33 = bitcast i8* %32 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %34 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %33, align 8
  %35 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %34, i32 0, i32 0
  %36 = load { %Array*, i64 }*, { %Array*, i64 }** %35, align 8
  %37 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %36, i32 0, i32 0
  %38 = load %Array*, %Array** %37, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i32 -1)
  %39 = bitcast { %Array*, i64 }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 -1)
  %40 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %34, i32 0, i32 1
  %41 = load { i64, %Callable* }*, { i64, %Callable* }** %40, align 8
  %42 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 1
  %43 = load %Callable*, %Callable** %42, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %43, i32 -1)
  %44 = bitcast { i64, %Callable* }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i32 -1)
  %45 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %46 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %20

header__3:                                        ; preds = %exiting__3, %continue__1
  %47 = phi i64 [ 0, %continue__1 ], [ %62, %exiting__3 ]
  %48 = icmp sle i64 %47, %29
  br i1 %48, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %47)
  %50 = bitcast i8* %49 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  store { { %Array*, i64 }*, { i64, %Callable* }* }* %27, { { %Array*, i64 }*, { i64, %Callable* }* }** %50, align 8
  %51 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %27, i32 0, i32 0
  %52 = load { %Array*, i64 }*, { %Array*, i64 }** %51, align 8
  %53 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %52, i32 0, i32 0
  %54 = load %Array*, %Array** %53, align 8
  %55 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %27, i32 0, i32 1
  %56 = load { i64, %Callable* }*, { i64, %Callable* }** %55, align 8
  %57 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %56, i32 0, i32 1
  %58 = load %Callable*, %Callable** %57, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 1)
  %59 = bitcast { %Array*, i64 }* %52 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %58, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %58, i32 1)
  %60 = bitcast { i64, %Callable* }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %60, i32 1)
  %61 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %61, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %62 = add i64 %47, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %28, %Array** %sliced, align 8
  %63 = sub i64 %nSliced, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %64 = phi i64 [ 0, %exit__3 ], [ %80, %exiting__4 ]
  %65 = icmp sle i64 %64, %63
  br i1 %65, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %64)
  %67 = bitcast i8* %66 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %68 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %67, align 8
  %69 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %68, i32 0, i32 0
  %70 = load { %Array*, i64 }*, { %Array*, i64 }** %69, align 8
  %71 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %70, i32 0, i32 0
  %72 = load %Array*, %Array** %71, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 1)
  %73 = bitcast { %Array*, i64 }* %70 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 1)
  %74 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %68, i32 0, i32 1
  %75 = load { i64, %Callable* }*, { i64, %Callable* }** %74, align 8
  %76 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %75, i32 0, i32 1
  %77 = load %Callable*, %Callable** %76, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %77, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %77, i32 1)
  %78 = bitcast { i64, %Callable* }* %75 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 1)
  %79 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %68 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %80 = add i64 %64, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %81 = sub i64 %nSliced, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %116, %exiting__5 ]
  %82 = icmp sle i64 %idx, %81
  br i1 %82, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %83 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %83, i32 -1)
  %84 = call %Array* @__quantum__rt__array_copy(%Array* %83, i1 false)
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %86 = bitcast i8* %85 to i64*
  %87 = load i64, i64* %86, align 4
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %87)
  %89 = bitcast i8* %88 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %90 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %89, align 8
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 %idx)
  %92 = bitcast i8* %91 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %93 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %90, i32 0, i32 0
  %94 = load { %Array*, i64 }*, { %Array*, i64 }** %93, align 8
  %95 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %94, i32 0, i32 0
  %96 = load %Array*, %Array** %95, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %96, i32 1)
  %97 = bitcast { %Array*, i64 }* %94 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %97, i32 1)
  %98 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %90, i32 0, i32 1
  %99 = load { i64, %Callable* }*, { i64, %Callable* }** %98, align 8
  %100 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %99, i32 0, i32 1
  %101 = load %Callable*, %Callable** %100, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %101, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %101, i32 1)
  %102 = bitcast { i64, %Callable* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %102, i32 1)
  %103 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %103, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %96, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %97, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %101, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %101, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %102, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i32 1)
  %104 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %92, align 8
  %105 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %104, i32 0, i32 0
  %106 = load { %Array*, i64 }*, { %Array*, i64 }** %105, align 8
  %107 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %106, i32 0, i32 0
  %108 = load %Array*, %Array** %107, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %108, i32 -1)
  %109 = bitcast { %Array*, i64 }* %106 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %109, i32 -1)
  %110 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %104, i32 0, i32 1
  %111 = load { i64, %Callable* }*, { i64, %Callable* }** %110, align 8
  %112 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %111, i32 0, i32 1
  %113 = load %Callable*, %Callable** %112, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %113, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %113, i32 -1)
  %114 = bitcast { i64, %Callable* }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %114, i32 -1)
  %115 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %104 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %115, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %108, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %109, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %113, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %113, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %114, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %115, i32 -1)
  store { { %Array*, i64 }*, { i64, %Callable* }* }* %90, { { %Array*, i64 }*, { i64, %Callable* }* }** %92, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %84, i32 1)
  store %Array* %84, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %116 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %117 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  %118 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %119 = phi i64 [ 0, %exit__5 ], [ %135, %exiting__6 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %119)
  %122 = bitcast i8* %121 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %123 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %122, align 8
  %124 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %123, i32 0, i32 0
  %125 = load { %Array*, i64 }*, { %Array*, i64 }** %124, align 8
  %126 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %125, i32 0, i32 0
  %127 = load %Array*, %Array** %126, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %127, i32 -1)
  %128 = bitcast { %Array*, i64 }* %125 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 -1)
  %129 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %123, i32 0, i32 1
  %130 = load { i64, %Callable* }*, { i64, %Callable* }** %129, align 8
  %131 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %130, i32 0, i32 1
  %132 = load %Callable*, %Callable** %131, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %132, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %132, i32 -1)
  %133 = bitcast { i64, %Callable* }* %130 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %133, i32 -1)
  %134 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %134, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %135 = add i64 %119, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %136 = call i64 @__quantum__rt__array_get_size_1d(%Array* %117)
  %137 = sub i64 %136, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %138 = phi i64 [ 0, %exit__6 ], [ %154, %exiting__7 ]
  %139 = icmp sle i64 %138, %137
  br i1 %139, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 %138)
  %141 = bitcast i8* %140 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %142 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %141, align 8
  %143 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %142, i32 0, i32 0
  %144 = load { %Array*, i64 }*, { %Array*, i64 }** %143, align 8
  %145 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %144, i32 0, i32 0
  %146 = load %Array*, %Array** %145, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %146, i32 -1)
  %147 = bitcast { %Array*, i64 }* %144 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %147, i32 -1)
  %148 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %142, i32 0, i32 1
  %149 = load { i64, %Callable* }*, { i64, %Callable* }** %148, align 8
  %150 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %149, i32 0, i32 1
  %151 = load %Callable*, %Callable** %150, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %151, i32 -1)
  %152 = bitcast { i64, %Callable* }* %149 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %152, i32 -1)
  %153 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %142 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %153, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %154 = add i64 %138, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %117, i32 -1)
  ret %Array* %117
}

define internal %Array* @Microsoft__Quantum__Arrays___f9184e7d9d864e538f386e594c17e4c1_Enumerated__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %6 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %5, align 8
  %7 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %6, i32 0, i32 0
  %8 = load { %Array*, i64 }*, { %Array*, i64 }** %7, align 8
  %9 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %8, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %6, i32 0, i32 1
  %13 = load { i64, %Callable* }*, { i64, %Callable* }** %12, align 8
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  %15 = load %Callable*, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i32 1)
  %16 = bitcast { i64, %Callable* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %17 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %19 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___d0d4b543e4084f10a022319d0e6d7887___QsRef1__Identity____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %20 = call %Array* @Microsoft__Quantum__Arrays___4e18ab692bdc46809cf35e50e230ef2a_MappedByIndex__body(%Callable* %19, %Array* %array)
  %21 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %22 = phi i64 [ 0, %exit__1 ], [ %38, %exiting__2 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %22)
  %25 = bitcast i8* %24 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %26 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %25, align 8
  %27 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %26, i32 0, i32 0
  %28 = load { %Array*, i64 }*, { %Array*, i64 }** %27, align 8
  %29 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %28, i32 0, i32 0
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  %31 = bitcast { %Array*, i64 }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  %32 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %26, i32 0, i32 1
  %33 = load { i64, %Callable* }*, { i64, %Callable* }** %32, align 8
  %34 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %33, i32 0, i32 1
  %35 = load %Callable*, %Callable** %34, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %35, i32 -1)
  %36 = bitcast { i64, %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 -1)
  %37 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %38 = add i64 %22, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  ret %Array* %20
}

define internal %Array* @Microsoft__Quantum__MachineLearning__EstimateGradient__body({ %Array*, %Array*, double }* %model, { i64, %Callable* }* %encodedInput, i64 %nMeasurements) {
entry:
  %grad = alloca %Array*, align 8
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  %19 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %encodedInput, i32 0, i32 1
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %20, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i32 1)
  %21 = bitcast { i64, %Callable* }* %encodedInput to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 1)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %22)
  %24 = sub i64 %22, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %25 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %25)
  %28 = bitcast i8* %27 to double*
  store double 0.000000e+00, double* %28, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  store %Array* %23, %Array** %grad, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %30 = call i64 @Microsoft__Quantum__MachineLearning__NQubitsRequired__body({ %Array*, %Array*, double }* %model)
  %31 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %encodedInput, i32 0, i32 0
  %32 = load i64, i64* %31, align 4
  %nQubits = call i64 @Microsoft__Quantum__Math__MaxI__body(i64 %30, i64 %32)
  %33 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %34 = phi i64 [ 0, %exit__2 ], [ %94, %exiting__3 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %34)
  %37 = bitcast i8* %36 to { { i64, %Array* }*, i2, i64 }**
  %gate = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %37, align 8
  %38 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 0
  %39 = load { i64, %Array* }*, { i64, %Array* }** %38, align 8
  %40 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %39, i32 0, i32 1
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  %42 = bitcast { i64, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 1)
  %43 = bitcast { { i64, %Array* }*, i2, i64 }* %gate to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 1)
  %44 = load %Array*, %Array** %16, align 8
  %45 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 0)
  %47 = bitcast i8* %46 to double*
  store double 0.000000e+00, double* %47, align 8
  %48 = call %Array* @__quantum__rt__array_concatenate(%Array* %44, %Array* %45)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i32 -1)
  %paramShift = call %Array* @__quantum__rt__array_copy(%Array* %48, i1 false)
  %49 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %gate, i32 0, i32 2
  %50 = load i64, i64* %49, align 4
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %50)
  %52 = bitcast i8* %51 to double*
  %53 = load double, double* %52, align 8
  %54 = call double @Microsoft__Quantum__Math__PI__body()
  %55 = fadd double %53, %54
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paramShift, i64 %50)
  %57 = bitcast i8* %56 to double*
  store double %55, double* %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paramShift, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paramShift, i32 1)
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %59 = bitcast %Tuple* %58 to { %Array*, %Array* }*
  %60 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %59, i32 0, i32 0
  %61 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %59, i32 0, i32 1
  store %Array* %44, %Array** %60, align 8
  store %Array* %paramShift, %Array** %61, align 8
  %newDer = call double @Microsoft__Quantum__MachineLearning____QsRef0__EstimateDerivativeWithParameterShift____body({ i64, %Callable* }* %encodedInput, { %Array*, %Array*, double }* %model, { %Array*, %Array* }* %59, i64 %nQubits, i64 %nMeasurements)
  %62 = call i1 @Microsoft__Quantum__Arrays___cddb1db8090d4b2580514eb678e65fbd_IsEmpty__body(%Array* %41)
  br i1 %62, label %then0__1, label %else__1

then0__1:                                         ; preds = %body__3
  %63 = load %Array*, %Array** %grad, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %63, i32 -1)
  %64 = call %Array* @__quantum__rt__array_copy(%Array* %63, i1 false)
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 %50)
  %66 = bitcast i8* %65 to double*
  %67 = load double, double* %66, align 8
  %68 = fadd double %67, %newDer
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %50)
  %70 = bitcast i8* %69 to double*
  store double %68, double* %70, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  store %Array* %64, %Array** %grad, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %63, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %body__3
  %controlledShift = call %Array* @__quantum__rt__array_copy(%Array* %paramShift, i1 false)
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %50)
  %72 = bitcast i8* %71 to double*
  %73 = load double, double* %72, align 8
  %74 = call double @Microsoft__Quantum__Math__PI__body()
  %75 = fmul double 3.000000e+00, %74
  %76 = fadd double %73, %75
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controlledShift, i64 %50)
  %78 = bitcast i8* %77 to double*
  store double %76, double* %78, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlledShift, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlledShift, i32 1)
  %79 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %80 = bitcast %Tuple* %79 to { %Array*, %Array* }*
  %81 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %80, i32 0, i32 0
  %82 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %80, i32 0, i32 1
  store %Array* %44, %Array** %81, align 8
  store %Array* %controlledShift, %Array** %82, align 8
  %newDer1 = call double @Microsoft__Quantum__MachineLearning____QsRef0__EstimateDerivativeWithParameterShift____body({ i64, %Callable* }* %encodedInput, { %Array*, %Array*, double }* %model, { %Array*, %Array* }* %80, i64 %nQubits, i64 %nMeasurements)
  %83 = load %Array*, %Array** %grad, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %83, i32 -1)
  %84 = call %Array* @__quantum__rt__array_copy(%Array* %83, i1 false)
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %50)
  %86 = bitcast i8* %85 to double*
  %87 = load double, double* %86, align 8
  %88 = fsub double %newDer, %newDer1
  %89 = fmul double 5.000000e-01, %88
  %90 = fadd double %87, %89
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 %50)
  %92 = bitcast i8* %91 to double*
  %93 = load double, double* %92, align 8
  store double %90, double* %92, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %84, i32 1)
  store %Array* %84, %Array** %grad, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlledShift, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlledShift, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlledShift, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paramShift, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paramShift, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paramShift, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %continue__1
  %94 = add i64 %34, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %95 = load %Array*, %Array** %grad, align 8
  %96 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %97 = phi i64 [ 0, %exit__3 ], [ %108, %exiting__4 ]
  %98 = icmp sle i64 %97, %96
  br i1 %98, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %97)
  %100 = bitcast i8* %99 to { { i64, %Array* }*, i2, i64 }**
  %101 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %100, align 8
  %102 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %101, i32 0, i32 0
  %103 = load { i64, %Array* }*, { i64, %Array* }** %102, align 8
  %104 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %103, i32 0, i32 1
  %105 = load %Array*, %Array** %104, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %105, i32 -1)
  %106 = bitcast { i64, %Array* }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %106, i32 -1)
  %107 = bitcast { { i64, %Array* }*, i2, i64 }* %101 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %107, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %108 = add i64 %97, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  %109 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %109, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %95, i32 -1)
  ret %Array* %95
}

declare %Array* @__quantum__rt__array_copy(%Array*, i1)

define internal double @Microsoft__Quantum__Math__SquaredNorm__body(%Array* %array) {
entry:
  %ret = alloca double, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  store double 0.000000e+00, double* %ret, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to double*
  %element = load double, double* %5, align 8
  %6 = load double, double* %ret, align 8
  %7 = fmul double %element, %element
  %8 = fadd double %6, %7
  store double %8, double* %ret, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %10 = load double, double* %ret, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret double %10
}

define internal %Array* @Microsoft__Quantum__Arrays___e441983e8fb14fb091112edb0b0083f0_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { double, double }**
  %5 = load { double, double }*, { double, double }** %4, align 8
  %6 = bitcast { double, double }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %length, 0
  br i1 %8, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %10 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %12 = bitcast i8* %11 to { double, double }**
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %14, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { double }*
  %17 = getelementptr inbounds { double }, { double }* %16, i32 0, i32 0
  %first = load double, double* %17, align 8
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %19 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %10
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %9

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %27)
  %30 = bitcast i8* %29 to double*
  store double %first, double* %30, align 8
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 1, %exit__3 ], [ %46, %exiting__4 ]
  %33 = icmp sle i64 %idx, %32
  br i1 %33, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %34 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = call %Array* @__quantum__rt__array_copy(%Array* %34, i1 false)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %37 = bitcast i8* %36 to { double, double }**
  %38 = load { double, double }*, { double, double }** %37, align 8
  %39 = bitcast { double, double }* %38 to %Tuple*
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %39, %Tuple* %40)
  %41 = bitcast %Tuple* %40 to { double }*
  %42 = getelementptr inbounds { double }, { double }* %41, i32 0, i32 0
  %43 = load double, double* %42, align 8
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx)
  %45 = bitcast i8* %44 to double*
  store double %43, double* %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  store %Array* %35, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %47 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %48 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %49 = phi i64 [ 0, %exit__4 ], [ %55, %exiting__5 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %49)
  %52 = bitcast i8* %51 to { double, double }**
  %53 = load { double, double }*, { double, double }** %52, align 8
  %54 = bitcast { double, double }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %55 = add i64 %49, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret %Array* %47
}

define internal void @Microsoft__Quantum__Math__PlusD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load double, double* %2, align 8
  %5 = call double @Microsoft__Quantum__Math__PlusD__body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { double }*
  %7 = getelementptr inbounds { double }, { double }* %6, i32 0, i32 0
  store double %5, double* %7, align 8
  ret void
}

define internal double @Microsoft__Quantum__Math__PlusD__body(double %a, double %b) {
entry:
  %0 = fadd double %a, %b
  ret double %0
}

define internal %Callable* @Microsoft__Quantum__MachineLearning____QsRef0__TailMeasurement____body(i64 %nQubits) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nQubits)
  %1 = sub i64 %nQubits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to i2*
  store i2 0, i2* %5, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %paulis = call %Array* @__quantum__rt__array_copy(%Array* %0, i1 false)
  %7 = sub i64 %nQubits, 1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 %7)
  %9 = bitcast i8* %8 to i2*
  store i2 -2, i2* %9, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Measure__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, %Array* }*
  %13 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %12, i32 0, i32 1
  store %Callable* %10, %Callable** %13, align 8
  store %Array* %paulis, %Array** %14, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__8__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__7__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  ret %Callable* %15
}

define internal void @Lifted__PartialApplication__8__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Measure__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Result* @Microsoft__Quantum__Intrinsic__Measure__body(%Array* %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Result* }*
  %7 = getelementptr inbounds { %Result* }, { %Result* }* %6, i32 0, i32 0
  store %Result* %5, %Result** %7, align 8
  ret void
}

define internal void @MemoryManagement__7__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__7__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Result* @Microsoft__Quantum__Intrinsic__Measure__body(%Array* %bases, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Result* @__quantum__qis__measure__body(%Array* %bases, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret %Result* %0
}

define internal %Array* @Microsoft__Quantum__MachineLearning____QsRef0__Unnegate____body(%Array* %negLocs, %Array* %coefficients) {
entry:
  %ret = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  store %Array* %coefficients, %Array** %ret, align 8
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %10)
  %13 = bitcast i8* %12 to { double, double }**
  %14 = load { double, double }*, { double, double }** %13, align 8
  %15 = bitcast { double, double }* %14 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %17 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %18 = phi i64 [ 0, %exit__2 ], [ %24, %exiting__3 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %18)
  %21 = bitcast i8* %20 to { double, double }**
  %22 = load { double, double }*, { double, double }** %21, align 8
  %23 = bitcast { double, double }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %24 = add i64 %18, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %negLocs)
  %26 = sub i64 %25, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %27 = phi i64 [ 0, %exit__3 ], [ %56, %exiting__4 ]
  %28 = icmp sle i64 %27, %26
  br i1 %28, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %negLocs, i64 %27)
  %30 = bitcast i8* %29 to i64*
  %idxNegative = load i64, i64* %30, align 4
  %31 = icmp sge i64 %idxNegative, %0
  br i1 %31, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__4
  %32 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @9, i32 0, i32 0))
  %33 = call %String* @__quantum__rt__int_to_string(i64 %idxNegative)
  %34 = call %String* @__quantum__rt__string_concatenate(%String* %32, %String* %33)
  call void @__quantum__rt__string_update_reference_count(%String* %32, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %33, i32 -1)
  %35 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i32 0, i32 0))
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  %37 = call %String* @__quantum__rt__int_to_string(i64 %0)
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i32 -1)
  %39 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @11, i32 0, i32 0))
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  %41 = load %Array*, %Array** %ret, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 -1)
  %42 = sub i64 %0, 1
  br label %header__5

continue__1:                                      ; preds = %body__4
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxNegative)
  %44 = bitcast i8* %43 to { double, double }**
  %coefficient = load { double, double }*, { double, double }** %44, align 8
  %45 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 1)
  %46 = load %Array*, %Array** %ret, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %46, i32 -1)
  %47 = call %Array* @__quantum__rt__array_copy(%Array* %46, i1 false)
  %48 = getelementptr inbounds { double, double }, { double, double }* %coefficient, i32 0, i32 0
  %49 = load double, double* %48, align 8
  %50 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %49, double 0.000000e+00)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %idxNegative)
  %52 = bitcast i8* %51 to { double, double }**
  %53 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i32 1)
  %54 = load { double, double }*, { double, double }** %52, align 8
  %55 = bitcast { double, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %55, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %55, i32 -1)
  store { double, double }* %50, { double, double }** %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  store %Array* %47, %Array** %ret, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %continue__1
  %56 = add i64 %27, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %57 = load %Array*, %Array** %ret, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %negLocs, i32 -1)
  %58 = sub i64 %0, 1
  br label %header__8

header__5:                                        ; preds = %exiting__5, %then0__1
  %59 = phi i64 [ 0, %then0__1 ], [ %65, %exiting__5 ]
  %60 = icmp sle i64 %59, %42
  br i1 %60, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %59)
  %62 = bitcast i8* %61 to { double, double }**
  %63 = load { double, double }*, { double, double }** %62, align 8
  %64 = bitcast { double, double }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %64, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %65 = add i64 %59, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %41)
  %67 = sub i64 %66, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %68 = phi i64 [ 0, %exit__5 ], [ %74, %exiting__6 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %68)
  %71 = bitcast i8* %70 to { double, double }**
  %72 = load { double, double }*, { double, double }** %71, align 8
  %73 = bitcast { double, double }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %74 = add i64 %68, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  %75 = sub i64 %66, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %76 = phi i64 [ 0, %exit__6 ], [ %82, %exiting__7 ]
  %77 = icmp sle i64 %76, %75
  br i1 %77, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %76)
  %79 = bitcast i8* %78 to { double, double }**
  %80 = load { double, double }*, { double, double }** %79, align 8
  %81 = bitcast { double, double }* %80 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %81, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %82 = add i64 %76, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  call void @__quantum__rt__fail(%String* %40)
  unreachable

header__8:                                        ; preds = %exiting__8, %exit__4
  %83 = phi i64 [ 0, %exit__4 ], [ %89, %exiting__8 ]
  %84 = icmp sle i64 %83, %58
  br i1 %84, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %83)
  %86 = bitcast i8* %85 to { double, double }**
  %87 = load { double, double }*, { double, double }** %86, align 8
  %88 = bitcast { double, double }* %87 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %88, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %89 = add i64 %83, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %90 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %91 = sub i64 %90, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %92 = phi i64 [ 0, %exit__8 ], [ %98, %exiting__9 ]
  %93 = icmp sle i64 %92, %91
  br i1 %93, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %92)
  %95 = bitcast i8* %94 to { double, double }**
  %96 = load { double, double }*, { double, double }** %95, align 8
  %97 = bitcast { double, double }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %97, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %98 = add i64 %92, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 -1)
  ret %Array* %57
}

declare void @__quantum__rt__fail(%String*)

define internal { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %Magnitude, double %Argument) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double %Magnitude, double* %2, align 8
  store double %Argument, double* %3, align 8
  ret { double, double }* %1
}

define internal { double, double, i64 }* @Microsoft__Quantum__Optimization__LocalUnivariateMinimum__body(%Callable* %fn, { double, double }* %bounds, double %tolerance) {
entry:
  %queryAmount = alloca i64, align 8
  %rightProbe = alloca { double, double }*, align 8
  %leftProbe = alloca { double, double }*, align 8
  %interval = alloca { double, double }*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %fn, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %fn, i32 1)
  %0 = bitcast { double, double }* %bounds to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  store { double, double }* %bounds, { double, double }** %interval, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %bounds, i32 0, i32 0
  %2 = getelementptr inbounds { double, double }, { double, double }* %bounds, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load double, double* %2, align 8
  %5 = call { double, double }* @Microsoft__Quantum__Optimization____QsRef1__NextProbes____body(double %3, double %4)
  %6 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { double, double }, { double, double }* %5, i32 0, i32 1
  %8 = load double, double* %6, align 8
  %9 = load double, double* %7, align 8
  %10 = call double @Microsoft__Quantum__Canon___17f71f9fa0da472d90e5bc66ed171ba5_Fst__body(double %8, double %9)
  %11 = call { double, double }* @Microsoft__Quantum__Optimization____QsRef1__ProbeValue____body(%Callable* %fn, double %10)
  store { double, double }* %11, { double, double }** %leftProbe, align 8
  %12 = bitcast { double, double }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  %13 = call { double, double }* @Microsoft__Quantum__Optimization____QsRef1__NextProbes____body(double %3, double %4)
  %14 = getelementptr inbounds { double, double }, { double, double }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, double }, { double, double }* %13, i32 0, i32 1
  %16 = load double, double* %14, align 8
  %17 = load double, double* %15, align 8
  %18 = call double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %16, double %17)
  %19 = call { double, double }* @Microsoft__Quantum__Optimization____QsRef1__ProbeValue____body(%Callable* %fn, double %18)
  store { double, double }* %19, { double, double }** %rightProbe, align 8
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  store i64 2, i64* %queryAmount, align 4
  br label %while__1

while__1:                                         ; preds = %continue__1, %entry
  %21 = load { double, double }*, { double, double }** %interval, align 8
  %22 = getelementptr inbounds { double, double }, { double, double }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, double }, { double, double }* %21, i32 0, i32 1
  %24 = load double, double* %22, align 8
  %25 = load double, double* %23, align 8
  %26 = call double @Microsoft__Quantum__Optimization____QsRef1__Width____body(double %24, double %25)
  %27 = fcmp ogt double %26, %tolerance
  br i1 %27, label %do__1, label %wend__1

do__1:                                            ; preds = %while__1
  %28 = load { double, double }*, { double, double }** %leftProbe, align 8
  %29 = getelementptr inbounds { double, double }, { double, double }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { double, double }, { double, double }* %28, i32 0, i32 1
  %31 = load double, double* %29, align 8
  %32 = load double, double* %30, align 8
  %33 = call double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %31, double %32)
  %34 = load { double, double }*, { double, double }** %rightProbe, align 8
  %35 = getelementptr inbounds { double, double }, { double, double }* %34, i32 0, i32 0
  %36 = getelementptr inbounds { double, double }, { double, double }* %34, i32 0, i32 1
  %37 = load double, double* %35, align 8
  %38 = load double, double* %36, align 8
  %39 = call double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %37, double %38)
  %40 = fcmp olt double %33, %39
  br i1 %40, label %then0__1, label %else__1

then0__1:                                         ; preds = %do__1
  %41 = call double @Microsoft__Quantum__Canon___17f71f9fa0da472d90e5bc66ed171ba5_Fst__body(double %24, double %25)
  %42 = call double @Microsoft__Quantum__Canon___17f71f9fa0da472d90e5bc66ed171ba5_Fst__body(double %37, double %38)
  %43 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %44 = bitcast %Tuple* %43 to { double, double }*
  %45 = getelementptr inbounds { double, double }, { double, double }* %44, i32 0, i32 0
  %46 = getelementptr inbounds { double, double }, { double, double }* %44, i32 0, i32 1
  store double %41, double* %45, align 8
  store double %42, double* %46, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 1)
  %47 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  store { double, double }* %44, { double, double }** %interval, align 8
  %48 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %48, i32 1)
  %49 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i32 -1)
  store { double, double }* %28, { double, double }** %rightProbe, align 8
  %50 = call { double, double }* @Microsoft__Quantum__Optimization____QsRef1__NextProbes____body(double %41, double %42)
  %51 = getelementptr inbounds { double, double }, { double, double }* %50, i32 0, i32 0
  %52 = getelementptr inbounds { double, double }, { double, double }* %50, i32 0, i32 1
  %53 = load double, double* %51, align 8
  %54 = load double, double* %52, align 8
  %55 = call double @Microsoft__Quantum__Canon___17f71f9fa0da472d90e5bc66ed171ba5_Fst__body(double %53, double %54)
  %56 = call { double, double }* @Microsoft__Quantum__Optimization____QsRef1__ProbeValue____body(%Callable* %fn, double %55)
  %57 = bitcast { double, double }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %48, i32 -1)
  store { double, double }* %56, { double, double }** %leftProbe, align 8
  %58 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %do__1
  %59 = load { double, double }*, { double, double }** %leftProbe, align 8
  %60 = getelementptr inbounds { double, double }, { double, double }* %59, i32 0, i32 0
  %61 = getelementptr inbounds { double, double }, { double, double }* %59, i32 0, i32 1
  %62 = load double, double* %60, align 8
  %63 = load double, double* %61, align 8
  %64 = call double @Microsoft__Quantum__Canon___17f71f9fa0da472d90e5bc66ed171ba5_Fst__body(double %62, double %63)
  %65 = load { double, double }*, { double, double }** %interval, align 8
  %66 = getelementptr inbounds { double, double }, { double, double }* %65, i32 0, i32 0
  %67 = getelementptr inbounds { double, double }, { double, double }* %65, i32 0, i32 1
  %68 = load double, double* %66, align 8
  %69 = load double, double* %67, align 8
  %70 = call double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %68, double %69)
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { double, double }*
  %73 = getelementptr inbounds { double, double }, { double, double }* %72, i32 0, i32 0
  %74 = getelementptr inbounds { double, double }, { double, double }* %72, i32 0, i32 1
  store double %64, double* %73, align 8
  store double %70, double* %74, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %71, i32 1)
  %75 = bitcast { double, double }* %65 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %75, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %75, i32 -1)
  store { double, double }* %72, { double, double }** %interval, align 8
  %76 = load { double, double }*, { double, double }** %rightProbe, align 8
  %77 = bitcast { double, double }* %76 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 1)
  %78 = bitcast { double, double }* %59 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %78, i32 -1)
  store { double, double }* %76, { double, double }** %leftProbe, align 8
  %79 = call { double, double }* @Microsoft__Quantum__Optimization____QsRef1__NextProbes____body(double %64, double %70)
  %80 = getelementptr inbounds { double, double }, { double, double }* %79, i32 0, i32 0
  %81 = getelementptr inbounds { double, double }, { double, double }* %79, i32 0, i32 1
  %82 = load double, double* %80, align 8
  %83 = load double, double* %81, align 8
  %84 = call double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %82, double %83)
  %85 = call { double, double }* @Microsoft__Quantum__Optimization____QsRef1__ProbeValue____body(%Callable* %fn, double %84)
  %86 = bitcast { double, double }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  store { double, double }* %85, { double, double }** %rightProbe, align 8
  %87 = bitcast { double, double }* %79 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %87, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then0__1
  %88 = load i64, i64* %queryAmount, align 4
  %89 = add i64 %88, 1
  store i64 %89, i64* %queryAmount, align 4
  br label %while__1

wend__1:                                          ; preds = %while__1
  %90 = load { double, double }*, { double, double }** %leftProbe, align 8
  %91 = getelementptr inbounds { double, double }, { double, double }* %90, i32 0, i32 0
  %92 = getelementptr inbounds { double, double }, { double, double }* %90, i32 0, i32 1
  %93 = load double, double* %91, align 8
  %94 = load double, double* %92, align 8
  %95 = call double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %93, double %94)
  %96 = load { double, double }*, { double, double }** %rightProbe, align 8
  %97 = getelementptr inbounds { double, double }, { double, double }* %96, i32 0, i32 0
  %98 = getelementptr inbounds { double, double }, { double, double }* %96, i32 0, i32 1
  %99 = load double, double* %97, align 8
  %100 = load double, double* %98, align 8
  %101 = call double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %99, double %100)
  %102 = fcmp olt double %95, %101
  br i1 %102, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %wend__1
  %103 = bitcast { double, double }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i32 1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %wend__1
  %104 = bitcast { double, double }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i32 1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %result = phi { double, double }* [ %90, %condTrue__1 ], [ %96, %condFalse__1 ]
  %105 = bitcast { double, double }* %result to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %105, i32 1)
  %106 = getelementptr inbounds { double, double }, { double, double }* %result, i32 0, i32 0
  %107 = getelementptr inbounds { double, double }, { double, double }* %result, i32 0, i32 1
  %108 = load double, double* %106, align 8
  %109 = load double, double* %107, align 8
  %110 = call double @Microsoft__Quantum__Canon___17f71f9fa0da472d90e5bc66ed171ba5_Fst__body(double %108, double %109)
  %111 = call double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %108, double %109)
  %112 = load i64, i64* %queryAmount, align 4
  %113 = call { double, double, i64 }* @Microsoft__Quantum__Optimization__UnivariateOptimizationResult__body(double %110, double %111, i64 %112)
  %114 = load { double, double }*, { double, double }** %interval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %fn, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %fn, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  %115 = bitcast { double, double }* %114 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %115, i32 -1)
  %116 = bitcast { double, double }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 -1)
  %117 = bitcast { double, double }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %105, i32 -1)
  %118 = bitcast { double, double }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %118, i32 -1)
  %119 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %105, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %115, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  ret { double, double, i64 }* %113
}

define internal void @Lifted__PartialApplication__9__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { double }*
  %6 = getelementptr inbounds { double }, { double }* %5, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array*, double }*
  %10 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %9, i32 0, i32 2
  store %Array* %2, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  store double %7, double* %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__MisclassificationRate____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array*, double }*
  %1 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load double, double* %3, align 8
  %7 = call double @Microsoft__Quantum__MachineLearning____QsRef0__MisclassificationRate____body(%Array* %4, %Array* %5, double %6)
  %8 = bitcast %Tuple* %result-tuple to { double }*
  %9 = getelementptr inbounds { double }, { double }* %8, i32 0, i32 0
  store double %7, double* %9, align 8
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___2a89d4e05ab447e5a736535efa7cd8e7_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { double, i64 }**
  %5 = load { double, i64 }*, { double, i64 }** %4, align 8
  %6 = bitcast { double, i64 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %length, 0
  br i1 %8, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %10 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %12 = bitcast i8* %11 to { double, i64 }**
  %13 = load { double, i64 }*, { double, i64 }** %12, align 8
  %14 = bitcast { double, i64 }* %13 to %Tuple*
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %14, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { double }*
  %17 = getelementptr inbounds { double }, { double }* %16, i32 0, i32 0
  %first = load double, double* %17, align 8
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %19 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %10
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { double, i64 }**
  %24 = load { double, i64 }*, { double, i64 }** %23, align 8
  %25 = bitcast { double, i64 }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %9

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %27)
  %30 = bitcast i8* %29 to double*
  store double %first, double* %30, align 8
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 1, %exit__3 ], [ %46, %exiting__4 ]
  %33 = icmp sle i64 %idx, %32
  br i1 %33, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %34 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = call %Array* @__quantum__rt__array_copy(%Array* %34, i1 false)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %37 = bitcast i8* %36 to { double, i64 }**
  %38 = load { double, i64 }*, { double, i64 }** %37, align 8
  %39 = bitcast { double, i64 }* %38 to %Tuple*
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %39, %Tuple* %40)
  %41 = bitcast %Tuple* %40 to { double }*
  %42 = getelementptr inbounds { double }, { double }* %41, i32 0, i32 0
  %43 = load double, double* %42, align 8
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx)
  %45 = bitcast i8* %44 to double*
  store double %43, double* %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  store %Array* %35, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %47 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %48 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %49 = phi i64 [ 0, %exit__4 ], [ %55, %exiting__5 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %49)
  %52 = bitcast i8* %51 to { double, i64 }**
  %53 = load { double, i64 }*, { double, i64 }** %52, align 8
  %54 = bitcast { double, i64 }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %55 = add i64 %49, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret %Array* %47
}

define internal void @Microsoft__Quantum__Canon___72deeddd84a741deba305c641ccbb494_Fst__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64 }*
  %1 = getelementptr inbounds { double, i64 }, { double, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64 }, { double, i64 }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load i64, i64* %2, align 4
  %5 = call double @Microsoft__Quantum__Canon___72deeddd84a741deba305c641ccbb494_Fst__body(double %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { double }*
  %7 = getelementptr inbounds { double }, { double }* %6, i32 0, i32 0
  store double %5, double* %7, align 8
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___1cabe7eb60764be98bab0923a4277ae6_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { double, i64 }**
  %5 = load { double, i64 }*, { double, i64 }** %4, align 8
  %6 = bitcast { double, i64 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %length, 0
  br i1 %8, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %10 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %12 = bitcast i8* %11 to { double, i64 }**
  %13 = load { double, i64 }*, { double, i64 }** %12, align 8
  %14 = bitcast { double, i64 }* %13 to %Tuple*
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %14, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { i64 }*
  %17 = getelementptr inbounds { i64 }, { i64 }* %16, i32 0, i32 0
  %first = load i64, i64* %17, align 4
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %19 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %10
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { double, i64 }**
  %24 = load { double, i64 }*, { double, i64 }** %23, align 8
  %25 = bitcast { double, i64 }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %9

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %27)
  %30 = bitcast i8* %29 to i64*
  store i64 %first, i64* %30, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 1, %exit__3 ], [ %46, %exiting__4 ]
  %33 = icmp sle i64 %idx, %32
  br i1 %33, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %34 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = call %Array* @__quantum__rt__array_copy(%Array* %34, i1 false)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %37 = bitcast i8* %36 to { double, i64 }**
  %38 = load { double, i64 }*, { double, i64 }** %37, align 8
  %39 = bitcast { double, i64 }* %38 to %Tuple*
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %39, %Tuple* %40)
  %41 = bitcast %Tuple* %40 to { i64 }*
  %42 = getelementptr inbounds { i64 }, { i64 }* %41, i32 0, i32 0
  %43 = load i64, i64* %42, align 4
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx)
  %45 = bitcast i8* %44 to i64*
  store i64 %43, i64* %45, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  store %Array* %35, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %47 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %48 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %49 = phi i64 [ 0, %exit__4 ], [ %55, %exiting__5 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %49)
  %52 = bitcast i8* %51 to { double, i64 }**
  %53 = load { double, i64 }*, { double, i64 }** %52, align 8
  %54 = bitcast { double, i64 }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %55 = add i64 %49, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret %Array* %47
}

define internal void @Microsoft__Quantum__Canon___ce11ecc402da481dad234c6ec2301ce8_Snd__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64 }*
  %1 = getelementptr inbounds { double, i64 }, { double, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64 }, { double, i64 }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load i64, i64* %2, align 4
  %5 = call i64 @Microsoft__Quantum__Canon___ce11ecc402da481dad234c6ec2301ce8_Snd__body(double %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { i64 }*
  %7 = getelementptr inbounds { i64 }, { i64 }* %6, i32 0, i32 0
  store i64 %5, i64* %7, align 4
  ret void
}

define internal void @MemoryManagement__8__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__8__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Canon___72deeddd84a741deba305c641ccbb494_Fst__body(double %0, i64 %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64 }* getelementptr ({ double, i64 }, { double, i64 }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { double, i64 }*
  %3 = getelementptr inbounds { double, i64 }, { double, i64 }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { double, i64 }, { double, i64 }* %pair, i32 0, i32 1
  store double %0, double* %3, align 8
  store i64 %1, i64* %4, align 4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret double %0
}

define internal i64 @Microsoft__Quantum__Canon___ce11ecc402da481dad234c6ec2301ce8_Snd__body(double %0, i64 %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64 }* getelementptr ({ double, i64 }, { double, i64 }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { double, i64 }*
  %3 = getelementptr inbounds { double, i64 }, { double, i64 }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { double, i64 }, { double, i64 }* %pair, i32 0, i32 1
  store double %0, double* %3, align 8
  store i64 %1, i64* %4, align 4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret i64 %1
}

define internal i1 @Microsoft__Quantum__Arrays___cddb1db8090d4b2580514eb678e65fbd_IsEmpty__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp eq i64 %0, 0
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %1
}

define internal %Array* @Microsoft__Quantum__Arrays___93b43ff3c247411b9de017f51b2344c9_Subarray__body(%Array* %indices, %Array* %array) {
entry:
  %sliced = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %0 = icmp eq i64 %nSliced, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %3 = bitcast i8* %2 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %4)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %9 = sub i64 %nSliced, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %10 = phi i64 [ 0, %continue__1 ], [ %14, %exiting__1 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %10)
  %13 = bitcast i8* %12 to %Qubit**
  store %Qubit* %7, %Qubit** %13, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %14 = add i64 %10, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %8, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %15 = sub i64 %nSliced, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 1, %exit__1 ], [ %27, %exiting__2 ]
  %16 = icmp sle i64 %idx, %15
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 4
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %21)
  %23 = bitcast i8* %22 to %Qubit**
  %24 = load %Qubit*, %Qubit** %23, align 8
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idx)
  %26 = bitcast i8* %25 to %Qubit**
  store %Qubit* %24, %Qubit** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  store %Array* %18, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %28 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 -1)
  ret %Array* %28
}

define internal %Array* @Microsoft__Quantum__Arrays___0e6bc4a124064ccaaf317888c577a89b_Enumerated__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___6ed5375d64984881b234f01e25bc55b9___QsRef1__Identity____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___27b80d3c0afd4dd68f55d127c5cdfce5_MappedByIndex__body(%Callable* %0, %Array* %array)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret %Array* %1
}

define internal i64 @Microsoft__Quantum__Math__Round__body(double %value) {
entry:
  %0 = call { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef2__ExtendedTruncation____body(double %value)
  %1 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 0
  %truncated = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 1
  %remainder = load double, double* %2, align 8
  %3 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 2
  %isPositive = load i1, i1* %3, align 1
  %4 = call double @Microsoft__Quantum__Math__AbsD__body(double %remainder)
  %5 = fcmp ole double %4, 1.000000e-15
  br i1 %5, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %6 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret i64 %truncated

else__1:                                          ; preds = %entry
  %abs = call double @Microsoft__Quantum__Math__AbsD__body(double %remainder)
  %7 = fcmp ole double %abs, 5.000000e-01
  br i1 %7, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  br i1 %isPositive, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condTrue__2
  %8 = phi i64 [ 1, %condTrue__2 ], [ -1, %condFalse__2 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %9 = phi i64 [ 0, %condTrue__1 ], [ %8, %condContinue__2 ]
  %10 = add i64 %truncated, %9
  %11 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret i64 %10

continue__1:                                      ; No predecessors!
  unreachable
}

define internal { i64, %Callable* }* @Microsoft__Quantum__MachineLearning__StateGenerator__body(i64 %NQubits, %Callable* %Prepare) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %Prepare, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %Prepare, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, %Callable* }*
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %1, i32 0, i32 1
  store i64 %NQubits, i64* %2, align 4
  store %Callable* %Prepare, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %Prepare, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %Prepare, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %Prepare, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %Prepare, i32 -1)
  ret { i64, %Callable* }* %1
}

define internal void @Lifted__PartialApplication__10__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, { %Array* }* }*
  %5 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 1
  store %Array* %2, %Array** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, { %Array* }* }*
  %5 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 1
  store %Array* %2, %Array** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____body(%Array* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____adj(%Array* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____ctl(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__ApplyTwoQubitCase____ctladj(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define internal void @MemoryManagement__9__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__9__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Math__Lg__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  %1 = call double @Microsoft__Quantum__Math__LogOf2__body()
  %2 = fdiv double %0, %1
  ret double %2
}

define internal %Callable* @Microsoft__Quantum__Canon___1809700b885a46aeb0473713f7c55f2f_BoundCA__body(%Array* %operations) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %10)
  %13 = bitcast i8* %12 to %Callable**
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %operations, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, %Array* }*
  %18 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %17, i32 0, i32 1
  store %Callable* %8, %Callable** %18, align 8
  store %Array* %operations, %Array** %19, align 8
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__29__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__17__FunctionTable, %Tuple* %16)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %22)
  %25 = bitcast i8* %24 to %Callable**
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  ret %Callable* %20
}

define internal %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %nQubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = trunc i64 %nQubits to i32
  %10 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %9)
  %11 = fptosi double %10 to i64
  %12 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___591aa3c3d09b40fd80ccf1fad0bc50fd_Padded__body(i64 %11, { double, double }* %12, %Array* %coefficients)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18, align 8
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %22 = icmp sgt i64 %nQubits, 1
  %23 = sub i64 %nQubits, 1
  %24 = insertvalue %Range { i64 1, i64 1, i64 0 }, i64 %23, 2
  %rngControl = select i1 %22, %Range %24, %Range { i64 1, i64 1, i64 0 }
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Range, i64 }*
  %27 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %26, i32 0, i32 0
  %28 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %26, i32 0, i32 1
  store %Range %rngControl, %Range* %27, align 4
  store i64 0, i64* %28, align 4
  %plan = call %Array* @Microsoft__Quantum__Preparation____QsRef1__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficientsPadded, { %Range, i64 }* %26)
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %plan)
  %30 = sub i64 %29, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %36, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %31)
  %34 = bitcast i8* %33 to %Callable**
  %35 = load %Callable*, %Callable** %34, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %35, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %35, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %36 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %plan, i32 1)
  %unprepare = call %Callable* @Microsoft__Quantum__Canon___7af5478fdcef46609b03bed279a41c2b_BoundCA__body(%Array* %plan)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unprepare, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unprepare, i32 1)
  %37 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %38 = call %Callable* @__quantum__rt__callable_copy(%Callable* %unprepare, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %38, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %38)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Callable*, %Callable* }*
  %41 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %40, i32 0, i32 0
  %42 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %40, i32 0, i32 1
  store %Callable* %37, %Callable** %41, align 8
  store %Callable* %38, %Callable** %42, align 8
  %43 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__35__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__22__FunctionTable, %Tuple* %39)
  %44 = sub i64 %0, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %45)
  %48 = bitcast i8* %47 to { double, double }**
  %49 = load { double, double }*, { double, double }** %48, align 8
  %50 = bitcast { double, double }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %52 = sub i64 %13, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %53 = phi i64 [ 0, %exit__4 ], [ %59, %exiting__5 ]
  %54 = icmp sle i64 %53, %52
  br i1 %54, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %53)
  %56 = bitcast i8* %55 to { double, double }**
  %57 = load { double, double }*, { double, double }** %56, align 8
  %58 = bitcast { double, double }* %57 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %58, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %59 = add i64 %53, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  %60 = sub i64 %29, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %61 = phi i64 [ 0, %exit__5 ], [ %66, %exiting__6 ]
  %62 = icmp sle i64 %61, %60
  br i1 %62, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %61)
  %64 = bitcast i8* %63 to %Callable**
  %65 = load %Callable*, %Callable** %64, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %65, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %65, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %66 = add i64 %61, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %plan, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unprepare, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unprepare, i32 -1)
  %67 = bitcast { double, double }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %67, i32 -1)
  %68 = sub i64 %13, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %69 = phi i64 [ 0, %exit__6 ], [ %75, %exiting__7 ]
  %70 = icmp sle i64 %69, %68
  br i1 %70, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %69)
  %72 = bitcast i8* %71 to { double, double }**
  %73 = load { double, double }*, { double, double }** %72, align 8
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %74, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %75 = add i64 %69, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  %76 = sub i64 %29, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %77 = phi i64 [ 0, %exit__7 ], [ %82, %exiting__8 ]
  %78 = icmp sle i64 %77, %76
  br i1 %78, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %77)
  %80 = bitcast i8* %79 to %Callable**
  %81 = load %Callable*, %Callable** %80, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %81, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %81, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %82 = add i64 %77, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %plan, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unprepare, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unprepare, i32 -1)
  ret %Callable* %43
}

define internal void @Lifted__PartialApplication__11__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, { %Array* }* }* getelementptr ({ %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Array*, %Array*, { %Array* }* }*
  %7 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %6, i32 0, i32 2
  store %Array* %2, %Array** %7, align 8
  store %Array* %4, %Array** %8, align 8
  %10 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %10, { %Array* }** %9, align 8
  %11 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %12 = load %Callable*, %Callable** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %5, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, { %Array* }* }* getelementptr ({ %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Array*, %Array*, { %Array* }* }*
  %7 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %6, i32 0, i32 2
  store %Array* %2, %Array** %7, align 8
  store %Array* %4, %Array** %8, align 8
  %10 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %10, { %Array* }** %9, align 8
  %11 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %12 = load %Callable*, %Callable** %11, align 8
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %12, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %5, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, { %Array* }* }* getelementptr ({ %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Array*, { %Array* }* }*
  %12 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %11, i32 0, i32 2
  store %Array* %7, %Array** %12, align 8
  store %Array* %9, %Array** %13, align 8
  store { %Array* }* %4, { %Array* }** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array*, { %Array* }* }* }* getelementptr ({ %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { %Array*, %Array*, { %Array* }* }* }*
  %17 = getelementptr inbounds { %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { %Array*, %Array*, { %Array* }* }* %11, { %Array*, %Array*, { %Array* }* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, { %Array* }* }* getelementptr ({ %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Array*, { %Array* }* }*
  %12 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %11, i32 0, i32 2
  store %Array* %7, %Array** %12, align 8
  store %Array* %9, %Array** %13, align 8
  store { %Array* }* %4, { %Array* }** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array*, { %Array* }* }* }* getelementptr ({ %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { %Array*, %Array*, { %Array* }* }* }*
  %17 = getelementptr inbounds { %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { %Array*, %Array*, { %Array* }* }* %11, { %Array*, %Array*, { %Array* }* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load { %Array* }*, { %Array* }** %3, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____body(%Array* %4, %Array* %5, { %Array* }* %6)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Array*, { %Array* }* }, { %Array*, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load { %Array* }*, { %Array* }** %3, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____adj(%Array* %4, %Array* %5, { %Array* }* %6)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array*, { %Array* }* }*, { %Array*, %Array*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____ctl(%Array* %3, { %Array*, %Array*, { %Array* }* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array*, { %Array* }* }* }, { %Array*, { %Array*, %Array*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array*, { %Array* }* }*, { %Array*, %Array*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__ReflectAboutNegativeCoefficients____ctladj(%Array* %3, { %Array*, %Array*, { %Array* }* }* %4)
  ret void
}

define internal void @MemoryManagement__10__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { double, double }**
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__10__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { double, double }**
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { double, double, i64, i64, i64, i64, double, i64, %Callable* }* @Microsoft__Quantum__MachineLearning__TrainingOptions__body(double %LearningRate, double %Tolerance, i64 %MinibatchSize, i64 %NMeasurements, i64 %MaxEpochs, i64 %MaxStalls, double %StochasticRescaleFactor, i64 %ScoringPeriod, %Callable* %VerboseMessage) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %VerboseMessage, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %VerboseMessage, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double, i64, i64, i64, i64, double, i64, %Callable* }* getelementptr ({ double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double, i64, i64, i64, i64, double, i64, %Callable* }*
  %2 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 2
  %5 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 3
  %6 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 4
  %7 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 5
  %8 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 6
  %9 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 7
  %10 = getelementptr inbounds { double, double, i64, i64, i64, i64, double, i64, %Callable* }, { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1, i32 0, i32 8
  store double %LearningRate, double* %2, align 8
  store double %Tolerance, double* %3, align 8
  store i64 %MinibatchSize, i64* %4, align 4
  store i64 %NMeasurements, i64* %5, align 4
  store i64 %MaxEpochs, i64* %6, align 4
  store i64 %MaxStalls, i64* %7, align 4
  store double %StochasticRescaleFactor, double* %8, align 8
  store i64 %ScoringPeriod, i64* %9, align 4
  store %Callable* %VerboseMessage, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %VerboseMessage, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %VerboseMessage, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %VerboseMessage, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %VerboseMessage, i32 -1)
  ret { double, double, i64, i64, i64, i64, double, i64, %Callable* }* %1
}

define internal void @Microsoft__Quantum__Canon___9e001bb7f66049e0a843d161f2c1deac_Ignore__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %String* }*
  %1 = getelementptr inbounds { %String* }, { %String* }* %0, i32 0, i32 0
  %2 = load %String*, %String** %1, align 8
  call void @Microsoft__Quantum__Canon___9e001bb7f66049e0a843d161f2c1deac_Ignore__body(%String* %2)
  ret void
}

define internal void @Microsoft__Quantum__Canon___9e001bb7f66049e0a843d161f2c1deac_Ignore__body(%String* %value) {
entry:
  ret void
}

define internal i1 @Microsoft__Quantum__Arrays___b8502d12d9d54d60a228b6d21de14ed7_IsEmpty__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { i64, %Array* }*, i2, i64 }**
  %6 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %5, align 8
  %7 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %6, i32 0, i32 0
  %8 = load { i64, %Array* }*, { i64, %Array* }** %7, align 8
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %8, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { i64, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = bitcast { { i64, %Array* }*, i2, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %14 = icmp eq i64 %0, 0
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to { { i64, %Array* }*, i2, i64 }**
  %20 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %19, align 8
  %21 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %20, i32 0, i32 0
  %22 = load { i64, %Array* }*, { i64, %Array* }** %21, align 8
  %23 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %22, i32 0, i32 1
  %24 = load %Array*, %Array** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 -1)
  %25 = bitcast { i64, %Array* }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  %26 = bitcast { { i64, %Array* }*, i2, i64 }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %14
}

define internal %Array* @Microsoft__Quantum__Arrays___db69bea2cd3249c5b832b64e75b5d986_ForEach__body(%Callable* %action, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %action, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %action, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to %Array**
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %7 = icmp eq i64 %length, 0
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %action, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %action, i32 -1)
  %9 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %11 = bitcast i8* %10 to %Array**
  %12 = load %Array*, %Array** %11, align 8
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr inbounds { %Array* }, { %Array* }* %14, i32 0, i32 0
  store %Array* %12, %Array** %15, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %action, %Tuple* %13, %Tuple* %16)
  %17 = bitcast %Tuple* %16 to { double }*
  %18 = getelementptr inbounds { double }, { double }* %17, i32 0, i32 0
  %first = load double, double* %18, align 8
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %20 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %21 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %22 = icmp sle i64 %21, %9
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %21)
  %24 = bitcast i8* %23 to %Array**
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %8

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %20
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %27)
  %30 = bitcast i8* %29 to double*
  store double %first, double* %30, align 8
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %19, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 1, %exit__3 ], [ %49, %exiting__4 ]
  %33 = icmp sle i64 %idx, %32
  br i1 %33, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %34 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = call %Array* @__quantum__rt__array_copy(%Array* %34, i1 false)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %37 = bitcast i8* %36 to %Array**
  %38 = load %Array*, %Array** %37, align 8
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Array* }*
  %41 = getelementptr inbounds { %Array* }, { %Array* }* %40, i32 0, i32 0
  store %Array* %38, %Array** %41, align 8
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %action, %Tuple* %39, %Tuple* %42)
  %43 = bitcast %Tuple* %42 to { double }*
  %44 = getelementptr inbounds { double }, { double }* %43, i32 0, i32 0
  %45 = load double, double* %44, align 8
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx)
  %47 = bitcast i8* %46 to double*
  %48 = load double, double* %47, align 8
  store double %45, double* %47, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  store %Array* %35, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %49 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %50 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %action, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %action, i32 -1)
  %51 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %52 = phi i64 [ 0, %exit__4 ], [ %57, %exiting__5 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %52)
  %55 = bitcast i8* %54 to %Array**
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %57 = add i64 %52, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret %Array* %50
}

define internal void @Lifted__PartialApplication__12__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { %Array*, %Array*, double }*, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %0, i32 0, i32 2
  %4 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %0, i32 0, i32 3
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { %Array*, %Array*, double }*, %Array*, i64 }* getelementptr ({ double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { %Array*, %Array*, double }*, %Array*, i64 }*
  %12 = getelementptr inbounds { double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store { %Array*, %Array*, double }* %4, { %Array*, %Array*, double }** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store i64 %9, i64* %15, align 4
  %16 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__EstimateClassificationProbability__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, { %Array*, %Array*, double }*, %Array*, i64 }*
  %1 = getelementptr inbounds { double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, { %Array*, %Array*, double }*, %Array*, i64 }, { double, { %Array*, %Array*, double }*, %Array*, i64 }* %0, i32 0, i32 3
  %5 = load double, double* %1, align 8
  %6 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load i64, i64* %4, align 4
  %9 = call double @Microsoft__Quantum__MachineLearning__EstimateClassificationProbability__body(double %5, { %Array*, %Array*, double }* %6, %Array* %7, i64 %8)
  %10 = bitcast %Tuple* %result-tuple to { double }*
  %11 = getelementptr inbounds { double }, { double }* %10, i32 0, i32 0
  store double %9, double* %11, align 8
  ret void
}

define internal void @MemoryManagement__11__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { %Array*, %Array*, double }*, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %0, i32 0, i32 2
  %4 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %3, align 8
  %5 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %4, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { { i64, %Array* }*, i2, i64 }**
  %13 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %12, align 8
  %14 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %13, i32 0, i32 0
  %15 = load { i64, %Array* }*, { i64, %Array* }** %14, align 8
  %16 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %15, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 %count-change)
  %18 = bitcast { i64, %Array* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 %count-change)
  %19 = bitcast { { i64, %Array* }*, i2, i64 }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 %count-change)
  %21 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %4, i32 0, i32 1
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 %count-change)
  %23 = bitcast { %Array*, %Array*, double }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__11__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { %Array*, %Array*, double }*, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, { %Array*, %Array*, double }*, i64 }, { %Callable*, double, { %Array*, %Array*, double }*, i64 }* %0, i32 0, i32 2
  %4 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %3, align 8
  %5 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %4, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { { i64, %Array* }*, i2, i64 }**
  %13 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %12, align 8
  %14 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %13, i32 0, i32 0
  %15 = load { i64, %Array* }*, { i64, %Array* }** %14, align 8
  %16 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %15, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 %count-change)
  %18 = bitcast { i64, %Array* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 %count-change)
  %19 = bitcast { { i64, %Array* }*, i2, i64 }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %19, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 %count-change)
  %21 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %4, i32 0, i32 1
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 %count-change)
  %23 = bitcast { %Array*, %Array*, double }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__MachineLearning__EstimateClassificationProbability__body(double %tolerance, { %Array*, %Array*, double }* %model, %Array* %sample, i64 %nMeasurements) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { i64, %Array* }*, i2, i64 }**
  %8 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %7, align 8
  %9 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %8, i32 0, i32 0
  %10 = load { i64, %Array* }*, { i64, %Array* }** %9, align 8
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %10, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { i64, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = bitcast { { i64, %Array* }*, i2, i64 }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %model, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, %Array*, double }* %model to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sample, i32 1)
  %19 = sitofp i64 %2 to double
  %20 = fdiv double %tolerance, %19
  %encodedSample = call { i64, %Callable* }* @Microsoft__Quantum__MachineLearning__ApproximateInputEncoder__body(double %20, %Array* %sample)
  %21 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %encodedSample, i32 0, i32 1
  %22 = load %Callable*, %Callable** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %22, i32 1)
  %23 = bitcast { i64, %Callable* }* %encodedSample to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 1)
  %24 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 1)
  %25 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %26 = phi i64 [ 0, %exit__1 ], [ %37, %exiting__2 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %26)
  %29 = bitcast i8* %28 to { { i64, %Array* }*, i2, i64 }**
  %30 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %29, align 8
  %31 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %30, i32 0, i32 0
  %32 = load { i64, %Array* }*, { i64, %Array* }** %31, align 8
  %33 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %32, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 1)
  %35 = bitcast { i64, %Array* }* %32 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  %36 = bitcast { { i64, %Array* }*, i2, i64 }* %30 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %37 = add i64 %26, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 1)
  %38 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, { %Array*, %Array*, double }* }* getelementptr ({ %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* null, i32 1) to i64))
  %39 = bitcast %Tuple* %38 to { %Callable*, %Callable*, { %Array*, %Array*, double }* }*
  %40 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %39, i32 0, i32 0
  %41 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %39, i32 0, i32 1
  %42 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %39, i32 0, i32 2
  store %Callable* %24, %Callable** %40, align 8
  store %Callable* %22, %Callable** %41, align 8
  store { %Array*, %Array*, double }* %model, { %Array*, %Array*, double }** %42, align 8
  %43 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__13__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__12__FunctionTable, %Tuple* %38)
  %44 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %encodedSample, i32 0, i32 0
  %45 = load i64, i64* %44, align 4
  %46 = call %Callable* @Microsoft__Quantum__MachineLearning____QsRef0__TailMeasurement____body(i64 %45)
  %47 = call double @Microsoft__Quantum__Characterization__EstimateFrequencyA__body(%Callable* %43, %Callable* %46, i64 %45, i64 %nMeasurements)
  %48 = fsub double 1.000000e+00, %47
  %49 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %50 = phi i64 [ 0, %exit__2 ], [ %61, %exiting__3 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %50)
  %53 = bitcast i8* %52 to { { i64, %Array* }*, i2, i64 }**
  %54 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %53, align 8
  %55 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %54, i32 0, i32 0
  %56 = load { i64, %Array* }*, { i64, %Array* }** %55, align 8
  %57 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %56, i32 0, i32 1
  %58 = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 -1)
  %59 = bitcast { i64, %Array* }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %59, i32 -1)
  %60 = bitcast { { i64, %Array* }*, i2, i64 }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %60, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %61 = add i64 %50, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sample, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %46, i32 -1)
  ret double %48
}

define internal double @Microsoft__Quantum__Characterization__EstimateFrequencyA__body(%Callable* %preparation, %Callable* %measurement, i64 %nQubits, i64 %nMeasurements) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %measurement, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %measurement, i32 1)
  %0 = call double @Microsoft__Quantum__Characterization__EstimateFrequency__body(%Callable* %preparation, %Callable* %measurement, i64 %nQubits, i64 %nMeasurements)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %measurement, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %measurement, i32 -1)
  ret double %0
}

define internal void @Lifted__PartialApplication__13__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 2
  %4 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array*, %Array*, double }*, %Array* }* getelementptr ({ %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array*, %Array*, double }*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store { %Array*, %Array*, double }* %4, { %Array*, %Array*, double }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__13__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 2
  %4 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array*, %Array*, double }*, %Array* }* getelementptr ({ %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array*, %Array*, double }*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store { %Array*, %Array*, double }* %4, { %Array*, %Array*, double }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array*, %Array*, double }*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____body(%Callable* %4, { %Array*, %Array*, double }* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array*, %Array*, double }*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, { %Array*, %Array*, double }*, %Array* }, { %Callable*, { %Array*, %Array*, double }*, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__MachineLearning____QsRef0__PrepareClassification____adj(%Callable* %4, { %Array*, %Array*, double }* %5, %Array* %6)
  ret void
}

define internal void @MemoryManagement__12__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 2
  %6 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %8)
  %10 = sub i64 %9, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %11 = phi i64 [ 0, %entry ], [ %22, %exiting__1 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %11)
  %14 = bitcast i8* %13 to { { i64, %Array* }*, i2, i64 }**
  %15 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %14, align 8
  %16 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %15, i32 0, i32 0
  %17 = load { i64, %Array* }*, { i64, %Array* }** %16, align 8
  %18 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %17, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 %count-change)
  %20 = bitcast { i64, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 %count-change)
  %21 = bitcast { { i64, %Array* }*, i2, i64 }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %22 = add i64 %11, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %23 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %6, i32 0, i32 1
  %24 = load %Array*, %Array** %23, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 %count-change)
  %25 = bitcast { %Array*, %Array*, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__12__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, { %Array*, %Array*, double }* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, { %Array*, %Array*, double }* }, { %Callable*, %Callable*, { %Array*, %Array*, double }* }* %0, i32 0, i32 2
  %6 = load { %Array*, %Array*, double }*, { %Array*, %Array*, double }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %8)
  %10 = sub i64 %9, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %11 = phi i64 [ 0, %entry ], [ %22, %exiting__1 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %11)
  %14 = bitcast i8* %13 to { { i64, %Array* }*, i2, i64 }**
  %15 = load { { i64, %Array* }*, i2, i64 }*, { { i64, %Array* }*, i2, i64 }** %14, align 8
  %16 = getelementptr inbounds { { i64, %Array* }*, i2, i64 }, { { i64, %Array* }*, i2, i64 }* %15, i32 0, i32 0
  %17 = load { i64, %Array* }*, { i64, %Array* }** %16, align 8
  %18 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %17, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 %count-change)
  %20 = bitcast { i64, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 %count-change)
  %21 = bitcast { { i64, %Array* }*, i2, i64 }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %22 = add i64 %11, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %23 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %6, i32 0, i32 1
  %24 = load %Array*, %Array** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 %count-change)
  %25 = bitcast { %Array*, %Array*, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal i64 @Microsoft__Quantum__Math__Ceiling__body(double %value) {
entry:
  %0 = call { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef2__ExtendedTruncation____body(double %value)
  %1 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 0
  %truncated = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 1
  %remainder = load double, double* %2, align 8
  %3 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 2
  %isPositive = load i1, i1* %3, align 1
  %4 = call double @Microsoft__Quantum__Math__AbsD__body(double %remainder)
  %5 = fcmp ole double %4, 1.000000e-15
  br i1 %5, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %6 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret i64 %truncated

else__1:                                          ; preds = %entry
  br i1 %isPositive, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %7 = add i64 %truncated, 1
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %8 = phi i64 [ %7, %condTrue__1 ], [ %truncated, %condFalse__1 ]
  %9 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret i64 %8

continue__1:                                      ; No predecessors!
  unreachable
}

define internal i64 @Microsoft__Quantum__MachineLearning__InferredLabel__body(double %bias, double %probability) {
entry:
  %0 = fadd double %probability, %bias
  %1 = fcmp ogt double %0, 5.000000e-01
  %2 = select i1 %1, i64 1, i64 0
  ret i64 %2
}

define internal %Array* @Microsoft__Quantum__Arrays___d3aba77e00014a79bc8f48ec51f8fb2a_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = icmp eq i64 %length, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %3 = bitcast i8* %2 to double*
  %4 = load double, double* %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { double }*
  %7 = getelementptr inbounds { double }, { double }* %6, i32 0, i32 0
  store double %4, double* %7, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %5, %Tuple* %8)
  %9 = bitcast %Tuple* %8 to { i64 }*
  %10 = getelementptr inbounds { i64 }, { i64 }* %9, i32 0, i32 0
  %first = load i64, i64* %10, align 4
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %12 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %13 = phi i64 [ 0, %continue__1 ], [ %17, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %13)
  %16 = bitcast i8* %15 to i64*
  store i64 %first, i64* %16, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %11, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %18 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 1, %exit__1 ], [ %34, %exiting__2 ]
  %19 = icmp sle i64 %idx, %18
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  %21 = call %Array* @__quantum__rt__array_copy(%Array* %20, i1 false)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %23 = bitcast i8* %22 to double*
  %24 = load double, double* %23, align 8
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { double }*
  %27 = getelementptr inbounds { double }, { double }* %26, i32 0, i32 0
  store double %24, double* %27, align 8
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %25, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { i64 }*
  %30 = getelementptr inbounds { i64 }, { i64 }* %29, i32 0, i32 0
  %31 = load i64, i64* %30, align 4
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %idx)
  %33 = bitcast i8* %32 to i64*
  store i64 %31, i64* %33, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  store %Array* %21, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %34 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %35 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret %Array* %35
}

define internal void @Lifted__PartialApplication__14__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double }*
  %4 = getelementptr inbounds { double }, { double }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__MachineLearning__InferredLabel__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load double, double* %2, align 8
  %5 = call i64 @Microsoft__Quantum__MachineLearning__InferredLabel__body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { i64 }*
  %7 = getelementptr inbounds { i64 }, { i64 }* %6, i32 0, i32 0
  store i64 %5, i64* %7, align 4
  ret void
}

define internal void @MemoryManagement__13__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__13__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___0a5870f6f00b4e91a76081167d0bc275_Where__body(%Callable* %predicate, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %predicate, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %predicate, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i64, i64 }**
  %6 = load { i64, i64 }*, { i64, i64 }** %5, align 8
  %7 = bitcast { i64, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___facc0657b0284c16ae2c0d999b143be0_Fst__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___bfd0dc2872b54301bd24b64a2c23e89e_Snd__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %11 = call %Array* @Microsoft__Quantum__Arrays___847843f64261497cbcdec42c04c12cc1_Mapped__body(%Callable* %predicate, %Array* %array)
  %12 = call %Array* @Microsoft__Quantum__Arrays___5ef583d7ebd84277a2b7db5af95f2088_Enumerated__body(%Array* %11)
  %13 = call %Array* @Microsoft__Quantum__Arrays___4aa279afe82a49f18051c32a38c71fb7_Filtered__body(%Callable* %10, %Array* %12)
  %14 = call %Array* @Microsoft__Quantum__Arrays___6c6f349b2d0c4e67b944e93ebc590a5b_Mapped__body(%Callable* %9, %Array* %13)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %predicate, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %predicate, i32 -1)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to { i64, i64 }**
  %20 = load { i64, i64 }*, { i64, i64 }** %19, align 8
  %21 = bitcast { i64, i64 }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  %23 = call i64 @__quantum__rt__array_get_size_1d(%Array* %12)
  %24 = sub i64 %23, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %25 = phi i64 [ 0, %exit__2 ], [ %31, %exiting__3 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %25)
  %28 = bitcast i8* %27 to { i64, i1 }**
  %29 = load { i64, i1 }*, { i64, i1 }** %28, align 8
  %30 = bitcast { i64, i1 }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %25, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  %32 = call i64 @__quantum__rt__array_get_size_1d(%Array* %13)
  %33 = sub i64 %32, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %34 = phi i64 [ 0, %exit__3 ], [ %40, %exiting__4 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %34)
  %37 = bitcast i8* %36 to { i64, i1 }**
  %38 = load { i64, i1 }*, { i64, i1 }** %37, align 8
  %39 = bitcast { i64, i1 }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %40 = add i64 %34, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  ret %Array* %14
}

define internal void @Microsoft__Quantum__Logical__NotEqualI__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load i64, i64* %2, align 4
  %5 = call i1 @Microsoft__Quantum__Logical__NotEqualI__body(i64 %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { i1 }*
  %7 = getelementptr inbounds { i1 }, { i1 }* %6, i32 0, i32 0
  store i1 %5, i1* %7, align 1
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___4676d5f0d26141cfa6e357563bd65669_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = icmp eq i64 %nElements, 0
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %4

continue__1:                                      ; preds = %condContinue__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64 }* getelementptr ({ i64, i64 }, { i64, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i64, i64 }*
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1
  store i64 %7, i64* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %16 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %17 = phi i64 [ 0, %continue__1 ], [ %21, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %17)
  %20 = bitcast i8* %19 to { i64, i64 }**
  store { i64, i64 }* %12, { i64, i64 }** %20, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %21 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %15, %Array** %output, align 8
  %22 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %23)
  %26 = bitcast i8* %25 to { i64, i64 }**
  %27 = load { i64, i64 }*, { i64, i64 }** %26, align 8
  %28 = bitcast { i64, i64 }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %30 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 1, %exit__2 ], [ %48, %exiting__3 ]
  %31 = icmp sle i64 %idxElement, %30
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 4
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64 }* getelementptr ({ i64, i64 }, { i64, i64 }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, i64 }*
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1
  store i64 %36, i64* %42, align 4
  store i64 %39, i64* %43, align 4
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxElement)
  %45 = bitcast i8* %44 to { i64, i64 }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %46 = load { i64, i64 }*, { i64, i64 }** %45, align 8
  %47 = bitcast { i64, i64 }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  store { i64, i64 }* %41, { i64, i64 }** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { i64, i64 }**
  %56 = load { i64, i64 }*, { i64, i64 }** %55, align 8
  %57 = bitcast { i64, i64 }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret %Array* %49
}

define internal i1 @Microsoft__Quantum__Logical__NotEqualI__body(i64 %a, i64 %b) {
entry:
  %0 = icmp ne i64 %a, %b
  ret i1 %0
}

define internal i64 @Microsoft__Quantum__Arrays___2d4fd0446d3a462ca520e9612ada343e_Fold__body(%Callable* %folder, i64 %state, %Array* %array) {
entry:
  %current = alloca i64, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  store i64 %state, i64* %current, align 4
  %0 = call %Range @Microsoft__Quantum__Arrays___51e146e9e3f741e2a6043055f76ad080_IndexRange__body(%Array* %array)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxElement = phi i64 [ %1, %preheader__1 ], [ %20, %exiting__1 ]
  %5 = icmp sle i64 %idxElement, %3
  %6 = icmp sge i64 %idxElement, %3
  %7 = select i1 %4, i1 %5, i1 %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = load i64, i64* %current, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 4
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64 }* getelementptr ({ i64, i64 }, { i64, i64 }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, i64 }*
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1
  store i64 %8, i64* %14, align 4
  store i64 %11, i64* %15, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %folder, %Tuple* %12, %Tuple* %16)
  %17 = bitcast %Tuple* %16 to { i64 }*
  %18 = getelementptr inbounds { i64 }, { i64 }* %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 4
  store i64 %19, i64* %current, align 4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %idxElement, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  %21 = load i64, i64* %current, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i64 %21
}

define internal void @Microsoft__Quantum__Math__MaxI__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load i64, i64* %2, align 4
  %5 = call i64 @Microsoft__Quantum__Math__MaxI__body(i64 %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { i64 }*
  %7 = getelementptr inbounds { i64 }, { i64 }* %6, i32 0, i32 0
  store i64 %5, i64* %7, align 4
  ret void
}

define internal %Array* @Microsoft__Quantum__MachineLearning___6dd27c99de61421cb8da3bf3154034a7_Sampled__body({ %Array* }* %schedule, %Array* %values) {
entry:
  %sampled = alloca %Array*, align 8
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %schedule, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to %Range*
  %8 = load %Range, %Range* %7, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %10 = bitcast { %Array* }* %schedule to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %13)
  %16 = bitcast i8* %15 to %Array**
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 1)
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  store %Array* %19, %Array** %sampled, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %20 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %21 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %21)
  %24 = bitcast i8* %23 to %Range*
  %range = load %Range, %Range* %24, align 4
  %25 = extractvalue %Range %range, 0
  %26 = extractvalue %Range %range, 1
  %27 = extractvalue %Range %range, 2
  br label %preheader__1

exiting__3:                                       ; preds = %exit__4
  %28 = add i64 %21, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %29 = load %Array*, %Array** %sampled, align 8
  %30 = sub i64 %2, 1
  br label %header__10

preheader__1:                                     ; preds = %body__3
  %31 = icmp sgt i64 %26, 0
  br label %header__4

header__4:                                        ; preds = %exiting__4, %preheader__1
  %index = phi i64 [ %25, %preheader__1 ], [ %45, %exiting__4 ]
  %32 = icmp sle i64 %index, %27
  %33 = icmp sge i64 %index, %27
  %34 = select i1 %31, i1 %32, i1 %33
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = load %Array*, %Array** %sampled, align 8
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %index)
  %37 = bitcast i8* %36 to %Array**
  %38 = load %Array*, %Array** %37, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 1)
  %39 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 0)
  %41 = bitcast i8* %40 to %Array**
  store %Array* %38, %Array** %41, align 8
  %42 = call %Array* @__quantum__rt__array_concatenate(%Array* %35, %Array* %39)
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %42)
  %44 = sub i64 %43, 1
  br label %header__5

exiting__4:                                       ; preds = %exit__9
  %45 = add i64 %index, %26
  br label %header__4

exit__4:                                          ; preds = %header__4
  br label %exiting__3

header__5:                                        ; preds = %exiting__5, %body__4
  %46 = phi i64 [ 0, %body__4 ], [ %51, %exiting__5 ]
  %47 = icmp sle i64 %46, %44
  br i1 %47, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %51 = add i64 %46, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 1)
  %52 = sub i64 %43, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %53 = phi i64 [ 0, %exit__5 ], [ %58, %exiting__6 ]
  %54 = icmp sle i64 %53, %52
  br i1 %54, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 %53)
  %56 = bitcast i8* %55 to %Array**
  %57 = load %Array*, %Array** %56, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %58 = add i64 %53, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 1)
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %35)
  %60 = sub i64 %59, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %61 = phi i64 [ 0, %exit__6 ], [ %66, %exiting__7 ]
  %62 = icmp sle i64 %61, %60
  br i1 %62, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %61)
  %64 = bitcast i8* %63 to %Array**
  %65 = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %66 = add i64 %61, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 -1)
  %67 = sub i64 %59, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %68 = phi i64 [ 0, %exit__7 ], [ %73, %exiting__8 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %68)
  %71 = bitcast i8* %70 to %Array**
  %72 = load %Array*, %Array** %71, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %73 = add i64 %68, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i32 -1)
  store %Array* %42, %Array** %sampled, align 8
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %74 = phi i64 [ 0, %exit__8 ], [ %79, %exiting__9 ]
  %75 = icmp sle i64 %74, 0
  br i1 %75, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 %74)
  %77 = bitcast i8* %76 to %Array**
  %78 = load %Array*, %Array** %77, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %79 = add i64 %74, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  br label %exiting__4

header__10:                                       ; preds = %exiting__10, %exit__3
  %80 = phi i64 [ 0, %exit__3 ], [ %85, %exiting__10 ]
  %81 = icmp sle i64 %80, %30
  br i1 %81, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %80)
  %83 = bitcast i8* %82 to %Range*
  %84 = load %Range, %Range* %83, align 4
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %85 = add i64 %80, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  %86 = sub i64 %11, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %87 = phi i64 [ 0, %exit__10 ], [ %92, %exiting__11 ]
  %88 = icmp sle i64 %87, %86
  br i1 %88, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %87)
  %90 = bitcast i8* %89 to %Array**
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %92 = add i64 %87, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 -1)
  %93 = call i64 @__quantum__rt__array_get_size_1d(%Array* %29)
  %94 = sub i64 %93, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %95 = phi i64 [ 0, %exit__11 ], [ %100, %exiting__12 ]
  %96 = icmp sle i64 %95, %94
  br i1 %96, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 %95)
  %98 = bitcast i8* %97 to %Array**
  %99 = load %Array*, %Array** %98, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %99, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %100 = add i64 %95, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  ret %Array* %29
}

define internal %Array* @Microsoft__Quantum__MachineLearning___9df2eba66a764c8abe9e53ac519cccaa_Sampled__body({ %Array* }* %schedule, %Array* %values) {
entry:
  %sampled = alloca %Array*, align 8
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %schedule, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to %Range*
  %8 = load %Range, %Range* %7, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %10 = bitcast { %Array* }* %schedule to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 1)
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  store %Array* %11, %Array** %sampled, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %13)
  %16 = bitcast i8* %15 to %Range*
  %range = load %Range, %Range* %16, align 4
  %17 = extractvalue %Range %range, 0
  %18 = extractvalue %Range %range, 1
  %19 = extractvalue %Range %range, 2
  br label %preheader__1

exiting__2:                                       ; preds = %exit__3
  %20 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %21 = load %Array*, %Array** %sampled, align 8
  %22 = sub i64 %2, 1
  br label %header__4

preheader__1:                                     ; preds = %body__2
  %23 = icmp sgt i64 %18, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %index = phi i64 [ %17, %preheader__1 ], [ %35, %exiting__3 ]
  %24 = icmp sle i64 %index, %19
  %25 = icmp sge i64 %index, %19
  %26 = select i1 %23, i1 %24, i1 %25
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = load %Array*, %Array** %sampled, align 8
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %index)
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 4
  %31 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 0)
  %33 = bitcast i8* %32 to i64*
  store i64 %30, i64* %33, align 4
  %34 = call %Array* @__quantum__rt__array_concatenate(%Array* %27, %Array* %31)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  store %Array* %34, %Array** %sampled, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %index, %18
  br label %header__3

exit__3:                                          ; preds = %header__3
  br label %exiting__2

header__4:                                        ; preds = %exiting__4, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__4 ]
  %37 = icmp sle i64 %36, %22
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %36)
  %39 = bitcast i8* %38 to %Range*
  %40 = load %Range, %Range* %39, align 4
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %41 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  ret %Array* %21
}

define internal { i64, i64 }* @Microsoft__Quantum__MachineLearning__ValidationResults__body(i64 %NMisclassifications, i64 %NValidationSamples) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64 }* getelementptr ({ i64, i64 }, { i64, i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, i64 }*
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1
  store i64 %NMisclassifications, i64* %2, align 4
  store i64 %NValidationSamples, i64* %3, align 4
  ret { i64, i64 }* %1
}

define internal void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTest____body(i1 %phaseShift, %Callable* %commonPreparation, %Callable* %preparation1, %Callable* %preparation2, %Qubit* %control, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  call void @__quantum__qis__h__body(%Qubit* %control)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %1, i32 0, i32 0
  store %Array* %target, %Array** %2, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %commonPreparation, %Tuple* %0, %Tuple* null)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %preparation1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %3)
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  store %Qubit* %control, %Qubit** %6, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %4, %Array** %9, align 8
  store %Array* %target, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %7, %Tuple* null)
  call void @__quantum__qis__x__body(%Qubit* %control)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %preparation2, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 0)
  %14 = bitcast i8* %13 to %Qubit**
  store %Qubit* %control, %Qubit** %14, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, %Array* }*
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  store %Array* %12, %Array** %17, align 8
  store %Array* %target, %Array** %18, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %15, %Tuple* null)
  call void @__quantum__qis__x__body(%Qubit* %control)
  br i1 %phaseShift, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %19 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__I__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %21 = phi %Callable* [ %19, %condTrue__1 ], [ %20, %condFalse__1 ]
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { %Qubit* }*
  %24 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %23, i32 0, i32 0
  store %Qubit* %control, %Qubit** %24, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %22, %Tuple* null)
  call void @__quantum__qis__h__body(%Qubit* %control)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  ret void
}

declare void @__quantum__qis__h__body(%Qubit*)

declare void @__quantum__qis__x__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__S__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__I__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__I__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__I__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__I__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__I__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__I__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__I__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__I__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__s__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__s__adj(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__s__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__s__ctladj(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__I__body(%Qubit* %target) {
entry:
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__I__adj(%Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__I__body(%Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__I__ctl(%Array* %__controlQubits__, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__I__ctladj(%Array* %__controlQubits__, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @Microsoft__Quantum__Intrinsic__I__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTest____adj(i1 %phaseShift, %Callable* %commonPreparation, %Callable* %preparation1, %Callable* %preparation2, %Qubit* %control, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  call void @__quantum__qis__h__body(%Qubit* %control)
  br i1 %phaseShift, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__I__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi %Callable* [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %2, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Qubit* }*
  %6 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %5, i32 0, i32 0
  store %Qubit* %control, %Qubit** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %4, %Tuple* null)
  call void @__quantum__qis__x__body(%Qubit* %control)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %preparation2, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 0)
  %10 = bitcast i8* %9 to %Qubit**
  store %Qubit* %control, %Qubit** %10, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 1
  store %Array* %8, %Array** %13, align 8
  store %Array* %target, %Array** %14, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %11, %Tuple* null)
  call void @__quantum__qis__x__body(%Qubit* %control)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %preparation1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to %Qubit**
  store %Qubit* %control, %Qubit** %18, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, %Array* }*
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  store %Array* %16, %Array** %21, align 8
  store %Array* %target, %Array** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %19, %Tuple* null)
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %commonPreparation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array* }*
  %26 = getelementptr inbounds { %Array* }, { %Array* }* %25, i32 0, i32 0
  store %Array* %target, %Array** %26, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__qis__h__body(%Qubit* %control)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____body(i1 %phaseShift, %Callable* %commonPreparation, %Callable* %preparation1, %Callable* %preparation2, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %control = call %Qubit* @Microsoft__Quantum__Arrays___8fb37798f2ee45efaa2fd297b4d00535_Head__body(%Array* %register)
  %target = call %Array* @Microsoft__Quantum__Arrays___c6242f92bf314764965b3b33dc50fbb0_Rest__body(%Array* %register)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  call void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTest____body(i1 %phaseShift, %Callable* %commonPreparation, %Callable* %preparation1, %Callable* %preparation2, %Qubit* %control, %Array* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  ret void
}

define internal %Qubit* @Microsoft__Quantum__Arrays___8fb37798f2ee45efaa2fd297b4d00535_Head__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp sgt i64 %0, 0
  %2 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @18, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %1, i1 true, %String* %2)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %4 = bitcast i8* %3 to %Qubit**
  %5 = load %Qubit*, %Qubit** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  ret %Qubit* %5
}

define internal %Array* @Microsoft__Quantum__Arrays___c6242f92bf314764965b3b33dc50fbb0_Rest__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range { i64 1, i64 1, i64 0 }, i64 %1, 2
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %2, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  ret %Array* %3
}

define internal void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____adj(i1 %phaseShift, %Callable* %commonPreparation, %Callable* %preparation1, %Callable* %preparation2, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %__qsVar0__control__ = call %Qubit* @Microsoft__Quantum__Arrays___8fb37798f2ee45efaa2fd297b4d00535_Head__body(%Array* %register)
  %__qsVar1__target__ = call %Array* @Microsoft__Quantum__Arrays___c6242f92bf314764965b3b33dc50fbb0_Rest__body(%Array* %register)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__target__, i32 1)
  call void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTest____adj(i1 %phaseShift, %Callable* %commonPreparation, %Callable* %preparation1, %Callable* %preparation2, %Qubit* %__qsVar0__control__, %Array* %__qsVar1__target__)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %commonPreparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__target__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__target__, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Characterization____QsRef1__HeadMeasurement____body(i64 %nQubits) {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Measure__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___bf1b92e74b5c49e78cf7e075bdb2fa6e_ConstantArray__body(i64 %nQubits, i2 0)
  %2 = call %Array* @__quantum__rt__array_copy(%Array* %1, i1 false)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 0)
  %4 = bitcast i8* %3 to i2*
  store i2 -2, i2* %4, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, %Array* }*
  %7 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %6, i32 0, i32 1
  store %Callable* %0, %Callable** %7, align 8
  store %Array* %2, %Array** %8, align 8
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__15__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__7__FunctionTable, %Tuple* %5)
  ret %Callable* %9
}

define internal void @Lifted__PartialApplication__15__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___bf1b92e74b5c49e78cf7e075bdb2fa6e_ConstantArray__body(i64 %length, i2 %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %length)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to i2*
  store i2 %value, i2* %5, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret %Array* %0
}

define internal double @Microsoft__Quantum__Characterization__EstimateFrequency__body(%Callable* %preparation, %Callable* %measurement, i64 %nQubits, i64 %nMeasurements) {
entry:
  %nUp = alloca i64, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %measurement, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %measurement, i32 1)
  store i64 0, i64* %nUp, align 4
  %0 = sub i64 %nMeasurements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxMeasurement = phi i64 [ 0, %entry ], [ %16, %exiting__1 ]
  %1 = icmp sle i64 %idxMeasurement, %0
  br i1 %1, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %register = call %Array* @__quantum__rt__qubit_allocate_array(i64 %nQubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  store %Array* %register, %Array** %4, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %preparation, %Tuple* %2, %Tuple* null)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %register, %Array** %7, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Result* }* getelementptr ({ %Result* }, { %Result* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %measurement, %Tuple* %5, %Tuple* %8)
  %9 = bitcast %Tuple* %8 to { %Result* }*
  %10 = getelementptr inbounds { %Result* }, { %Result* }* %9, i32 0, i32 0
  %result = load %Result*, %Result** %10, align 8
  %11 = call %Result* @__quantum__rt__result_get_zero()
  %12 = call i1 @__quantum__rt__result_equal(%Result* %result, %Result* %11)
  br i1 %12, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %13 = load i64, i64* %nUp, align 4
  %14 = add i64 %13, 1
  store i64 %14, i64* %nUp, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Reset__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___b87f7893639e4ac88fbb8d0a3ba1cbe1_ApplyToEach__body(%Callable* %15, %Array* %register)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %register)
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %16 = add i64 %idxMeasurement, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %17 = load i64, i64* %nUp, align 4
  %18 = sitofp i64 %17 to double
  %19 = sitofp i64 %nMeasurements to double
  %20 = fdiv double %18, %19
  call void @__quantum__rt__capture_update_alias_count(%Callable* %preparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %preparation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %measurement, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %measurement, i32 -1)
  ret double %20
}

declare %Qubit* @__quantum__rt__qubit_allocate()

declare %Array* @__quantum__rt__qubit_allocate_array(i64)

declare void @__quantum__rt__qubit_release_array(%Array*)

declare %Result* @__quantum__rt__result_get_zero()

declare i1 @__quantum__rt__result_equal(%Result*, %Result*)

define internal void @Microsoft__Quantum__Canon___b87f7893639e4ac88fbb8d0a3ba1cbe1_ApplyToEach__body(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___fca6ec94ae3342ea8545ea7003b87bf1_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %1, %preheader__1 ], [ %14, %exiting__1 ]
  %5 = icmp sle i64 %idxQubit, %3
  %6 = icmp sge i64 %idxQubit, %3
  %7 = select i1 %4, i1 %5, i1 %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Qubit* }*
  %13 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %12, i32 0, i32 0
  store %Qubit* %10, %Qubit** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %singleElementOperation, %Tuple* %11, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %14 = add i64 %idxQubit, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Reset__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %2)
  ret void
}

declare void @__quantum__rt__result_update_reference_count(%Result*, i32)

define internal void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %qubit) {
entry:
  %0 = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit)
  %1 = call %Result* @__quantum__rt__result_get_one()
  %2 = call i1 @__quantum__rt__result_equal(%Result* %0, %Result* %1)
  call void @__quantum__rt__result_update_reference_count(%Result* %0, i32 -1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

define internal void @Lifted__PartialApplication__16__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i1, %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load i1, i1* %1, align 1
  %3 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 3
  %6 = load %Callable*, %Callable** %5, align 8
  %7 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 4
  %8 = load %Callable*, %Callable** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Callable*, %Callable*, %Callable*, %Array* }* getelementptr ({ i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i1, %Callable*, %Callable*, %Callable*, %Array* }*
  %14 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 4
  store i1 %2, i1* %14, align 1
  store %Callable* %4, %Callable** %15, align 8
  store %Callable* %6, %Callable** %16, align 8
  store %Callable* %8, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__16__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i1, %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load i1, i1* %1, align 1
  %3 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 3
  %6 = load %Callable*, %Callable** %5, align 8
  %7 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 4
  %8 = load %Callable*, %Callable** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Callable*, %Callable*, %Callable*, %Array* }* getelementptr ({ i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i1, %Callable*, %Callable*, %Callable*, %Array* }*
  %14 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %13, i32 0, i32 4
  store i1 %2, i1* %14, align 1
  store %Callable* %4, %Callable** %15, align 8
  store %Callable* %6, %Callable** %16, align 8
  store %Callable* %8, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1, %Callable*, %Callable*, %Callable*, %Array* }*
  %1 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 4
  %6 = load i1, i1* %1, align 1
  %7 = load %Callable*, %Callable** %2, align 8
  %8 = load %Callable*, %Callable** %3, align 8
  %9 = load %Callable*, %Callable** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____body(i1 %6, %Callable* %7, %Callable* %8, %Callable* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1, %Callable*, %Callable*, %Callable*, %Array* }*
  %1 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { i1, %Callable*, %Callable*, %Callable*, %Array* }, { i1, %Callable*, %Callable*, %Callable*, %Array* }* %0, i32 0, i32 4
  %6 = load i1, i1* %1, align 1
  %7 = load %Callable*, %Callable** %2, align 8
  %8 = load %Callable*, %Callable** %3, align 8
  %9 = load %Callable*, %Callable** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Characterization____QsRef1__ApplyHadamardTestOnSingleRegister____adj(i1 %6, %Callable* %7, %Callable* %8, %Callable* %9, %Array* %10)
  ret void
}

define internal void @MemoryManagement__14__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i1, %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 3
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  %7 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 4
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__14__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i1, %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 3
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  %7 = getelementptr inbounds { %Callable*, i1, %Callable*, %Callable*, %Callable* }, { %Callable*, i1, %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 4
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceCP____body(double %tolerance, %Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %10)
  %13 = bitcast i8* %12 to { double, double }**
  %coefficient = load { double, double }*, { double, double }** %13, align 8
  %14 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %coefficient)
  %16 = fcmp ogt double %15, %tolerance
  br i1 %16, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  %17 = sub i64 %0, 1
  br label %header__3

continue__1:                                      ; preds = %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %18 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %19 = sub i64 %0, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__3 ]
  %21 = icmp sle i64 %20, %17
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %26 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 true

header__4:                                        ; preds = %exiting__4, %exit__2
  %27 = phi i64 [ 0, %exit__2 ], [ %33, %exiting__4 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %27)
  %30 = bitcast i8* %29 to { double, double }**
  %31 = load { double, double }*, { double, double }** %30, align 8
  %32 = bitcast { double, double }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %33 = add i64 %27, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 false
}

define internal double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 0
  %2 = load double, double* %1, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %2
}

define internal i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to double*
  %coefficient = load double, double* %5, align 8
  %6 = call double @Microsoft__Quantum__Math__AbsD__body(double %coefficient)
  %7 = fcmp oge double %6, %tolerance
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 true

continue__1:                                      ; preds = %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 false
}

define internal { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficients) {
entry:
  %coefficients1 = alloca %Array*, align 8
  %coefficients0 = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %newCoefficientsLength = sdiv i64 %0, 2
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %2 = sub i64 %newCoefficientsLength, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to double*
  store double 0.000000e+00, double* %6, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %1, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %9 = sub i64 %newCoefficientsLength, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %14, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %10)
  %13 = bitcast i8* %12 to double*
  store double 0.000000e+00, double* %13, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %14 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  store %Array* %8, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %15 = sub i64 %newCoefficientsLength, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxCoeff = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %16 = icmp sle i64 %idxCoeff, %15
  br i1 %16, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %17 = load %Array*, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20, align 8
  %22 = add i64 %idxCoeff, %newCoefficientsLength
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %22)
  %24 = bitcast i8* %23 to double*
  %25 = load double, double* %24, align 8
  %26 = fadd double %21, %25
  %27 = fmul double 5.000000e-01, %26
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idxCoeff)
  %29 = bitcast i8* %28 to double*
  store double %27, double* %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  store %Array* %18, %Array** %coefficients0, align 8
  %30 = load %Array*, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  %31 = call %Array* @__quantum__rt__array_copy(%Array* %30, i1 false)
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %33 = bitcast i8* %32 to double*
  %34 = load double, double* %33, align 8
  %35 = add i64 %idxCoeff, %newCoefficientsLength
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %35)
  %37 = bitcast i8* %36 to double*
  %38 = load double, double* %37, align 8
  %39 = fsub double %34, %38
  %40 = fmul double 5.000000e-01, %39
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %idxCoeff)
  %42 = bitcast i8* %41 to double*
  %43 = load double, double* %42, align 8
  store double %40, double* %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  store %Array* %31, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %idxCoeff, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %45 = load %Array*, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 1)
  %46 = load %Array*, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { %Array*, %Array* }*
  %49 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %48, i32 0, i32 1
  store %Array* %45, %Array** %49, align 8
  store %Array* %46, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %46, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  ret { %Array*, %Array* }* %48
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %qubits__1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  %1 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = call i1 @Microsoft__Quantum__Arrays___6ad2c538b55a4168b115e6cf3c7d63de_IsEmpty__body(%Array* %qubits__1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @12, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %5 = trunc i64 %4 to i32
  %6 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %5)
  %7 = fptosi double %6 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %7, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %8 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  %11 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %qubits__1)
  %12 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %11)
  %13 = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %qubits__1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %12, %Qubit* %13)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %15 = icmp eq i64 %14, 2
  br i1 %15, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %17 = bitcast i8* %16 to double*
  %18 = load double, double* %17, align 8
  %19 = call double @Microsoft__Quantum__Math__AbsD__body(double %18)
  %20 = fcmp ogt double %19, %tolerance
  br i1 %20, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %22 = bitcast i8* %21 to i2*
  store i2 0, i2* %22, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %24 = bitcast i8* %23 to double*
  %25 = load double, double* %24, align 8
  %theta = fmul double 1.000000e+00, %25
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %26 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %qubits__1)
  %27 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %26)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients0, { %Array* }* %27)
  %28 = getelementptr inbounds { %Array* }, { %Array* }* %27, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  %30 = bitcast { %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %31 = getelementptr inbounds { %Array* }, { %Array* }* %12, i32 0, i32 0
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %33 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  %34 = bitcast { %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  ret void
}

define internal i1 @Microsoft__Quantum__Arrays___6ad2c538b55a4168b115e6cf3c7d63de_IsEmpty__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp eq i64 %0, 0
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %1
}

define internal %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %nElementsTotal, double %defaultElement, %Array* %inputArray) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 1)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %nAbsElementsTotal = call i64 @Microsoft__Quantum__Math__AbsI__body(i64 %nElementsTotal)
  %0 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @19, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %0, i1 true, %String* %1)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___d7a5dace8d00477d9dcdf9020a467709_ConstantArray__body(i64 %nElementsPad, double %defaultElement)
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 1)
  %2 = icmp sge i64 %nElementsTotal, 0
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %3 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %5 = phi %Array* [ %3, %condTrue__1 ], [ %4, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %padArray, i32 -1)
  ret %Array* %5
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.powi.f64.i32(double, i32) #0

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %4)
  %6 = fptosi double %5 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %13 = fcmp ogt double %12, %tolerance
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %15 = bitcast i8* %14 to i2*
  store i2 -2, i2* %15, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %17 = bitcast i8* %16 to double*
  %theta = load double, double* %17, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %19 = bitcast i8* %18 to %Qubit**
  store %Qubit* %target, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %20 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  %23 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %1)
  %24 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %23)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %24, %Qubit* %target)
  %25 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %25, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %26 = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %26, %Qubit* %target)
  %27 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %1)
  %28 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %27)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %28, %Qubit* %target)
  %29 = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %29, %Qubit* %target)
  %30 = getelementptr inbounds { %Array* }, { %Array* }* %28, i32 0, i32 0
  %31 = load %Array*, %Array** %30, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  %32 = bitcast { %Array* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %33 = getelementptr inbounds { %Array* }, { %Array* }* %24, i32 0, i32 0
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %35 = bitcast { %Array*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  %36 = bitcast { %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 2
  %2 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %1, 2
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %2, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  ret %Array* %3
}

define internal %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp sgt i64 %0, 0
  %2 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @18, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %1, i1 true, %String* %2)
  %3 = sub i64 %0, 1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %3)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  ret %Qubit* %6
}

declare void @__quantum__qis__exp__body(%Array*, double, %Array*)

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %qubits__1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  %1 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = call i1 @Microsoft__Quantum__Arrays___6ad2c538b55a4168b115e6cf3c7d63de_IsEmpty__body(%Array* %qubits__1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @12, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %5 = trunc i64 %4 to i32
  %6 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %5)
  %7 = fptosi double %6 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %7, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %8 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %12 = icmp eq i64 %11, 2
  br i1 %12, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %14 = bitcast i8* %13 to double*
  %15 = load double, double* %14, align 8
  %16 = call double @Microsoft__Quantum__Math__AbsD__body(double %15)
  %17 = fcmp ogt double %16, %tolerance
  br i1 %17, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %19 = bitcast i8* %18 to i2*
  store i2 0, i2* %19, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %21 = bitcast i8* %20 to double*
  %22 = load double, double* %21, align 8
  %theta = fmul double 1.000000e+00, %22
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %23 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %qubits__1)
  %24 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %23)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %24)
  %25 = getelementptr inbounds { %Array* }, { %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  %27 = bitcast { %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %28 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %qubits__1)
  %29 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %28)
  %30 = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %qubits__1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %29, %Qubit* %30)
  %31 = getelementptr inbounds { %Array* }, { %Array* }* %29, i32 0, i32 0
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %33 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  %34 = bitcast { %Array* }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  ret void
}

declare void @__quantum__qis__exp__adj(%Array*, double, %Array*)

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %4)
  %6 = fptosi double %5 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %13 = fcmp ogt double %12, %tolerance
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %15 = bitcast i8* %14 to i2*
  store i2 -2, i2* %15, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %17 = bitcast i8* %16 to double*
  %theta = load double, double* %17, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %19 = bitcast i8* %18 to %Qubit**
  store %Qubit* %target, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %20 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %23 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %23, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %24 = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %24, %Qubit* %target)
  %25 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %1)
  %26 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %25)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %26, %Qubit* %target)
  %27 = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %27, %Qubit* %target)
  %28 = getelementptr inbounds { %Array* }, { %Array* }* %26, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  %30 = bitcast { %Array* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %31 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %1)
  %32 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %31)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %32, %Qubit* %target)
  %33 = getelementptr inbounds { %Array* }, { %Array* }* %32, i32 0, i32 0
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %35 = bitcast { %Array*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  %36 = bitcast { %Array* }* %32 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %qubits__1 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call i1 @Microsoft__Quantum__Arrays___6ad2c538b55a4168b115e6cf3c7d63de_IsEmpty__body(%Array* %qubits__1)
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @12, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %9 = trunc i64 %8 to i32
  %10 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %9)
  %11 = fptosi double %10 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %11, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %12 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 1)
  %15 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %qubits__1)
  %16 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  %17 = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %qubits__1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, { %Array* }*, %Qubit* }*
  %20 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %19, i32 0, i32 3
  store double %tolerance, double* %20, align 8
  store %Array* %coefficients1, %Array** %21, align 8
  store { %Array* }* %16, { %Array* }** %22, align 8
  store %Qubit* %17, %Qubit** %23, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %19)
  %24 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %25 = icmp eq i64 %24, 2
  br i1 %25, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %27 = bitcast i8* %26 to double*
  %28 = load double, double* %27, align 8
  %29 = call double @Microsoft__Quantum__Math__AbsD__body(double %28)
  %30 = fcmp ogt double %29, %tolerance
  br i1 %30, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %32 = bitcast i8* %31 to i2*
  store i2 0, i2* %32, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %34 = bitcast i8* %33 to double*
  %35 = load double, double* %34, align 8
  %theta = fmul double 1.000000e+00, %35
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array*, double, %Array* }*
  %38 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %37, i32 0, i32 1
  %40 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %37, i32 0, i32 2
  store %Array* %paulis, %Array** %38, align 8
  store double %theta, double* %39, align 8
  store %Array* %qubits__1, %Array** %40, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %37)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 1)
  %41 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %qubits__1)
  %42 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %41)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  %43 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %44 = bitcast %Tuple* %43 to { double, %Array*, { %Array* }* }*
  %45 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %44, i32 0, i32 0
  %46 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %44, i32 0, i32 1
  %47 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %44, i32 0, i32 2
  store double %tolerance, double* %45, align 8
  store %Array* %coefficients0, %Array** %46, align 8
  store { %Array* }* %42, { %Array* }** %47, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %44)
  %48 = getelementptr inbounds { %Array* }, { %Array* }* %42, i32 0, i32 0
  %49 = load %Array*, %Array** %48, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  %50 = bitcast { %Array* }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %51 = getelementptr inbounds { %Array* }, { %Array* }* %16, i32 0, i32 0
  %52 = load %Array*, %Array** %51, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %53 = bitcast { %Array*, %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  %54 = bitcast { %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %54, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %target = load %Qubit*, %Qubit** %7, align 8
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %10)
  %12 = fptosi double %11 to i64
  %13 = trunc i64 %8 to i32
  %14 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %13)
  %15 = fptosi double %14 to i64
  %16 = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %15, double 0.000000e+00, %Array* %coefficients)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %12, double 0.000000e+00, %Array* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %control, %Qubit* %target)
  %20 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %21 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  ret void
}

declare void @__quantum__qis__exp__ctl(%Array*, { %Array*, double, %Array* }*)

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %qubits__1 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call i1 @Microsoft__Quantum__Arrays___6ad2c538b55a4168b115e6cf3c7d63de_IsEmpty__body(%Array* %qubits__1)
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @12, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %9 = trunc i64 %8 to i32
  %10 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %9)
  %11 = fptosi double %10 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %11, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %12 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %16 = icmp eq i64 %15, 2
  br i1 %16, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %18 = bitcast i8* %17 to double*
  %19 = load double, double* %18, align 8
  %20 = call double @Microsoft__Quantum__Math__AbsD__body(double %19)
  %21 = fcmp ogt double %20, %tolerance
  br i1 %21, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %23 = bitcast i8* %22 to i2*
  store i2 0, i2* %23, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %25 = bitcast i8* %24 to double*
  %26 = load double, double* %25, align 8
  %theta = fmul double 1.000000e+00, %26
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 1)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, double, %Array* }*
  %29 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %28, i32 0, i32 1
  %31 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %28, i32 0, i32 2
  store %Array* %paulis, %Array** %29, align 8
  store double %theta, double* %30, align 8
  store %Array* %qubits__1, %Array** %31, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %28)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %32 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %qubits__1)
  %33 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %32)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { double, %Array*, { %Array* }* }*
  %36 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %35, i32 0, i32 0
  %37 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %35, i32 0, i32 1
  %38 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %35, i32 0, i32 2
  store double %tolerance, double* %36, align 8
  store %Array* %__qsVar1__coefficients0__, %Array** %37, align 8
  store { %Array* }* %33, { %Array* }** %38, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %35)
  %39 = getelementptr inbounds { %Array* }, { %Array* }* %33, i32 0, i32 0
  %40 = load %Array*, %Array** %39, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  %41 = bitcast { %Array* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %42 = call %Array* @Microsoft__Quantum__Arrays___dfadd79ae46c48ca8fb83bba76dc75a9_Most__body(%Array* %qubits__1)
  %43 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %42)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  %44 = call %Qubit* @Microsoft__Quantum__Arrays___ec2282f4e2d04e26843a4c1b80ee157c_Tail__body(%Array* %qubits__1)
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { double, %Array*, { %Array* }*, %Qubit* }*
  %47 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %46, i32 0, i32 0
  %48 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %46, i32 0, i32 1
  %49 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %46, i32 0, i32 2
  %50 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %46, i32 0, i32 3
  store double %tolerance, double* %47, align 8
  store %Array* %__qsVar2__coefficients1__, %Array** %48, align 8
  store { %Array* }* %43, { %Array* }** %49, align 8
  store %Qubit* %44, %Qubit** %50, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %46)
  %51 = getelementptr inbounds { %Array* }, { %Array* }* %43, i32 0, i32 0
  %52 = load %Array*, %Array** %51, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %53 = bitcast { %Array*, %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  %54 = bitcast { %Array* }* %43 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %54, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  ret void
}

declare void @__quantum__qis__exp__ctladj(%Array*, { %Array*, double, %Array* }*)

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %target = load %Qubit*, %Qubit** %7, align 8
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %10)
  %12 = fptosi double %11 to i64
  %13 = trunc i64 %8 to i32
  %14 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %13)
  %15 = fptosi double %14 to i64
  %16 = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %15, double 0.000000e+00, %Array* %coefficients)
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___61d0534fed56455782ee55a16a1606c3_Padded__body(i64 %12, double 0.000000e+00, %Array* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %20 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %21 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = icmp eq i2 %pauli, -2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 2
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 3
  store %Callable* %4, %Callable** %7, align 8
  store double %tolerance, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %control, { %Array* }** %10, align 8
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__17__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Qubit* }*
  %13 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %12, i32 0, i32 0
  store %Qubit* %target, %Qubit** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %11, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %14 = icmp eq i2 %pauli, 1
  br i1 %14, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %18 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 3
  %22 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %17, i32 0, i32 4
  store %Callable* %15, %Callable** %18, align 8
  store double %tolerance, double* %19, align 8
  store %Array* %coefficients, %Array** %20, align 8
  store i2 -2, i2* %21, align 1
  store { %Array* }* %control, { %Array* }** %22, align 8
  %op__1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__18__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %16)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 1)
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__body(%Callable* %23, %Callable* %op__1, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %24 = icmp eq i2 %pauli, -1
  br i1 %24, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %25 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %28 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 1
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 2
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 3
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %27, i32 0, i32 4
  store %Callable* %25, %Callable** %28, align 8
  store double %tolerance, double* %29, align 8
  store %Array* %coefficients, %Array** %30, align 8
  store i2 1, i2* %31, align 1
  store { %Array* }* %control, { %Array* }** %32, align 8
  %op__2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__19__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %26)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 1)
  %33 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__body(%Callable* %33, %Callable* %op__2, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %34 = icmp eq i2 %pauli, 0
  br i1 %34, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %35 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @13, i32 0, i32 0))
  %36 = icmp eq i2 1, %pauli
  br i1 %36, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %37 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %38 = icmp eq i2 -1, %pauli
  br i1 %38, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %39 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @15, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %40 = icmp eq i2 -2, %pauli
  br i1 %40, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %41 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @16, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @17, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %43 = phi %String* [ %41, %condTrue__3 ], [ %42, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %44 = phi %String* [ %39, %condTrue__2 ], [ %43, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %45 = phi %String* [ %37, %condTrue__1 ], [ %44, %condContinue__2 ]
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %35, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  %47 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %48 = call %String* @__quantum__rt__string_concatenate(%String* %46, %String* %47)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__fail(%String* %48)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__17__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__17__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__17__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__17__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = load double, double* %1, align 8
  %6 = load %Array*, %Array** %2, align 8
  %7 = load { %Array* }*, { %Array* }** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = load double, double* %1, align 8
  %6 = load %Array*, %Array** %2, align 8
  %7 = load { %Array* }*, { %Array* }** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__15__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__15__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__18__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__18__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__18__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__18__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Array* }*, { %Array* }** %4, align 8
  %10 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Array* }*, { %Array* }** %4, align 8
  %10 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__16__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__16__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__body(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Qubit* }*
  %2 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %1, i32 0, i32 0
  store %Qubit* %target, %Qubit** %2, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %0, %Tuple* null)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit* }*
  %5 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %4, i32 0, i32 0
  store %Qubit* %target, %Qubit** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %innerOperation, %Tuple* %3, %Tuple* null)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Qubit* }*
  %9 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %8, i32 0, i32 0
  store %Qubit* %target, %Qubit** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Lifted__PartialApplication__19__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__19__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__19__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__19__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = icmp eq i2 %pauli, -2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 2
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 3
  store %Callable* %4, %Callable** %7, align 8
  store double %tolerance, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %control, { %Array* }** %10, align 8
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__20__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Qubit* }*
  %14 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %13, i32 0, i32 0
  store %Qubit* %target, %Qubit** %14, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %15 = icmp eq i2 %pauli, 1
  br i1 %15, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %16 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 1
  %21 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 2
  %22 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 3
  %23 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 4
  store %Callable* %16, %Callable** %19, align 8
  store double %tolerance, double* %20, align 8
  store %Array* %coefficients, %Array** %21, align 8
  store i2 -2, i2* %22, align 1
  store { %Array* }* %control, { %Array* }** %23, align 8
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__21__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %17)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  %24 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__adj(%Callable* %24, %Callable* %__qsVar1__op__, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %25 = icmp eq i2 %pauli, -1
  br i1 %25, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %26 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 1
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 2
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 3
  %33 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %28, i32 0, i32 4
  store %Callable* %26, %Callable** %29, align 8
  store double %tolerance, double* %30, align 8
  store %Array* %coefficients, %Array** %31, align 8
  store i2 1, i2* %32, align 1
  store { %Array* }* %control, { %Array* }** %33, align 8
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__22__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %27)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  %34 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %34)
  call void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__adj(%Callable* %34, %Callable* %__qsVar2__op__, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %34, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %35 = icmp eq i2 %pauli, 0
  br i1 %35, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %36 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @13, i32 0, i32 0))
  %37 = icmp eq i2 1, %pauli
  br i1 %37, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %38 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %39 = icmp eq i2 -1, %pauli
  br i1 %39, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %40 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @15, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %41 = icmp eq i2 -2, %pauli
  br i1 %41, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @16, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %43 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @17, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %44 = phi %String* [ %42, %condTrue__3 ], [ %43, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %45 = phi %String* [ %40, %condTrue__2 ], [ %44, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %46 = phi %String* [ %38, %condTrue__1 ], [ %45, %condContinue__2 ]
  %47 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %46)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  %48 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %49 = call %String* @__quantum__rt__string_concatenate(%String* %47, %String* %48)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__fail(%String* %49)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %pauli = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %target = load %Qubit*, %Qubit** %8, align 8
  %9 = icmp eq i2 %pauli, -2
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 2
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 3
  store %Callable* %10, %Callable** %13, align 8
  store double %tolerance, double* %14, align 8
  store %Array* %coefficients, %Array** %15, align 8
  store { %Array* }* %control, { %Array* }** %16, align 8
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__23__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %17 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %17)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, %Qubit* }*
  %20 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %19, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %20, align 8
  store %Qubit* %target, %Qubit** %21, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %18, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %22 = icmp eq i2 %pauli, 1
  br i1 %22, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %26 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 2
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 3
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 4
  store %Callable* %23, %Callable** %26, align 8
  store double %tolerance, double* %27, align 8
  store %Array* %coefficients, %Array** %28, align 8
  store i2 -2, i2* %29, align 1
  store { %Array* }* %control, { %Array* }** %30, align 8
  %op__1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__24__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %24)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 1)
  %31 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { %Callable*, %Callable*, %Qubit* }*
  %34 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 2
  store %Callable* %31, %Callable** %34, align 8
  store %Callable* %op__1, %Callable** %35, align 8
  store %Qubit* %target, %Qubit** %36, align 8
  call void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %33)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %37 = icmp eq i2 %pauli, -1
  br i1 %37, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %41 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 0
  %42 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 1
  %43 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 2
  %44 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 3
  %45 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 4
  store %Callable* %38, %Callable** %41, align 8
  store double %tolerance, double* %42, align 8
  store %Array* %coefficients, %Array** %43, align 8
  store i2 1, i2* %44, align 1
  store { %Array* }* %control, { %Array* }** %45, align 8
  %op__2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__25__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %39)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 1)
  %46 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %46)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { %Callable*, %Callable*, %Qubit* }*
  %49 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 1
  %51 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 2
  store %Callable* %46, %Callable** %49, align 8
  store %Callable* %op__2, %Callable** %50, align 8
  store %Qubit* %target, %Qubit** %51, align 8
  call void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %48)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %52 = icmp eq i2 %pauli, 0
  br i1 %52, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { double, %Array*, { %Array* }* }*
  %55 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 0
  %56 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 1
  %57 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 2
  store double %tolerance, double* %55, align 8
  store %Array* %coefficients, %Array** %56, align 8
  store { %Array* }* %control, { %Array* }** %57, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %54)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %58 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @13, i32 0, i32 0))
  %59 = icmp eq i2 1, %pauli
  br i1 %59, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %60 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %61 = icmp eq i2 -1, %pauli
  br i1 %61, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %62 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @15, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %63 = icmp eq i2 -2, %pauli
  br i1 %63, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %64 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @16, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %65 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @17, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %66 = phi %String* [ %64, %condTrue__3 ], [ %65, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %67 = phi %String* [ %62, %condTrue__2 ], [ %66, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %68 = phi %String* [ %60, %condTrue__1 ], [ %67, %condContinue__2 ]
  %69 = call %String* @__quantum__rt__string_concatenate(%String* %58, %String* %68)
  call void @__quantum__rt__string_update_reference_count(%String* %58, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %68, i32 -1)
  %70 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %71 = call %String* @__quantum__rt__string_concatenate(%String* %69, %String* %70)
  call void @__quantum__rt__string_update_reference_count(%String* %69, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %70, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__fail(%String* %71)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %pauli = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %target = load %Qubit*, %Qubit** %8, align 8
  %9 = icmp eq i2 %pauli, -2
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 2
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 3
  store %Callable* %10, %Callable** %13, align 8
  store double %tolerance, double* %14, align 8
  store %Array* %coefficients, %Array** %15, align 8
  store { %Array* }* %control, { %Array* }** %16, align 8
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__26__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %17 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %17)
  call void @__quantum__rt__callable_make_controlled(%Callable* %17)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, %Qubit* }*
  %20 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %19, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %20, align 8
  store %Qubit* %target, %Qubit** %21, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %18, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %22 = icmp eq i2 %pauli, 1
  br i1 %22, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %26 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 2
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 3
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %25, i32 0, i32 4
  store %Callable* %23, %Callable** %26, align 8
  store double %tolerance, double* %27, align 8
  store %Array* %coefficients, %Array** %28, align 8
  store i2 -2, i2* %29, align 1
  store { %Array* }* %control, { %Array* }** %30, align 8
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__27__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %24)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  %31 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 1)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { %Callable*, %Callable*, %Qubit* }*
  %34 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %33, i32 0, i32 2
  store %Callable* %31, %Callable** %34, align 8
  store %Callable* %__qsVar1__op__, %Callable** %35, align 8
  store %Qubit* %target, %Qubit** %36, align 8
  call void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %33)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %37 = icmp eq i2 %pauli, -1
  br i1 %37, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %41 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 0
  %42 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 1
  %43 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 2
  %44 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 3
  %45 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %40, i32 0, i32 4
  store %Callable* %38, %Callable** %41, align 8
  store double %tolerance, double* %42, align 8
  store %Array* %coefficients, %Array** %43, align 8
  store i2 1, i2* %44, align 1
  store { %Array* }* %control, { %Array* }** %45, align 8
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__28__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %39)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  %46 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %46)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 1)
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { %Callable*, %Callable*, %Qubit* }*
  %49 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 0
  %50 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 1
  %51 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %48, i32 0, i32 2
  store %Callable* %46, %Callable** %49, align 8
  store %Callable* %__qsVar2__op__, %Callable** %50, align 8
  store %Qubit* %target, %Qubit** %51, align 8
  call void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %48)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %46, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %52 = icmp eq i2 %pauli, 0
  br i1 %52, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { double, %Array*, { %Array* }* }*
  %55 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 0
  %56 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 1
  %57 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 2
  store double %tolerance, double* %55, align 8
  store %Array* %coefficients, %Array** %56, align 8
  store { %Array* }* %control, { %Array* }** %57, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %54)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %58 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @13, i32 0, i32 0))
  %59 = icmp eq i2 1, %pauli
  br i1 %59, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %60 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %61 = icmp eq i2 -1, %pauli
  br i1 %61, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %62 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @15, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %63 = icmp eq i2 -2, %pauli
  br i1 %63, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %64 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @16, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %65 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @17, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %66 = phi %String* [ %64, %condTrue__3 ], [ %65, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %67 = phi %String* [ %62, %condTrue__2 ], [ %66, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %68 = phi %String* [ %60, %condTrue__1 ], [ %67, %condContinue__2 ]
  %69 = call %String* @__quantum__rt__string_concatenate(%String* %58, %String* %68)
  call void @__quantum__rt__string_update_reference_count(%String* %58, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %68, i32 -1)
  %70 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %71 = call %String* @__quantum__rt__string_concatenate(%String* %69, %String* %70)
  call void @__quantum__rt__string_update_reference_count(%String* %69, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %70, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__fail(%String* %71)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__adj(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Qubit* }*
  %3 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %2, i32 0, i32 0
  store %Qubit* %target, %Qubit** %3, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %1, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %6, i32 0, i32 0
  store %Qubit* %target, %Qubit** %7, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Qubit* }*
  %11 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %10, i32 0, i32 0
  store %Qubit* %target, %Qubit** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__ctl(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Qubit* }*
  %6 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %5, i32 0, i32 0
  store %Qubit* %target, %Qubit** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %4, %Tuple* null)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Qubit* }*
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 1
  store %Array* %controlRegister, %Array** %10, align 8
  store %Qubit* %target, %Qubit** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Qubit* }*
  %15 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %14, i32 0, i32 0
  store %Qubit* %target, %Qubit** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___17891ac5051847878c757c806b3b7604_ApplyWithCA__ctladj(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %6, i32 0, i32 0
  store %Qubit* %target, %Qubit** %7, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array*, %Qubit* }*
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 1
  store %Array* %controlRegister, %Array** %11, align 8
  store %Qubit* %target, %Qubit** %12, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Qubit* }*
  %16 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %15, i32 0, i32 0
  store %Qubit* %target, %Qubit** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %14, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target) {
entry:
  %__controlQubits__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__controlQubits__, i64 0)
  %1 = bitcast i8* %0 to %Qubit**
  store %Qubit* %control, %Qubit** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target)
  ret void
}

declare void @__quantum__qis__x__ctl(%Array*, %Qubit*)

define internal i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rng) {
entry:
  %0 = extractvalue %Range %rng, 0
  %1 = extractvalue %Range %rng, 1
  %2 = extractvalue %Range %rng, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %3 = icmp sgt i64 %1, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %0, %preheader__1 ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %idx, %2
  %5 = icmp sge i64 %idx, %2
  %6 = select i1 %3, i1 %4, i1 %5
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  ret i1 false

exiting__1:                                       ; No predecessors!
  %7 = add i64 %idx, %1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret i1 true
}

define internal void @Lifted__PartialApplication__29__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, { %Array* }* }*
  %5 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 1
  store %Array* %2, %Array** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__29__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, { %Array* }* }*
  %5 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %4, i32 0, i32 1
  store %Array* %2, %Array** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__29__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__29__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____body(%Array* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____adj(%Array* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____ctl(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____ctladj(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define internal void @MemoryManagement__17__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__17__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____body(%Array* %operations, { %Array* }* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %8 = getelementptr inbounds { %Array* }, { %Array* }* %target, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = bitcast { %Array* }* %target to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %11 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %12)
  %15 = bitcast i8* %14 to %Callable**
  %op = load %Callable*, %Callable** %15, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %10, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %17 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %18 = phi i64 [ 0, %exit__2 ], [ %23, %exiting__3 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %18)
  %21 = bitcast i8* %20 to %Callable**
  %22 = load %Callable*, %Callable** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %22, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %23 = add i64 %18, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____adj(%Array* %operations, { %Array* }* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %8 = getelementptr inbounds { %Array* }, { %Array* }* %target, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = bitcast { %Array* }* %target to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %11 = sub i64 %0, 1
  %12 = insertvalue %Range zeroinitializer, i64 %11, 0
  %13 = insertvalue %Range %12, i64 -1, 1
  %14 = insertvalue %Range %13, i64 0, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %14, i1 true)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %15)
  %17 = sub i64 %16, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %18 = phi i64 [ 0, %exit__1 ], [ %23, %exiting__2 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %18)
  %21 = bitcast i8* %20 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %22)
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %10, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %23 = add i64 %18, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %24 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %25 = phi i64 [ 0, %exit__2 ], [ %30, %exiting__3 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %25)
  %28 = bitcast i8* %27 to %Callable**
  %29 = load %Callable*, %Callable** %28, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %29, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %25, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %operations = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %target = load { %Array* }*, { %Array* }** %10, align 8
  %11 = getelementptr inbounds { %Array* }, { %Array* }* %target, i32 0, i32 0
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { %Array* }* %target to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %15)
  %18 = bitcast i8* %17 to %Callable**
  %op = load %Callable*, %Callable** %18, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %19)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %20 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 1)
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { %Array* }* }*
  %23 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %22, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %23, align 8
  store { %Array* }* %target, { %Array* }** %24, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %21, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %26 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %27 = phi i64 [ 0, %exit__2 ], [ %32, %exiting__3 ]
  %28 = icmp sle i64 %27, %26
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %27)
  %30 = bitcast i8* %29 to %Callable**
  %31 = load %Callable*, %Callable** %30, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %31, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %32 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  %33 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___64e06f1afcfe4ab9be6fe951b3a50440___QsRef1__ApplyBoundCA____ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %operations = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %10 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %target = load { %Array* }*, { %Array* }** %10, align 8
  %11 = getelementptr inbounds { %Array* }, { %Array* }* %target, i32 0, i32 0
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = bitcast { %Array* }* %target to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 1)
  %14 = sub i64 %2, 1
  %15 = insertvalue %Range zeroinitializer, i64 %14, 0
  %16 = insertvalue %Range %15, i64 -1, 1
  %17 = insertvalue %Range %16, i64 0, 2
  %18 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %17, i1 true)
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %18)
  %20 = sub i64 %19, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %21)
  %24 = bitcast i8* %23 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %24, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %25 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %25)
  call void @__quantum__rt__callable_make_controlled(%Callable* %25)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %26 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 1)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %28, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %29, align 8
  store { %Array* }* %target, { %Array* }** %30, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %25, %Tuple* %27, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %32 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %33 = phi i64 [ 0, %exit__2 ], [ %38, %exiting__3 ]
  %34 = icmp sle i64 %33, %32
  br i1 %34, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %33)
  %36 = bitcast i8* %35 to %Callable**
  %37 = load %Callable*, %Callable** %36, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %37, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %37, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %38 = add i64 %33, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  %39 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___7af5478fdcef46609b03bed279a41c2b_BoundCA__body(%Array* %operations) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %10)
  %13 = bitcast i8* %12 to %Callable**
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %operations, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Callable*, %Array* }*
  %18 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %17, i32 0, i32 1
  store %Callable* %8, %Callable** %18, align 8
  store %Array* %operations, %Array** %19, align 8
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__30__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__18__FunctionTable, %Tuple* %16)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %22)
  %25 = bitcast i8* %24 to %Callable**
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  ret %Callable* %20
}

define internal void @Lifted__PartialApplication__30__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__30__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__30__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__30__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____body(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____adj(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__18__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__18__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____body(%Array* %operations, %Array* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %8 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %9 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %9)
  %12 = bitcast i8* %11 to %Callable**
  %op = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr inbounds { %Array* }, { %Array* }* %14, i32 0, i32 0
  store %Array* %target, %Array** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %9, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %17 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %18 = phi i64 [ 0, %exit__2 ], [ %23, %exiting__3 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %18)
  %21 = bitcast i8* %20 to %Callable**
  %22 = load %Callable*, %Callable** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %22, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %23 = add i64 %18, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____adj(%Array* %operations, %Array* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %8 = sub i64 %0, 1
  %9 = insertvalue %Range zeroinitializer, i64 %8, 0
  %10 = insertvalue %Range %9, i64 -1, 1
  %11 = insertvalue %Range %10, i64 0, 2
  %12 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %11, i1 true)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %12)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %23, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %15)
  %18 = bitcast i8* %17 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %18, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array* }*
  %22 = getelementptr inbounds { %Array* }, { %Array* }* %21, i32 0, i32 0
  store %Array* %target, %Array** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %23 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %24 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %25 = phi i64 [ 0, %exit__2 ], [ %30, %exiting__3 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %25)
  %28 = bitcast i8* %27 to %Callable**
  %29 = load %Callable*, %Callable** %28, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %29, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %25, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %operations = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %11 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %12)
  %15 = bitcast i8* %14 to %Callable**
  %op = load %Callable*, %Callable** %15, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %16 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %16)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, %Array* }*
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %18, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %19, align 8
  store %Array* %target, %Array** %20, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %16, %Tuple* %17, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %22 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %23)
  %26 = bitcast i8* %25 to %Callable**
  %27 = load %Callable*, %Callable** %26, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %27, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___71f14e6f07364d01825c873fe6a150ab___QsRef1__ApplyBoundCA____ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %operations = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %11 = sub i64 %2, 1
  %12 = insertvalue %Range zeroinitializer, i64 %11, 0
  %13 = insertvalue %Range %12, i64 -1, 1
  %14 = insertvalue %Range %13, i64 0, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %14, i1 true)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %15)
  %17 = sub i64 %16, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %18 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %18)
  %21 = bitcast i8* %20 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %22)
  call void @__quantum__rt__callable_make_controlled(%Callable* %22)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, %Array* }*
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %25, align 8
  store %Array* %target, %Array** %26, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %23, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %18, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %34, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %29)
  %32 = bitcast i8* %31 to %Callable**
  %33 = load %Callable*, %Callable** %32, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %33, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %34 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___89057b82e6d84103ba7c024aa441bb1f_CControlledCA__body(%Callable* %op) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Callable*, %Callable* }*
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %2, i32 0, i32 1
  store %Callable* %0, %Callable** %3, align 8
  store %Callable* %op, %Callable** %4, align 8
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__31__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__19__FunctionTable, %Tuple* %1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret %Callable* %5
}

define internal void @Lifted__PartialApplication__31__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1, %Qubit* }*
  %1 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %0, i32 0, i32 0
  %2 = load i1, i1* %1, align 1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %4 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %3, i32 0, i32 1
  %5 = load %Callable*, %Callable** %4, align 8
  %6 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %0, i32 0, i32 1
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Callable*, %Qubit* }* getelementptr ({ i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i1, %Callable*, %Qubit* }*
  %10 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %9, i32 0, i32 2
  store i1 %2, i1* %10, align 1
  store %Callable* %5, %Callable** %11, align 8
  store %Qubit* %7, %Qubit** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %3, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__31__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1, %Qubit* }*
  %1 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %0, i32 0, i32 0
  %2 = load i1, i1* %1, align 1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %4 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %3, i32 0, i32 1
  %5 = load %Callable*, %Callable** %4, align 8
  %6 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %0, i32 0, i32 1
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Callable*, %Qubit* }* getelementptr ({ i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i1, %Callable*, %Qubit* }*
  %10 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %9, i32 0, i32 2
  store i1 %2, i1* %10, align 1
  store %Callable* %5, %Callable** %11, align 8
  store %Qubit* %7, %Qubit** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %3, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__31__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i1, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i1, %Qubit* }*, { i1, %Qubit* }** %2, align 8
  %5 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %4, i32 0, i32 0
  %6 = load i1, i1* %5, align 1
  %7 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %7, i32 0, i32 1
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %4, i32 0, i32 1
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Callable*, %Qubit* }* getelementptr ({ i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i1, %Callable*, %Qubit* }*
  %14 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %13, i32 0, i32 2
  store i1 %6, i1* %14, align 1
  store %Callable* %9, %Callable** %15, align 8
  store %Qubit* %11, %Qubit** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i1, %Callable*, %Qubit* }* }* getelementptr ({ %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { i1, %Callable*, %Qubit* }* }*
  %19 = getelementptr inbounds { %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { i1, %Callable*, %Qubit* }* %13, { i1, %Callable*, %Qubit* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %7, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__31__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i1, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i1, %Qubit* }*, { i1, %Qubit* }** %2, align 8
  %5 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %4, i32 0, i32 0
  %6 = load i1, i1* %5, align 1
  %7 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %7, i32 0, i32 1
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %4, i32 0, i32 1
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Callable*, %Qubit* }* getelementptr ({ i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i1, %Callable*, %Qubit* }*
  %14 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %13, i32 0, i32 2
  store i1 %6, i1* %14, align 1
  store %Callable* %9, %Callable** %15, align 8
  store %Qubit* %11, %Qubit** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i1, %Callable*, %Qubit* }* }* getelementptr ({ %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { i1, %Callable*, %Qubit* }* }*
  %19 = getelementptr inbounds { %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { i1, %Callable*, %Qubit* }* %13, { i1, %Callable*, %Qubit* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %7, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1, %Callable*, %Qubit* }*
  %1 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %4 = load i1, i1* %1, align 1
  %5 = load %Callable*, %Callable** %2, align 8
  %6 = load %Qubit*, %Qubit** %3, align 8
  call void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__body(i1 %4, %Callable* %5, %Qubit* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1, %Callable*, %Qubit* }*
  %1 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %4 = load i1, i1* %1, align 1
  %5 = load %Callable*, %Callable** %2, align 8
  %6 = load %Qubit*, %Qubit** %3, align 8
  call void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__adj(i1 %4, %Callable* %5, %Qubit* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i1, %Callable*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i1, %Callable*, %Qubit* }*, { i1, %Callable*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__ctl(%Array* %3, { i1, %Callable*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i1, %Callable*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i1, %Callable*, %Qubit* }* }, { %Array*, { i1, %Callable*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i1, %Callable*, %Qubit* }*, { i1, %Callable*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__ctladj(%Array* %3, { i1, %Callable*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__19__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__19__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__body(i1 %bit, %Callable* %op, %Qubit* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  br i1 %bit, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Qubit* }*
  %2 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %1, i32 0, i32 0
  store %Qubit* %target, %Qubit** %2, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %0, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__adj(i1 %bit, %Callable* %op, %Qubit* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  br i1 %bit, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Qubit* }*
  %3 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %2, i32 0, i32 0
  store %Qubit* %target, %Qubit** %3, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %1, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__ctl(%Array* %__controlQubits__, { i1, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %bit = load i1, i1* %1, align 1
  %2 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  br i1 %bit, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Array*, %Qubit* }*
  %7 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %6, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %7, align 8
  store %Qubit* %target, %Qubit** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___8858b7f5bb16452095bbf2ddd9326e17_ApplyIfCA__ctladj(%Array* %__controlQubits__, { i1, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %bit = load i1, i1* %1, align 1
  %2 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = getelementptr inbounds { i1, %Callable*, %Qubit* }, { i1, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  br i1 %bit, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_controlled(%Callable* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Array*, %Qubit* }*
  %7 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %6, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %7, align 8
  store %Qubit* %target, %Qubit** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal i1 @Microsoft__Quantum__Canon___bfd0dc2872b54301bd24b64a2c23e89e_Snd__body(i64 %0, i1 %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i1 }* getelementptr ({ i64, i1 }, { i64, i1 }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { i64, i1 }*
  %3 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %pair, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store i1 %1, i1* %4, align 1
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret i1 %1
}

define internal double @Microsoft__Quantum__Canon___57aa5a97323949708d5d87cf2aa9c443_Snd__body(double %0, double %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { double, double }*
  %3 = getelementptr inbounds { double, double }, { double, double }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { double, double }, { double, double }* %pair, i32 0, i32 1
  store double %0, double* %3, align 8
  store double %1, double* %4, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret double %1
}

define internal i64 @Microsoft__Quantum__Canon___facc0657b0284c16ae2c0d999b143be0_Fst__body(i64 %0, i1 %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i1 }* getelementptr ({ i64, i1 }, { i64, i1 }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { i64, i1 }*
  %3 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %pair, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store i1 %1, i1* %4, align 1
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret i64 %0
}

define internal double @Microsoft__Quantum__Canon___17f71f9fa0da472d90e5bc66ed171ba5_Fst__body(double %0, double %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %pair = bitcast %Tuple* %2 to { double, double }*
  %3 = getelementptr inbounds { double, double }, { double, double }* %pair, i32 0, i32 0
  %4 = getelementptr inbounds { double, double }, { double, double }* %pair, i32 0, i32 1
  store double %0, double* %3, align 8
  store double %1, double* %4, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret double %0
}

define internal void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__body(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %2)
  %5 = bitcast i8* %4 to { i1, %Qubit* }**
  %6 = load { i1, %Qubit* }*, { i1, %Qubit* }** %5, align 8
  %7 = bitcast { i1, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %9 = call %Range @Microsoft__Quantum__Arrays___f1cf675f218b4a7fae00ea122aa1825f_IndexRange__body(%Array* %register)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %13 = icmp sgt i64 %11, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxQubit = phi i64 [ %10, %preheader__1 ], [ %21, %exiting__2 ]
  %14 = icmp sle i64 %idxQubit, %12
  %15 = icmp sge i64 %idxQubit, %12
  %16 = select i1 %13, i1 %14, i1 %15
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %18 = bitcast i8* %17 to { i1, %Qubit* }**
  %19 = load { i1, %Qubit* }*, { i1, %Qubit* }** %18, align 8
  %20 = bitcast { i1, %Qubit* }* %19 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %singleElementOperation, %Tuple* %20, %Tuple* null)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %idxQubit, %11
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %22 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %29, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %23)
  %26 = bitcast i8* %25 to { i1, %Qubit* }**
  %27 = load { i1, %Qubit* }*, { i1, %Qubit* }** %26, align 8
  %28 = bitcast { i1, %Qubit* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %29 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal %Range @Microsoft__Quantum__Arrays___f1cf675f218b4a7fae00ea122aa1825f_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i1, %Qubit* }**
  %6 = load { i1, %Qubit* }*, { i1, %Qubit* }** %5, align 8
  %7 = bitcast { i1, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = sub i64 %0, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %11 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %12)
  %15 = bitcast i8* %14 to { i1, %Qubit* }**
  %16 = load { i1, %Qubit* }*, { i1, %Qubit* }** %15, align 8
  %17 = bitcast { i1, %Qubit* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %10
}

define internal void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__adj(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %2)
  %5 = bitcast i8* %4 to { i1, %Qubit* }**
  %6 = load { i1, %Qubit* }*, { i1, %Qubit* }** %5, align 8
  %7 = bitcast { i1, %Qubit* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %9 = call %Range @Microsoft__Quantum__Arrays___f1cf675f218b4a7fae00ea122aa1825f_IndexRange__body(%Array* %register)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  %13 = sub i64 %12, %10
  %14 = sdiv i64 %13, %11
  %15 = mul i64 %11, %14
  %16 = add i64 %10, %15
  %17 = sub i64 0, %11
  %18 = insertvalue %Range zeroinitializer, i64 %16, 0
  %19 = insertvalue %Range %18, i64 %17, 1
  %20 = insertvalue %Range %19, i64 %10, 2
  %21 = extractvalue %Range %20, 0
  %22 = extractvalue %Range %20, 1
  %23 = extractvalue %Range %20, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %24 = icmp sgt i64 %22, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %21, %preheader__1 ], [ %33, %exiting__2 ]
  %25 = icmp sle i64 %__qsVar0__idxQubit__, %23
  %26 = icmp sge i64 %__qsVar0__idxQubit__, %23
  %27 = select i1 %24, i1 %25, i1 %26
  br i1 %27, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %28 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %28)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %30 = bitcast i8* %29 to { i1, %Qubit* }**
  %31 = load { i1, %Qubit* }*, { i1, %Qubit* }** %30, align 8
  %32 = bitcast { i1, %Qubit* }* %31 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %28, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %28, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %__qsVar0__idxQubit__, %22
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %34 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %35)
  %38 = bitcast i8* %37 to { i1, %Qubit* }**
  %39 = load { i1, %Qubit* }*, { i1, %Qubit* }** %38, align 8
  %40 = bitcast { i1, %Qubit* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %register = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %5)
  %8 = bitcast i8* %7 to { i1, %Qubit* }**
  %9 = load { i1, %Qubit* }*, { i1, %Qubit* }** %8, align 8
  %10 = bitcast { i1, %Qubit* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %12 = call %Range @Microsoft__Quantum__Arrays___f1cf675f218b4a7fae00ea122aa1825f_IndexRange__body(%Array* %register)
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %16 = icmp sgt i64 %14, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxQubit = phi i64 [ %13, %preheader__1 ], [ %29, %exiting__2 ]
  %17 = icmp sle i64 %idxQubit, %15
  %18 = icmp sge i64 %idxQubit, %15
  %19 = select i1 %16, i1 %17, i1 %18
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %20)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %22 = bitcast i8* %21 to { i1, %Qubit* }**
  %23 = load { i1, %Qubit* }*, { i1, %Qubit* }** %22, align 8
  %24 = bitcast { i1, %Qubit* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i1, %Qubit* }* }* getelementptr ({ %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Array*, { i1, %Qubit* }* }*
  %27 = getelementptr inbounds { %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* %26, i32 0, i32 0
  %28 = getelementptr inbounds { %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* %26, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %27, align 8
  store { i1, %Qubit* }* %23, { i1, %Qubit* }** %28, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %25, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %idxQubit, %14
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %30 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %37, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %31)
  %34 = bitcast i8* %33 to { i1, %Qubit* }**
  %35 = load { i1, %Qubit* }*, { i1, %Qubit* }** %34, align 8
  %36 = bitcast { i1, %Qubit* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %37 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___19e349a447284c0584da8df665449ea7_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %register = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %5)
  %8 = bitcast i8* %7 to { i1, %Qubit* }**
  %9 = load { i1, %Qubit* }*, { i1, %Qubit* }** %8, align 8
  %10 = bitcast { i1, %Qubit* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %12 = call %Range @Microsoft__Quantum__Arrays___f1cf675f218b4a7fae00ea122aa1825f_IndexRange__body(%Array* %register)
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  %16 = sub i64 %15, %13
  %17 = sdiv i64 %16, %14
  %18 = mul i64 %14, %17
  %19 = add i64 %13, %18
  %20 = sub i64 0, %14
  %21 = insertvalue %Range zeroinitializer, i64 %19, 0
  %22 = insertvalue %Range %21, i64 %20, 1
  %23 = insertvalue %Range %22, i64 %13, 2
  %24 = extractvalue %Range %23, 0
  %25 = extractvalue %Range %23, 1
  %26 = extractvalue %Range %23, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %27 = icmp sgt i64 %25, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %24, %preheader__1 ], [ %40, %exiting__2 ]
  %28 = icmp sle i64 %__qsVar0__idxQubit__, %26
  %29 = icmp sge i64 %__qsVar0__idxQubit__, %26
  %30 = select i1 %27, i1 %28, i1 %29
  br i1 %30, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %31 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %31)
  call void @__quantum__rt__callable_make_controlled(%Callable* %31)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %33 = bitcast i8* %32 to { i1, %Qubit* }**
  %34 = load { i1, %Qubit* }*, { i1, %Qubit* }** %33, align 8
  %35 = bitcast { i1, %Qubit* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i1, %Qubit* }* }* getelementptr ({ %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array*, { i1, %Qubit* }* }*
  %38 = getelementptr inbounds { %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { %Array*, { i1, %Qubit* }* }, { %Array*, { i1, %Qubit* }* }* %37, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %38, align 8
  store { i1, %Qubit* }* %34, { i1, %Qubit* }** %39, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %31, %Tuple* %36, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %40 = add i64 %__qsVar0__idxQubit__, %25
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  %41 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %42 = phi i64 [ 0, %exit__2 ], [ %48, %exiting__3 ]
  %43 = icmp sle i64 %42, %41
  br i1 %43, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %42)
  %45 = bitcast i8* %44 to { i1, %Qubit* }**
  %46 = load { i1, %Qubit* }*, { i1, %Qubit* }** %45, align 8
  %47 = bitcast { i1, %Qubit* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %42, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal %Range @Microsoft__Quantum__Arrays___fca6ec94ae3342ea8545ea7003b87bf1_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %2
}

define internal %Range @Microsoft__Quantum__Arrays___ea8dc357841940139fee623fefb8c332_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %2
}

define internal %Range @Microsoft__Quantum__Arrays___f32399b15f5e44b594f235c5225a7400_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i64, i1 }**
  %6 = load { i64, i1 }*, { i64, i1 }** %5, align 8
  %7 = bitcast { i64, i1 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = sub i64 %0, 1
  %10 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %9, 2
  %11 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %12)
  %15 = bitcast i8* %14 to { i64, i1 }**
  %16 = load { i64, i1 }*, { i64, i1 }** %15, align 8
  %17 = bitcast { i64, i1 }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %10
}

define internal %Range @Microsoft__Quantum__Arrays___e16320bd27aa426885e6375e173405df_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %2
}

define internal %Range @Microsoft__Quantum__Arrays___51e146e9e3f741e2a6043055f76ad080_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %2
}

define internal void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %actual, i1 %expected, %String* %message) {
entry:
  %0 = icmp ne i1 %actual, %expected
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Diagnostics___b01e27bf91bd4e748af9bc2d289c8960___QsRef1__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___88aec1558aed4c1cb84901b497b7f322_Subarray__body(%Array* %indices, %Array* %array) {
entry:
  %sliced = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i64, i1 }**
  %6 = load { i64, i1 }*, { i64, i1 }** %5, align 8
  %7 = bitcast { i64, i1 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %9 = icmp eq i64 %nSliced, 0
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  %11 = sub i64 %0, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %16 = bitcast i8* %15 to { i64, i1 }**
  %17 = load { i64, i1 }*, { i64, i1 }** %16, align 8
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %19 = sub i64 %nSliced, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %11
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { i64, i1 }**
  %24 = load { i64, i1 }*, { i64, i1 }** %23, align 8
  %25 = bitcast { i64, i1 }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %10

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %32, %exiting__3 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %27)
  %30 = bitcast i8* %29 to { i64, i1 }**
  store { i64, i1 }* %17, { i64, i1 }** %30, align 8
  %31 = bitcast { i64, i1 }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %32 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %sliced, align 8
  %33 = sub i64 %nSliced, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %34 = phi i64 [ 0, %exit__3 ], [ %40, %exiting__4 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %34)
  %37 = bitcast i8* %36 to { i64, i1 }**
  %38 = load { i64, i1 }*, { i64, i1 }** %37, align 8
  %39 = bitcast { i64, i1 }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %40 = add i64 %34, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %41 = sub i64 %nSliced, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %56, %exiting__5 ]
  %42 = icmp sle i64 %idx, %41
  br i1 %42, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %43 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 -1)
  %44 = call %Array* @__quantum__rt__array_copy(%Array* %43, i1 false)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %47)
  %49 = bitcast i8* %48 to { i64, i1 }**
  %50 = load { i64, i1 }*, { i64, i1 }** %49, align 8
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %idx)
  %52 = bitcast i8* %51 to { i64, i1 }**
  %53 = bitcast { i64, i1 }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 1)
  %54 = load { i64, i1 }*, { i64, i1 }** %52, align 8
  %55 = bitcast { i64, i1 }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %55, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %55, i32 -1)
  store { i64, i1 }* %50, { i64, i1 }** %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 1)
  store %Array* %44, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %43, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %56 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %57 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  %58 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %59 = phi i64 [ 0, %exit__5 ], [ %65, %exiting__6 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %59)
  %62 = bitcast i8* %61 to { i64, i1 }**
  %63 = load { i64, i1 }*, { i64, i1 }** %62, align 8
  %64 = bitcast { i64, i1 }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %64, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %65 = add i64 %59, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %67 = sub i64 %66, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %68 = phi i64 [ 0, %exit__6 ], [ %74, %exiting__7 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %68)
  %71 = bitcast i8* %70 to { i64, i1 }**
  %72 = load { i64, i1 }*, { i64, i1 }** %71, align 8
  %73 = bitcast { i64, i1 }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %74 = add i64 %68, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 -1)
  ret %Array* %57
}

define internal %Array* @Microsoft__Quantum__Arrays___591aa3c3d09b40fd80ccf1fad0bc50fd_Padded__body(i64 %nElementsTotal, { double, double }* %defaultElement, %Array* %inputArray) {
entry:
  %0 = bitcast { double, double }* %defaultElement to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %1 = sub i64 %nElementsInitial, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 1)
  %nAbsElementsTotal = call i64 @Microsoft__Quantum__Math__AbsI__body(i64 %nElementsTotal)
  %9 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %10 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @19, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %9, i1 true, %String* %10)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___f1a022a821b14ff2afd521e39f1a1bcc_ConstantArray__body(i64 %nElementsPad, { double, double }* %defaultElement)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %padArray)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 1)
  %20 = icmp sge i64 %nElementsTotal, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  %21 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %21)
  %23 = sub i64 %22, 1
  br label %header__3

condFalse__1:                                     ; preds = %exit__2
  %24 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %24)
  %26 = sub i64 %25, 1
  br label %header__4

condContinue__1:                                  ; preds = %exit__4, %exit__3
  %27 = phi %Array* [ %21, %exit__3 ], [ %24, %exit__4 ]
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  %28 = sub i64 %nElementsInitial, 1
  br label %header__5

header__3:                                        ; preds = %exiting__3, %condTrue__1
  %29 = phi i64 [ 0, %condTrue__1 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %23
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  br label %condContinue__1

header__4:                                        ; preds = %exiting__4, %condFalse__1
  %36 = phi i64 [ 0, %condFalse__1 ], [ %42, %exiting__4 ]
  %37 = icmp sle i64 %36, %26
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 %36)
  %39 = bitcast i8* %38 to { double, double }**
  %40 = load { double, double }*, { double, double }** %39, align 8
  %41 = bitcast { double, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %42 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  br label %condContinue__1

header__5:                                        ; preds = %exiting__5, %condContinue__1
  %43 = phi i64 [ 0, %condContinue__1 ], [ %49, %exiting__5 ]
  %44 = icmp sle i64 %43, %28
  br i1 %44, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %43)
  %46 = bitcast i8* %45 to { double, double }**
  %47 = load { double, double }*, { double, double }** %46, align 8
  %48 = bitcast { double, double }* %47 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %49 = add i64 %43, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 -1)
  %50 = sub i64 %11, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %51 = phi i64 [ 0, %exit__5 ], [ %57, %exiting__6 ]
  %52 = icmp sle i64 %51, %50
  br i1 %52, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %51)
  %54 = bitcast i8* %53 to { double, double }**
  %55 = load { double, double }*, { double, double }** %54, align 8
  %56 = bitcast { double, double }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %57 = add i64 %51, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  %58 = sub i64 %11, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %59 = phi i64 [ 0, %exit__6 ], [ %65, %exiting__7 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %59)
  %62 = bitcast i8* %61 to { double, double }**
  %63 = load { double, double }*, { double, double }** %62, align 8
  %64 = bitcast { double, double }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %64, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %65 = add i64 %59, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %padArray, i32 -1)
  ret %Array* %27
}

define internal i64 @Microsoft__Quantum__Math__AbsI__body(i64 %a) {
entry:
  %0 = icmp slt i64 %a, 0
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = sub i64 0, %a
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi i64 [ %1, %condTrue__1 ], [ %a, %condFalse__1 ]
  ret i64 %2
}

define internal %Array* @Microsoft__Quantum__Arrays___f1a022a821b14ff2afd521e39f1a1bcc_ConstantArray__body(i64 %length, { double, double }* %value) {
entry:
  %0 = bitcast { double, double }* %value to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %2 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  store { double, double }* %value, { double, double }** %6, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret %Array* %1
}

define internal %Array* @Microsoft__Quantum__Arrays___d7a5dace8d00477d9dcdf9020a467709_ConstantArray__body(i64 %length, double %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to double*
  store double %value, double* %5, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret %Array* %0
}

define internal { i64, i1 }* @Microsoft__Quantum__Arrays___81b2e45870f04b54ac181661cda83d5d___QsRef1__Identity____body(i64 %0, i1 %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i1 }* getelementptr ({ i64, i1 }, { i64, i1 }* null, i32 1) to i64))
  %input = bitcast %Tuple* %2 to { i64, i1 }*
  %3 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %input, i32 0, i32 0
  %4 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %input, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store i1 %1, i1* %4, align 1
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret { i64, i1 }* %input
}

define internal { i64, { double, double }* }* @Microsoft__Quantum__Arrays___b8c470817e3c4d54a387b72f70fe0572___QsRef1__Identity____body(i64 %0, { double, double }* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { double, double }* }* getelementptr ({ i64, { double, double }* }, { i64, { double, double }* }* null, i32 1) to i64))
  %input = bitcast %Tuple* %2 to { i64, { double, double }* }*
  %3 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %input, i32 0, i32 0
  %4 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %input, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store { double, double }* %1, { double, double }** %4, align 8
  %5 = bitcast { double, double }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret { i64, { double, double }* }* %input
}

define internal { i64, double }* @Microsoft__Quantum__Arrays___6ed5375d64984881b234f01e25bc55b9___QsRef1__Identity____body(i64 %0, double %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double }* getelementptr ({ i64, double }, { i64, double }* null, i32 1) to i64))
  %input = bitcast %Tuple* %2 to { i64, double }*
  %3 = getelementptr inbounds { i64, double }, { i64, double }* %input, i32 0, i32 0
  %4 = getelementptr inbounds { i64, double }, { i64, double }* %input, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store double %1, double* %4, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret { i64, double }* %input
}

define internal { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* @Microsoft__Quantum__Arrays___d0d4b543e4084f10a022319d0e6d7887___QsRef1__Identity____body(i64 %0, { { %Array*, i64 }*, { i64, %Callable* }* }* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* getelementptr ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %input = bitcast %Tuple* %2 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*
  %3 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %input, i32 0, i32 0
  %4 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %input, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store { { %Array*, i64 }*, { i64, %Callable* }* }* %1, { { %Array*, i64 }*, { i64, %Callable* }* }** %4, align 8
  %5 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %1, i32 0, i32 0
  %6 = load { %Array*, i64 }*, { %Array*, i64 }** %5, align 8
  %7 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = bitcast { %Array*, i64 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %1, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 1)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %input
}

define internal { i64, %Array* }* @Microsoft__Quantum__Arrays___9e4eb8c66a5d41c0ab661fccd1f15c41___QsRef1__Identity____body(i64 %0, %Array* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %input = bitcast %Tuple* %2 to { i64, %Array* }*
  %3 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %input, i32 0, i32 0
  %4 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %input, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store %Array* %1, %Array** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %7)
  %10 = bitcast i8* %9 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %11 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %10, align 8
  %12 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %11, i32 0, i32 0
  %13 = load { %Array*, i64 }*, { %Array*, i64 }** %12, align 8
  %14 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %13, i32 0, i32 0
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %16 = bitcast { %Array*, i64 }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %17 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %11, i32 0, i32 1
  %18 = load { i64, %Callable* }*, { i64, %Callable* }** %17, align 8
  %19 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %18, i32 0, i32 1
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %20, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i32 1)
  %21 = bitcast { i64, %Callable* }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 1)
  %22 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %24 = sub i64 %5, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %25 = phi i64 [ 0, %exit__1 ], [ %41, %exiting__2 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %25)
  %28 = bitcast i8* %27 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %29 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %28, align 8
  %30 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %29, i32 0, i32 0
  %31 = load { %Array*, i64 }*, { %Array*, i64 }** %30, align 8
  %32 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %31, i32 0, i32 0
  %33 = load %Array*, %Array** %32, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 1)
  %34 = bitcast { %Array*, i64 }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 1)
  %35 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %29, i32 0, i32 1
  %36 = load { i64, %Callable* }*, { i64, %Callable* }** %35, align 8
  %37 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %36, i32 0, i32 1
  %38 = load %Callable*, %Callable** %37, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %38, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %38, i32 1)
  %39 = bitcast { i64, %Callable* }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 1)
  %40 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %41 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  %42 = sub i64 %5, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %43 = phi i64 [ 0, %exit__2 ], [ %59, %exiting__3 ]
  %44 = icmp sle i64 %43, %42
  br i1 %44, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %43)
  %46 = bitcast i8* %45 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %47 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %46, align 8
  %48 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %47, i32 0, i32 0
  %49 = load { %Array*, i64 }*, { %Array*, i64 }** %48, align 8
  %50 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %49, i32 0, i32 0
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 -1)
  %52 = bitcast { %Array*, i64 }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i32 -1)
  %53 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %47, i32 0, i32 1
  %54 = load { i64, %Callable* }*, { i64, %Callable* }** %53, align 8
  %55 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %54, i32 0, i32 1
  %56 = load %Callable*, %Callable** %55, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %56, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %56, i32 -1)
  %57 = bitcast { i64, %Callable* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  %58 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %47 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %58, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %59 = add i64 %43, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret { i64, %Array* }* %input
}

define internal %Array* @Microsoft__Quantum__Arrays___4aa279afe82a49f18051c32a38c71fb7_Filtered__body(%Callable* %predicate, %Array* %array) {
entry:
  %idxArray = alloca %Array*, align 8
  %totalFound = alloca i64, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %predicate, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %predicate, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i64, i1 }**
  %6 = load { i64, i1 }*, { i64, i1 }** %5, align 8
  %7 = bitcast { i64, i1 }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  store i64 0, i64* %totalFound, align 4
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %10 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %11)
  %14 = bitcast i8* %13 to i64*
  store i64 0, i64* %14, align 4
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  store %Array* %9, %Array** %idxArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %16 = call %Range @Microsoft__Quantum__Arrays___f32399b15f5e44b594f235c5225a7400_IndexRange__body(%Array* %array)
  %17 = extractvalue %Range %16, 0
  %18 = extractvalue %Range %16, 1
  %19 = extractvalue %Range %16, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__2
  %20 = icmp sgt i64 %18, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %idxElement = phi i64 [ %17, %preheader__1 ], [ %38, %exiting__3 ]
  %21 = icmp sle i64 %idxElement, %19
  %22 = icmp sge i64 %idxElement, %19
  %23 = select i1 %20, i1 %21, i1 %22
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %25 = bitcast i8* %24 to { i64, i1 }**
  %26 = load { i64, i1 }*, { i64, i1 }** %25, align 8
  %27 = bitcast { i64, i1 }* %26 to %Tuple*
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %predicate, %Tuple* %27, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { i1 }*
  %30 = getelementptr inbounds { i1 }, { i1 }* %29, i32 0, i32 0
  %31 = load i1, i1* %30, align 1
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  br i1 %31, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__3
  %32 = load %Array*, %Array** %idxArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = load i64, i64* %totalFound, align 4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %34)
  %36 = bitcast i8* %35 to i64*
  store i64 %idxElement, i64* %36, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %idxArray, align 8
  %37 = add i64 %34, 1
  store i64 %37, i64* %totalFound, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__3
  br label %exiting__3

exiting__3:                                       ; preds = %continue__1
  %38 = add i64 %idxElement, %18
  br label %header__3

exit__3:                                          ; preds = %header__3
  %39 = load %Array*, %Array** %idxArray, align 8
  %40 = load i64, i64* %totalFound, align 4
  %41 = sub i64 %40, 1
  %42 = insertvalue %Range { i64 0, i64 1, i64 0 }, i64 %41, 2
  %43 = call %Array* @__quantum__rt__array_slice_1d(%Array* %39, %Range %42, i1 true)
  %44 = call %Array* @Microsoft__Quantum__Arrays___88aec1558aed4c1cb84901b497b7f322_Subarray__body(%Array* %43, %Array* %array)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %predicate, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %predicate, i32 -1)
  %45 = sub i64 %0, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %46)
  %49 = bitcast i8* %48 to { i64, i1 }**
  %50 = load { i64, i1 }*, { i64, i1 }** %49, align 8
  %51 = bitcast { i64, i1 }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %43, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  ret %Array* %44
}

define internal %Array* @Microsoft__Quantum__Arrays___0642fb9fda514da39c521340e3041e14_MappedByIndex__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = icmp eq i64 %length, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %3 = bitcast i8* %2 to i1*
  %4 = load i1, i1* %3, align 1
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i1 }* getelementptr ({ i64, i1 }, { i64, i1 }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, i1 }*
  %7 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %6, i32 0, i32 1
  store i64 0, i64* %7, align 4
  store i1 %4, i1* %8, align 1
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i1 }* getelementptr ({ i64, i1 }, { i64, i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %5, %Tuple* %9)
  %first = bitcast %Tuple* %9 to { i64, i1 }*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %11 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %12 = phi i64 [ 0, %continue__1 ], [ %16, %exiting__1 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %12)
  %15 = bitcast i8* %14 to { i64, i1 }**
  store { i64, i1 }* %first, { i64, i1 }** %15, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %16 = add i64 %12, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %10, %Array** %retval, align 8
  %17 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %18 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %18)
  %21 = bitcast i8* %20 to { i64, i1 }**
  %22 = load { i64, i1 }*, { i64, i1 }** %21, align 8
  %23 = bitcast { i64, i1 }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %18, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %25 = sub i64 %length, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idx = phi i64 [ 1, %exit__2 ], [ %42, %exiting__3 ]
  %26 = icmp sle i64 %idx, %25
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  %28 = call %Array* @__quantum__rt__array_copy(%Array* %27, i1 false)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %30 = bitcast i8* %29 to i1*
  %31 = load i1, i1* %30, align 1
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i1 }* getelementptr ({ i64, i1 }, { i64, i1 }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { i64, i1 }*
  %34 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %33, i32 0, i32 1
  store i64 %idx, i64* %34, align 4
  store i1 %31, i1* %35, align 1
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i1 }* getelementptr ({ i64, i1 }, { i64, i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %32, %Tuple* %36)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %idx)
  %38 = bitcast i8* %37 to { i64, i1 }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 1)
  %39 = bitcast %Tuple* %36 to { i64, i1 }*
  %40 = load { i64, i1 }*, { i64, i1 }** %38, align 8
  %41 = bitcast { i64, i1 }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  store { i64, i1 }* %39, { i64, i1 }** %38, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  store %Array* %28, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %42 = add i64 %idx, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %43 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  %44 = call i64 @__quantum__rt__array_get_size_1d(%Array* %43)
  %45 = sub i64 %44, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %43, i64 %46)
  %49 = bitcast i8* %48 to { i64, i1 }**
  %50 = load { i64, i1 }*, { i64, i1 }** %49, align 8
  %51 = bitcast { i64, i1 }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret %Array* %43
}

define internal %Array* @Microsoft__Quantum__Arrays___18b22a2872974a209223a31f4af592ba_MappedByIndex__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { double, double }**
  %5 = load { double, double }*, { double, double }** %4, align 8
  %6 = bitcast { double, double }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %length, 0
  br i1 %8, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %10 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %12 = bitcast i8* %11 to { double, double }**
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { double, double }* }* getelementptr ({ i64, { double, double }* }, { i64, { double, double }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { i64, { double, double }* }*
  %17 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %16, i32 0, i32 1
  store i64 0, i64* %17, align 4
  store { double, double }* %13, { double, double }** %18, align 8
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { double, double }* }* getelementptr ({ i64, { double, double }* }, { i64, { double, double }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %15, %Tuple* %19)
  %first = bitcast %Tuple* %19 to { i64, { double, double }* }*
  %20 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %first, i32 0, i32 1
  %21 = load { double, double }*, { double, double }** %20, align 8
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %19, i32 1)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %24 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %25 = phi i64 [ 0, %then0__1 ], [ %31, %exiting__2 ]
  %26 = icmp sle i64 %25, %10
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %25)
  %28 = bitcast i8* %27 to { double, double }**
  %29 = load { double, double }*, { double, double }** %28, align 8
  %30 = bitcast { double, double }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %9

header__3:                                        ; preds = %exiting__3, %continue__1
  %32 = phi i64 [ 0, %continue__1 ], [ %38, %exiting__3 ]
  %33 = icmp sle i64 %32, %24
  br i1 %33, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %32)
  %35 = bitcast i8* %34 to { i64, { double, double }* }**
  store { i64, { double, double }* }* %first, { i64, { double, double }* }** %35, align 8
  %36 = load { double, double }*, { double, double }** %20, align 8
  %37 = bitcast { double, double }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %38 = add i64 %32, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %23, %Array** %retval, align 8
  %39 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %40 = phi i64 [ 0, %exit__3 ], [ %49, %exiting__4 ]
  %41 = icmp sle i64 %40, %39
  br i1 %41, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %40)
  %43 = bitcast i8* %42 to { i64, { double, double }* }**
  %44 = load { i64, { double, double }* }*, { i64, { double, double }* }** %43, align 8
  %45 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %44, i32 0, i32 1
  %46 = load { double, double }*, { double, double }** %45, align 8
  %47 = bitcast { double, double }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 1)
  %48 = bitcast { i64, { double, double }* }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %49 = add i64 %40, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %50 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %74, %exiting__5 ]
  %51 = icmp sle i64 %idx, %50
  br i1 %51, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %52 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %52, i32 -1)
  %53 = call %Array* @__quantum__rt__array_copy(%Array* %52, i1 false)
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %55 = bitcast i8* %54 to { double, double }**
  %56 = load { double, double }*, { double, double }** %55, align 8
  %57 = bitcast { double, double }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i32 1)
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { double, double }* }* getelementptr ({ i64, { double, double }* }, { i64, { double, double }* }* null, i32 1) to i64))
  %59 = bitcast %Tuple* %58 to { i64, { double, double }* }*
  %60 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %59, i32 0, i32 0
  %61 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %59, i32 0, i32 1
  store i64 %idx, i64* %60, align 4
  store { double, double }* %56, { double, double }** %61, align 8
  %62 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { double, double }* }* getelementptr ({ i64, { double, double }* }, { i64, { double, double }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %58, %Tuple* %62)
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %idx)
  %64 = bitcast i8* %63 to { i64, { double, double }* }**
  %65 = bitcast %Tuple* %62 to { i64, { double, double }* }*
  %66 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %65, i32 0, i32 1
  %67 = load { double, double }*, { double, double }** %66, align 8
  %68 = bitcast { double, double }* %67 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 1)
  %69 = load { i64, { double, double }* }*, { i64, { double, double }* }** %64, align 8
  %70 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %69, i32 0, i32 1
  %71 = load { double, double }*, { double, double }** %70, align 8
  %72 = bitcast { double, double }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %72, i32 -1)
  %73 = bitcast { i64, { double, double }* }* %69 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %72, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %73, i32 -1)
  store { i64, { double, double }* }* %65, { i64, { double, double }* }** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  store %Array* %53, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %74 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %75 = load %Array*, %Array** %retval, align 8
  %76 = load { double, double }*, { double, double }** %20, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %77 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %78 = phi i64 [ 0, %exit__5 ], [ %84, %exiting__6 ]
  %79 = icmp sle i64 %78, %77
  br i1 %79, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %78)
  %81 = bitcast i8* %80 to { double, double }**
  %82 = load { double, double }*, { double, double }** %81, align 8
  %83 = bitcast { double, double }* %82 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %83, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %84 = add i64 %78, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %85 = bitcast { double, double }* %76 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %85, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %19, i32 -1)
  %86 = call i64 @__quantum__rt__array_get_size_1d(%Array* %75)
  %87 = sub i64 %86, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %88 = phi i64 [ 0, %exit__6 ], [ %97, %exiting__7 ]
  %89 = icmp sle i64 %88, %87
  br i1 %89, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %75, i64 %88)
  %91 = bitcast i8* %90 to { i64, { double, double }* }**
  %92 = load { i64, { double, double }* }*, { i64, { double, double }* }** %91, align 8
  %93 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %92, i32 0, i32 1
  %94 = load { double, double }*, { double, double }** %93, align 8
  %95 = bitcast { double, double }* %94 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %95, i32 -1)
  %96 = bitcast { i64, { double, double }* }* %92 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %96, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %97 = add i64 %88, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %75, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %85, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  ret %Array* %75
}

define internal %Array* @Microsoft__Quantum__Arrays___27b80d3c0afd4dd68f55d127c5cdfce5_MappedByIndex__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = icmp eq i64 %length, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %3 = bitcast i8* %2 to double*
  %4 = load double, double* %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double }* getelementptr ({ i64, double }, { i64, double }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, double }*
  %7 = getelementptr inbounds { i64, double }, { i64, double }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, double }, { i64, double }* %6, i32 0, i32 1
  store i64 0, i64* %7, align 4
  store double %4, double* %8, align 8
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double }* getelementptr ({ i64, double }, { i64, double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %5, %Tuple* %9)
  %first = bitcast %Tuple* %9 to { i64, double }*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %11 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %12 = phi i64 [ 0, %continue__1 ], [ %16, %exiting__1 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %12)
  %15 = bitcast i8* %14 to { i64, double }**
  store { i64, double }* %first, { i64, double }** %15, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %16 = add i64 %12, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %10, %Array** %retval, align 8
  %17 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %18 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %18)
  %21 = bitcast i8* %20 to { i64, double }**
  %22 = load { i64, double }*, { i64, double }** %21, align 8
  %23 = bitcast { i64, double }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %18, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %25 = sub i64 %length, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idx = phi i64 [ 1, %exit__2 ], [ %42, %exiting__3 ]
  %26 = icmp sle i64 %idx, %25
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  %28 = call %Array* @__quantum__rt__array_copy(%Array* %27, i1 false)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %30 = bitcast i8* %29 to double*
  %31 = load double, double* %30, align 8
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double }* getelementptr ({ i64, double }, { i64, double }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { i64, double }*
  %34 = getelementptr inbounds { i64, double }, { i64, double }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { i64, double }, { i64, double }* %33, i32 0, i32 1
  store i64 %idx, i64* %34, align 4
  store double %31, double* %35, align 8
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double }* getelementptr ({ i64, double }, { i64, double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %32, %Tuple* %36)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %idx)
  %38 = bitcast i8* %37 to { i64, double }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 1)
  %39 = bitcast %Tuple* %36 to { i64, double }*
  %40 = load { i64, double }*, { i64, double }** %38, align 8
  %41 = bitcast { i64, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  store { i64, double }* %39, { i64, double }** %38, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  store %Array* %28, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %42 = add i64 %idx, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %43 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  %44 = call i64 @__quantum__rt__array_get_size_1d(%Array* %43)
  %45 = sub i64 %44, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %43, i64 %46)
  %49 = bitcast i8* %48 to { i64, double }**
  %50 = load { i64, double }*, { i64, double }** %49, align 8
  %51 = bitcast { i64, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret %Array* %43
}

define internal %Array* @Microsoft__Quantum__Arrays___4e18ab692bdc46809cf35e50e230ef2a_MappedByIndex__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %5 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %4, align 8
  %6 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %7 = load { %Array*, i64 }*, { %Array*, i64 }** %6, align 8
  %8 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %7, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = bitcast { %Array*, i64 }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  %11 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %12 = load { i64, %Callable* }*, { i64, %Callable* }** %11, align 8
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 1
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %14, i32 1)
  %15 = bitcast { i64, %Callable* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %18 = icmp eq i64 %length, 0
  br i1 %18, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %20 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %22 = bitcast i8* %21 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %23 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %22, align 8
  %24 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %23, i32 0, i32 0
  %25 = load { %Array*, i64 }*, { %Array*, i64 }** %24, align 8
  %26 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %25, i32 0, i32 0
  %27 = load %Array*, %Array** %26, align 8
  %28 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %23, i32 0, i32 1
  %29 = load { i64, %Callable* }*, { i64, %Callable* }** %28, align 8
  %30 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %29, i32 0, i32 1
  %31 = load %Callable*, %Callable** %30, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 1)
  %32 = bitcast { %Array*, i64 }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 1)
  %33 = bitcast { i64, %Callable* }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 1)
  %34 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 1)
  %35 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* getelementptr ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %36 = bitcast %Tuple* %35 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*
  %37 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %36, i32 0, i32 0
  %38 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %36, i32 0, i32 1
  store i64 0, i64* %37, align 4
  store { { %Array*, i64 }*, { i64, %Callable* }* }* %23, { { %Array*, i64 }*, { i64, %Callable* }* }** %38, align 8
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* getelementptr ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %35, %Tuple* %39)
  %first = bitcast %Tuple* %39 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*
  %40 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %first, i32 0, i32 1
  %41 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %40, align 8
  %42 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %41, i32 0, i32 0
  %43 = load { %Array*, i64 }*, { %Array*, i64 }** %42, align 8
  %44 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %43, i32 0, i32 0
  %45 = load %Array*, %Array** %44, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 1)
  %46 = bitcast { %Array*, i64 }* %43 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %46, i32 1)
  %47 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %41, i32 0, i32 1
  %48 = load { i64, %Callable* }*, { i64, %Callable* }** %47, align 8
  %49 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %48, i32 0, i32 1
  %50 = load %Callable*, %Callable** %49, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %50, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %50, i32 1)
  %51 = bitcast { i64, %Callable* }* %48 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 1)
  %52 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 1)
  %53 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %54 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %55 = phi i64 [ 0, %then0__1 ], [ %71, %exiting__2 ]
  %56 = icmp sle i64 %55, %20
  br i1 %56, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %55)
  %58 = bitcast i8* %57 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %59 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %58, align 8
  %60 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %59, i32 0, i32 0
  %61 = load { %Array*, i64 }*, { %Array*, i64 }** %60, align 8
  %62 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %61, i32 0, i32 0
  %63 = load %Array*, %Array** %62, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %63, i32 -1)
  %64 = bitcast { %Array*, i64 }* %61 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %64, i32 -1)
  %65 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %59, i32 0, i32 1
  %66 = load { i64, %Callable* }*, { i64, %Callable* }** %65, align 8
  %67 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %66, i32 0, i32 1
  %68 = load %Callable*, %Callable** %67, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %68, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %68, i32 -1)
  %69 = bitcast { i64, %Callable* }* %66 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %69, i32 -1)
  %70 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %59 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %71 = add i64 %55, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %19

header__3:                                        ; preds = %exiting__3, %continue__1
  %72 = phi i64 [ 0, %continue__1 ], [ %88, %exiting__3 ]
  %73 = icmp sle i64 %72, %54
  br i1 %73, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %72)
  %75 = bitcast i8* %74 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }**
  store { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %first, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }** %75, align 8
  %76 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %40, align 8
  %77 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %76, i32 0, i32 0
  %78 = load { %Array*, i64 }*, { %Array*, i64 }** %77, align 8
  %79 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %78, i32 0, i32 0
  %80 = load %Array*, %Array** %79, align 8
  %81 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %76, i32 0, i32 1
  %82 = load { i64, %Callable* }*, { i64, %Callable* }** %81, align 8
  %83 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %82, i32 0, i32 1
  %84 = load %Callable*, %Callable** %83, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %80, i32 1)
  %85 = bitcast { %Array*, i64 }* %78 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %85, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %84, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %84, i32 1)
  %86 = bitcast { i64, %Callable* }* %82 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %86, i32 1)
  %87 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %76 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %87, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %88 = add i64 %72, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %53, %Array** %retval, align 8
  %89 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %90 = phi i64 [ 0, %exit__3 ], [ %109, %exiting__4 ]
  %91 = icmp sle i64 %90, %89
  br i1 %91, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %90)
  %93 = bitcast i8* %92 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }**
  %94 = load { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }** %93, align 8
  %95 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %94, i32 0, i32 1
  %96 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %95, align 8
  %97 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %96, i32 0, i32 0
  %98 = load { %Array*, i64 }*, { %Array*, i64 }** %97, align 8
  %99 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %98, i32 0, i32 0
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = bitcast { %Array*, i64 }* %98 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 1)
  %102 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %96, i32 0, i32 1
  %103 = load { i64, %Callable* }*, { i64, %Callable* }** %102, align 8
  %104 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %103, i32 0, i32 1
  %105 = load %Callable*, %Callable** %104, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %105, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %105, i32 1)
  %106 = bitcast { i64, %Callable* }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %106, i32 1)
  %107 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %107, i32 1)
  %108 = bitcast { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %94 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %108, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %109 = add i64 %90, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  %110 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx = phi i64 [ 1, %exit__4 ], [ %164, %exiting__5 ]
  %111 = icmp sle i64 %idx, %110
  br i1 %111, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %112 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %112, i32 -1)
  %113 = call %Array* @__quantum__rt__array_copy(%Array* %112, i1 false)
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %115 = bitcast i8* %114 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %116 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %115, align 8
  %117 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %116, i32 0, i32 0
  %118 = load { %Array*, i64 }*, { %Array*, i64 }** %117, align 8
  %119 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %118, i32 0, i32 0
  %120 = load %Array*, %Array** %119, align 8
  %121 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %116, i32 0, i32 1
  %122 = load { i64, %Callable* }*, { i64, %Callable* }** %121, align 8
  %123 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %122, i32 0, i32 1
  %124 = load %Callable*, %Callable** %123, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 1)
  %125 = bitcast { %Array*, i64 }* %118 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %125, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %124, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %124, i32 1)
  %126 = bitcast { i64, %Callable* }* %122 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %126, i32 1)
  %127 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %116 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %127, i32 1)
  %128 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* getelementptr ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %129 = bitcast %Tuple* %128 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*
  %130 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %129, i32 0, i32 0
  %131 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %129, i32 0, i32 1
  store i64 %idx, i64* %130, align 4
  store { { %Array*, i64 }*, { i64, %Callable* }* }* %116, { { %Array*, i64 }*, { i64, %Callable* }* }** %131, align 8
  %132 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* getelementptr ({ i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %128, %Tuple* %132)
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 %idx)
  %134 = bitcast i8* %133 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }**
  %135 = bitcast %Tuple* %132 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*
  %136 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %135, i32 0, i32 1
  %137 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %136, align 8
  %138 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %137, i32 0, i32 0
  %139 = load { %Array*, i64 }*, { %Array*, i64 }** %138, align 8
  %140 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %139, i32 0, i32 0
  %141 = load %Array*, %Array** %140, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %141, i32 1)
  %142 = bitcast { %Array*, i64 }* %139 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %142, i32 1)
  %143 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %137, i32 0, i32 1
  %144 = load { i64, %Callable* }*, { i64, %Callable* }** %143, align 8
  %145 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %144, i32 0, i32 1
  %146 = load %Callable*, %Callable** %145, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %146, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %146, i32 1)
  %147 = bitcast { i64, %Callable* }* %144 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %147, i32 1)
  %148 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %148, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %132, i32 1)
  %149 = load { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }** %134, align 8
  %150 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %149, i32 0, i32 1
  %151 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %150, align 8
  %152 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %151, i32 0, i32 0
  %153 = load { %Array*, i64 }*, { %Array*, i64 }** %152, align 8
  %154 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %153, i32 0, i32 0
  %155 = load %Array*, %Array** %154, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %155, i32 -1)
  %156 = bitcast { %Array*, i64 }* %153 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %156, i32 -1)
  %157 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %151, i32 0, i32 1
  %158 = load { i64, %Callable* }*, { i64, %Callable* }** %157, align 8
  %159 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %158, i32 0, i32 1
  %160 = load %Callable*, %Callable** %159, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %160, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %160, i32 -1)
  %161 = bitcast { i64, %Callable* }* %158 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %161, i32 -1)
  %162 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %151 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %162, i32 -1)
  %163 = bitcast { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %149 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %163, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %155, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %156, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %160, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %160, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %161, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %162, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %163, i32 -1)
  store { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %135, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }** %134, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %113, i32 1)
  store %Array* %113, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %112, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %125, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %124, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %124, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %126, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %127, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %164 = add i64 %idx, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %165 = load %Array*, %Array** %retval, align 8
  %166 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %40, align 8
  %167 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %166, i32 0, i32 0
  %168 = load { %Array*, i64 }*, { %Array*, i64 }** %167, align 8
  %169 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %168, i32 0, i32 0
  %170 = load %Array*, %Array** %169, align 8
  %171 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %166, i32 0, i32 1
  %172 = load { i64, %Callable* }*, { i64, %Callable* }** %171, align 8
  %173 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %172, i32 0, i32 1
  %174 = load %Callable*, %Callable** %173, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %175 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %176 = phi i64 [ 0, %exit__5 ], [ %192, %exiting__6 ]
  %177 = icmp sle i64 %176, %175
  br i1 %177, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %176)
  %179 = bitcast i8* %178 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %180 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %179, align 8
  %181 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %180, i32 0, i32 0
  %182 = load { %Array*, i64 }*, { %Array*, i64 }** %181, align 8
  %183 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %182, i32 0, i32 0
  %184 = load %Array*, %Array** %183, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %184, i32 -1)
  %185 = bitcast { %Array*, i64 }* %182 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %185, i32 -1)
  %186 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %180, i32 0, i32 1
  %187 = load { i64, %Callable* }*, { i64, %Callable* }** %186, align 8
  %188 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %187, i32 0, i32 1
  %189 = load %Callable*, %Callable** %188, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %189, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %189, i32 -1)
  %190 = bitcast { i64, %Callable* }* %187 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %190, i32 -1)
  %191 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %180 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %191, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %192 = add i64 %176, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %170, i32 -1)
  %193 = bitcast { %Array*, i64 }* %168 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %193, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %174, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %174, i32 -1)
  %194 = bitcast { i64, %Callable* }* %172 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %194, i32 -1)
  %195 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %166 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %195, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 -1)
  %196 = call i64 @__quantum__rt__array_get_size_1d(%Array* %165)
  %197 = sub i64 %196, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %198 = phi i64 [ 0, %exit__6 ], [ %217, %exiting__7 ]
  %199 = icmp sle i64 %198, %197
  br i1 %199, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %200 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 %198)
  %201 = bitcast i8* %200 to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }**
  %202 = load { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }** %201, align 8
  %203 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %202, i32 0, i32 1
  %204 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %203, align 8
  %205 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %204, i32 0, i32 0
  %206 = load { %Array*, i64 }*, { %Array*, i64 }** %205, align 8
  %207 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %206, i32 0, i32 0
  %208 = load %Array*, %Array** %207, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %208, i32 -1)
  %209 = bitcast { %Array*, i64 }* %206 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %209, i32 -1)
  %210 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %204, i32 0, i32 1
  %211 = load { i64, %Callable* }*, { i64, %Callable* }** %210, align 8
  %212 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %211, i32 0, i32 1
  %213 = load %Callable*, %Callable** %212, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %213, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %213, i32 -1)
  %214 = bitcast { i64, %Callable* }* %211 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %214, i32 -1)
  %215 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %204 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %215, i32 -1)
  %216 = bitcast { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %202 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %216, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %217 = add i64 %198, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %165, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %170, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %193, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %174, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %174, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %194, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %195, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 -1)
  ret %Array* %165
}

define internal %Array* @Microsoft__Quantum__Arrays___593f6ec0c6174564a8ee8add732e267d_MappedByIndex__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to %Array**
  %5 = load %Array*, %Array** %4, align 8
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %7 = sub i64 %6, 1
  br label %header__2

exiting__1:                                       ; preds = %exit__2
  %8 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %9 = icmp eq i64 %length, 0
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %11 = sub i64 %length, 1
  br label %header__3

continue__1:                                      ; preds = %exit__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13, align 8
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %16 = sub i64 %15, 1
  br label %header__5

header__2:                                        ; preds = %exiting__2, %body__1
  %17 = phi i64 [ 0, %body__1 ], [ %33, %exiting__2 ]
  %18 = icmp sle i64 %17, %7
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %17)
  %20 = bitcast i8* %19 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %21 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %20, align 8
  %22 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %21, i32 0, i32 0
  %23 = load { %Array*, i64 }*, { %Array*, i64 }** %22, align 8
  %24 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %23, i32 0, i32 0
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, i64 }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  %27 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %21, i32 0, i32 1
  %28 = load { i64, %Callable* }*, { i64, %Callable* }** %27, align 8
  %29 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %28, i32 0, i32 1
  %30 = load %Callable*, %Callable** %29, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %30, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %30, i32 1)
  %31 = bitcast { i64, %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 1)
  %32 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  br label %exiting__1

header__3:                                        ; preds = %exiting__3, %then0__1
  %34 = phi i64 [ 0, %then0__1 ], [ %41, %exiting__3 ]
  %35 = icmp sle i64 %34, %11
  br i1 %35, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %34)
  %37 = bitcast i8* %36 to %Array**
  %38 = load %Array*, %Array** %37, align 8
  %39 = call i64 @__quantum__rt__array_get_size_1d(%Array* %38)
  %40 = sub i64 %39, 1
  br label %header__4

exiting__3:                                       ; preds = %exit__4
  %41 = add i64 %34, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %10

header__4:                                        ; preds = %exiting__4, %body__3
  %42 = phi i64 [ 0, %body__3 ], [ %58, %exiting__4 ]
  %43 = icmp sle i64 %42, %40
  br i1 %43, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 %42)
  %45 = bitcast i8* %44 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %46 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %45, align 8
  %47 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %46, i32 0, i32 0
  %48 = load { %Array*, i64 }*, { %Array*, i64 }** %47, align 8
  %49 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %48, i32 0, i32 0
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 -1)
  %51 = bitcast { %Array*, i64 }* %48 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i32 -1)
  %52 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %46, i32 0, i32 1
  %53 = load { i64, %Callable* }*, { i64, %Callable* }** %52, align 8
  %54 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %53, i32 0, i32 1
  %55 = load %Callable*, %Callable** %54, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %55, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %55, i32 -1)
  %56 = bitcast { i64, %Callable* }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  %57 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %42, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i32 -1)
  br label %exiting__3

header__5:                                        ; preds = %exiting__5, %continue__1
  %59 = phi i64 [ 0, %continue__1 ], [ %75, %exiting__5 ]
  %60 = icmp sle i64 %59, %16
  br i1 %60, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %59)
  %62 = bitcast i8* %61 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %63 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %62, align 8
  %64 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %63, i32 0, i32 0
  %65 = load { %Array*, i64 }*, { %Array*, i64 }** %64, align 8
  %66 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %65, i32 0, i32 0
  %67 = load %Array*, %Array** %66, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 1)
  %68 = bitcast { %Array*, i64 }* %65 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %68, i32 1)
  %69 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %63, i32 0, i32 1
  %70 = load { i64, %Callable* }*, { i64, %Callable* }** %69, align 8
  %71 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %70, i32 0, i32 1
  %72 = load %Callable*, %Callable** %71, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %72, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %72, i32 1)
  %73 = bitcast { i64, %Callable* }* %70 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %73, i32 1)
  %74 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %74, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %75 = add i64 %59, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 1)
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { i64, %Array* }*
  %78 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %77, i32 0, i32 0
  %79 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %77, i32 0, i32 1
  store i64 0, i64* %78, align 4
  store %Array* %14, %Array** %79, align 8
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %76, %Tuple* %80)
  %first = bitcast %Tuple* %80 to { i64, %Array* }*
  %81 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %first, i32 0, i32 1
  %82 = load %Array*, %Array** %81, align 8
  %83 = call i64 @__quantum__rt__array_get_size_1d(%Array* %82)
  %84 = sub i64 %83, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %85 = phi i64 [ 0, %exit__5 ], [ %101, %exiting__6 ]
  %86 = icmp sle i64 %85, %84
  br i1 %86, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 %85)
  %88 = bitcast i8* %87 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %89 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %88, align 8
  %90 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %89, i32 0, i32 0
  %91 = load { %Array*, i64 }*, { %Array*, i64 }** %90, align 8
  %92 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %91, i32 0, i32 0
  %93 = load %Array*, %Array** %92, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %93, i32 1)
  %94 = bitcast { %Array*, i64 }* %91 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %94, i32 1)
  %95 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %89, i32 0, i32 1
  %96 = load { i64, %Callable* }*, { i64, %Callable* }** %95, align 8
  %97 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %96, i32 0, i32 1
  %98 = load %Callable*, %Callable** %97, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %98, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %98, i32 1)
  %99 = bitcast { i64, %Callable* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %99, i32 1)
  %100 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %89 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %100, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %101 = add i64 %85, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %82, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %102 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %103 = sub i64 %length, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %104 = phi i64 [ 0, %exit__6 ], [ %111, %exiting__7 ]
  %105 = icmp sle i64 %104, %103
  br i1 %105, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %102, i64 %104)
  %107 = bitcast i8* %106 to { i64, %Array* }**
  store { i64, %Array* }* %first, { i64, %Array* }** %107, align 8
  %108 = load %Array*, %Array** %81, align 8
  %109 = call i64 @__quantum__rt__array_get_size_1d(%Array* %108)
  %110 = sub i64 %109, 1
  br label %header__8

exiting__7:                                       ; preds = %exit__8
  %111 = add i64 %104, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  store %Array* %102, %Array** %retval, align 8
  %112 = sub i64 %length, 1
  br label %header__9

header__8:                                        ; preds = %exiting__8, %body__7
  %113 = phi i64 [ 0, %body__7 ], [ %129, %exiting__8 ]
  %114 = icmp sle i64 %113, %110
  br i1 %114, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 %113)
  %116 = bitcast i8* %115 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %117 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %116, align 8
  %118 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %117, i32 0, i32 0
  %119 = load { %Array*, i64 }*, { %Array*, i64 }** %118, align 8
  %120 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %119, i32 0, i32 0
  %121 = load %Array*, %Array** %120, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %121, i32 1)
  %122 = bitcast { %Array*, i64 }* %119 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %122, i32 1)
  %123 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %117, i32 0, i32 1
  %124 = load { i64, %Callable* }*, { i64, %Callable* }** %123, align 8
  %125 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %124, i32 0, i32 1
  %126 = load %Callable*, %Callable** %125, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %126, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %126, i32 1)
  %127 = bitcast { i64, %Callable* }* %124 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %127, i32 1)
  %128 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %117 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %129 = add i64 %113, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %108, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 1)
  br label %exiting__7

header__9:                                        ; preds = %exiting__9, %exit__7
  %130 = phi i64 [ 0, %exit__7 ], [ %139, %exiting__9 ]
  %131 = icmp sle i64 %130, %112
  br i1 %131, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %132 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %102, i64 %130)
  %133 = bitcast i8* %132 to { i64, %Array* }**
  %134 = load { i64, %Array* }*, { i64, %Array* }** %133, align 8
  %135 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %134, i32 0, i32 1
  %136 = load %Array*, %Array** %135, align 8
  %137 = call i64 @__quantum__rt__array_get_size_1d(%Array* %136)
  %138 = sub i64 %137, 1
  br label %header__10

exiting__9:                                       ; preds = %exit__10
  %139 = add i64 %130, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %102, i32 1)
  %140 = sub i64 %length, 1
  br label %header__11

header__10:                                       ; preds = %exiting__10, %body__9
  %141 = phi i64 [ 0, %body__9 ], [ %157, %exiting__10 ]
  %142 = icmp sle i64 %141, %138
  br i1 %142, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %143 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %136, i64 %141)
  %144 = bitcast i8* %143 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %145 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %144, align 8
  %146 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %145, i32 0, i32 0
  %147 = load { %Array*, i64 }*, { %Array*, i64 }** %146, align 8
  %148 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %147, i32 0, i32 0
  %149 = load %Array*, %Array** %148, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %149, i32 1)
  %150 = bitcast { %Array*, i64 }* %147 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %150, i32 1)
  %151 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %145, i32 0, i32 1
  %152 = load { i64, %Callable* }*, { i64, %Callable* }** %151, align 8
  %153 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %152, i32 0, i32 1
  %154 = load %Callable*, %Callable** %153, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %154, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %154, i32 1)
  %155 = bitcast { i64, %Callable* }* %152 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %155, i32 1)
  %156 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %145 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %156, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %157 = add i64 %141, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %136, i32 1)
  %158 = bitcast { i64, %Array* }* %134 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %158, i32 1)
  br label %exiting__9

header__11:                                       ; preds = %exiting__11, %exit__9
  %idx = phi i64 [ 1, %exit__9 ], [ %167, %exiting__11 ]
  %159 = icmp sle i64 %idx, %140
  br i1 %159, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %160 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %160, i32 -1)
  %161 = call %Array* @__quantum__rt__array_copy(%Array* %160, i1 false)
  %162 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %163 = bitcast i8* %162 to %Array**
  %164 = load %Array*, %Array** %163, align 8
  %165 = call i64 @__quantum__rt__array_get_size_1d(%Array* %164)
  %166 = sub i64 %165, 1
  br label %header__12

exiting__11:                                      ; preds = %exit__16
  %167 = add i64 %idx, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  %168 = load %Array*, %Array** %retval, align 8
  %169 = load %Array*, %Array** %81, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %170 = sub i64 %length, 1
  br label %header__17

header__12:                                       ; preds = %exiting__12, %body__11
  %171 = phi i64 [ 0, %body__11 ], [ %187, %exiting__12 ]
  %172 = icmp sle i64 %171, %166
  br i1 %172, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %164, i64 %171)
  %174 = bitcast i8* %173 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %175 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %174, align 8
  %176 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %175, i32 0, i32 0
  %177 = load { %Array*, i64 }*, { %Array*, i64 }** %176, align 8
  %178 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %177, i32 0, i32 0
  %179 = load %Array*, %Array** %178, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %179, i32 1)
  %180 = bitcast { %Array*, i64 }* %177 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %180, i32 1)
  %181 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %175, i32 0, i32 1
  %182 = load { i64, %Callable* }*, { i64, %Callable* }** %181, align 8
  %183 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %182, i32 0, i32 1
  %184 = load %Callable*, %Callable** %183, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %184, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %184, i32 1)
  %185 = bitcast { i64, %Callable* }* %182 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %185, i32 1)
  %186 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %175 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %186, i32 1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %187 = add i64 %171, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %164, i32 1)
  %188 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %189 = bitcast %Tuple* %188 to { i64, %Array* }*
  %190 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %189, i32 0, i32 0
  %191 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %189, i32 0, i32 1
  store i64 %idx, i64* %190, align 4
  store %Array* %164, %Array** %191, align 8
  %192 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %188, %Tuple* %192)
  %193 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %161, i64 %idx)
  %194 = bitcast i8* %193 to { i64, %Array* }**
  %195 = bitcast %Tuple* %192 to { i64, %Array* }*
  %196 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %195, i32 0, i32 1
  %197 = load %Array*, %Array** %196, align 8
  %198 = call i64 @__quantum__rt__array_get_size_1d(%Array* %197)
  %199 = sub i64 %198, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %200 = phi i64 [ 0, %exit__12 ], [ %216, %exiting__13 ]
  %201 = icmp sle i64 %200, %199
  br i1 %201, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %197, i64 %200)
  %203 = bitcast i8* %202 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %204 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %203, align 8
  %205 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %204, i32 0, i32 0
  %206 = load { %Array*, i64 }*, { %Array*, i64 }** %205, align 8
  %207 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %206, i32 0, i32 0
  %208 = load %Array*, %Array** %207, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %208, i32 1)
  %209 = bitcast { %Array*, i64 }* %206 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %209, i32 1)
  %210 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %204, i32 0, i32 1
  %211 = load { i64, %Callable* }*, { i64, %Callable* }** %210, align 8
  %212 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %211, i32 0, i32 1
  %213 = load %Callable*, %Callable** %212, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %213, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %213, i32 1)
  %214 = bitcast { i64, %Callable* }* %211 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %214, i32 1)
  %215 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %204 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %215, i32 1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %216 = add i64 %200, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %197, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %192, i32 1)
  %217 = load { i64, %Array* }*, { i64, %Array* }** %194, align 8
  %218 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %217, i32 0, i32 1
  %219 = load %Array*, %Array** %218, align 8
  %220 = call i64 @__quantum__rt__array_get_size_1d(%Array* %219)
  %221 = sub i64 %220, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %222 = phi i64 [ 0, %exit__13 ], [ %238, %exiting__14 ]
  %223 = icmp sle i64 %222, %221
  br i1 %223, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %224 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %222)
  %225 = bitcast i8* %224 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %226 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %225, align 8
  %227 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %226, i32 0, i32 0
  %228 = load { %Array*, i64 }*, { %Array*, i64 }** %227, align 8
  %229 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %228, i32 0, i32 0
  %230 = load %Array*, %Array** %229, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %230, i32 -1)
  %231 = bitcast { %Array*, i64 }* %228 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %231, i32 -1)
  %232 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %226, i32 0, i32 1
  %233 = load { i64, %Callable* }*, { i64, %Callable* }** %232, align 8
  %234 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %233, i32 0, i32 1
  %235 = load %Callable*, %Callable** %234, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %235, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %235, i32 -1)
  %236 = bitcast { i64, %Callable* }* %233 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %236, i32 -1)
  %237 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %226 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %237, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %238 = add i64 %222, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %219, i32 -1)
  %239 = bitcast { i64, %Array* }* %217 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %239, i32 -1)
  %240 = sub i64 %220, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %241 = phi i64 [ 0, %exit__14 ], [ %257, %exiting__15 ]
  %242 = icmp sle i64 %241, %240
  br i1 %242, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %243 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %241)
  %244 = bitcast i8* %243 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %245 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %244, align 8
  %246 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %245, i32 0, i32 0
  %247 = load { %Array*, i64 }*, { %Array*, i64 }** %246, align 8
  %248 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %247, i32 0, i32 0
  %249 = load %Array*, %Array** %248, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %249, i32 -1)
  %250 = bitcast { %Array*, i64 }* %247 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %250, i32 -1)
  %251 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %245, i32 0, i32 1
  %252 = load { i64, %Callable* }*, { i64, %Callable* }** %251, align 8
  %253 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %252, i32 0, i32 1
  %254 = load %Callable*, %Callable** %253, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %254, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %254, i32 -1)
  %255 = bitcast { i64, %Callable* }* %252 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %255, i32 -1)
  %256 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %245 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %256, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %257 = add i64 %241, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_reference_count(%Array* %219, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %239, i32 -1)
  store { i64, %Array* }* %195, { i64, %Array* }** %194, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %161, i32 1)
  store %Array* %161, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %160, i32 -1)
  %258 = sub i64 %165, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %259 = phi i64 [ 0, %exit__15 ], [ %275, %exiting__16 ]
  %260 = icmp sle i64 %259, %258
  br i1 %260, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %261 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %164, i64 %259)
  %262 = bitcast i8* %261 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %263 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %262, align 8
  %264 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %263, i32 0, i32 0
  %265 = load { %Array*, i64 }*, { %Array*, i64 }** %264, align 8
  %266 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %265, i32 0, i32 0
  %267 = load %Array*, %Array** %266, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %267, i32 -1)
  %268 = bitcast { %Array*, i64 }* %265 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %268, i32 -1)
  %269 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %263, i32 0, i32 1
  %270 = load { i64, %Callable* }*, { i64, %Callable* }** %269, align 8
  %271 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %270, i32 0, i32 1
  %272 = load %Callable*, %Callable** %271, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %272, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %272, i32 -1)
  %273 = bitcast { i64, %Callable* }* %270 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %273, i32 -1)
  %274 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %263 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %274, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %275 = add i64 %259, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_reference_count(%Array* %164, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %188, i32 -1)
  br label %exiting__11

header__17:                                       ; preds = %exiting__17, %exit__11
  %276 = phi i64 [ 0, %exit__11 ], [ %283, %exiting__17 ]
  %277 = icmp sle i64 %276, %170
  br i1 %277, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %278 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %276)
  %279 = bitcast i8* %278 to %Array**
  %280 = load %Array*, %Array** %279, align 8
  %281 = call i64 @__quantum__rt__array_get_size_1d(%Array* %280)
  %282 = sub i64 %281, 1
  br label %header__18

exiting__17:                                      ; preds = %exit__18
  %283 = add i64 %276, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %284 = call i64 @__quantum__rt__array_get_size_1d(%Array* %169)
  %285 = sub i64 %284, 1
  br label %header__19

header__18:                                       ; preds = %exiting__18, %body__17
  %286 = phi i64 [ 0, %body__17 ], [ %302, %exiting__18 ]
  %287 = icmp sle i64 %286, %282
  br i1 %287, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %288 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %280, i64 %286)
  %289 = bitcast i8* %288 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %290 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %289, align 8
  %291 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %290, i32 0, i32 0
  %292 = load { %Array*, i64 }*, { %Array*, i64 }** %291, align 8
  %293 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %292, i32 0, i32 0
  %294 = load %Array*, %Array** %293, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %294, i32 -1)
  %295 = bitcast { %Array*, i64 }* %292 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %295, i32 -1)
  %296 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %290, i32 0, i32 1
  %297 = load { i64, %Callable* }*, { i64, %Callable* }** %296, align 8
  %298 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %297, i32 0, i32 1
  %299 = load %Callable*, %Callable** %298, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %299, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %299, i32 -1)
  %300 = bitcast { i64, %Callable* }* %297 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %300, i32 -1)
  %301 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %290 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %301, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %302 = add i64 %286, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %280, i32 -1)
  br label %exiting__17

header__19:                                       ; preds = %exiting__19, %exit__17
  %303 = phi i64 [ 0, %exit__17 ], [ %319, %exiting__19 ]
  %304 = icmp sle i64 %303, %285
  br i1 %304, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %305 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %169, i64 %303)
  %306 = bitcast i8* %305 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %307 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %306, align 8
  %308 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %307, i32 0, i32 0
  %309 = load { %Array*, i64 }*, { %Array*, i64 }** %308, align 8
  %310 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %309, i32 0, i32 0
  %311 = load %Array*, %Array** %310, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %311, i32 -1)
  %312 = bitcast { %Array*, i64 }* %309 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %312, i32 -1)
  %313 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %307, i32 0, i32 1
  %314 = load { i64, %Callable* }*, { i64, %Callable* }** %313, align 8
  %315 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %314, i32 0, i32 1
  %316 = load %Callable*, %Callable** %315, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %316, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %316, i32 -1)
  %317 = bitcast { i64, %Callable* }* %314 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %317, i32 -1)
  %318 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %307 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %318, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %319 = add i64 %303, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %169, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  %320 = call i64 @__quantum__rt__array_get_size_1d(%Array* %168)
  %321 = sub i64 %320, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %322 = phi i64 [ 0, %exit__19 ], [ %331, %exiting__20 ]
  %323 = icmp sle i64 %322, %321
  br i1 %323, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %324 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %168, i64 %322)
  %325 = bitcast i8* %324 to { i64, %Array* }**
  %326 = load { i64, %Array* }*, { i64, %Array* }** %325, align 8
  %327 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %326, i32 0, i32 1
  %328 = load %Array*, %Array** %327, align 8
  %329 = call i64 @__quantum__rt__array_get_size_1d(%Array* %328)
  %330 = sub i64 %329, 1
  br label %header__21

exiting__20:                                      ; preds = %exit__21
  %331 = add i64 %322, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %168, i32 -1)
  %332 = sub i64 %15, 1
  br label %header__22

header__21:                                       ; preds = %exiting__21, %body__20
  %333 = phi i64 [ 0, %body__20 ], [ %349, %exiting__21 ]
  %334 = icmp sle i64 %333, %330
  br i1 %334, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %335 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %328, i64 %333)
  %336 = bitcast i8* %335 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %337 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %336, align 8
  %338 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %337, i32 0, i32 0
  %339 = load { %Array*, i64 }*, { %Array*, i64 }** %338, align 8
  %340 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %339, i32 0, i32 0
  %341 = load %Array*, %Array** %340, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %341, i32 -1)
  %342 = bitcast { %Array*, i64 }* %339 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %342, i32 -1)
  %343 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %337, i32 0, i32 1
  %344 = load { i64, %Callable* }*, { i64, %Callable* }** %343, align 8
  %345 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %344, i32 0, i32 1
  %346 = load %Callable*, %Callable** %345, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %346, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %346, i32 -1)
  %347 = bitcast { i64, %Callable* }* %344 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %347, i32 -1)
  %348 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %337 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %348, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %349 = add i64 %333, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %328, i32 -1)
  %350 = bitcast { i64, %Array* }* %326 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %350, i32 -1)
  br label %exiting__20

header__22:                                       ; preds = %exiting__22, %exit__20
  %351 = phi i64 [ 0, %exit__20 ], [ %367, %exiting__22 ]
  %352 = icmp sle i64 %351, %332
  br i1 %352, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %353 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %351)
  %354 = bitcast i8* %353 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %355 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %354, align 8
  %356 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %355, i32 0, i32 0
  %357 = load { %Array*, i64 }*, { %Array*, i64 }** %356, align 8
  %358 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %357, i32 0, i32 0
  %359 = load %Array*, %Array** %358, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %359, i32 -1)
  %360 = bitcast { %Array*, i64 }* %357 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %360, i32 -1)
  %361 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %355, i32 0, i32 1
  %362 = load { i64, %Callable* }*, { i64, %Callable* }** %361, align 8
  %363 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %362, i32 0, i32 1
  %364 = load %Callable*, %Callable** %363, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %364, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %364, i32 -1)
  %365 = bitcast { i64, %Callable* }* %362 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %365, i32 -1)
  %366 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %355 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %366, i32 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %367 = add i64 %351, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i32 -1)
  %368 = sub i64 %284, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %369 = phi i64 [ 0, %exit__22 ], [ %385, %exiting__23 ]
  %370 = icmp sle i64 %369, %368
  br i1 %370, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %371 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %169, i64 %369)
  %372 = bitcast i8* %371 to { { %Array*, i64 }*, { i64, %Callable* }* }**
  %373 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %372, align 8
  %374 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %373, i32 0, i32 0
  %375 = load { %Array*, i64 }*, { %Array*, i64 }** %374, align 8
  %376 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %375, i32 0, i32 0
  %377 = load %Array*, %Array** %376, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %377, i32 -1)
  %378 = bitcast { %Array*, i64 }* %375 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %378, i32 -1)
  %379 = getelementptr inbounds { { %Array*, i64 }*, { i64, %Callable* }* }, { { %Array*, i64 }*, { i64, %Callable* }* }* %373, i32 0, i32 1
  %380 = load { i64, %Callable* }*, { i64, %Callable* }** %379, align 8
  %381 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %380, i32 0, i32 1
  %382 = load %Callable*, %Callable** %381, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %382, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %382, i32 -1)
  %383 = bitcast { i64, %Callable* }* %380 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %383, i32 -1)
  %384 = bitcast { { %Array*, i64 }*, { i64, %Callable* }* }* %373 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %384, i32 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %385 = add i64 %369, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_reference_count(%Array* %169, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  ret %Array* %168
}

define internal %Array* @Microsoft__Quantum__Arrays___5ef583d7ebd84277a2b7db5af95f2088_Enumerated__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___81b2e45870f04b54ac181661cda83d5d___QsRef1__Identity____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___0642fb9fda514da39c521340e3041e14_MappedByIndex__body(%Callable* %0, %Array* %array)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret %Array* %1
}

define internal void @Microsoft__Quantum__Arrays___81b2e45870f04b54ac181661cda83d5d___QsRef1__Identity____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, i1 }*
  %1 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load i1, i1* %2, align 1
  %5 = call { i64, i1 }* @Microsoft__Quantum__Arrays___81b2e45870f04b54ac181661cda83d5d___QsRef1__Identity____body(i64 %3, i1 %4)
  %6 = bitcast %Tuple* %result-tuple to { i64, i1 }*
  %7 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 4
  store i64 %10, i64* %7, align 4
  %11 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %5, i32 0, i32 1
  %12 = load i1, i1* %11, align 1
  store i1 %12, i1* %8, align 1
  %13 = bitcast { i64, i1 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___6ed5375d64984881b234f01e25bc55b9___QsRef1__Identity____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, double }*
  %1 = getelementptr inbounds { i64, double }, { i64, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, double }, { i64, double }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load double, double* %2, align 8
  %5 = call { i64, double }* @Microsoft__Quantum__Arrays___6ed5375d64984881b234f01e25bc55b9___QsRef1__Identity____body(i64 %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { i64, double }*
  %7 = getelementptr inbounds { i64, double }, { i64, double }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, double }, { i64, double }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { i64, double }, { i64, double }* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 4
  store i64 %10, i64* %7, align 4
  %11 = getelementptr inbounds { i64, double }, { i64, double }* %5, i32 0, i32 1
  %12 = load double, double* %11, align 8
  store double %12, double* %8, align 8
  %13 = bitcast { i64, double }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___b8c470817e3c4d54a387b72f70fe0572___QsRef1__Identity____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { double, double }* }*
  %1 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load { double, double }*, { double, double }** %2, align 8
  %5 = call { i64, { double, double }* }* @Microsoft__Quantum__Arrays___b8c470817e3c4d54a387b72f70fe0572___QsRef1__Identity____body(i64 %3, { double, double }* %4)
  %6 = bitcast %Tuple* %result-tuple to { i64, { double, double }* }*
  %7 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 4
  store i64 %10, i64* %7, align 4
  %11 = getelementptr inbounds { i64, { double, double }* }, { i64, { double, double }* }* %5, i32 0, i32 1
  %12 = load { double, double }*, { double, double }** %11, align 8
  store { double, double }* %12, { double, double }** %8, align 8
  %13 = bitcast { i64, { double, double }* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___9e4eb8c66a5d41c0ab661fccd1f15c41___QsRef1__Identity____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call { i64, %Array* }* @Microsoft__Quantum__Arrays___9e4eb8c66a5d41c0ab661fccd1f15c41___QsRef1__Identity____body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { i64, %Array* }*
  %7 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 4
  store i64 %10, i64* %7, align 4
  %11 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %5, i32 0, i32 1
  %12 = load %Array*, %Array** %11, align 8
  store %Array* %12, %Array** %8, align 8
  %13 = bitcast { i64, %Array* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___d0d4b543e4084f10a022319d0e6d7887___QsRef1__Identity____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %2, align 8
  %5 = call { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* @Microsoft__Quantum__Arrays___d0d4b543e4084f10a022319d0e6d7887___QsRef1__Identity____body(i64 %3, { { %Array*, i64 }*, { i64, %Callable* }* }* %4)
  %6 = bitcast %Tuple* %result-tuple to { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }*
  %7 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 4
  store i64 %10, i64* %7, align 4
  %11 = getelementptr inbounds { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }, { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %12 = load { { %Array*, i64 }*, { i64, %Callable* }* }*, { { %Array*, i64 }*, { i64, %Callable* }* }** %11, align 8
  store { { %Array*, i64 }*, { i64, %Callable* }* }* %12, { { %Array*, i64 }*, { i64, %Callable* }* }** %8, align 8
  %13 = bitcast { i64, { { %Array*, i64 }*, { i64, %Callable* }* }* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal i1 @Microsoft__Quantum__Arrays___e14e05cbd7674cf99f7174e4f55f22e1_Fold__body(%Callable* %folder, i1 %state, %Array* %array) {
entry:
  %current = alloca i1, align 1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  store i1 %state, i1* %current, align 1
  %0 = call %Range @Microsoft__Quantum__Arrays___e16320bd27aa426885e6375e173405df_IndexRange__body(%Array* %array)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxElement = phi i64 [ %1, %preheader__1 ], [ %20, %exiting__1 ]
  %5 = icmp sle i64 %idxElement, %3
  %6 = icmp sge i64 %idxElement, %3
  %7 = select i1 %4, i1 %5, i1 %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = load i1, i1* %current, align 1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %10 = bitcast i8* %9 to i1*
  %11 = load i1, i1* %10, align 1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, i1 }* getelementptr ({ i1, i1 }, { i1, i1 }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i1, i1 }*
  %14 = getelementptr inbounds { i1, i1 }, { i1, i1 }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i1, i1 }, { i1, i1 }* %13, i32 0, i32 1
  store i1 %8, i1* %14, align 1
  store i1 %11, i1* %15, align 1
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %folder, %Tuple* %12, %Tuple* %16)
  %17 = bitcast %Tuple* %16 to { i1 }*
  %18 = getelementptr inbounds { i1 }, { i1 }* %17, i32 0, i32 0
  %19 = load i1, i1* %18, align 1
  store i1 %19, i1* %current, align 1
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %idxElement, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  %21 = load i1, i1* %current, align 1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %21
}

define internal void @Microsoft__Quantum__Logical__And__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1, i1 }*
  %1 = getelementptr inbounds { i1, i1 }, { i1, i1 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i1, i1 }, { i1, i1 }* %0, i32 0, i32 1
  %3 = load i1, i1* %1, align 1
  %4 = load i1, i1* %2, align 1
  %5 = call i1 @Microsoft__Quantum__Logical__And__body(i1 %3, i1 %4)
  %6 = bitcast %Tuple* %result-tuple to { i1 }*
  %7 = getelementptr inbounds { i1 }, { i1 }* %6, i32 0, i32 0
  store i1 %5, i1* %7, align 1
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___83850f08600e4e54b1fe3e670f742428_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { double, double }**
  %5 = load { double, double }*, { double, double }** %4, align 8
  %6 = bitcast { double, double }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %length, 0
  br i1 %8, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %10 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %12 = bitcast i8* %11 to { double, double }**
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %14, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { i1 }*
  %17 = getelementptr inbounds { i1 }, { i1 }* %16, i32 0, i32 0
  %first = load i1, i1* %17, align 1
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %length)
  %19 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %10
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %9

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %27)
  %30 = bitcast i8* %29 to i1*
  store i1 %first, i1* %30, align 1
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 1, %exit__3 ], [ %46, %exiting__4 ]
  %33 = icmp sle i64 %idx, %32
  br i1 %33, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %34 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = call %Array* @__quantum__rt__array_copy(%Array* %34, i1 false)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %37 = bitcast i8* %36 to { double, double }**
  %38 = load { double, double }*, { double, double }** %37, align 8
  %39 = bitcast { double, double }* %38 to %Tuple*
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %39, %Tuple* %40)
  %41 = bitcast %Tuple* %40 to { i1 }*
  %42 = getelementptr inbounds { i1 }, { i1 }* %41, i32 0, i32 0
  %43 = load i1, i1* %42, align 1
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx)
  %45 = bitcast i8* %44 to i1*
  store i1 %43, i1* %45, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  store %Array* %35, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %47 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %48 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %49 = phi i64 [ 0, %exit__4 ], [ %55, %exiting__5 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %49)
  %52 = bitcast i8* %51 to { double, double }**
  %53 = load { double, double }*, { double, double }** %52, align 8
  %54 = bitcast { double, double }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %55 = add i64 %49, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret %Array* %47
}

define internal i1 @Microsoft__Quantum__Logical__And__body(i1 %a, i1 %b) {
entry:
  %0 = and i1 %a, %b
  ret i1 %0
}

define internal void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %actual, %String* %message) {
entry:
  %0 = xor i1 %actual, true
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__string_update_reference_count(%String* %message, i32 1)
  call void @__quantum__rt__fail(%String* %message)
  unreachable

continue__1:                                      ; preds = %entry
  ret void
}

define internal i64 @Microsoft__Quantum__Math__MinI__body(i64 %a, i64 %b) {
entry:
  %0 = icmp slt i64 %a, %b
  %1 = select i1 %0, i64 %a, i64 %b
  ret i64 %1
}

define internal %Array* @Microsoft__Quantum__Arrays___6c6f349b2d0c4e67b944e93ebc590a5b_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { i64, i1 }**
  %5 = load { i64, i1 }*, { i64, i1 }** %4, align 8
  %6 = bitcast { i64, i1 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %length, 0
  br i1 %8, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %10 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %12 = bitcast i8* %11 to { i64, i1 }**
  %13 = load { i64, i1 }*, { i64, i1 }** %12, align 8
  %14 = bitcast { i64, i1 }* %13 to %Tuple*
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %14, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { i64 }*
  %17 = getelementptr inbounds { i64 }, { i64 }* %16, i32 0, i32 0
  %first = load i64, i64* %17, align 4
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %19 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %10
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { i64, i1 }**
  %24 = load { i64, i1 }*, { i64, i1 }** %23, align 8
  %25 = bitcast { i64, i1 }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %9

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %27)
  %30 = bitcast i8* %29 to i64*
  store i64 %first, i64* %30, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 1, %exit__3 ], [ %46, %exiting__4 ]
  %33 = icmp sle i64 %idx, %32
  br i1 %33, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %34 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = call %Array* @__quantum__rt__array_copy(%Array* %34, i1 false)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %37 = bitcast i8* %36 to { i64, i1 }**
  %38 = load { i64, i1 }*, { i64, i1 }** %37, align 8
  %39 = bitcast { i64, i1 }* %38 to %Tuple*
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %39, %Tuple* %40)
  %41 = bitcast %Tuple* %40 to { i64 }*
  %42 = getelementptr inbounds { i64 }, { i64 }* %41, i32 0, i32 0
  %43 = load i64, i64* %42, align 4
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx)
  %45 = bitcast i8* %44 to i64*
  store i64 %43, i64* %45, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  store %Array* %35, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %47 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %48 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %49 = phi i64 [ 0, %exit__4 ], [ %55, %exiting__5 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %49)
  %52 = bitcast i8* %51 to { i64, i1 }**
  %53 = load { i64, i1 }*, { i64, i1 }** %52, align 8
  %54 = bitcast { i64, i1 }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %55 = add i64 %49, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret %Array* %47
}

define internal void @Microsoft__Quantum__Canon___facc0657b0284c16ae2c0d999b143be0_Fst__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, i1 }*
  %1 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load i1, i1* %2, align 1
  %5 = call i64 @Microsoft__Quantum__Canon___facc0657b0284c16ae2c0d999b143be0_Fst__body(i64 %3, i1 %4)
  %6 = bitcast %Tuple* %result-tuple to { i64 }*
  %7 = getelementptr inbounds { i64 }, { i64 }* %6, i32 0, i32 0
  store i64 %5, i64* %7, align 4
  ret void
}

define internal void @Microsoft__Quantum__Canon___bfd0dc2872b54301bd24b64a2c23e89e_Snd__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, i1 }*
  %1 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, i1 }, { i64, i1 }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load i1, i1* %2, align 1
  %5 = call i1 @Microsoft__Quantum__Canon___bfd0dc2872b54301bd24b64a2c23e89e_Snd__body(i64 %3, i1 %4)
  %6 = bitcast %Tuple* %result-tuple to { i1 }*
  %7 = getelementptr inbounds { i1 }, { i1 }* %6, i32 0, i32 0
  store i1 %5, i1* %7, align 1
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___847843f64261497cbcdec42c04c12cc1_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %1)
  %4 = bitcast i8* %3 to { i64, i64 }**
  %5 = load { i64, i64 }*, { i64, i64 }** %4, align 8
  %6 = bitcast { i64, i64 }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %length, 0
  br i1 %8, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__1
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %10 = sub i64 %length, 1
  br label %header__2

continue__1:                                      ; preds = %exit__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %12 = bitcast i8* %11 to { i64, i64 }**
  %13 = load { i64, i64 }*, { i64, i64 }** %12, align 8
  %14 = bitcast { i64, i64 }* %13 to %Tuple*
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %14, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { i1 }*
  %17 = getelementptr inbounds { i1 }, { i1 }* %16, i32 0, i32 0
  %first = load i1, i1* %17, align 1
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %length)
  %19 = sub i64 %length, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__2 ]
  %21 = icmp sle i64 %20, %10
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { i64, i64 }**
  %24 = load { i64, i64 }*, { i64, i64 }** %23, align 8
  %25 = bitcast { i64, i64 }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %9

header__3:                                        ; preds = %exiting__3, %continue__1
  %27 = phi i64 [ 0, %continue__1 ], [ %31, %exiting__3 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %27)
  %30 = bitcast i8* %29 to i1*
  store i1 %first, i1* %30, align 1
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %32 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 1, %exit__3 ], [ %46, %exiting__4 ]
  %33 = icmp sle i64 %idx, %32
  br i1 %33, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %34 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  %35 = call %Array* @__quantum__rt__array_copy(%Array* %34, i1 false)
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %37 = bitcast i8* %36 to { i64, i64 }**
  %38 = load { i64, i64 }*, { i64, i64 }** %37, align 8
  %39 = bitcast { i64, i64 }* %38 to %Tuple*
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %39, %Tuple* %40)
  %41 = bitcast %Tuple* %40 to { i1 }*
  %42 = getelementptr inbounds { i1 }, { i1 }* %41, i32 0, i32 0
  %43 = load i1, i1* %42, align 1
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx)
  %45 = bitcast i8* %44 to i1*
  store i1 %43, i1* %45, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  store %Array* %35, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %47 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %48 = sub i64 %length, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %49 = phi i64 [ 0, %exit__4 ], [ %55, %exiting__5 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %49)
  %52 = bitcast i8* %51 to { i64, i64 }**
  %53 = load { i64, i64 }*, { i64, i64 }** %52, align 8
  %54 = bitcast { i64, i64 }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %55 = add i64 %49, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret %Array* %47
}

define internal %Array* @Microsoft__Quantum__Arrays___cc24b2dc7eb146c6a86121e0aab81fa7_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %output = alloca %Array*, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = icmp eq i64 %nElements, 0
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  ret %Array* %4

continue__1:                                      ; preds = %condContinue__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 0)
  %6 = bitcast i8* %5 to i1*
  %7 = load i1, i1* %6, align 1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 0)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Qubit* }* getelementptr ({ i1, %Qubit* }, { i1, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i1, %Qubit* }*
  %13 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %12, i32 0, i32 1
  store i1 %7, i1* %13, align 1
  store %Qubit* %10, %Qubit** %14, align 8
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %16 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %17 = phi i64 [ 0, %continue__1 ], [ %21, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %17)
  %20 = bitcast i8* %19 to { i1, %Qubit* }**
  store { i1, %Qubit* }* %12, { i1, %Qubit* }** %20, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %21 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %15, %Array** %output, align 8
  %22 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %23)
  %26 = bitcast i8* %25 to { i1, %Qubit* }**
  %27 = load { i1, %Qubit* }*, { i1, %Qubit* }** %26, align 8
  %28 = bitcast { i1, %Qubit* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %30 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 1, %exit__2 ], [ %48, %exiting__3 ]
  %31 = icmp sle i64 %idxElement, %30
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %35 = bitcast i8* %34 to i1*
  %36 = load i1, i1* %35, align 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %38 = bitcast i8* %37 to %Qubit**
  %39 = load %Qubit*, %Qubit** %38, align 8
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Qubit* }* getelementptr ({ i1, %Qubit* }, { i1, %Qubit* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i1, %Qubit* }*
  %42 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %41, i32 0, i32 1
  store i1 %36, i1* %42, align 1
  store %Qubit* %39, %Qubit** %43, align 8
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxElement)
  %45 = bitcast i8* %44 to { i1, %Qubit* }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %46 = load { i1, %Qubit* }*, { i1, %Qubit* }** %45, align 8
  %47 = bitcast { i1, %Qubit* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i32 -1)
  store { i1, %Qubit* }* %41, { i1, %Qubit* }** %45, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %48 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %49 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %50 = call i64 @__quantum__rt__array_get_size_1d(%Array* %49)
  %51 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 %52)
  %55 = bitcast i8* %54 to { i1, %Qubit* }**
  %56 = load { i1, %Qubit* }*, { i1, %Qubit* }** %55, align 8
  %57 = bitcast { i1, %Qubit* }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret %Array* %49
}

define internal %Array* @Microsoft__Quantum__Arrays___b419e961477e441ea98f00f19ccb1574_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %retval = alloca %Array*, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %length = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = icmp eq i64 %length, 0
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Array* %1

continue__1:                                      ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %3 = bitcast i8* %2 to i1*
  %4 = load i1, i1* %3, align 1
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i1 }*
  %7 = getelementptr inbounds { i1 }, { i1 }* %6, i32 0, i32 0
  store i1 %4, i1* %7, align 1
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %5, %Tuple* %8)
  %9 = bitcast %Tuple* %8 to { i1 }*
  %10 = getelementptr inbounds { i1 }, { i1 }* %9, i32 0, i32 0
  %first = load i1, i1* %10, align 1
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %length)
  %12 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %13 = phi i64 [ 0, %continue__1 ], [ %17, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %13)
  %16 = bitcast i8* %15 to i1*
  store i1 %first, i1* %16, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %11, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %18 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 1, %exit__1 ], [ %34, %exiting__2 ]
  %19 = icmp sle i64 %idx, %18
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  %21 = call %Array* @__quantum__rt__array_copy(%Array* %20, i1 false)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idx)
  %23 = bitcast i8* %22 to i1*
  %24 = load i1, i1* %23, align 1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { i1 }*
  %27 = getelementptr inbounds { i1 }, { i1 }* %26, i32 0, i32 0
  store i1 %24, i1* %27, align 1
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1 }* getelementptr ({ i1 }, { i1 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %25, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { i1 }*
  %30 = getelementptr inbounds { i1 }, { i1 }* %29, i32 0, i32 0
  %31 = load i1, i1* %30, align 1
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %idx)
  %33 = bitcast i8* %32 to i1*
  store i1 %31, i1* %33, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  store %Array* %21, %Array** %retval, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %34 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %35 = load %Array*, %Array** %retval, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret %Array* %35
}

define internal { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef2__ExtendedTruncation____body(double %value) {
entry:
  %truncated = fptosi double %value to i64
  %0 = sitofp i64 %truncated to double
  %1 = fsub double %0, %value
  %2 = fcmp oge double %value, 0.000000e+00
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, i1 }* getelementptr ({ i64, double, i1 }, { i64, double, i1 }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { i64, double, i1 }*
  %5 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %4, i32 0, i32 1
  %7 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %4, i32 0, i32 2
  store i64 %truncated, i64* %5, align 4
  store double %1, double* %6, align 8
  store i1 %2, i1* %7, align 1
  ret { i64, double, i1 }* %4
}

define internal double @Microsoft__Quantum__Math__ArcTan__body(double %d) {
entry:
  %0 = call double @__quantum__qis__arctan__body(double %d)
  ret double %0
}

define internal double @Microsoft__Quantum__Math__ArcTan2__body(double %y, double %x) {
entry:
  %0 = call double @__quantum__qis__arctan2__body(double %y, double %x)
  ret double %0
}

declare double @__quantum__qis__arctan2__body(double, double)

define internal double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 1
  %2 = load double, double* %1, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %2
}

declare double @__quantum__qis__log__body(double)

define internal double @Microsoft__Quantum__Math__LogOf2__body() {
entry:
  ret double 0x3FE62E42FEFA39EF
}

define internal double @Microsoft__Quantum__Math__Log__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  ret double %0
}

define internal double @Microsoft__Quantum__Math__Sqrt__body(double %d) {
entry:
  %0 = call double @__quantum__qis__sqrt__body(double %d)
  ret double %0
}

declare double @__quantum__qis__sqrt__body(double)

define internal void @Microsoft__Quantum__Diagnostics___b01e27bf91bd4e748af9bc2d289c8960___QsRef1__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message) {
entry:
  %0 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i32 0, i32 0))
  %1 = call %String* @__quantum__rt__string_concatenate(%String* %0, %String* %message)
  %2 = call %String* @__quantum__rt__string_concatenate(%String* %1, %String* %0)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %0, i32 -1)
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @22, i32 0, i32 0))
  %4 = call %String* @__quantum__rt__string_concatenate(%String* %2, %String* %3)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  br i1 %expected, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %5 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %6 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @24, i32 0, i32 0))
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %7 = phi %String* [ %5, %condTrue__1 ], [ %6, %condFalse__1 ]
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %4, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  %9 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @25, i32 0, i32 0))
  %10 = call %String* @__quantum__rt__string_concatenate(%String* %8, %String* %9)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %9, i32 -1)
  br i1 %actual, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condContinue__1
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condContinue__1
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @24, i32 0, i32 0))
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condTrue__2
  %13 = phi %String* [ %11, %condTrue__2 ], [ %12, %condFalse__2 ]
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %10, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i32 -1)
  call void @__quantum__rt__fail(%String* %14)
  unreachable
}

define internal %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %number, i64 %bits) {
entry:
  %tempInt = alloca i64, align 8
  %outputBits = alloca %Array*, align 8
  %0 = icmp sge i64 %bits, 0
  br i1 %0, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %1 = icmp sle i64 %bits, 63
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %2 = phi i1 [ %1, %condTrue__1 ], [ %0, %entry ]
  %3 = trunc i64 %bits to i32
  %4 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %3)
  %5 = fptosi double %4 to i64
  %6 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @26, i32 0, i32 0))
  %7 = call %String* @__quantum__rt__int_to_string(i64 %5)
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %6, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %6, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %8)
  %9 = icmp slt i64 %bits, 63
  br i1 %9, label %condTrue__2, label %condFalse__1

condTrue__2:                                      ; preds = %condContinue__1
  %10 = shl i64 1, %bits
  br label %condContinue__2

condFalse__1:                                     ; preds = %condContinue__1
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__1, %condTrue__2
  %max = phi i64 [ %10, %condTrue__2 ], [ 9223372036854775807, %condFalse__1 ]
  %11 = icmp sge i64 %number, 0
  br i1 %11, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condContinue__2
  %12 = icmp sle i64 %number, %max
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condContinue__2
  %13 = phi i1 [ %12, %condTrue__3 ], [ %11, %condContinue__2 ]
  %14 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @27, i32 0, i32 0))
  %15 = call %String* @__quantum__rt__int_to_string(i64 %bits)
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i32 -1)
  %17 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @28, i32 0, i32 0))
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__int_to_string(i64 %number)
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %13, %String* %22)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %bits)
  %24 = sub i64 %bits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %condContinue__3
  %25 = phi i64 [ 0, %condContinue__3 ], [ %29, %exiting__1 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %25)
  %28 = bitcast i8* %27 to i1*
  store i1 false, i1* %28, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %29 = add i64 %25, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  store %Array* %23, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  store i64 %number, i64* %tempInt, align 4
  %30 = sub i64 %bits, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxBit = phi i64 [ 0, %exit__1 ], [ %41, %exiting__2 ]
  %31 = icmp sle i64 %idxBit, %30
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = load %Array*, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = load i64, i64* %tempInt, align 4
  %35 = srem i64 %34, 2
  %36 = icmp eq i64 %35, 0
  %37 = select i1 %36, i1 false, i1 true
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxBit)
  %39 = bitcast i8* %38 to i1*
  store i1 %37, i1* %39, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %outputBits, align 8
  %40 = sdiv i64 %34, 2
  store i64 %40, i64* %tempInt, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %41 = add i64 %idxBit, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %42 = load %Array*, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i32 -1)
  ret %Array* %42
}

define internal i1 @Microsoft__Quantum__Logical__Not__body(i1 %value) {
entry:
  %0 = xor i1 %value, true
  ret i1 %0
}

define internal { double, double }* @Microsoft__Quantum__Optimization____QsRef1__NextProbes____body(double %left, double %right) {
entry:
  %0 = call double @__quantum__qis__sqrt__body(double 5.000000e+00)
  %1 = fadd double %0, 1.000000e+00
  %goldenRatio = fdiv double %1, 2.000000e+00
  %2 = call double @Microsoft__Quantum__Optimization____QsRef1__Width____body(double %left, double %right)
  %delta = fdiv double %2, %goldenRatio
  %3 = fsub double %right, %delta
  %4 = fadd double %left, %delta
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { double, double }*
  %7 = getelementptr inbounds { double, double }, { double, double }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { double, double }, { double, double }* %6, i32 0, i32 1
  store double %3, double* %7, align 8
  store double %4, double* %8, align 8
  ret { double, double }* %6
}

define internal double @Microsoft__Quantum__Optimization____QsRef1__Width____body(double %left, double %right) {
entry:
  %0 = fsub double %right, %left
  ret double %0
}

define internal { double, double }* @Microsoft__Quantum__Optimization____QsRef1__ProbeValue____body(%Callable* %fn, double %coord) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %fn, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %fn, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double }*
  %2 = getelementptr inbounds { double }, { double }* %1, i32 0, i32 0
  store double %coord, double* %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %fn, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { double }*
  %5 = getelementptr inbounds { double }, { double }* %4, i32 0, i32 0
  %6 = load double, double* %5, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { double, double }*
  %9 = getelementptr inbounds { double, double }, { double, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { double, double }, { double, double }* %8, i32 0, i32 1
  store double %coord, double* %9, align 8
  store double %6, double* %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %fn, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %fn, i32 -1)
  ret { double, double }* %8
}

define internal { double, double, i64 }* @Microsoft__Quantum__Optimization__UnivariateOptimizationResult__body(double %Coordinate, double %Value, i64 %NQueries) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double, i64 }* getelementptr ({ double, double, i64 }, { double, double, i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double, i64 }*
  %2 = getelementptr inbounds { double, double, i64 }, { double, double, i64 }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double, i64 }, { double, double, i64 }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { double, double, i64 }, { double, double, i64 }* %1, i32 0, i32 2
  store double %Coordinate, double* %2, align 8
  store double %Value, double* %3, align 8
  store i64 %NQueries, i64* %4, align 4
  ret { double, double, i64 }* %1
}

define internal void @Microsoft__Quantum__Intrinsic__X__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Logical__Not__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i1 }*
  %1 = getelementptr inbounds { i1 }, { i1 }* %0, i32 0, i32 0
  %2 = load i1, i1* %1, align 1
  %3 = call i1 @Microsoft__Quantum__Logical__Not__body(i1 %2)
  %4 = bitcast %Tuple* %result-tuple to { i1 }*
  %5 = getelementptr inbounds { i1 }, { i1 }* %4, i32 0, i32 0
  store i1 %3, i1* %5, align 1
  ret void
}

declare void @__quantum__qis__z__ctl(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____body(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %1 = bitcast i8* %0 to i2*
  store i2 0, i2* %1, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %3 = bitcast i8* %2 to %Qubit**
  %4 = load %Qubit*, %Qubit** %3, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  store %Qubit* %4, %Qubit** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %angle, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____adj(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %1 = bitcast i8* %0 to i2*
  store i2 0, i2* %1, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %3 = bitcast i8* %2 to %Qubit**
  %4 = load %Qubit*, %Qubit** %3, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  store %Qubit* %4, %Qubit** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %angle, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctl(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %angle = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %register = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %5 = bitcast i8* %4 to i2*
  store i2 0, i2* %5, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %7 = bitcast i8* %6 to %Qubit**
  %8 = load %Qubit*, %Qubit** %7, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %10 = bitcast i8* %9 to %Qubit**
  store %Qubit* %8, %Qubit** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, double, %Array* }*
  %13 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 2
  store %Array* %paulis, %Array** %13, align 8
  store double %angle, double* %14, align 8
  store %Array* %qubits, %Array** %15, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctladj(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %angle = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %register = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %5 = bitcast i8* %4 to i2*
  store i2 0, i2* %5, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %7 = bitcast i8* %6 to %Qubit**
  %8 = load %Qubit*, %Qubit** %7, align 8
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %10 = bitcast i8* %9 to %Qubit**
  store %Qubit* %8, %Qubit** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, double, %Array* }*
  %13 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %12, i32 0, i32 2
  store %Array* %paulis, %Array** %13, align 8
  store double %angle, double* %14, align 8
  store %Array* %qubits, %Array** %15, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____body(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %1 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %1, align 4
  %2 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = extractvalue %Range %rngControl, 0
  %4 = extractvalue %Range %rngControl, 1
  %5 = extractvalue %Range %rngControl, 2
  %6 = insertvalue %Range zeroinitializer, i64 %3, 0
  %7 = insertvalue %Range %6, i64 %4, 1
  %8 = insertvalue %Range %7, i64 %5, 2
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %8, i1 true)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %actualControl, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %14 = bitcast i8* %13 to %Qubit**
  %15 = load %Qubit*, %Qubit** %14, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %actualControl, %Qubit* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %1 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %1, align 4
  %2 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = extractvalue %Range %rngControl, 0
  %4 = extractvalue %Range %rngControl, 1
  %5 = extractvalue %Range %rngControl, 2
  %6 = insertvalue %Range zeroinitializer, i64 %3, 0
  %7 = insertvalue %Range %6, i64 %4, 1
  %8 = insertvalue %Range %7, i64 %5, 2
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %8, i1 true)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %__qsVar0__actualControl__, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %14 = bitcast i8* %13 to %Qubit**
  %15 = load %Qubit*, %Qubit** %14, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %__qsVar0__actualControl__, %Qubit* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %disentangling = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %axis = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %6 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %register = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %7 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 0
  %rngControl = load %Range, %Range* %7, align 4
  %8 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 1
  %idxTarget = load i64, i64* %8, align 4
  %9 = extractvalue %Range %rngControl, 0
  %10 = extractvalue %Range %rngControl, 1
  %11 = extractvalue %Range %rngControl, 2
  %12 = insertvalue %Range zeroinitializer, i64 %9, 0
  %13 = insertvalue %Range %12, i64 %10, 1
  %14 = insertvalue %Range %13, i64 %11, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %14, i1 true)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %15)
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %actualControl, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 1)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %20 = bitcast i8* %19 to %Qubit**
  %21 = load %Qubit*, %Qubit** %20, align 8
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %24 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 2
  %27 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 3
  %28 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 4
  store double %tolerance, double* %24, align 8
  store %Array* %disentangling, %Array** %25, align 8
  store i2 %axis, i2* %26, align 1
  store { %Array* }* %actualControl, { %Array* }** %27, align 8
  store %Qubit* %21, %Qubit** %28, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %disentangling = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %axis = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %6 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %register = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %7 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 0
  %rngControl = load %Range, %Range* %7, align 4
  %8 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 1
  %idxTarget = load i64, i64* %8, align 4
  %9 = extractvalue %Range %rngControl, 0
  %10 = extractvalue %Range %rngControl, 1
  %11 = extractvalue %Range %rngControl, 2
  %12 = insertvalue %Range zeroinitializer, i64 %9, 0
  %13 = insertvalue %Range %12, i64 %10, 1
  %14 = insertvalue %Range %13, i64 %11, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %14, i1 true)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %15)
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %__qsVar0__actualControl__, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %18 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 1)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %20 = bitcast i8* %19 to %Qubit**
  %21 = load %Qubit*, %Qubit** %20, align 8
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %24 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 2
  %27 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 3
  %28 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23, i32 0, i32 4
  store double %tolerance, double* %24, align 8
  store %Array* %disentangling, %Array** %25, align 8
  store i2 %axis, i2* %26, align 1
  store { %Array* }* %__qsVar0__actualControl__, { %Array* }** %27, align 8
  store %Qubit* %21, %Qubit** %28, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %23)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____body(%Callable* %bareOp, { %Array* }* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  store %Array* %1, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %bareOp, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____adj(%Callable* %bareOp, { %Array* }* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  store %Array* %1, %Array** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %4, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctl(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %bareOp = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %9, align 8
  store %Array* %4, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctladj(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %bareOp = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  store %Array* %__controlQubits__, %Array** %9, align 8
  store %Array* %4, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Preparation____QsRef1__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficients, { %Range, i64 }* %0) {
entry:
  %plan = alloca %Array*, align 8
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  %7 = load { double, double }*, { double, double }** %6, align 8
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %10 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %10, align 4
  %11 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %11, align 4
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  store %Array* %12, %Array** %plan, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = call { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef1__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients)
  %14 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 0
  %disentanglingY = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingY, i32 1)
  %15 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 1
  %disentanglingZ = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingZ, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 2
  %newCoefficients = load %Array*, %Array** %16, align 8
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %newCoefficients)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %19)
  %22 = bitcast i8* %21 to { double, double }**
  %23 = load { double, double }*, { double, double }** %22, align 8
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoefficients, i32 1)
  %26 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingZ)
  br i1 %26, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__2
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingZ, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 1
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 2
  %33 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 3
  %34 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 4
  %35 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %29, i32 0, i32 5
  store %Callable* %27, %Callable** %30, align 8
  store double %tolerance, double* %31, align 8
  store %Array* %disentanglingZ, %Array** %32, align 8
  store i2 -2, i2* %33, align 1
  store %Range %rngControl, %Range* %34, align 4
  store i64 %idxTarget, i64* %35, align 4
  %36 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__32__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__20__FunctionTable, %Tuple* %28)
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 0)
  %39 = bitcast i8* %38 to %Callable**
  store %Callable* %36, %Callable** %39, align 8
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 0)
  %42 = bitcast i8* %41 to %Callable**
  store %Callable* %36, %Callable** %42, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 1)
  br label %header__3

continue__1:                                      ; preds = %exit__4, %exit__2
  %43 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingY)
  br i1 %43, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %44 = load %Array*, %Array** %plan, align 8
  %45 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingY, i32 1)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %48 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 0
  %49 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 1
  %50 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 2
  %51 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 3
  %52 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 4
  %53 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %47, i32 0, i32 5
  store %Callable* %45, %Callable** %48, align 8
  store double %tolerance, double* %49, align 8
  store %Array* %disentanglingY, %Array** %50, align 8
  store i2 -1, i2* %51, align 1
  store %Range %rngControl, %Range* %52, align 4
  store i64 %idxTarget, i64* %53, align 4
  %54 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__33__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__20__FunctionTable, %Tuple* %46)
  %55 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 0)
  %57 = bitcast i8* %56 to %Callable**
  store %Callable* %54, %Callable** %57, align 8
  %58 = call %Array* @__quantum__rt__array_concatenate(%Array* %44, %Array* %55)
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %60 = sub i64 %59, 1
  br label %header__5

continue__2:                                      ; preds = %exit__9, %continue__1
  %61 = call i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rngControl)
  br i1 %61, label %then0__3, label %test1__1

then0__3:                                         ; preds = %continue__2
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 0)
  %63 = bitcast i8* %62 to { double, double }**
  %64 = load { double, double }*, { double, double }** %63, align 8
  %65 = getelementptr inbounds { double, double }, { double, double }* %64, i32 0, i32 0
  %abs = load double, double* %65, align 8
  %66 = getelementptr inbounds { double, double }, { double, double }* %64, i32 0, i32 1
  %arg = load double, double* %66, align 8
  %67 = call double @Microsoft__Quantum__Math__AbsD__body(double %arg)
  %68 = fcmp ogt double %67, %tolerance
  br i1 %68, label %then0__4, label %continue__4

then0__4:                                         ; preds = %then0__3
  %69 = load %Array*, %Array** %plan, align 8
  %70 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %71 = fmul double -1.000000e+00, %arg
  %72 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %73 = bitcast %Tuple* %72 to { %Callable*, double, i64 }*
  %74 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %73, i32 0, i32 0
  %75 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %73, i32 0, i32 1
  %76 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %73, i32 0, i32 2
  store %Callable* %70, %Callable** %74, align 8
  store double %71, double* %75, align 8
  store i64 %idxTarget, i64* %76, align 4
  %77 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__34__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__21__FunctionTable, %Tuple* %72)
  %78 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 0)
  %80 = bitcast i8* %79 to %Callable**
  store %Callable* %77, %Callable** %80, align 8
  %81 = call %Array* @__quantum__rt__array_concatenate(%Array* %69, %Array* %78)
  %82 = call i64 @__quantum__rt__array_get_size_1d(%Array* %81)
  %83 = sub i64 %82, 1
  br label %header__10

continue__4:                                      ; preds = %exit__14, %then0__3
  br label %continue__3

test1__1:                                         ; preds = %continue__2
  %84 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceCP____body(double %tolerance, %Array* %newCoefficients)
  br i1 %84, label %then1__1, label %continue__3

then1__1:                                         ; preds = %test1__1
  %85 = extractvalue %Range %rngControl, 0
  %86 = extractvalue %Range %rngControl, 1
  %87 = extractvalue %Range %rngControl, 2
  %88 = add i64 %85, 1
  %89 = extractvalue %Range %rngControl, 0
  %90 = extractvalue %Range %rngControl, 1
  %91 = extractvalue %Range %rngControl, 2
  %92 = extractvalue %Range %rngControl, 0
  %93 = extractvalue %Range %rngControl, 1
  %94 = extractvalue %Range %rngControl, 2
  %95 = insertvalue %Range zeroinitializer, i64 %88, 0
  %96 = insertvalue %Range %95, i64 %90, 1
  %newControl = insertvalue %Range %96, i64 %94, 2
  %newTarget = extractvalue %Range %rngControl, 0
  %97 = extractvalue %Range %rngControl, 1
  %98 = extractvalue %Range %rngControl, 2
  %99 = load %Array*, %Array** %plan, align 8
  %100 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %101 = bitcast %Tuple* %100 to { %Range, i64 }*
  %102 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %101, i32 0, i32 0
  %103 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %101, i32 0, i32 1
  store %Range %newControl, %Range* %102, align 4
  store i64 %newTarget, i64* %103, align 4
  %104 = call %Array* @Microsoft__Quantum__Preparation____QsRef1__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %newCoefficients, { %Range, i64 }* %101)
  %105 = call %Array* @__quantum__rt__array_concatenate(%Array* %99, %Array* %104)
  %106 = call i64 @__quantum__rt__array_get_size_1d(%Array* %105)
  %107 = sub i64 %106, 1
  br label %header__15

continue__3:                                      ; preds = %exit__19, %test1__1, %continue__4
  %108 = load %Array*, %Array** %plan, align 8
  %109 = sub i64 %1, 1
  br label %header__20

header__3:                                        ; preds = %exiting__3, %then0__1
  %110 = phi i64 [ 0, %then0__1 ], [ %115, %exiting__3 ]
  %111 = icmp sle i64 %110, 0
  br i1 %111, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 %110)
  %113 = bitcast i8* %112 to %Callable**
  %114 = load %Callable*, %Callable** %113, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %114, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %114, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %115 = add i64 %110, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  store %Array* %40, %Array** %plan, align 8
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %116 = phi i64 [ 0, %exit__3 ], [ %121, %exiting__4 ]
  %117 = icmp sle i64 %116, 0
  br i1 %117, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 %116)
  %119 = bitcast i8* %118 to %Callable**
  %120 = load %Callable*, %Callable** %119, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %120, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %120, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %121 = add i64 %116, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  br label %continue__1

header__5:                                        ; preds = %exiting__5, %then0__2
  %122 = phi i64 [ 0, %then0__2 ], [ %127, %exiting__5 ]
  %123 = icmp sle i64 %122, %60
  br i1 %123, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %122)
  %125 = bitcast i8* %124 to %Callable**
  %126 = load %Callable*, %Callable** %125, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %126, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %126, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %127 = add i64 %122, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i32 1)
  %128 = sub i64 %59, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %129 = phi i64 [ 0, %exit__5 ], [ %134, %exiting__6 ]
  %130 = icmp sle i64 %129, %128
  br i1 %130, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %129)
  %132 = bitcast i8* %131 to %Callable**
  %133 = load %Callable*, %Callable** %132, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %133, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %133, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %134 = add i64 %129, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  %135 = call i64 @__quantum__rt__array_get_size_1d(%Array* %44)
  %136 = sub i64 %135, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %137 = phi i64 [ 0, %exit__6 ], [ %142, %exiting__7 ]
  %138 = icmp sle i64 %137, %136
  br i1 %138, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %137)
  %140 = bitcast i8* %139 to %Callable**
  %141 = load %Callable*, %Callable** %140, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %141, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %141, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %142 = add i64 %137, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 -1)
  %143 = sub i64 %135, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %144 = phi i64 [ 0, %exit__7 ], [ %149, %exiting__8 ]
  %145 = icmp sle i64 %144, %143
  br i1 %145, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %144)
  %147 = bitcast i8* %146 to %Callable**
  %148 = load %Callable*, %Callable** %147, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %148, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %148, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %149 = add i64 %144, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  store %Array* %58, %Array** %plan, align 8
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %150 = phi i64 [ 0, %exit__8 ], [ %155, %exiting__9 ]
  %151 = icmp sle i64 %150, 0
  br i1 %151, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 %150)
  %153 = bitcast i8* %152 to %Callable**
  %154 = load %Callable*, %Callable** %153, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %154, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %154, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %155 = add i64 %150, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i32 -1)
  br label %continue__2

header__10:                                       ; preds = %exiting__10, %then0__4
  %156 = phi i64 [ 0, %then0__4 ], [ %161, %exiting__10 ]
  %157 = icmp sle i64 %156, %83
  br i1 %157, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %158 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 %156)
  %159 = bitcast i8* %158 to %Callable**
  %160 = load %Callable*, %Callable** %159, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %160, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %160, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %161 = add i64 %156, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 1)
  %162 = sub i64 %82, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %163 = phi i64 [ 0, %exit__10 ], [ %168, %exiting__11 ]
  %164 = icmp sle i64 %163, %162
  br i1 %164, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %165 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 %163)
  %166 = bitcast i8* %165 to %Callable**
  %167 = load %Callable*, %Callable** %166, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %167, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %167, i32 1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %168 = add i64 %163, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 1)
  %169 = call i64 @__quantum__rt__array_get_size_1d(%Array* %69)
  %170 = sub i64 %169, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %171 = phi i64 [ 0, %exit__11 ], [ %176, %exiting__12 ]
  %172 = icmp sle i64 %171, %170
  br i1 %172, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %171)
  %174 = bitcast i8* %173 to %Callable**
  %175 = load %Callable*, %Callable** %174, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %175, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %175, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %176 = add i64 %171, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 -1)
  %177 = sub i64 %169, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %178 = phi i64 [ 0, %exit__12 ], [ %183, %exiting__13 ]
  %179 = icmp sle i64 %178, %177
  br i1 %179, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %178)
  %181 = bitcast i8* %180 to %Callable**
  %182 = load %Callable*, %Callable** %181, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %182, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %182, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %183 = add i64 %178, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  store %Array* %81, %Array** %plan, align 8
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %184 = phi i64 [ 0, %exit__13 ], [ %189, %exiting__14 ]
  %185 = icmp sle i64 %184, 0
  br i1 %185, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 %184)
  %187 = bitcast i8* %186 to %Callable**
  %188 = load %Callable*, %Callable** %187, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %188, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %188, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %189 = add i64 %184, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  br label %continue__4

header__15:                                       ; preds = %exiting__15, %then1__1
  %190 = phi i64 [ 0, %then1__1 ], [ %195, %exiting__15 ]
  %191 = icmp sle i64 %190, %107
  br i1 %191, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 %190)
  %193 = bitcast i8* %192 to %Callable**
  %194 = load %Callable*, %Callable** %193, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %194, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %194, i32 1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %195 = add i64 %190, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 1)
  %196 = sub i64 %106, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %197 = phi i64 [ 0, %exit__15 ], [ %202, %exiting__16 ]
  %198 = icmp sle i64 %197, %196
  br i1 %198, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %199 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 %197)
  %200 = bitcast i8* %199 to %Callable**
  %201 = load %Callable*, %Callable** %200, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %201, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %201, i32 1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %202 = add i64 %197, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %105, i32 1)
  %203 = call i64 @__quantum__rt__array_get_size_1d(%Array* %99)
  %204 = sub i64 %203, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %205 = phi i64 [ 0, %exit__16 ], [ %210, %exiting__17 ]
  %206 = icmp sle i64 %205, %204
  br i1 %206, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %207 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 %205)
  %208 = bitcast i8* %207 to %Callable**
  %209 = load %Callable*, %Callable** %208, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %209, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %209, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %210 = add i64 %205, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %99, i32 -1)
  %211 = sub i64 %203, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %212 = phi i64 [ 0, %exit__17 ], [ %217, %exiting__18 ]
  %213 = icmp sle i64 %212, %211
  br i1 %213, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %214 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 %212)
  %215 = bitcast i8* %214 to %Callable**
  %216 = load %Callable*, %Callable** %215, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %216, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %216, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %217 = add i64 %212, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 -1)
  store %Array* %105, %Array** %plan, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %100, i32 -1)
  %218 = call i64 @__quantum__rt__array_get_size_1d(%Array* %104)
  %219 = sub i64 %218, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %220 = phi i64 [ 0, %exit__18 ], [ %225, %exiting__19 ]
  %221 = icmp sle i64 %220, %219
  br i1 %221, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %222 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 %220)
  %223 = bitcast i8* %222 to %Callable**
  %224 = load %Callable*, %Callable** %223, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %224, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %224, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %225 = add i64 %220, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_reference_count(%Array* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 -1)
  br label %continue__3

header__20:                                       ; preds = %exiting__20, %continue__3
  %226 = phi i64 [ 0, %continue__3 ], [ %232, %exiting__20 ]
  %227 = icmp sle i64 %226, %109
  br i1 %227, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %228 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %226)
  %229 = bitcast i8* %228 to { double, double }**
  %230 = load { double, double }*, { double, double }** %229, align 8
  %231 = bitcast { double, double }* %230 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %231, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %232 = add i64 %226, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %233 = call i64 @__quantum__rt__array_get_size_1d(%Array* %108)
  %234 = sub i64 %233, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %235 = phi i64 [ 0, %exit__20 ], [ %240, %exiting__21 ]
  %236 = icmp sle i64 %235, %234
  br i1 %236, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %237 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 %235)
  %238 = bitcast i8* %237 to %Callable**
  %239 = load %Callable*, %Callable** %238, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %239, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %239, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %240 = add i64 %235, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %108, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingY, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingZ, i32 -1)
  %241 = sub i64 %17, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %242 = phi i64 [ 0, %exit__21 ], [ %248, %exiting__22 ]
  %243 = icmp sle i64 %242, %241
  br i1 %243, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %244 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %242)
  %245 = bitcast i8* %244 to { double, double }**
  %246 = load { double, double }*, { double, double }** %245, align 8
  %247 = bitcast { double, double }* %246 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %247, i32 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %248 = add i64 %242, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingY, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingZ, i32 -1)
  %249 = sub i64 %17, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %250 = phi i64 [ 0, %exit__22 ], [ %256, %exiting__23 ]
  %251 = icmp sle i64 %250, %249
  br i1 %251, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %252 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %250)
  %253 = bitcast i8* %252 to { double, double }**
  %254 = load { double, double }*, { double, double }** %253, align 8
  %255 = bitcast { double, double }* %254 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %255, i32 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %256 = add i64 %250, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoefficients, i32 -1)
  %257 = bitcast { %Array*, %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %257, i32 -1)
  ret %Array* %108
}

define internal { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef1__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients) {
entry:
  %newCoefficients = alloca %Array*, align 8
  %disentanglingY = alloca %Array*, align 8
  %disentanglingZ = alloca %Array*, align 8
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = sdiv i64 %0, 2
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %9)
  %11 = sub i64 %9, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %12)
  %15 = bitcast i8* %14 to double*
  store double 0.000000e+00, double* %15, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  store %Array* %10, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %17 = sdiv i64 %0, 2
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %17)
  %19 = sub i64 %17, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %20 = phi i64 [ 0, %exit__2 ], [ %24, %exiting__3 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %20)
  %23 = bitcast i8* %22 to double*
  store double 0.000000e+00, double* %23, align 8
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %24 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  store %Array* %18, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %25 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %26 = sdiv i64 %0, 2
  %27 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %26)
  %28 = sub i64 %26, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %29 = phi i64 [ 0, %exit__3 ], [ %34, %exiting__4 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  store { double, double }* %25, { double, double }** %32, align 8
  %33 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %34 = add i64 %29, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  store %Array* %27, %Array** %newCoefficients, align 8
  %35 = sub i64 %26, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %36 = phi i64 [ 0, %exit__4 ], [ %42, %exiting__5 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %36)
  %39 = bitcast i8* %38 to { double, double }**
  %40 = load { double, double }*, { double, double }** %39, align 8
  %41 = bitcast { double, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %41, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %42 = add i64 %36, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %43 = sub i64 %0, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__5
  br label %header__6

header__6:                                        ; preds = %exiting__6, %preheader__1
  %idxCoeff = phi i64 [ 0, %preheader__1 ], [ %80, %exiting__6 ]
  %44 = icmp sle i64 %idxCoeff, %43
  %45 = icmp sge i64 %idxCoeff, %43
  %46 = select i1 true, i1 %44, i1 %45
  br i1 %46, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %48 = bitcast i8* %47 to { double, double }**
  %49 = load { double, double }*, { double, double }** %48, align 8
  %50 = add i64 %idxCoeff, 1
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %50)
  %52 = bitcast i8* %51 to { double, double }**
  %53 = load { double, double }*, { double, double }** %52, align 8
  %54 = call { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %49, { double, double }* %53)
  %55 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 0
  %rt = load { double, double }*, { double, double }** %55, align 8
  %56 = bitcast { double, double }* %rt to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  %57 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 1
  %phi = load double, double* %57, align 8
  %58 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 2
  %theta = load double, double* %58, align 8
  %59 = load %Array*, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 -1)
  %60 = call %Array* @__quantum__rt__array_copy(%Array* %59, i1 false)
  %61 = fmul double 5.000000e-01, %phi
  %62 = sdiv i64 %idxCoeff, 2
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %62)
  %64 = bitcast i8* %63 to double*
  store double %61, double* %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 1)
  store %Array* %60, %Array** %disentanglingZ, align 8
  %65 = load %Array*, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  %66 = call %Array* @__quantum__rt__array_copy(%Array* %65, i1 false)
  %67 = fmul double 5.000000e-01, %theta
  %68 = sdiv i64 %idxCoeff, 2
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 %68)
  %70 = bitcast i8* %69 to double*
  %71 = load double, double* %70, align 8
  store double %67, double* %70, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  store %Array* %66, %Array** %disentanglingY, align 8
  %72 = load %Array*, %Array** %newCoefficients, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  %73 = call %Array* @__quantum__rt__array_copy(%Array* %72, i1 false)
  %74 = sdiv i64 %idxCoeff, 2
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 %74)
  %76 = bitcast i8* %75 to { double, double }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 1)
  %77 = load { double, double }*, { double, double }** %76, align 8
  %78 = bitcast { double, double }* %77 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %78, i32 -1)
  store { double, double }* %rt, { double, double }** %76, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %73, i32 1)
  store %Array* %73, %Array** %newCoefficients, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  %79 = bitcast { { double, double }*, double, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %80 = add i64 %idxCoeff, 2
  br label %header__6

exit__6:                                          ; preds = %header__6
  %81 = load %Array*, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 1)
  %82 = load %Array*, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 1)
  %83 = load %Array*, %Array** %newCoefficients, align 8
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %83)
  %85 = sub i64 %84, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %86 = phi i64 [ 0, %exit__6 ], [ %92, %exiting__7 ]
  %87 = icmp sle i64 %86, %85
  br i1 %87, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %86)
  %89 = bitcast i8* %88 to { double, double }**
  %90 = load { double, double }*, { double, double }** %89, align 8
  %91 = bitcast { double, double }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %91, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %92 = add i64 %86, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 1)
  %93 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Array* }* getelementptr ({ %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* null, i32 1) to i64))
  %94 = bitcast %Tuple* %93 to { %Array*, %Array*, %Array* }*
  %95 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i32 0, i32 0
  %96 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i32 0, i32 1
  %97 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i32 0, i32 2
  store %Array* %81, %Array** %95, align 8
  store %Array* %82, %Array** %96, align 8
  store %Array* %83, %Array** %97, align 8
  %98 = sub i64 %0, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %99 = phi i64 [ 0, %exit__7 ], [ %105, %exiting__8 ]
  %100 = icmp sle i64 %99, %98
  br i1 %100, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %99)
  %102 = bitcast i8* %101 to { double, double }**
  %103 = load { double, double }*, { double, double }** %102, align 8
  %104 = bitcast { double, double }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %105 = add i64 %99, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %82, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %81, i32 -1)
  %106 = sub i64 %84, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %107 = phi i64 [ 0, %exit__8 ], [ %113, %exiting__9 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %107)
  %110 = bitcast i8* %109 to { double, double }**
  %111 = load { double, double }*, { double, double }** %110, align 8
  %112 = bitcast { double, double }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %112, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %113 = add i64 %107, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %83, i32 -1)
  %114 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  %115 = sub i64 %84, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %116 = phi i64 [ 0, %exit__9 ], [ %122, %exiting__10 ]
  %117 = icmp sle i64 %116, %115
  br i1 %117, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %116)
  %119 = bitcast i8* %118 to { double, double }**
  %120 = load { double, double }*, { double, double }** %119, align 8
  %121 = bitcast { double, double }* %120 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %121, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %122 = add i64 %116, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  ret { %Array*, %Array*, %Array* }* %94
}

define internal void @Lifted__PartialApplication__32__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__32__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__32__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__32__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____body(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____adj(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctl(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctladj(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__20__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %6 = load %Range, %Range* %5, align 4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__20__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %6 = load %Range, %Range* %5, align 4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__33__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__33__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__33__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__33__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__34__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store i64 %4, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__34__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store i64 %4, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__34__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store i64 %9, i64* %13, align 4
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, %Array* }* }* getelementptr ({ %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__34__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store i64 %9, i64* %13, align 4
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, %Array* }* }* getelementptr ({ %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %4 = load double, double* %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____body(double %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %4 = load double, double* %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____adj(double %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctl(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctladj(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__21__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__21__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %a0, { double, double }* %a1) {
entry:
  %0 = bitcast { double, double }* %a0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = bitcast { double, double }* %a1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %abs0 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a0)
  %abs1 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a1)
  %arg0 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a0)
  %arg1 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a1)
  %2 = fmul double %abs0, %abs0
  %3 = fmul double %abs1, %abs1
  %d = fadd double %2, %3
  %r = call double @__quantum__qis__sqrt__body(double %d)
  %4 = fadd double %arg0, %arg1
  %t = fmul double 5.000000e-01, %4
  %phi = fsub double %arg1, %arg0
  %5 = call double @__quantum__qis__arctan2__body(double %abs1, double %abs0)
  %theta = fmul double 2.000000e+00, %5
  %6 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %r, double %t)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, double, double }* getelementptr ({ { double, double }*, double, double }, { { double, double }*, double, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { { double, double }*, double, double }*
  %9 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %8, i32 0, i32 1
  %11 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %8, i32 0, i32 2
  store { double, double }* %6, { double, double }** %9, align 8
  store double %phi, double* %10, align 8
  store double %theta, double* %11, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  ret { { double, double }*, double, double }* %8
}

define internal void @Lifted__PartialApplication__35__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, { %Array* }* }*
  %5 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 1
  store %Callable* %2, %Callable** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__35__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, { %Array* }* }*
  %5 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 1
  store %Callable* %2, %Callable** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__35__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array* }* }*
  %10 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, { %Array* }* }* }* getelementptr ({ %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, { %Array* }* }* %9, { %Callable*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__35__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array* }* }*
  %10 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, { %Array* }* }* }* getelementptr ({ %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, { %Array* }* }* %9, { %Callable*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____body(%Callable* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____adj(%Callable* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctl(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctladj(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define internal void @MemoryManagement__22__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__22__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

declare double @__quantum__qis__drawrandomdouble__body(double, double)

define internal double @Microsoft__Quantum__Random__DrawRandomDouble__body(double %min, double %max) {
entry:
  %0 = call double @__quantum__qis__drawrandomdouble__body(double %min, double %max)
  ret double %0
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* %control, %Qubit** %5, align 8
  %__controlQubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %3)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__1, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__ctladj(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit*, %Qubit* }*
  %5 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 1
  store %Qubit* %control, %Qubit** %5, align 8
  store %Qubit* %target, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 0
  %paulis = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 2
  store %Array* %paulis, %Array** %6, align 8
  store double %theta, double* %7, align 8
  store %Array* %qubits, %Array** %8, align 8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 0
  %paulis = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 2
  store %Array* %paulis, %Array** %6, align 8
  store double %theta, double* %7, align 8
  store %Array* %qubits, %Array** %8, align 8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

declare void @__quantum__qis__h__ctl(%Array*, %Qubit*)

define internal %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit) {
entry:
  %bases = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bases, i64 0)
  %1 = bitcast i8* %0 to i2*
  store i2 -2, i2* %1, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %3 = bitcast i8* %2 to %Qubit**
  store %Qubit* %qubit, %Qubit** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %4 = call %Result* @__quantum__qis__measure__body(%Array* %bases, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  ret %Result* %4
}

declare %Result* @__quantum__qis__measure__body(%Array*, %Array*)

define internal void @Microsoft__Quantum__Intrinsic__R__body(i2 %pauli, double %theta, %Qubit* %qubit) {
entry:
  call void @__quantum__qis__r__body(i2 %pauli, double %theta, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__adj(i2 %pauli, double %theta, %Qubit* %qubit) {
entry:
  call void @__quantum__qis__r__adj(i2 %pauli, double %theta, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 2
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { i2, double, %Qubit* }*
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 2
  store i2 %pauli, i2* %6, align 1
  store double %theta, double* %7, align 8
  store %Qubit* %qubit, %Qubit** %8, align 8
  call void @__quantum__qis__r__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 2
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { i2, double, %Qubit* }*
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %5, i32 0, i32 2
  store i2 %pauli, i2* %6, align 1
  store double %theta, double* %7, align 8
  store %Qubit* %qubit, %Qubit** %8, align 8
  call void @__quantum__qis__r__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

declare %Result* @__quantum__rt__result_get_one()

declare void @__quantum__qis__s__body(%Qubit*)

declare void @__quantum__qis__s__adj(%Qubit*)

declare void @__quantum__qis__s__ctl(%Array*, %Qubit*)

declare void @__quantum__qis__s__ctladj(%Array*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__Z__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__z__body(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__z__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__Z__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__z__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
